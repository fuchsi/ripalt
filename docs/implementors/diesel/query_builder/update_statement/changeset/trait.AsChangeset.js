(function() {var implementors = {};
implementors["ripalt"] = [{text:"impl&lt;'update&gt; AsChangeset for &amp;'update <a class=\"struct\" href=\"ripalt/models/category/struct.Category.html\" title=\"struct ripalt::models::category::Category\">Category</a>",synthetic:false,types:["ripalt::models::category::Category"]},{text:"impl&lt;'update&gt; AsChangeset for <a class=\"struct\" href=\"ripalt/models/category/struct.Category.html\" title=\"struct ripalt::models::category::Category\">Category</a>",synthetic:false,types:["ripalt::models::category::Category"]},{text:"impl&lt;'update&gt; AsChangeset for &amp;'update <a class=\"struct\" href=\"ripalt/models/group/struct.Group.html\" title=\"struct ripalt::models::group::Group\">Group</a>",synthetic:false,types:["ripalt::models::group::Group"]},{text:"impl&lt;'update&gt; AsChangeset for <a class=\"struct\" href=\"ripalt/models/group/struct.Group.html\" title=\"struct ripalt::models::group::Group\">Group</a>",synthetic:false,types:["ripalt::models::group::Group"]},{text:"impl&lt;'update&gt; AsChangeset for &amp;'update <a class=\"struct\" href=\"ripalt/models/peer/struct.Peer.html\" title=\"struct ripalt::models::peer::Peer\">Peer</a>",synthetic:false,types:["ripalt::models::peer::Peer"]},{text:"impl&lt;'update&gt; AsChangeset for <a class=\"struct\" href=\"ripalt/models/peer/struct.Peer.html\" title=\"struct ripalt::models::peer::Peer\">Peer</a>",synthetic:false,types:["ripalt::models::peer::Peer"]},{text:"impl&lt;'update&gt; AsChangeset for &amp;'update <a class=\"struct\" href=\"ripalt/models/static_content/struct.Content.html\" title=\"struct ripalt::models::static_content::Content\">Content</a>",synthetic:false,types:["ripalt::models::static_content::Content"]},{text:"impl&lt;'update&gt; AsChangeset for <a class=\"struct\" href=\"ripalt/models/static_content/struct.Content.html\" title=\"struct ripalt::models::static_content::Content\">Content</a>",synthetic:false,types:["ripalt::models::static_content::Content"]},{text:"impl&lt;'update&gt; AsChangeset for &amp;'update <a class=\"struct\" href=\"ripalt/models/torrent/struct.Torrent.html\" title=\"struct ripalt::models::torrent::Torrent\">Torrent</a>",synthetic:false,types:["ripalt::models::torrent::Torrent"]},{text:"impl&lt;'update&gt; AsChangeset for <a class=\"struct\" href=\"ripalt/models/torrent/struct.Torrent.html\" title=\"struct ripalt::models::torrent::Torrent\">Torrent</a>",synthetic:false,types:["ripalt::models::torrent::Torrent"]},{text:"impl&lt;'a, 'update&gt; AsChangeset for &amp;'update <a class=\"struct\" href=\"ripalt/models/torrent/struct.UpdateTorrent.html\" title=\"struct ripalt::models::torrent::UpdateTorrent\">UpdateTorrent</a>&lt;'a&gt;",synthetic:false,types:["ripalt::models::torrent::UpdateTorrent"]},{text:"impl&lt;'a, 'update&gt; AsChangeset for <a class=\"struct\" href=\"ripalt/models/torrent/struct.UpdateTorrent.html\" title=\"struct ripalt::models::torrent::UpdateTorrent\">UpdateTorrent</a>&lt;'a&gt;",synthetic:false,types:["ripalt::models::torrent::UpdateTorrent"]},{text:"impl&lt;'update&gt; AsChangeset for &amp;'update <a class=\"struct\" href=\"ripalt/models/torrent/struct.TorrentMetaFile.html\" title=\"struct ripalt::models::torrent::TorrentMetaFile\">TorrentMetaFile</a>",synthetic:false,types:["ripalt::models::torrent::TorrentMetaFile"]},{text:"impl&lt;'update&gt; AsChangeset for <a class=\"struct\" href=\"ripalt/models/torrent/struct.TorrentMetaFile.html\" title=\"struct ripalt::models::torrent::TorrentMetaFile\">TorrentMetaFile</a>",synthetic:false,types:["ripalt::models::torrent::TorrentMetaFile"]},{text:"impl&lt;'update&gt; AsChangeset for &amp;'update <a class=\"struct\" href=\"ripalt/models/torrent/struct.TorrentFile.html\" title=\"struct ripalt::models::torrent::TorrentFile\">TorrentFile</a>",synthetic:false,types:["ripalt::models::torrent::TorrentFile"]},{text:"impl&lt;'update&gt; AsChangeset for <a class=\"struct\" href=\"ripalt/models/torrent/struct.TorrentFile.html\" title=\"struct ripalt::models::torrent::TorrentFile\">TorrentFile</a>",synthetic:false,types:["ripalt::models::torrent::TorrentFile"]},{text:"impl&lt;'update&gt; AsChangeset for &amp;'update <a class=\"struct\" href=\"ripalt/models/torrent/struct.TorrentNFO.html\" title=\"struct ripalt::models::torrent::TorrentNFO\">TorrentNFO</a>",synthetic:false,types:["ripalt::models::torrent::TorrentNFO"]},{text:"impl&lt;'update&gt; AsChangeset for <a class=\"struct\" href=\"ripalt/models/torrent/struct.TorrentNFO.html\" title=\"struct ripalt::models::torrent::TorrentNFO\">TorrentNFO</a>",synthetic:false,types:["ripalt::models::torrent::TorrentNFO"]},{text:"impl&lt;'update&gt; AsChangeset for &amp;'update <a class=\"struct\" href=\"ripalt/models/torrent/struct.Transfer.html\" title=\"struct ripalt::models::torrent::Transfer\">Transfer</a>",synthetic:false,types:["ripalt::models::torrent::Transfer"]},{text:"impl&lt;'update&gt; AsChangeset for <a class=\"struct\" href=\"ripalt/models/torrent/struct.Transfer.html\" title=\"struct ripalt::models::torrent::Transfer\">Transfer</a>",synthetic:false,types:["ripalt::models::torrent::Transfer"]},{text:"impl&lt;'update&gt; AsChangeset for &amp;'update <a class=\"struct\" href=\"ripalt/models/user/struct.User.html\" title=\"struct ripalt::models::user::User\">User</a>",synthetic:false,types:["ripalt::models::user::User"]},{text:"impl&lt;'update&gt; AsChangeset for <a class=\"struct\" href=\"ripalt/models/user/struct.User.html\" title=\"struct ripalt::models::user::User\">User</a>",synthetic:false,types:["ripalt::models::user::User"]},{text:"impl&lt;'update&gt; AsChangeset for &amp;'update <a class=\"struct\" href=\"ripalt/models/user/struct.Property.html\" title=\"struct ripalt::models::user::Property\">Property</a>",synthetic:false,types:["ripalt::models::user::Property"]},{text:"impl&lt;'update&gt; AsChangeset for <a class=\"struct\" href=\"ripalt/models/user/struct.Property.html\" title=\"struct ripalt::models::user::Property\">Property</a>",synthetic:false,types:["ripalt::models::user::Property"]},];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        
})()
