initSidebarItems({"enum":[["ActorState","Actor execution state"],["MailboxError","Set of error that can occurred during message delivery process"],["Running",""],["SendError",""]],"mod":[["actix",""]],"struct":[["ActorResponse","Helper type for representing different type of message responses"],["Addr","Address of the actor"],["Arbiter","Event loop controller"],["Context","Actor execution context"],["MessageResult","Helper type that implements `MessageResponse` trait"],["Recipient","`Recipient` type allows to send one specific message to an actor."],["Response","Helper type for representing different type of message responses"],["SpawnHandle","Spawned future handle. Could be used for cancelling spawned future."],["Supervisor","Actor supervisor"],["Syn","Sync destination of the actor. Actor can run in different thread"],["System","System is an actor which manages process."],["Unsync","Unsync destination of the actor"]],"trait":[["Actor","Actors are objects which encapsulate state and behavior."],["ActorContext","Actor execution context"],["AsyncContext","Asynchronous execution context"],["ContextFutureSpawner","Helper trait which can spawn future into actor's context"],["Handler","Message handler"],["Message","Message type"],["StreamHandler","Stream handler"],["Supervised","Actors with ability to restart after failure"]],"type":[["ResponseActFuture","A specialized actor future for async message handler"],["ResponseFuture","A specialized future for async message handler"]]});