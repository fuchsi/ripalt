var searchIndex = {};
searchIndex["actix"] = {"doc":"Actix is a rust actors framework.","items":[[3,"SpawnHandle","actix","Spawned future handle. Could be used for cancelling spawned future.",null,null],[3,"Addr","","Address of the actor",null,null],[3,"Recipient","","`Recipient` type allows to send one specific message to an actor.",null,null],[3,"Syn","","Sync destination of the actor. Actor can run in different thread",null,null],[3,"Unsync","","Unsync destination of the actor",null,null],[3,"Arbiter","","Event loop controller",null,null],[3,"Context","","Actor execution context",null,null],[3,"ActorResponse","","Helper type for representing different type of message responses",null,null],[3,"MessageResult","","Helper type that implements `MessageResponse` trait",null,null],[12,"0","","",0,null],[3,"Response","","Helper type for representing different type of message responses",null,null],[3,"Supervisor","","Actor supervisor",null,null],[3,"System","","System is an actor which manages process.",null,null],[3,"SystemRunner","","Helper object that runs System's event loop",null,null],[4,"ActorState","","Actor execution state",null,null],[13,"Started","","Actor is started.",1,null],[13,"Running","","Actor is running.",1,null],[13,"Stopping","","Actor is stopping.",1,null],[13,"Stopped","","Actor is stopped.",1,null],[4,"Running","","",null,null],[13,"Stop","","",2,null],[13,"Continue","","",2,null],[4,"MailboxError","","Set of error that can occurred during message delivery process",null,null],[13,"Closed","","",3,null],[13,"Timeout","","",3,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"actorstate"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"actorstate"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"running"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"running"}],"output":{"name":"bool"}}],[11,"alive","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"spawnhandle"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"spawnhandle"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"spawnhandle"}}],[11,"hash","","",4,null],[11,"next","","Get next handle",4,{"inputs":[{"name":"self"}],"output":{"name":"spawnhandle"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"spawnhandle"}}],[11,"started","","",5,{"inputs":[{"name":"self"},{"name":"context"}],"output":null}],[11,"new","","Spawn new thread and run event loop in spawned thread. Returns address of newly created arbiter.",5,{"inputs":[{"name":"t"}],"output":{"generics":["syn","arbiter"],"name":"addr"}}],[11,"name","","Returns current arbiter's address",5,{"inputs":[],"output":{"name":"string"}}],[11,"arbiter","","Returns current arbiter's address",5,{"inputs":[],"output":{"generics":["unsync","arbiter"],"name":"addr"}}],[11,"system","","This function returns system address,",5,{"inputs":[],"output":{"generics":["syn","system"],"name":"addr"}}],[11,"system_arbiter","","This function returns system address,",5,{"inputs":[],"output":{"generics":["syn","arbiter"],"name":"addr"}}],[11,"system_name","","This function returns system name,",5,{"inputs":[],"output":{"name":"string"}}],[11,"system_registry","","This function returns system registry,",5,{"inputs":[],"output":{"name":"systemregistry"}}],[11,"handle","","This function returns current event loop's handle,",5,{"inputs":[],"output":{"name":"handle"}}],[11,"registry","","This function returns arbiter's registry,",5,{"inputs":[],"output":{"name":"registry"}}],[11,"start","","Start new arbiter and then start actor in created arbiter. Returns `Addr<Syn, A>` of created actor.",5,{"inputs":[{"name":"f"}],"output":{"generics":["syn"],"name":"addr"}}],[11,"handle","","",5,{"inputs":[{"name":"self"},{"name":"stoparbiter"},{"name":"context"}],"output":null}],[11,"handle","","",5,{"inputs":[{"name":"self"},{"name":"startactor"},{"name":"context"}],"output":{"generics":["syn"],"name":"addr"}}],[11,"handle","","",5,{"inputs":[{"name":"self"},{"name":"execute"},{"name":"context"}],"output":{"name":"result"}}],[11,"stop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"terminate","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"state","","",6,{"inputs":[{"name":"self"}],"output":{"name":"actorstate"}}],[11,"spawn","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"spawnhandle"}}],[11,"wait","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"waiting","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cancel_future","","",6,{"inputs":[{"name":"self"},{"name":"spawnhandle"}],"output":{"name":"bool"}}],[11,"handle","","Handle of the running future",6,{"inputs":[{"name":"self"}],"output":{"name":"spawnhandle"}}],[11,"set_mailbox_capacity","","Set mailbox capacity",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"handle","","",0,null],[11,"handle","","",7,null],[11,"async","","Create async response",8,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"reply","","Create response",8,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"handle","","",8,null],[11,"reply","","Create response",9,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"async","","Create async response",9,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"handle","","",9,null],[11,"start","","Start new supervised actor in current Arbiter.",10,{"inputs":[{"name":"f"}],"output":{"name":"addr"}}],[11,"start_in","","Start new supervised actor in arbiter's thread.",10,{"inputs":[{"name":"addr"},{"name":"f"}],"output":{"generics":["syn"],"name":"addr"}}],[11,"new","","Create new system",11,{"inputs":[{"name":"t"}],"output":{"name":"systemrunner"}}],[11,"handle","","Returns handle to the current event loop.",12,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"run","","This function will start event loop and will finish once the `SystemExit` message get received.",12,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"run_until_complete","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"handle","","",11,{"inputs":[{"name":"self"},{"name":"systemexit"},{"name":"context"}],"output":null}],[11,"pack","","",6,{"inputs":[{"name":"m"},{"generics":["syncsender"],"name":"option"}],"output":{"name":"syncenvelope"}}],[11,"connected","","Indicates if actor is still alive",13,null],[11,"do_send","","",13,null],[11,"try_send","","",13,null],[11,"send","","",13,null],[11,"recipient","","",13,null],[11,"do_send","","",13,null],[11,"try_send","","",13,null],[11,"send","","",13,null],[11,"clone","","",13,null],[11,"connected","","Indicates if actor is still alive",14,null],[11,"do_send","","",14,null],[11,"send","","",14,null],[11,"try_send","","",14,null],[11,"recipient","","",14,null],[11,"do_send","","",14,null],[11,"send","","",14,null],[11,"try_send","","",14,null],[11,"clone","","",14,null],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",7,null],[11,"connected","","Indicates if actor is still alive",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"do_send","","Send message unconditionally",7,{"inputs":[{"name":"self"},{"name":"m"}],"output":null}],[11,"send","","Send asynchronous message and wait for response.",7,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"request"}}],[11,"try_send","","Try to send message",7,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"generics":["senderror"],"name":"result"}}],[11,"recipient","","Get `Recipient` for specific message type",7,{"inputs":[{"name":"self"}],"output":{"name":"recipient"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"addr"}}],[11,"new","","Create new recipient",15,null],[11,"do_send","","Send message",15,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"try_send","","Try send message",15,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"send","","Send message and asynchronously wait for response.",15,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"recipient"}}],[0,"actors","","Helper actors",null,null],[3,"Connect","actix::actors","",null,null],[3,"ConnectAddr","","",null,null],[12,"0","","",16,null],[3,"Connector","","",null,null],[3,"Resolve","","",null,null],[4,"ConnectorError","","",null,null],[13,"Resolver","","Failed to resolve the hostname",17,null],[13,"InvalidInput","","Address is invalid",17,null],[13,"Timeout","","Connecting took too long",17,null],[13,"IoError","","Connection io error",17,null],[11,"host","","",18,{"inputs":[{"name":"t"}],"output":{"name":"resolve"}}],[11,"host_and_port","","",18,{"inputs":[{"name":"t"},{"name":"u16"}],"output":{"name":"resolve"}}],[11,"host","","",19,{"inputs":[{"name":"t"}],"output":{"name":"connect"}}],[11,"host_and_port","","",19,{"inputs":[{"name":"t"},{"name":"u16"}],"output":{"name":"connect"}}],[11,"timeout","","Set connect timeout",19,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"connect"}}],[11,"cause","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"connector"}}],[11,"handle","","",20,null],[11,"handle","","",20,null],[11,"handle","","",20,null],[0,"signal","","An actor implementation of Unix signal handling",null,null],[3,"Signal","actix::actors::signal","Process signal message",null,null],[12,"0","","",21,null],[3,"ProcessSignals","","An actor implementation of Unix signal handling",null,null],[3,"Subscribe","","Subscribe to process signals.",null,null],[12,"0","","",22,null],[3,"DefaultSignalsHandler","","Default signals handler. This actor sends `SystemExit` message to `System` actor for each of `SIGINT`, `SIGTERM`, `SIGQUIT` signals.",null,null],[4,"SignalType","","Different types of process signals",null,null],[13,"Hup","","SIGHUP",23,null],[13,"Int","","SIGINT",23,null],[13,"Term","","SIGTERM",23,null],[13,"Quit","","SIGQUIT",23,null],[13,"Child","","SIGCHILD",23,null],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"signaltype"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"signaltype"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"self"}}],[11,"service_started","","",24,null],[11,"handle","","",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"self"}}],[11,"started","","",25,null],[11,"handle","","",25,null],[0,"fut","actix","Custom `Future` implementation with `Actix` support",null,null],[3,"AndThen","actix::fut","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",null,null],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",null,null],[3,"Finish","","A combinator used to convert stream into a future, future resolves when stream completes.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"DropErr","","",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[3,"FutureResult","","A future representing a value that is immediately ready.",null,null],[3,"StreamAndThen","","A stream combinator which chains a computation onto values produced by a stream.",null,null],[3,"StreamFinish","","A combinator used to convert stream into a future, future resolves when stream completes.",null,null],[3,"StreamFold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"StreamMap","","A stream combinator which will change the type of a stream from one type to another.",null,null],[3,"StreamMapErr","","A stream combinator which will change the error type of a stream from one type to another.",null,null],[3,"StreamThen","","A stream combinator which chains a computation onto each item produced by a stream.",null,null],[3,"StreamTimeout","","Future for the `timeout` combinator, interrupts computations if it takes more than `timeout`.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",null,null],[3,"Timeout","","Future for the `timeout` combinator, interrupts computations if it takes more than `timeout`.",null,null],[3,"FutureWrap","","",null,null],[3,"StreamWrap","","",null,null],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",null,null],[13,"A","","First branch of the type",26,null],[13,"B","","Second branch of the type",26,null],[5,"err","","Creates a \"leaf future\" from an immediate value of a failed computation.",null,{"inputs":[{"name":"e"}],"output":{"name":"futureresult"}}],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",null,{"inputs":[{"name":"t"}],"output":{"name":"futureresult"}}],[5,"result","","Creates a new \"leaf future\" which will resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[5,"wrap_future","","Converts normal future into `ActorFuture`",null,{"inputs":[{"name":"f"}],"output":{"name":"futurewrap"}}],[5,"wrap_stream","","Converts normal stream into `ActorStream`",null,{"inputs":[{"name":"s"}],"output":{"name":"streamwrap"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",27,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split","","Splits out the homogeneous type from an either of tuples.",26,null],[11,"poll","","",26,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",28,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",29,{"inputs":[{"name":"s"}],"output":{"name":"finish"}}],[11,"poll","","",29,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",30,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",31,null],[11,"poll","","",32,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",33,null],[11,"from","","",33,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",34,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",35,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",36,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",37,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",38,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",39,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",40,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",41,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",42,null],[8,"ActorFuture","","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",43,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",43,null],[16,"Actor","","The actor within which this future runs",43,null],[10,"poll","","",43,null],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"drop_err","","Drop this future's error, returning a new future.",43,{"inputs":[{"name":"self"}],"output":{"name":"droperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",43,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"timeout","","Add timeout to futures chain.",43,null],[8,"ActorStream","","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",44,null],[16,"Error","","The type of error this stream may generate.",44,null],[16,"Actor","","The actor within which this stream runs.",44,null],[10,"poll","","",44,null],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",44,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"streammap"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `E`.",44,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"streammaperr"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",44,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"streamthen"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",44,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"streamandthen"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",44,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"streamfold"}}],[11,"timeout","","Add timeout to stream.",44,null],[11,"finish","","Converts a stream to a future that resolves when stream finishes.",44,{"inputs":[{"name":"self"}],"output":{"name":"streamfinish"}}],[8,"IntoActorFuture","","Class of types which can be converted into an actor future.",null,null],[16,"Future","","The future that this type can be converted into.",45,null],[16,"Item","","The item that the future may resolve with.",45,null],[16,"Error","","The error that the future may resolve with.",45,null],[16,"Actor","","The actor within which this future runs",45,null],[10,"into_future","","Consumes this object and produces a future.",45,null],[8,"WrapFuture","","Helper trait that allows conversion of normal future into `ActorFuture`",null,null],[16,"Future","","The future that this type can be converted into.",46,null],[16,"Item","","The item that the future may resolve with.",46,null],[16,"Error","","The error that the future may resolve with.",46,null],[10,"into_actor","","Convert normal future to a ActorFuture",46,null],[8,"WrapStream","","Helper trait that allows conversion of normal stream into `ActorStream`",null,null],[16,"Stream","","The stream that this type can be converted into.",47,null],[16,"Item","","The item that the future may resolve with.",47,null],[16,"Error","","The error that the future may resolve with.",47,null],[10,"into_actor","","Convert normal stream to a ActorStream",47,null],[11,"poll","","",48,null],[11,"poll","","",49,null],[0,"io","actix","",null,null],[3,"Writer","actix::io","Wrapper for `AsyncWrite` types",null,null],[3,"FramedWrite","","Wrapper for `AsyncWrite` and `Encoder` types",null,null],[8,"WriteHandler","","Write handler",null,null],[11,"error","","Method is called when writer emits error.",50,null],[11,"finished","","Method is called when writer finishes.",50,null],[11,"new","","",51,{"inputs":[{"name":"t"},{"name":"c"}],"output":{"name":"writer"}}],[11,"close","","Gracefully close sink",51,{"inputs":[{"name":"self"}],"output":null}],[11,"closed","","Check if sink is closed",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_buffer_capacity","","Set write buffer capacity",51,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"write","","Send item to a sink.",51,null],[11,"handle","","`SpawnHandle` for this writer",51,{"inputs":[{"name":"self"}],"output":{"name":"spawnhandle"}}],[11,"new","","",52,{"inputs":[{"name":"t"},{"name":"u"},{"name":"c"}],"output":{"name":"framedwrite"}}],[11,"from_buffer","","",52,{"inputs":[{"name":"t"},{"name":"u"},{"name":"bytesmut"},{"name":"c"}],"output":{"name":"framedwrite"}}],[11,"close","","Gracefully close sink",52,{"inputs":[{"name":"self"}],"output":null}],[11,"closed","","Check if sink is closed",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_buffer_capacity","","Set write buffer capacity",52,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"write","","Write item",52,null],[11,"handle","","`SpawnHandle` for this writer",52,{"inputs":[{"name":"self"}],"output":{"name":"spawnhandle"}}],[0,"msgs","actix","Actix system messages",null,null],[3,"SystemExit","actix::msgs","Stop system execution",null,null],[12,"0","","",53,null],[3,"StopArbiter","","Stop arbiter execution",null,null],[12,"0","","",54,null],[3,"StartActor","","Start actor in arbiter's thread",null,null],[3,"Execute","","Execute function in arbiter's thread",null,null],[11,"new","","",55,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"new","","",56,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"exec","","Execute enclosed function",56,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"registry","actix","Actors registry",null,null],[3,"Registry","actix::registry","Actors registry",null,null],[3,"SystemRegistry","","System wide actors registry",null,null],[8,"ArbiterService","","Trait defines arbiter's service.",null,null],[11,"service_started","","Method is called during service initialization.",57,{"inputs":[{"name":"self"},{"name":"context"}],"output":null}],[11,"from_registry","","Get actor's address from arbiter registry",57,{"inputs":[],"output":{"generics":["unsync"],"name":"addr"}}],[8,"SystemService","","Trait defines system's service.",null,null],[11,"service_started","","Method is called during service initialization.",58,{"inputs":[{"name":"self"},{"name":"context"}],"output":null}],[11,"from_registry","","Get actor's address from system registry",58,{"inputs":[],"output":{"generics":["syn"],"name":"addr"}}],[11,"get","","Query registry for specific actor. Returns address of the actor. If actor is not registered, starts new actor and return address of newly created actor.",59,{"inputs":[{"name":"self"}],"output":{"generics":["unsync"],"name":"addr"}}],[11,"get","","Return address of the service. If service actor is not running it get started in system arbiter.",60,{"inputs":[{"name":"self"}],"output":{"generics":["syn"],"name":"addr"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"sync","actix","Sync actors support",null,null],[3,"SyncArbiter","actix::sync","Sync arbiter",null,null],[3,"SyncContext","","Sync actor execution context",null,null],[11,"start","","Start new sync arbiter with specified number of worker threads. Returns address of the started actor.",61,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"generics":["syn"],"name":"addr"}}],[11,"pack","","",62,{"inputs":[{"name":"m"},{"generics":["syncsender"],"name":"option"}],"output":{"name":"syncenvelope"}}],[11,"stop","","Stop current actor. SyncContext creates and starts new actor.",62,{"inputs":[{"name":"self"}],"output":null}],[11,"terminate","","Terminate actor execution. SyncContext creates and starts new actor.",62,{"inputs":[{"name":"self"}],"output":null}],[11,"state","","Actor execution state",62,{"inputs":[{"name":"self"}],"output":{"name":"actorstate"}}],[0,"utils","actix","",null,null],[3,"Condition","actix::utils","",null,null],[11,"wait","","",63,{"inputs":[{"name":"self"}],"output":{"name":"receiver"}}],[11,"set","","",63,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"default","","",63,{"inputs":[],"output":{"name":"self"}}],[0,"prelude","actix","The `actix` prelude",null,null],[3,"SpawnHandle","actix::prelude","Spawned future handle. Could be used for cancelling spawned future.",null,null],[3,"Addr","","Address of the actor",null,null],[3,"Recipient","","`Recipient` type allows to send one specific message to an actor.",null,null],[3,"Syn","","Sync destination of the actor. Actor can run in different thread",null,null],[3,"Unsync","","Unsync destination of the actor",null,null],[3,"Arbiter","","Event loop controller",null,null],[3,"Context","","Actor execution context",null,null],[3,"ActorResponse","","Helper type for representing different type of message responses",null,null],[3,"MessageResult","","Helper type that implements `MessageResponse` trait",null,null],[12,"0","","",0,null],[3,"Response","","Helper type for representing different type of message responses",null,null],[3,"Supervisor","","Actor supervisor",null,null],[3,"System","","System is an actor which manages process.",null,null],[4,"ActorState","","Actor execution state",null,null],[13,"Started","","Actor is started.",1,null],[13,"Running","","Actor is running.",1,null],[13,"Stopping","","Actor is stopping.",1,null],[13,"Stopped","","Actor is stopped.",1,null],[4,"Running","","",null,null],[13,"Stop","","",2,null],[13,"Continue","","",2,null],[4,"MailboxError","","Set of error that can occurred during message delivery process",null,null],[13,"Closed","","",3,null],[13,"Timeout","","",3,null],[4,"SendError","","",null,null],[13,"Full","","",64,null],[13,"Closed","","",64,null],[0,"actix","","",null,null],[8,"ActorAddress","actix::prelude::actix","Trait give access to actor's address",null,null],[10,"get","","Returns actor's address for specific context",65,null],[6,"ResponseActFuture","actix::prelude","A specialized actor future for async message handler",null,null],[6,"ResponseFuture","","A specialized future for async message handler",null,null],[8,"Actor","","Actors are objects which encapsulate state and behavior.",null,null],[16,"Context","","Actor execution context type",66,null],[11,"started","","Method is called when actor get polled first time.",66,null],[11,"stopping","","Method is called after an actor is in `Actor::Stopping` state. There could be several reasons for stopping. `Context::stop` get called by the actor itself. All addresses to current actor get dropped and no more evented objects left in the context.",66,null],[11,"stopped","","Method is called after an actor is stopped, it can be used to perform any needed cleanup work or spawning more actors. This is final state, after this call actor get dropped.",66,null],[11,"start","","Start new asynchronous actor, returns address of newly created actor.",66,{"inputs":[{"name":"self"}],"output":{"name":"addr"}}],[11,"start_default","","Start new asynchronous actor, returns address of newly created actor.",66,{"inputs":[],"output":{"name":"addr"}}],[11,"create","","Use `create` method, if you need `Context` object during actor initialization.",66,{"inputs":[{"name":"f"}],"output":{"name":"addr"}}],[8,"ActorContext","","Actor execution context",null,null],[10,"stop","","Immediately stop processing incoming messages and switch to a `stopping` state",67,{"inputs":[{"name":"self"}],"output":null}],[10,"terminate","","Terminate actor execution",67,{"inputs":[{"name":"self"}],"output":null}],[10,"state","","Actor execution state",67,{"inputs":[{"name":"self"}],"output":{"name":"actorstate"}}],[8,"AsyncContext","","Asynchronous execution context",null,null],[11,"address","","Get actor address",68,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[10,"spawn","","Spawn async future into context. Returns handle of the item, could be used for cancelling execution.",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"spawnhandle"}}],[10,"wait","","Spawn future into the context. Stop processing any of incoming events until this future resolves.",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"waiting","","Check if context is paused (waiting for future completion or stopping)",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"cancel_future","","Cancel future. idx is a value returned by `spawn` method.",68,{"inputs":[{"name":"self"},{"name":"spawnhandle"}],"output":{"name":"bool"}}],[11,"add_stream","","This method register stream to an actor context and allows to handle `Stream` in similar way as normal actor messages.",68,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"spawnhandle"}}],[11,"add_message_stream","","This method is similar to `add_stream` but it skips stream errors.",68,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"notify","","Send message `msg` to self.",68,{"inputs":[{"name":"self"},{"name":"m"}],"output":null}],[11,"notify_later","","Send message `msg` to self after specified period of time. Returns spawn handle which could be used for cancellation. Notification get cancelled if context's stop method get called.",68,{"inputs":[{"name":"self"},{"name":"m"},{"name":"duration"}],"output":{"name":"spawnhandle"}}],[11,"run_later","","Execute closure after specified period of time within same Actor and Context. Execution get cancelled if context's stop method get called.",68,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"f"}],"output":{"name":"spawnhandle"}}],[8,"Supervised","","Actors with ability to restart after failure",null,null],[11,"restarting","","Method called when supervisor restarting failed actor",69,null],[8,"ContextFutureSpawner","","Helper trait which can spawn future into actor's context",null,null],[10,"spawn","","spawn future into `Context<A>`",70,null],[10,"wait","","Spawn future into the context. Stop processing any of incoming events until this future resolves.",70,null],[8,"Handler","","Message handler",null,null],[16,"Result","","The type of value that this handle will return",71,null],[10,"handle","","Method is called for every message received by this Actor",71,null],[8,"Message","","Message type",null,null],[16,"Result","","The type of value that this message will resolved with if it is successful.",72,null],[8,"StreamHandler","","Stream handler",null,null],[10,"handle","","Method is called for every message received by this Actor",73,null],[11,"started","","Method is called when stream get polled first time.",73,null],[11,"error","","Method is called when stream emits error.",73,null],[11,"finished","","Method is called when stream finishes.",73,null],[11,"add_stream","","This method register stream to an actor context and allows to handle `Stream` in similar way as normal actor messages.",73,null],[0,"dev","actix","The `actix` prelude for library developers",null,null],[3,"Request","actix::dev","`Request` is a `Future` which represents asynchronous message sending process.",null,null],[3,"SyncEnvelope","","",null,null],[3,"SyncRecipientRequest","","`SyncRecipientRequest` is a `Future` which represents asynchronous message sending process.",null,null],[3,"UnsyncRecipientRequest","","`UnsyncRecipientRequest` is a `Future` which represents asynchronous message sending process.",null,null],[3,"ContextImpl","","Actor execution context impl",null,null],[8,"ActorAddress","","Trait give access to actor's address",null,null],[10,"get","","Returns actor's address for specific context",65,null],[8,"ToEnvelope","","Converter trait, packs message to suitable envelope",null,null],[10,"pack","","Pack message into suitable envelope",74,null],[8,"Destination","","",null,null],[16,"Transport","","",75,null],[10,"connected","","Indicates if destination is still alive",75,null],[8,"MessageDestination","","",null,null],[16,"Envelope","","",76,null],[16,"ResultSender","","",76,null],[16,"ResultReceiver","","",76,null],[10,"do_send","","Send message unconditionally",76,null],[10,"try_send","","Try send message",76,null],[10,"send","","Send asynchronous message and wait for response.",76,null],[10,"recipient","","Get recipient for specific message type.",76,null],[8,"MessageDestinationTransport","","",null,null],[10,"send","","",77,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"generics":["senderror"],"name":"result"}}],[8,"MessageRecipient","","",null,null],[16,"Envelope","","",78,null],[16,"Transport","","",78,null],[16,"SendError","","",78,null],[16,"MailboxError","","",78,null],[16,"Request","","",78,null],[10,"do_send","","Send message unconditionally",78,null],[10,"try_send","","Try send message",78,null],[10,"send","","Send asynchronous message and wait for response.",78,null],[10,"clone","","Clone transport",78,null],[8,"MessageResponse","","Trait which defines message response",null,null],[10,"handle","","",79,null],[8,"ResponseChannel","","Trait defines message response channel",null,null],[10,"is_canceled","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"send","","",80,null],[6,"ResponseActFuture","actix","A specialized actor future for async message handler",null,null],[6,"ResponseFuture","","A specialized future for async message handler",null,null],[8,"Actor","","Actors are objects which encapsulate state and behavior.",null,null],[16,"Context","","Actor execution context type",66,null],[11,"started","actix::prelude","Method is called when actor get polled first time.",66,null],[11,"stopping","","Method is called after an actor is in `Actor::Stopping` state. There could be several reasons for stopping. `Context::stop` get called by the actor itself. All addresses to current actor get dropped and no more evented objects left in the context.",66,null],[11,"stopped","","Method is called after an actor is stopped, it can be used to perform any needed cleanup work or spawning more actors. This is final state, after this call actor get dropped.",66,null],[11,"start","","Start new asynchronous actor, returns address of newly created actor.",66,{"inputs":[{"name":"self"}],"output":{"name":"addr"}}],[11,"start_default","","Start new asynchronous actor, returns address of newly created actor.",66,{"inputs":[],"output":{"name":"addr"}}],[11,"create","","Use `create` method, if you need `Context` object during actor initialization.",66,{"inputs":[{"name":"f"}],"output":{"name":"addr"}}],[8,"ActorContext","actix","Actor execution context",null,null],[10,"stop","","Immediately stop processing incoming messages and switch to a `stopping` state",67,{"inputs":[{"name":"self"}],"output":null}],[10,"terminate","","Terminate actor execution",67,{"inputs":[{"name":"self"}],"output":null}],[10,"state","","Actor execution state",67,{"inputs":[{"name":"self"}],"output":{"name":"actorstate"}}],[8,"AsyncContext","","Asynchronous execution context",null,null],[11,"address","actix::prelude","Get actor address",68,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[10,"spawn","actix","Spawn async future into context. Returns handle of the item, could be used for cancelling execution.",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"spawnhandle"}}],[10,"wait","","Spawn future into the context. Stop processing any of incoming events until this future resolves.",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"waiting","","Check if context is paused (waiting for future completion or stopping)",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"cancel_future","","Cancel future. idx is a value returned by `spawn` method.",68,{"inputs":[{"name":"self"},{"name":"spawnhandle"}],"output":{"name":"bool"}}],[11,"add_stream","actix::prelude","This method register stream to an actor context and allows to handle `Stream` in similar way as normal actor messages.",68,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"spawnhandle"}}],[11,"add_message_stream","","This method is similar to `add_stream` but it skips stream errors.",68,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"notify","","Send message `msg` to self.",68,{"inputs":[{"name":"self"},{"name":"m"}],"output":null}],[11,"notify_later","","Send message `msg` to self after specified period of time. Returns spawn handle which could be used for cancellation. Notification get cancelled if context's stop method get called.",68,{"inputs":[{"name":"self"},{"name":"m"},{"name":"duration"}],"output":{"name":"spawnhandle"}}],[11,"run_later","","Execute closure after specified period of time within same Actor and Context. Execution get cancelled if context's stop method get called.",68,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"f"}],"output":{"name":"spawnhandle"}}],[8,"Supervised","actix","Actors with ability to restart after failure",null,null],[11,"restarting","actix::prelude","Method called when supervisor restarting failed actor",69,null],[8,"ActorAddress","actix","Trait give access to actor's address",null,null],[10,"get","","Returns actor's address for specific context",65,null],[8,"Handler","","Message handler",null,null],[16,"Result","","The type of value that this handle will return",71,null],[10,"handle","","Method is called for every message received by this Actor",71,null],[8,"Message","","Message type",null,null],[16,"Result","","The type of value that this message will resolved with if it is successful.",72,null],[8,"StreamHandler","","Stream handler",null,null],[10,"handle","","Method is called for every message received by this Actor",73,null],[11,"started","actix::prelude","Method is called when stream get polled first time.",73,null],[11,"error","","Method is called when stream emits error.",73,null],[11,"finished","","Method is called when stream finishes.",73,null],[11,"add_stream","","This method register stream to an actor context and allows to handle `Stream` in similar way as normal actor messages.",73,null],[11,"started","","Method is called when actor get polled first time.",66,null],[11,"stopping","","Method is called after an actor is in `Actor::Stopping` state. There could be several reasons for stopping. `Context::stop` get called by the actor itself. All addresses to current actor get dropped and no more evented objects left in the context.",66,null],[11,"stopped","","Method is called after an actor is stopped, it can be used to perform any needed cleanup work or spawning more actors. This is final state, after this call actor get dropped.",66,null],[11,"start","","Start new asynchronous actor, returns address of newly created actor.",66,{"inputs":[{"name":"self"}],"output":{"name":"addr"}}],[11,"start_default","","Start new asynchronous actor, returns address of newly created actor.",66,{"inputs":[],"output":{"name":"addr"}}],[11,"create","","Use `create` method, if you need `Context` object during actor initialization.",66,{"inputs":[{"name":"f"}],"output":{"name":"addr"}}],[11,"restarting","","Method called when supervisor restarting failed actor",69,null],[11,"address","","Get actor address",68,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"add_stream","","This method register stream to an actor context and allows to handle `Stream` in similar way as normal actor messages.",68,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"spawnhandle"}}],[11,"add_message_stream","","This method is similar to `add_stream` but it skips stream errors.",68,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"notify","","Send message `msg` to self.",68,{"inputs":[{"name":"self"},{"name":"m"}],"output":null}],[11,"notify_later","","Send message `msg` to self after specified period of time. Returns spawn handle which could be used for cancellation. Notification get cancelled if context's stop method get called.",68,{"inputs":[{"name":"self"},{"name":"m"},{"name":"duration"}],"output":{"name":"spawnhandle"}}],[11,"run_later","","Execute closure after specified period of time within same Actor and Context. Execution get cancelled if context's stop method get called.",68,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"f"}],"output":{"name":"spawnhandle"}}],[11,"new","actix::dev","",81,{"inputs":[{"name":"option"}],"output":{"name":"contextimpl"}}],[11,"with_receiver","","",81,{"inputs":[{"name":"option"},{"name":"syncaddressreceiver"}],"output":{"name":"self"}}],[11,"actor","","Mutable reference to an actor.",81,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"modify","","Mark context as modified, this cause extra poll loop over all items",81,{"inputs":[{"name":"self"}],"output":null}],[11,"waiting","","Is context waiting for future completion",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stop","","Initiate stop process for actor execution",81,{"inputs":[{"name":"self"}],"output":null}],[11,"terminate","","Terminate actor execution",81,{"inputs":[{"name":"self"}],"output":null}],[11,"state","","Actor execution state",81,{"inputs":[{"name":"self"}],"output":{"name":"actorstate"}}],[11,"curr_handle","","Handle of the running future",81,{"inputs":[{"name":"self"}],"output":{"name":"spawnhandle"}}],[11,"spawn","","Spawn new future to this context.",81,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"spawnhandle"}}],[11,"wait","","Spawn new future to this context and wait future completion.",81,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"cancel_future","","Cancel previously scheduled future.",81,{"inputs":[{"name":"self"},{"name":"spawnhandle"}],"output":{"name":"bool"}}],[11,"capacity","","",81,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_mailbox_capacity","","",81,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"unsync_address","","",81,{"inputs":[{"name":"self"}],"output":{"generics":["unsync"],"name":"addr"}}],[11,"sync_address","","",81,{"inputs":[{"name":"self"}],"output":{"generics":["syn"],"name":"addr"}}],[11,"alive","","",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"restart","","Restart context. Cleanup all futures, except address queue.",81,null],[11,"set_actor","","",81,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"into_inner","","",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"started","","",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"poll","","",81,null],[11,"handle","actix::prelude","",82,null],[11,"handle","","",83,null],[11,"started","","Method is called when stream get polled first time.",73,null],[11,"error","","Method is called when stream emits error.",73,null],[11,"finished","","Method is called when stream finishes.",73,null],[11,"add_stream","","This method register stream to an actor context and allows to handle `Stream` in similar way as normal actor messages.",73,null],[11,"new","actix::dev","",84,{"inputs":[{"name":"m"},{"generics":["syncsender"],"name":"option"}],"output":{"name":"syncenvelope"}}],[11,"with_proxy","","",84,{"inputs":[{"generics":["envelopeproxy"],"name":"box"}],"output":{"name":"syncenvelope"}}],[11,"timeout","","Set message delivery timeout",85,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"poll","","",85,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"new","","",86,{"inputs":[{"generics":["receiver"],"name":"option"},{"name":"option"}],"output":{"name":"syncrecipientrequest"}}],[11,"timeout","","Set message delivery timeout",86,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"poll","","",86,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"new","","",87,{"inputs":[{"generics":["receiver"],"name":"option"},{"name":"option"}],"output":{"name":"unsyncrecipientrequest"}}],[11,"timeout","","Set message delivery timeout",87,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"poll","","",87,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"into_inner","actix::prelude","",64,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"MessageResult"],[4,"ActorState"],[4,"Running"],[4,"MailboxError"],[3,"SpawnHandle"],[3,"Arbiter"],[3,"Context"],[3,"Addr"],[3,"Response"],[3,"ActorResponse"],[3,"Supervisor"],[3,"System"],[3,"SystemRunner"],[3,"Syn"],[3,"Unsync"],[3,"Recipient"],[3,"ConnectAddr"],[4,"ConnectorError"],[3,"Resolve"],[3,"Connect"],[3,"Connector"],[3,"Signal"],[3,"Subscribe"],[4,"SignalType"],[3,"ProcessSignals"],[3,"DefaultSignalsHandler"],[4,"Either"],[3,"AndThen"],[3,"FromErr"],[3,"Finish"],[3,"Map"],[3,"MapErr"],[3,"DropErr"],[3,"FutureResult"],[3,"StreamAndThen"],[3,"StreamFinish"],[3,"StreamFold"],[3,"StreamMap"],[3,"StreamMapErr"],[3,"StreamThen"],[3,"StreamTimeout"],[3,"Then"],[3,"Timeout"],[8,"ActorFuture"],[8,"ActorStream"],[8,"IntoActorFuture"],[8,"WrapFuture"],[8,"WrapStream"],[3,"FutureWrap"],[3,"StreamWrap"],[8,"WriteHandler"],[3,"Writer"],[3,"FramedWrite"],[3,"SystemExit"],[3,"StopArbiter"],[3,"StartActor"],[3,"Execute"],[8,"ArbiterService"],[8,"SystemService"],[3,"Registry"],[3,"SystemRegistry"],[3,"SyncArbiter"],[3,"SyncContext"],[3,"Condition"],[4,"SendError"],[8,"ActorAddress"],[8,"Actor"],[8,"ActorContext"],[8,"AsyncContext"],[8,"Supervised"],[8,"ContextFutureSpawner"],[8,"Handler"],[8,"Message"],[8,"StreamHandler"],[8,"ToEnvelope"],[8,"Destination"],[8,"MessageDestination"],[8,"MessageDestinationTransport"],[8,"MessageRecipient"],[8,"MessageResponse"],[8,"ResponseChannel"],[3,"ContextImpl"],[6,"ResponseActFuture"],[6,"ResponseFuture"],[3,"SyncEnvelope"],[3,"Request"],[3,"SyncRecipientRequest"],[3,"UnsyncRecipientRequest"]]};
searchIndex["actix_derive"] = {"doc":"","items":[[5,"actor","actix_derive","",null,{"inputs":[{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"msg","","",null,{"inputs":[{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["actix_redis"] = {"doc":"Redis integration for Actix framework.","items":[[4,"RespValue","actix_redis","A single RESP value, this owns the data that is read/to-be written to Redis.",null,null],[13,"Nil","","",0,null],[13,"Array","","Zero, one or more other `RespValue`s.",0,null],[13,"BulkString","","A bulk string.  In Redis terminology a string is a byte-array, so this is stored as a vector of `u8`s to allow clients to interpret the bytes as appropriate.",0,null],[13,"Error","","An error from the Redis server",0,null],[13,"Integer","","Redis documentation defines an integer as being a signed 64-bit integer: https://redis.io/topics/protocol#resp-integers",0,null],[13,"SimpleString","","",0,null],[4,"RespError","","",null,null],[13,"Internal","","A non-specific internal error that prevented an operation from completing",1,null],[13,"IO","","An IO error occurred",1,null],[13,"RESP","","A RESP parsing/serialising error occurred",1,null],[13,"Remote","","A remote error",1,null],[13,"Unexpected","","An unexpected error, boxed to allow type-erasure.  In this context \"unexpected\" means \"unexpected because we check ahead of time\", it used to maintain the type signature of chains of futures; but it occurring at runtime should be considered a catastrophic failure.",1,null],[3,"Command","","Command for send data to Redis",null,null],[12,"0","","",2,null],[3,"RedisActor","","Redis comminucation actor",null,null],[3,"RedisSessionBackend","","Use redis as session storage.",null,null],[4,"Error","","General purpose actix redis error",null,null],[13,"Redis","","",3,null],[13,"NotConnected","","Receiving message during reconnecting",3,null],[13,"Disconnected","","Cancel all waters when connection get dropped",3,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start","","Start new `Supervisor` with `RedisActor`.",4,{"inputs":[{"name":"s"}],"output":{"generics":["unsync","redisactor"],"name":"addr"}}],[11,"started","","",4,{"inputs":[{"name":"self"},{"name":"context"}],"output":null}],[11,"restarting","","",4,null],[11,"error","","",4,null],[11,"error","","",4,null],[11,"handle","","",4,null],[11,"handle","","",4,null],[11,"new","","Create new redis session backend",5,null],[11,"ttl","","Set time to live in seconds for session value",5,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"self"}}],[11,"cookie_name","","Set custom cookie name for session id",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"from_request","","",5,null],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"respvalue"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"respvalue"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"respvalue"}}],[11,"from_resp_int","","",0,{"inputs":[{"name":"respvalue"}],"output":{"generics":["respvalue","error"],"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"respvalue"}}],[11,"from","","",0,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"respvalue"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"respvalue"}}],[11,"from","","",1,{"inputs":[{"name":"canceled"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"respvalue"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"respvalue"}}],[11,"from","","",0,null],[11,"from","","",1,{"inputs":[{"name":"senderror"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[4,"RespValue"],[4,"RespError"],[3,"Command"],[4,"Error"],[3,"RedisActor"],[3,"RedisSessionBackend"]]};
searchIndex["actix_web"] = {"doc":"Actix web is a small, pragmatic, and extremely fast web framework for Rust.","items":[[3,"App","actix_web","Structure that follows the builder pattern for building application instances.",null,null],[3,"HttpContext","","Execution context for http actors",null,null],[3,"Form","","Extract typed information from the request's body.",null,null],[12,"0","","",0,null],[3,"Path","","Extract typed information from the request's path.",null,null],[3,"Query","","Extract typed information from from the request's query.",null,null],[3,"State","","Access an application state",null,null],[3,"HttpRequest","","An HTTP Request",null,null],[3,"HttpResponse","","An HTTP Response",null,null],[3,"Json","","Json helper",null,null],[12,"0","","",1,null],[4,"Binary","","Represents various types of binary body. `Content-Length` header is set to length of the body.",null,null],[13,"Bytes","","Bytes body",2,null],[13,"Slice","","Static slice",2,null],[13,"SharedString","","Shared string body",2,null],[13,"SharedVec","","Shared vec body",2,null],[4,"Body","","Represents various types of http message body.",null,null],[13,"Empty","","Empty response. `Content-Length` header is set to `0`",3,null],[13,"Binary","","Specific response body.",3,null],[13,"Streaming","","Unspecified streaming response. Developer is responsible for setting right `Content-Length` or `Transfer-Encoding` headers.",3,null],[13,"Actor","","Special body type for actor response.",3,null],[4,"Either","","Combines two different responder types into a single type",null,null],[13,"A","","First branch of the type",4,null],[13,"B","","Second branch of the type",4,null],[11,"new","","Create application with empty state. Application can be configured with a builder-like pattern.",5,{"inputs":[],"output":{"name":"app"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"with_state","","Create application with specified state. Application can be configured with a builder-like pattern.",5,{"inputs":[{"name":"s"}],"output":{"name":"app"}}],[11,"prefix","","Set application prefix.",5,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"app"}}],[11,"route","","Configure route for a specific path.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"method"},{"name":"f"}],"output":{"name":"app"}}],[11,"resource","","Configure resource for a specific path.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"app"}}],[11,"default_resource","","Default resource to be used if no matching route could be found.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"app"}}],[11,"default_encoding","","Set default content encoding. `ContentEncoding::Auto` is set by default.",5,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"app"}}],[11,"external_resource","","Register an external resource.",5,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"app"}}],[11,"handler","","Configure handler for specific path prefix.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"h"}],"output":{"name":"app"}}],[11,"middleware","","Register a middleware.",5,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"app"}}],[11,"configure","","Run external configuration as part of the application building process",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"app"}}],[11,"finish","","Finish application configuration and create `HttpHandler` object.",5,{"inputs":[{"name":"self"}],"output":{"name":"httpapplication"}}],[11,"boxed","","Convenience method for creating `Box<HttpHandler>` instances.",5,{"inputs":[{"name":"self"}],"output":{"generics":["httphandler"],"name":"box"}}],[11,"into_handler","","",5,{"inputs":[{"name":"self"},{"name":"serversettings"}],"output":{"name":"httpapplication"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"is_streaming","","Does this body streaming.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_binary","","Is this binary body.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_slice","","Create body from slice (copy)",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"t"}],"output":{"name":"body"}}],[11,"from","","",3,{"inputs":[{"generics":["actorhttpcontext"],"name":"box"}],"output":{"name":"body"}}],[11,"is_empty","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_slice","","Create binary body from slice",2,null],[11,"take","","Convert Binary to a Bytes instance",2,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"binary"}}],[11,"into","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"binary"}}],[11,"from","","",2,null],[11,"from","","",2,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"binary"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"binary"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"binary"}}],[11,"from","","",2,{"inputs":[{"name":"bytes"}],"output":{"name":"binary"}}],[11,"from","","",2,{"inputs":[{"name":"bytesmut"}],"output":{"name":"binary"}}],[11,"from","","",2,{"inputs":[{"generics":["string"],"name":"rc"}],"output":{"name":"binary"}}],[11,"from","","",2,{"inputs":[{"name":"rc"}],"output":{"name":"binary"}}],[11,"from","","",2,{"inputs":[{"generics":["string"],"name":"arc"}],"output":{"name":"binary"}}],[11,"from","","",2,{"inputs":[{"name":"arc"}],"output":{"name":"binary"}}],[11,"from","","",2,{"inputs":[{"generics":["vec"],"name":"arc"}],"output":{"name":"binary"}}],[11,"from","","",2,{"inputs":[{"name":"arc"}],"output":{"name":"binary"}}],[11,"as_ref","","",2,null],[11,"respond_to","","",2,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"generics":["httpresponse","error"],"name":"result"}}],[11,"stop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"terminate","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"state","","",6,{"inputs":[{"name":"self"}],"output":{"name":"actorstate"}}],[11,"spawn","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"spawnhandle"}}],[11,"wait","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"cancel_future","","",6,{"inputs":[{"name":"self"},{"name":"spawnhandle"}],"output":{"name":"bool"}}],[11,"new","","",6,{"inputs":[{"name":"httprequest"},{"name":"a"}],"output":{"name":"httpcontext"}}],[11,"from_request","","",6,{"inputs":[{"name":"httprequest"}],"output":{"name":"httpcontext"}}],[11,"actor","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"httpcontext"}}],[11,"state","","Shared application state",6,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"request","","Incoming request",6,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"write","","Write payload",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"write_eof","","Indicate end of streaming payload. Also this method calls `Self::close`.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"drain","","Returns drain future",6,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"connected","","Check if connection still open",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"handle","","Handle of the running future",6,{"inputs":[{"name":"self"}],"output":{"name":"spawnhandle"}}],[11,"pack","","",6,{"inputs":[{"name":"m"},{"generics":["sender"],"name":"option"}],"output":{"name":"syncenvelope"}}],[11,"from","","",3,{"inputs":[{"name":"httpcontext"}],"output":{"name":"body"}}],[11,"as_ref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Deconstruct to an inner value",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from_request","","",7,null],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Deconstruct to a inner value",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from_request","","",8,null],[11,"into_inner","","Deconstruct to an inner value",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from_request","","",0,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"respond_to","","",4,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"generics":["reply","error"],"name":"result"}}],[11,"poll","","",4,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"respond_to","","",9,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"generics":["reply","error"],"name":"result"}}],[11,"deref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"from_request","","",10,null],[11,"new","","Construct a new Request.",11,{"inputs":[{"name":"method"},{"name":"uri"},{"name":"version"},{"name":"headermap"},{"generics":["payload"],"name":"option"}],"output":{"name":"httprequest"}}],[11,"with_state","","Construct new http request with state.",11,{"inputs":[{"name":"self"},{"name":"rc"},{"name":"router"}],"output":{"name":"httprequest"}}],[11,"headers","","",11,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"change_state","","Construct new http request with state.",11,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"httprequest"}}],[11,"drop_state","","Construct new http request without state.",11,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"state","","Shared application state",11,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"extensions","","Request extensions",11,{"inputs":[{"name":"self"}],"output":{"name":"extensions"}}],[11,"extensions_mut","","Mutable refernece to a the request's extensions",11,{"inputs":[{"name":"self"}],"output":{"name":"extensions"}}],[11,"response","","Create http response",11,{"inputs":[{"name":"self"},{"name":"statuscode"},{"name":"body"}],"output":{"name":"httpresponse"}}],[11,"build_response","","Create http response builder",11,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"httpresponsebuilder"}}],[11,"uri","","Read the Request Uri.",11,{"inputs":[{"name":"self"}],"output":{"name":"uri"}}],[11,"method","","Read the Request method.",11,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"version","","Read the Request Version.",11,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"headers_mut","","Returns mutable Request's headers.",11,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"path","","The target path of this Request.",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"connection_info","","Get ConnectionInfo for correct request.",11,{"inputs":[{"name":"self"}],"output":{"name":"connectioninfo"}}],[11,"url_for","","Generate url for named resource",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u"}],"output":{"generics":["url","urlgenerationerror"],"name":"result"}}],[11,"router","","This method returns reference to current `Router` object.",11,{"inputs":[{"name":"self"}],"output":{"generics":["router"],"name":"option"}}],[11,"resource","","This method returns reference to matched `Resource` object.",11,{"inputs":[{"name":"self"}],"output":{"name":"resource"}}],[11,"peer_addr","","Peer socket address",11,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"option"}}],[11,"query","","Get a reference to the Params object. Params is a container for url query parameters.",11,{"inputs":[{"name":"self"}],"output":{"name":"params"}}],[11,"query_string","","The query string in the URL.",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cookies","","Load request cookies.",11,{"inputs":[{"name":"self"}],"output":{"generics":["vec","cookieparseerror"],"name":"result"}}],[11,"cookie","","Return request cookie.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["cookie"],"name":"option"}}],[11,"match_info","","Get a reference to the Params object.",11,{"inputs":[{"name":"self"}],"output":{"name":"params"}}],[11,"match_info_mut","","Get mutable reference to request's Params.",11,{"inputs":[{"name":"self"}],"output":{"name":"params"}}],[11,"keep_alive","","Checks if a connection should be kept alive.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_read_buffer_capacity","","Set read buffer capacity",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"default","","Construct default request",11,{"inputs":[],"output":{"name":"httprequest"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"from_request","","",11,null],[11,"poll","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["option","payloaderror"],"name":"poll"}}],[11,"read","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"build","","Create http response builder with specific status.",9,{"inputs":[{"name":"statuscode"}],"output":{"name":"httpresponsebuilder"}}],[11,"build_from","","Create http response builder",9,{"inputs":[{"name":"t"}],"output":{"name":"httpresponsebuilder"}}],[11,"new","","Constructs a response",9,{"inputs":[{"name":"statuscode"}],"output":{"name":"httpresponse"}}],[11,"with_body","","Constructs a response with body",9,{"inputs":[{"name":"statuscode"},{"name":"b"}],"output":{"name":"httpresponse"}}],[11,"from_error","","Constructs a error response",9,{"inputs":[{"name":"error"}],"output":{"name":"httpresponse"}}],[11,"into_builder","","Convert `HttpResponse` to a `HttpResponseBuilder`",9,{"inputs":[{"name":"self"}],"output":{"name":"httpresponsebuilder"}}],[11,"error","","The source `error` for this response",9,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"version","","Get the HTTP version of this response",9,{"inputs":[{"name":"self"}],"output":{"generics":["version"],"name":"option"}}],[11,"headers","","Get the headers from the response",9,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"headers_mut","","Get a mutable reference to the headers",9,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"status","","Get the response status code",9,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"status_mut","","Set the `StatusCode` for this response",9,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"reason","","Get custom reason for the response",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"set_reason","","Set the custom reason for the response",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"set_connection_type","","Set connection type",9,{"inputs":[{"name":"self"},{"name":"connectiontype"}],"output":{"name":"self"}}],[11,"upgrade","","Connection upgrade status",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"keep_alive","","Keep-alive status for this connection",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"chunked","","is chunked encoding enabled",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"content_encoding","","Content encoding",9,{"inputs":[{"name":"self"}],"output":{"generics":["contentencoding"],"name":"option"}}],[11,"set_content_encoding","","Set content encoding",9,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"self"}}],[11,"body","","Get body os this response",9,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"set_body","","Set a body",9,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"replace_body","","Set a body and return previous body value",9,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"body"}}],[11,"response_size","","Size of response in bytes, excluding HTTP headers",9,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write_buffer_capacity","","Set write buffer capacity",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_write_buffer_capacity","","Set write buffer capacity",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"httpresponsebuilder"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",9,null],[11,"from","","",9,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"bytes"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"bytesmut"}],"output":{"name":"self"}}],[11,"into_inner","","Deconstruct to an inner value",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"respond_to","","",1,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"generics":["httpresponse","error"],"name":"result"}}],[11,"from_request","","",1,null],[0,"client","","Http client api",null,null],[3,"ClientConnector","actix_web::client","`ClientConnector` type is responsible for transport layer of a client connection.",null,null],[3,"ClientConnectorStats","","Client connector usage stats",null,null],[12,"waits","","",12,null],[12,"reused","","",12,null],[12,"opened","","",12,null],[12,"closed","","",12,null],[12,"errors","","",12,null],[12,"timeouts","","",12,null],[3,"Connect","","`Connect` type represents a message that can be sent to `ClientConnector` with a connection request.",null,null],[3,"Connection","","",null,null],[3,"Pause","","Pause connection process for `ClientConnector`",null,null],[3,"Resume","","Resume connection process for `ClientConnector`",null,null],[3,"SendRequest","","`SendRequest` is a `Future` which represents an asynchronous request sending process.",null,null],[3,"ClientRequest","","An HTTP Client Request",null,null],[3,"ClientRequestBuilder","","An HTTP Client request builder",null,null],[3,"ClientResponse","","An HTTP Client response",null,null],[4,"ClientConnectorError","","A set of errors that can occur while connecting to an HTTP host",null,null],[13,"InvalidUrl","","Invalid URL",13,null],[13,"SslIsNotSupported","","SSL feature is not enabled",13,null],[13,"Connector","","Connection error",13,null],[13,"Timeout","","Connection took too long",13,null],[13,"Disconnected","","Connector has been disconnected",13,null],[13,"IoError","","Connection IO error",13,null],[4,"SendRequestError","","A set of errors that can occur during request sending and response reading",null,null],[13,"Timeout","","Response took too long",14,null],[13,"Connector","","Failed to connect to host",14,null],[13,"ParseError","","Error parsing response",14,null],[13,"Io","","Error reading response payload",14,null],[5,"get","","Create request builder for `GET` requests",null,{"inputs":[{"name":"u"}],"output":{"name":"clientrequestbuilder"}}],[5,"head","","Create request builder for `HEAD` requests",null,{"inputs":[{"name":"u"}],"output":{"name":"clientrequestbuilder"}}],[5,"post","","Create request builder for `POST` requests",null,{"inputs":[{"name":"u"}],"output":{"name":"clientrequestbuilder"}}],[5,"put","","Create request builder for `PUT` requests",null,{"inputs":[{"name":"u"}],"output":{"name":"clientrequestbuilder"}}],[5,"delete","","Create request builder for `DELETE` requests",null,{"inputs":[{"name":"u"}],"output":{"name":"clientrequestbuilder"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"clientconnectorstats"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create `Connect` message for specified `Uri`",15,{"inputs":[{"name":"u"}],"output":{"generics":["connect","httperror"],"name":"result"}}],[11,"conn_timeout","","Connection timeout, i.e. max time to connect to remote host. Set to 1 second by default.",15,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"wait_timeout","","If connection pool limits are enabled, wait time indicates max time to wait for a connection to become available. Set to 5 seconds by default.",15,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"new","","Create message with pause duration parameter",16,{"inputs":[{"name":"duration"}],"output":{"name":"pause"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"pause"}}],[11,"cause","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"connectorerror"}],"output":{"name":"clientconnectorerror"}}],[11,"started","","",17,null],[11,"default","","",17,{"inputs":[],"output":{"name":"clientconnector"}}],[11,"limit","","Set total number of simultaneous connections.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"limit_per_host","","Set total number of simultaneous connections to the same endpoint.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"conn_keep_alive","","Set keep-alive period for opened connection.",17,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"conn_lifetime","","Set max lifetime period for connection.",17,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"stats","","Subscribe for connector stats. Only one subscriber is supported.",17,{"inputs":[{"name":"self"},{"generics":["syn","clientconnectorstats"],"name":"recipient"}],"output":{"name":"self"}}],[11,"handle","","",17,null],[11,"handle","","",17,null],[11,"handle","","",17,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stream","","",18,{"inputs":[{"name":"self"}],"output":{"name":"iostream"}}],[11,"from_stream","","",18,{"inputs":[{"name":"t"}],"output":{"name":"connection"}}],[11,"close","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","",18,null],[11,"write","","",18,null],[11,"flush","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"cause","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",14,{"inputs":[{"name":"error"}],"output":{"name":"sendrequesterror"}}],[11,"from","","",14,{"inputs":[{"name":"clientconnectorerror"}],"output":{"name":"sendrequesterror"}}],[11,"timeout","","Set request timeout",19,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"conn_timeout","","Set connection timeout",19,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"wait_timeout","","Set wait timeout",19,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"poll","","",19,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"clientrequest"}}],[11,"get","","Create request builder for `GET` request",20,{"inputs":[{"name":"u"}],"output":{"name":"clientrequestbuilder"}}],[11,"head","","Create request builder for `HEAD` request",20,{"inputs":[{"name":"u"}],"output":{"name":"clientrequestbuilder"}}],[11,"post","","Create request builder for `POST` request",20,{"inputs":[{"name":"u"}],"output":{"name":"clientrequestbuilder"}}],[11,"put","","Create request builder for `PUT` request",20,{"inputs":[{"name":"u"}],"output":{"name":"clientrequestbuilder"}}],[11,"delete","","Create request builder for `DELETE` request",20,{"inputs":[{"name":"u"}],"output":{"name":"clientrequestbuilder"}}],[11,"build","","Create client request builder",20,{"inputs":[],"output":{"name":"clientrequestbuilder"}}],[11,"build_from","","Create client request builder",20,{"inputs":[{"name":"t"}],"output":{"name":"clientrequestbuilder"}}],[11,"uri","","Get the request URI",20,{"inputs":[{"name":"self"}],"output":{"name":"uri"}}],[11,"set_uri","","Set client request URI",20,{"inputs":[{"name":"self"},{"name":"uri"}],"output":null}],[11,"method","","Get the request method",20,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"set_method","","Set HTTP `Method` for the request",20,{"inputs":[{"name":"self"},{"name":"method"}],"output":null}],[11,"version","","Get HTTP version for the request",20,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"set_version","","Set http `Version` for the request",20,{"inputs":[{"name":"self"},{"name":"version"}],"output":null}],[11,"headers","","Get the headers from the request",20,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"headers_mut","","Get a mutable reference to the headers",20,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"chunked","","is chunked encoding enabled",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"upgrade","","is upgrade request",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"content_encoding","","Content encoding",20,{"inputs":[{"name":"self"}],"output":{"name":"contentencoding"}}],[11,"response_decompress","","Decompress response payload",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"write_buffer_capacity","","Requested write buffer capacity",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"body","","Get body of this response",20,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"set_body","","Set a body",20,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"send","","Send request",20,{"inputs":[{"name":"self"}],"output":{"name":"sendrequest"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"uri","","Set HTTP URI of request.",21,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"self"}}],[11,"method","","Set HTTP method of this request.",21,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"self"}}],[11,"get_method","","Set HTTP method of this request.",21,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"version","","Set HTTP version of this request.",21,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"self"}}],[11,"header","","Append a header.",21,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"set_header","","Set a header.",21,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"content_encoding","","Set content encoding.",21,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"self"}}],[11,"chunked","","Enables automatic chunked transfer encoding",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"upgrade","","Enable connection upgrade",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"content_type","","Set request's content type",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"self"}}],[11,"content_length","","Set content length",21,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"cookie","","Set a cookie",21,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"self"}}],[11,"no_default_headers","","Do not add default request headers. By default `Accept-Encoding` header is set.",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"disable_decompress","","Disable automatic decompress response body",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"write_buffer_capacity","","Set write buffer capacity",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"timeout","","Set request timeout",21,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"with_connector","","Send request using custom connector",21,{"inputs":[{"name":"self"},{"generics":["unsync","clientconnector"],"name":"addr"}],"output":{"name":"self"}}],[11,"with_connection","","Send request using existing `Connection`",21,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"self"}}],[11,"if_true","","This method calls provided closure with builder reference if value is `true`.",21,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"f"}],"output":{"name":"self"}}],[11,"if_some","","This method calls provided closure with builder reference if value is `Some`.",21,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"self"}}],[11,"body","","Set a body and generate `ClientRequest`.",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["clientrequest","error"],"name":"result"}}],[11,"json","","Set a JSON body and generate `ClientRequest`",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["clientrequest","error"],"name":"result"}}],[11,"streaming","","Set a streaming body and generate `ClientRequest`.",21,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["clientrequest","error"],"name":"result"}}],[11,"finish","","Set an empty body and generate `ClientRequest`",21,{"inputs":[{"name":"self"}],"output":{"generics":["clientrequest","error"],"name":"result"}}],[11,"take","","This method construct new `ClientRequestBuilder`",21,{"inputs":[{"name":"self"}],"output":{"name":"clientrequestbuilder"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",21,{"inputs":[{"name":"httprequest"}],"output":{"name":"clientrequestbuilder"}}],[11,"headers","","Get the headers from the response.",22,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"version","","Get the HTTP version of this response.",22,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"status","","Get the status from the server.",22,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"cookies","","Load response cookies.",22,{"inputs":[{"name":"self"}],"output":{"generics":["vec","cookieparseerror"],"name":"result"}}],[11,"cookie","","Return request cookie.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["cookie"],"name":"option"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"error_response","","",14,{"inputs":[{"name":"self"}],"output":{"name":"httpresponse"}}],[0,"error","actix_web","Error and Result module",null,null],[4,"UrlParseError","actix_web::error","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",23,null],[13,"IdnaError","","",23,null],[13,"InvalidPort","","",23,null],[13,"InvalidIpv4Address","","",23,null],[13,"InvalidIpv6Address","","",23,null],[13,"InvalidDomainCharacter","","",23,null],[13,"RelativeUrlWithoutBase","","",23,null],[13,"RelativeUrlWithCannotBeABaseBase","","",23,null],[13,"SetHostOnCannotBeABaseUrl","","",23,null],[13,"Overflow","","",23,null],[4,"CookieParseError","","Enum corresponding to a parsing error.",null,null],[13,"MissingPair","","The cookie did not contain a name/value pair.",24,null],[13,"EmptyName","","The cookie's name was empty.",24,null],[13,"Utf8Error","","Decoding the cookie's name or value resulted in invalid UTF-8.",24,null],[3,"Error","","General purpose actix web error",null,null],[3,"InternalError","","Helper type that can wrap any error and generate custom response.",null,null],[4,"ParseError","","A set of errors that can occur during parsing HTTP streams",null,null],[13,"Method","","An invalid `Method`, such as `GE.T`.",25,null],[13,"Uri","","An invalid `Uri`, such as `exam ple.domain`.",25,null],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",25,null],[13,"Header","","An invalid `Header`.",25,null],[13,"TooLarge","","A message head is too large to be reasonable.",25,null],[13,"Incomplete","","A message reached EOF, but is not complete.",25,null],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",25,null],[13,"Timeout","","A timeout occurred waiting for an IO event.",25,null],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",25,null],[13,"Utf8","","Parsing a field as string failed",25,null],[4,"PayloadError","","A set of errors that can occur during payload parsing",null,null],[13,"Incomplete","","A payload reached EOF, but is not complete.",26,null],[13,"EncodingCorrupted","","Content encoding stream corruption",26,null],[13,"Overflow","","A payload reached size limit.",26,null],[13,"UnknownLength","","A payload length is unknown.",26,null],[13,"Io","","Io error",26,null],[13,"Http2","","Http2 error",26,null],[4,"HttpRangeError","","Http range header parsing error",null,null],[13,"InvalidRange","","Returned if range is invalid.",27,null],[13,"NoOverlap","","Returned if first-byte-pos of all of the byte-range-spec values is greater than the content size. See `https://github.com/golang/go/commit/aa9b3d7`",27,null],[4,"MultipartError","","A set of errors that can occur during parsing multipart streams",null,null],[13,"NoContentType","","Content-Type header is not found",28,null],[13,"ParseContentType","","Can not parse Content-Type header",28,null],[13,"Boundary","","Multipart boundary is not found",28,null],[13,"Incomplete","","Multipart stream is incomplete",28,null],[13,"Parse","","Error during field parsing",28,null],[13,"Payload","","Payload error",28,null],[4,"ExpectError","","Error during handling `Expect` header",null,null],[13,"Encoding","","Expect header value can not be converted to utf8",29,null],[13,"UnknownExpect","","Unknown expect value",29,null],[4,"ContentTypeError","","A set of error that can occure during parsing content type",null,null],[13,"ParseError","","Can not parse content type",30,null],[13,"UnknownEncoding","","Unknown content encoding",30,null],[4,"UrlencodedError","","A set of errors that can occur during parsing urlencoded payloads",null,null],[13,"Chunked","","Can not decode chunked transfer encoding",31,null],[13,"Overflow","","Payload size is bigger than 256k",31,null],[13,"UnknownLength","","Payload size is now known",31,null],[13,"ContentType","","Content type error",31,null],[13,"Parse","","Parse error",31,null],[13,"Payload","","Payload error",31,null],[4,"JsonPayloadError","","A set of errors that can occur during parsing json payloads",null,null],[13,"Overflow","","Payload size is bigger than 256k",32,null],[13,"ContentType","","Content type error",32,null],[13,"Deserialize","","Deserialize error",32,null],[13,"Payload","","Payload error",32,null],[4,"UriSegmentError","","Errors which can occur when attempting to interpret a segment string as a valid path segment.",null,null],[13,"BadStart","","The segment started with the wrapped invalid character.",33,null],[13,"BadChar","","The segment contained the wrapped invalid character.",33,null],[13,"BadEnd","","The segment ended with the wrapped invalid character.",33,null],[4,"UrlGenerationError","","Errors which can occur when attempting to generate resource uri.",null,null],[13,"ResourceNotFound","","",34,null],[13,"NotEnoughElements","","",34,null],[13,"RouterNotAvailable","","",34,null],[13,"ParseError","","",34,null],[5,"ErrorBadRequest","","Helper function that creates wrapper of any error and generate BAD REQUEST response.",null,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[5,"ErrorUnauthorized","","Helper function that creates wrapper of any error and generate UNAUTHORIZED response.",null,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[5,"ErrorForbidden","","Helper function that creates wrapper of any error and generate FORBIDDEN response.",null,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[5,"ErrorNotFound","","Helper function that creates wrapper of any error and generate NOT FOUND response.",null,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[5,"ErrorMethodNotAllowed","","Helper function that creates wrapper of any error and generate METHOD NOT ALLOWED response.",null,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[5,"ErrorRequestTimeout","","Helper function that creates wrapper of any error and generate REQUEST TIMEOUT response.",null,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[5,"ErrorConflict","","Helper function that creates wrapper of any error and generate CONFLICT response.",null,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[5,"ErrorGone","","Helper function that creates wrapper of any error and generate GONE response.",null,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[5,"ErrorPreconditionFailed","","Helper function that creates wrapper of any error and generate PRECONDITION FAILED response.",null,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[5,"ErrorExpectationFailed","","Helper function that creates wrapper of any error and generate EXPECTATION FAILED response.",null,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[5,"ErrorInternalServerError","","Helper function that creates wrapper of any error and generate INTERNAL SERVER ERROR response.",null,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[6,"Result","","A specialized `Result` for actix web operations",null,null],[8,"ResponseError","","Error that can be converted to `HttpResponse`",null,null],[11,"error_response","","Create response for error",35,{"inputs":[{"name":"self"}],"output":{"name":"httpresponse"}}],[11,"cause","","Returns a reference to the underlying cause of this Error.",36,{"inputs":[{"name":"self"}],"output":{"name":"responseerror"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","actix_web","",9,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","actix_web::error","",36,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"from","","",36,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"cause","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"error_response","","",25,{"inputs":[{"name":"self"}],"output":{"name":"httpresponse"}}],[11,"from","","",25,{"inputs":[{"name":"ioerror"}],"output":{"name":"parseerror"}}],[11,"from","","",25,{"inputs":[{"name":"invaliduri"}],"output":{"name":"parseerror"}}],[11,"from","","",25,{"inputs":[{"name":"utf8error"}],"output":{"name":"parseerror"}}],[11,"from","","",25,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"parseerror"}}],[11,"from","","",25,{"inputs":[{"name":"error"}],"output":{"name":"parseerror"}}],[11,"cause","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",26,{"inputs":[{"name":"ioerror"}],"output":{"name":"payloaderror"}}],[11,"error_response","","",24,{"inputs":[{"name":"self"}],"output":{"name":"httpresponse"}}],[11,"cause","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"httprangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"error_response","","",27,{"inputs":[{"name":"self"}],"output":{"name":"httpresponse"}}],[11,"from","","",27,{"inputs":[{"name":"httprangeparseerror"}],"output":{"name":"httprangeerror"}}],[11,"cause","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",28,{"inputs":[{"name":"parseerror"}],"output":{"name":"multiparterror"}}],[11,"from","","",28,{"inputs":[{"name":"payloaderror"}],"output":{"name":"multiparterror"}}],[11,"error_response","","",28,{"inputs":[{"name":"self"}],"output":{"name":"httpresponse"}}],[11,"cause","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"expecterror"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"error_response","","",29,{"inputs":[{"name":"self"}],"output":{"name":"httpresponse"}}],[11,"cause","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"contenttypeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"error_response","","",30,{"inputs":[{"name":"self"}],"output":{"name":"httpresponse"}}],[11,"cause","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"error_response","","",31,{"inputs":[{"name":"self"}],"output":{"name":"httpresponse"}}],[11,"from","","",31,{"inputs":[{"name":"payloaderror"}],"output":{"name":"urlencodederror"}}],[11,"cause","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"error_response","","",32,{"inputs":[{"name":"self"}],"output":{"name":"httpresponse"}}],[11,"from","","",32,{"inputs":[{"name":"payloaderror"}],"output":{"name":"jsonpayloaderror"}}],[11,"from","","",32,{"inputs":[{"name":"jsonerror"}],"output":{"name":"jsonpayloaderror"}}],[11,"cause","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"urisegmenterror"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"urisegmenterror"}],"output":{"name":"bool"}}],[11,"error_response","","",33,{"inputs":[{"name":"self"}],"output":{"name":"httpresponse"}}],[11,"cause","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"urlgenerationerror"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"urlgenerationerror"}],"output":{"name":"bool"}}],[11,"from","","",34,{"inputs":[{"name":"urlparseerror"}],"output":{"name":"self"}}],[11,"new","","Create `InternalError` instance",37,{"inputs":[{"name":"t"},{"name":"statuscode"}],"output":{"name":"self"}}],[11,"from_response","","Create `InternalError` with predefined `HttpResponse`.",37,{"inputs":[{"name":"t"},{"name":"httpresponse"}],"output":{"name":"self"}}],[11,"backtrace","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"error_response","","",37,{"inputs":[{"name":"self"}],"output":{"name":"httpresponse"}}],[11,"respond_to","","",37,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"generics":["httpresponse","error"],"name":"result"}}],[0,"fs","actix_web","Static files support",null,null],[3,"NamedFile","actix_web::fs","A file with an associated name; responds with the Content-Type based on the file extension.",null,null],[3,"ChunkedReadFile","","A helper created from a `std::fs::File` which reads the file chunk-by-chunk on a `CpuPool`.",null,null],[3,"Directory","","A directory; responds with the generated directory listing.",null,null],[3,"StaticFiles","","Static files handling",null,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open","","Attempts to open a file in read-only mode.",38,{"inputs":[{"name":"p"}],"output":{"generics":["namedfile"],"name":"result"}}],[11,"only_get","","Allow only GET and HEAD methods",38,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"file","","Returns reference to the underlying `File` object.",38,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"path","","Retrieve the path of this file.",38,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"set_cpu_pool","","Set `CpuPool` to use",38,{"inputs":[{"name":"self"},{"name":"cpupool"}],"output":{"name":"self"}}],[11,"set_status_code","","Set response Status Code",38,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"self"}}],[11,"deref","","",38,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"deref_mut","","",38,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"respond_to","","",38,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"generics":["httpresponse","error"],"name":"result"}}],[11,"poll","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",40,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"directory"}}],[11,"respond_to","","",40,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"generics":["httpresponse","error"],"name":"result"}}],[11,"new","","Create new `StaticFiles` instance for specified base directory.",41,{"inputs":[{"name":"t"}],"output":{"name":"staticfiles"}}],[11,"with_pool","","Create new `StaticFiles` instance for specified base directory and `CpuPool`.",41,{"inputs":[{"name":"t"},{"name":"cpupool"}],"output":{"name":"staticfiles"}}],[11,"show_files_listing","","Show files listing for directories.",41,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"index_file","","Set index file",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"staticfiles"}}],[11,"default_handler","","Sets default handler which is used when no matched file could be found.",41,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"staticfiles"}}],[11,"handle","","",41,null],[0,"middleware","actix_web","Middlewares",null,null],[3,"DefaultHeaders","actix_web::middleware","`Middleware` for setting default response headers.",null,null],[3,"ErrorHandlers","","`Middleware` for allowing custom handlers for responses.",null,null],[3,"Logger","","`Middleware` for logging request and response info to the terminal.",null,null],[4,"Started","","Middleware start result",null,null],[13,"Done","","Execution completed",42,null],[13,"Response","","New http response got generated. If middleware generates response handler execution halts.",42,null],[13,"Future","","Execution completed, runs future to completion.",42,null],[4,"Response","","Middleware execution result",null,null],[13,"Done","","New http response got generated",43,null],[13,"Future","","Result is a future that resolves to a new http response",43,null],[4,"Finished","","Middleware finish result",null,null],[13,"Done","","Execution completed",44,null],[13,"Future","","Execution completed, but run future to completion",44,null],[11,"new","","Create `Logger` middleware with the specified `format`.",45,{"inputs":[{"name":"str"}],"output":{"name":"logger"}}],[11,"default","","Create `Logger` middleware with format:",45,{"inputs":[],"output":{"name":"logger"}}],[11,"start","","",45,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"generics":["started"],"name":"result"}}],[11,"finish","","",45,{"inputs":[{"name":"self"},{"name":"httprequest"},{"name":"httpresponse"}],"output":{"name":"finished"}}],[0,"cors","","Cross-origin resource sharing (CORS) for Actix applications",null,null],[3,"Cors","actix_web::middleware::cors","`Middleware` for Cross-origin resource sharing support",null,null],[3,"CorsBuilder","","Structure that follows the builder pattern for building `Cors` middleware structs.",null,null],[4,"CorsError","","A set of errors that can occur during processing CORS",null,null],[13,"MissingOrigin","","The HTTP request header `Origin` is required but was not provided",46,null],[13,"BadOrigin","","The HTTP request header `Origin` could not be parsed correctly.",46,null],[13,"MissingRequestMethod","","The request header `Access-Control-Request-Method` is required but is missing",46,null],[13,"BadRequestMethod","","The request header `Access-Control-Request-Method` has an invalid value",46,null],[13,"BadRequestHeaders","","The request header `Access-Control-Request-Headers`  has an invalid value",46,null],[13,"MissingRequestHeaders","","The request header `Access-Control-Request-Headers`  is required but is missing.",46,null],[13,"OriginNotAllowed","","Origin is not allowed to make this request",46,null],[13,"MethodNotAllowed","","Requested method is not allowed",46,null],[13,"HeadersNotAllowed","","One or more headers requested are not allowed",46,null],[4,"AllOrSome","","An enum signifying that some of type T is allowed, or `All` (everything is allowed).",null,null],[13,"All","","Everything is allowed. Usually equivalent to the \"*\" value.",47,null],[13,"Some","","Only some of `T` is allowed",47,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"error_response","","",46,{"inputs":[{"name":"self"}],"output":{"name":"httpresponse"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"allorsome"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"allorsome"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"allorsome"}],"output":{"name":"bool"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"self"}}],[11,"is_all","","Returns whether this is an `All` variant",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_some","","Returns whether this is a `Some` variant",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Returns &T",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"cors"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"cors"}}],[11,"build","","",48,{"inputs":[],"output":{"name":"corsbuilder"}}],[11,"for_app","","Create CorsBuilder for a specified application.",48,{"inputs":[{"name":"app"}],"output":{"name":"corsbuilder"}}],[11,"register","","This method register cors middleware with resource and adds route for OPTIONS preflight requests.",48,{"inputs":[{"name":"self"},{"name":"resourcehandler"}],"output":null}],[11,"start","","",48,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"generics":["started"],"name":"result"}}],[11,"response","","",48,{"inputs":[{"name":"self"},{"name":"httprequest"},{"name":"httpresponse"}],"output":{"generics":["response"],"name":"result"}}],[11,"allowed_origin","","Add an origin that are allowed to make requests. Will be verified against the `Origin` request header.",49,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"corsbuilder"}}],[11,"allowed_methods","","Set a list of methods which the allowed origins are allowed to access for requests.",49,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"corsbuilder"}}],[11,"allowed_header","","Set an allowed header",49,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"corsbuilder"}}],[11,"allowed_headers","","Set a list of header field names which can be used when this resource is accessed by allowed origins.",49,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"corsbuilder"}}],[11,"expose_headers","","Set a list of headers which are safe to expose to the API of a CORS API specification. This corresponds to the `Access-Control-Expose-Headers` response header.",49,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"corsbuilder"}}],[11,"max_age","","Set a maximum time for which this CORS request maybe cached. This value is set as the `Access-Control-Max-Age` header.",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"corsbuilder"}}],[11,"send_wildcard","","Set a wildcard origins",49,{"inputs":[{"name":"self"}],"output":{"name":"corsbuilder"}}],[11,"supports_credentials","","Allows users to make authenticated requests",49,{"inputs":[{"name":"self"}],"output":{"name":"corsbuilder"}}],[11,"disable_vary_header","","Disable `Vary` header support.",49,{"inputs":[{"name":"self"}],"output":{"name":"corsbuilder"}}],[11,"disable_preflight","","Disable preflight request support.",49,{"inputs":[{"name":"self"}],"output":{"name":"corsbuilder"}}],[11,"resource","","Configure resource for a specific path.",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"corsbuilder"}}],[11,"finish","","Finishes building and returns the built `Cors` instance.",49,{"inputs":[{"name":"self"}],"output":{"name":"cors"}}],[11,"register","","Finishes building Cors middleware and register middleware for application",49,{"inputs":[{"name":"self"}],"output":{"name":"app"}}],[0,"csrf","actix_web::middleware","A filter for cross-site request forgery (CSRF).",null,null],[3,"CsrfFilter","actix_web::middleware::csrf","A middleware that filters cross-site requests.",null,null],[4,"CsrfError","","Potential cross-site request forgery detected.",null,null],[13,"MissingOrigin","","The HTTP request header `Origin` was required but not provided.",50,null],[13,"BadOrigin","","The HTTP request header `Origin` could not be parsed correctly.",50,null],[13,"CsrDenied","","The cross-site request was denied.",50,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"error_response","","",50,{"inputs":[{"name":"self"}],"output":{"name":"httpresponse"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"csrffilter"}}],[11,"new","","Start building a `CsrfFilter`.",51,{"inputs":[],"output":{"name":"csrffilter"}}],[11,"allowed_origin","","Add an origin that is allowed to make requests. Will be verified against the `Origin` request header.",51,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"csrffilter"}}],[11,"allow_xhr","","Allow all requests with an `X-Requested-With` header.",51,{"inputs":[{"name":"self"}],"output":{"name":"csrffilter"}}],[11,"allow_missing_origin","","Allow requests if the expected `Origin` header is missing (and there is no `Referer` to fall back on).",51,{"inputs":[{"name":"self"}],"output":{"name":"csrffilter"}}],[11,"allow_upgrade","","Allow cross-site upgrade requests (for example to open a WebSocket).",51,{"inputs":[{"name":"self"}],"output":{"name":"csrffilter"}}],[11,"start","","",51,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"generics":["started"],"name":"result"}}],[11,"default","actix_web::middleware","",52,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Construct `DefaultHeaders` middleware.",52,{"inputs":[],"output":{"name":"defaultheaders"}}],[11,"header","","Set a header.",52,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"content_type","","Set CONTENT-TYPE header if response does not contain this header.",52,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"response","","",52,{"inputs":[{"name":"self"},{"name":"httprequest"},{"name":"httpresponse"}],"output":{"generics":["response"],"name":"result"}}],[11,"default","","",53,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Construct new `ErrorHandlers` instance",53,{"inputs":[],"output":{"name":"self"}}],[11,"handler","","Register error handler for specified status code",53,{"inputs":[{"name":"self"},{"name":"statuscode"},{"name":"f"}],"output":{"name":"self"}}],[11,"response","","",53,{"inputs":[{"name":"self"},{"name":"httprequest"},{"name":"httpresponse"}],"output":{"generics":["response"],"name":"result"}}],[0,"identity","","Request identity service for Actix applications.",null,null],[3,"IdentityService","actix_web::middleware::identity","Request identity middleware",null,null],[3,"CookieIdentityPolicy","","Use cookies for request identity storage.",null,null],[8,"RequestIdentity","","The helper trait to obtain your identity from a request.",null,null],[10,"identity","","Return the claimed identity of the user associated request or `None` if no identity can be found associated with the request.",54,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[10,"remember","","Remember identity.",54,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[10,"forget","","This method is used to 'forget' the current identity on subsequent requests.",54,{"inputs":[{"name":"self"}],"output":null}],[8,"Identity","","An identity",null,null],[10,"identity","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[10,"remember","","",55,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[10,"forget","","",55,{"inputs":[{"name":"self"}],"output":null}],[10,"write","","Write session to storage backend.",55,{"inputs":[{"name":"self"},{"name":"httpresponse"}],"output":{"generics":["response"],"name":"result"}}],[8,"IdentityPolicy","","Identity policy definition.",null,null],[16,"Identity","","",56,null],[16,"Future","","",56,null],[10,"from_request","","Parse the session from request and load data from a service identity.",56,null],[11,"identity","actix_web","",11,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"remember","","",11,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"forget","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"new","actix_web::middleware::identity","Create new identity service with specified backend.",57,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"start","","",57,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"generics":["started"],"name":"result"}}],[11,"response","","",57,{"inputs":[{"name":"self"},{"name":"httprequest"},{"name":"httpresponse"}],"output":{"generics":["response"],"name":"result"}}],[11,"new","","Construct new `CookieIdentityPolicy` instance.",58,null],[11,"path","","Sets the `path` field in the session cookie being built.",58,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"cookieidentitypolicy"}}],[11,"name","","Sets the `name` field in the session cookie being built.",58,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"cookieidentitypolicy"}}],[11,"domain","","Sets the `domain` field in the session cookie being built.",58,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"cookieidentitypolicy"}}],[11,"secure","","Sets the `secure` field in the session cookie being built.",58,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"cookieidentitypolicy"}}],[11,"max_age","","Sets the `max-age` field in the session cookie being built.",58,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"cookieidentitypolicy"}}],[11,"from_request","","",58,null],[0,"session","actix_web::middleware","User sessions.",null,null],[3,"Session","actix_web::middleware::session","The high-level interface you use to modify session data.",null,null],[3,"SessionStorage","","Session storage middleware",null,null],[3,"CookieSession","","Session that uses signed cookies as session storage",null,null],[3,"CookieSessionBackend","","Use cookies for session storage.",null,null],[4,"CookieSessionError","","Errors that can occur during handling cookie session",null,null],[13,"Overflow","","Size of the serialized session is greater than 4000 bytes.",59,null],[13,"Serialize","","Fail to serialize session.",59,null],[8,"RequestSession","","The helper trait to obtain your session data from a request.",null,null],[10,"session","","",60,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"session","actix_web","",11,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"get","actix_web::middleware::session","Get a `value` from the session.",61,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["option"],"name":"result"}}],[11,"set","","Set a `value` from the session.",61,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"remove","","Remove value from the session.",61,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"clear","","Clear the session.",61,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create session storage",62,{"inputs":[{"name":"t"}],"output":{"name":"sessionstorage"}}],[11,"start","","",62,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"generics":["started"],"name":"result"}}],[11,"response","","",62,{"inputs":[{"name":"self"},{"name":"httprequest"},{"name":"httpresponse"}],"output":{"generics":["response"],"name":"result"}}],[11,"cause","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"signed","","Construct new signed `CookieSessionBackend` instance.",63,null],[11,"private","","Construct new private `CookieSessionBackend` instance.",63,null],[11,"path","","Sets the `path` field in the session cookie being built.",63,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"cookiesessionbackend"}}],[11,"name","","Sets the `name` field in the session cookie being built.",63,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"cookiesessionbackend"}}],[11,"domain","","Sets the `domain` field in the session cookie being built.",63,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"cookiesessionbackend"}}],[11,"secure","","Sets the `secure` field in the session cookie being built.",63,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"cookiesessionbackend"}}],[11,"max_age","","Sets the `max-age` field in the session cookie being built.",63,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"cookiesessionbackend"}}],[8,"Middleware","actix_web::middleware","Middleware definition",null,null],[11,"start","","Method is called when request is ready. It may return future, which should resolve before next middleware get called.",64,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"generics":["started"],"name":"result"}}],[11,"response","","Method is called when handler returns response, but before sending http message to peer.",64,{"inputs":[{"name":"self"},{"name":"httprequest"},{"name":"httpresponse"}],"output":{"generics":["response"],"name":"result"}}],[11,"finish","","Method is called after body stream get sent to peer.",64,{"inputs":[{"name":"self"},{"name":"httprequest"},{"name":"httpresponse"}],"output":{"name":"finished"}}],[0,"multipart","actix_web","Multipart requests support",null,null],[3,"Multipart","actix_web::multipart","The server-side implementation of `multipart/form-data` requests.",null,null],[3,"Field","","A single field in a multipart stream",null,null],[4,"MultipartItem","","",null,null],[13,"Field","","Multipart field",65,null],[13,"Nested","","Nested multipart stream",65,null],[11,"boundary","","Extract boundary info from headers.",66,{"inputs":[{"name":"headermap"}],"output":{"generics":["string","multiparterror"],"name":"result"}}],[11,"new","","Create multipart instance for boundary.",66,{"inputs":[{"generics":["string","multiparterror"],"name":"result"},{"name":"s"}],"output":{"name":"multipart"}}],[11,"poll","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"headers","","",67,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"content_type","","",67,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"poll","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"pred","actix_web","Route match predicates",null,null],[3,"AnyPredicate","actix_web::pred","Matches if any of supplied predicate matches.",null,null],[3,"AllPredicate","","Matches if all of supplied predicate matches.",null,null],[5,"Any","","Return predicate that matches if any of supplied predicate matches.",null,{"inputs":[{"name":"p"}],"output":{"name":"anypredicate"}}],[5,"All","","Return predicate that matches if all of supplied predicate matches.",null,{"inputs":[{"name":"p"}],"output":{"name":"allpredicate"}}],[5,"Not","","Return predicate that matches if supplied predicate does not match.",null,{"inputs":[{"name":"p"}],"output":{"name":"notpredicate"}}],[5,"Get","","Predicate to match GET http method",null,{"inputs":[],"output":{"name":"methodpredicate"}}],[5,"Post","","Predicate to match POST http method",null,{"inputs":[],"output":{"name":"methodpredicate"}}],[5,"Put","","Predicate to match PUT http method",null,{"inputs":[],"output":{"name":"methodpredicate"}}],[5,"Delete","","Predicate to match DELETE http method",null,{"inputs":[],"output":{"name":"methodpredicate"}}],[5,"Head","","Predicate to match HEAD http method",null,{"inputs":[],"output":{"name":"methodpredicate"}}],[5,"Options","","Predicate to match OPTIONS http method",null,{"inputs":[],"output":{"name":"methodpredicate"}}],[5,"Connect","","Predicate to match CONNECT http method",null,{"inputs":[],"output":{"name":"methodpredicate"}}],[5,"Patch","","Predicate to match PATCH http method",null,{"inputs":[],"output":{"name":"methodpredicate"}}],[5,"Trace","","Predicate to match TRACE http method",null,{"inputs":[],"output":{"name":"methodpredicate"}}],[5,"Method","","Predicate to match specified http method",null,{"inputs":[{"name":"method"}],"output":{"name":"methodpredicate"}}],[5,"Header","","Return predicate that matches if request contains specified header and value.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"headerpredicate"}}],[8,"Predicate","","Trait defines resource route predicate. Predicate can modify request object. It is also possible to to store extra attributes on request by using `Extensions` container, Extensions container available via `HttpRequest::extensions()` method.",null,null],[10,"check","","Check if request matches predicate",68,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"name":"bool"}}],[11,"or","","Add new predicate to list of predicates to check",69,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"check","","",69,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"name":"bool"}}],[11,"and","","Add new predicate to list of predicates to check",70,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"check","","",70,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"name":"bool"}}],[0,"server","actix_web","Http server",null,null],[3,"ServerSettings","actix_web::server","Various server settings",null,null],[3,"HttpServer","","An HTTP Server",null,null],[3,"PauseServer","","Pause accepting incoming connections",null,null],[3,"ResumeServer","","Resume accepting incoming connections",null,null],[3,"StopServer","","Stop incoming connection processing, stop all workers and exit.",null,null],[12,"graceful","","",71,null],[4,"KeepAlive","","Server keep-alive setting",null,null],[13,"Timeout","","Keep alive in seconds",72,null],[13,"Tcp","","Use `SO_KEEPALIVE` socket option, value in seconds",72,null],[13,"Os","","Relay on OS to shutdown tcp connection",72,null],[13,"Disabled","","Disabled",72,null],[5,"new","","Create new http server with application factory.",null,{"inputs":[{"name":"f"}],"output":{"name":"httpserver"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"serversettings"}}],[11,"default","","",73,{"inputs":[],"output":{"name":"self"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection",73,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"option"}}],[11,"secure","","Returns true if connection is secure(https)",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"host","","Returns host header value",73,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cpu_pool","","Returns default `CpuPool` for server",73,{"inputs":[{"name":"self"}],"output":{"name":"cpupool"}}],[11,"new","","Create new http server with application factory",74,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"threads","","Set number of workers to start.",74,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"backlog","","Set the maximum number of pending connections.",74,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[11,"keep_alive","","Set server keep-alive setting.",74,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"server_hostname","","Set server host name.",74,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"self"}}],[11,"system_exit","","Send `SystemExit` message to actix system",74,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"signals","","Set alternative address for `ProcessSignals` actor.",74,{"inputs":[{"name":"self"},{"generics":["syn","processsignals"],"name":"addr"}],"output":{"name":"self"}}],[11,"disable_signals","","Disable signal handling",74,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"shutdown_timeout","","Timeout for graceful workers shutdown.",74,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"self"}}],[11,"no_http2","","Disable `HTTP/2` support",74,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"addrs","","Get addresses of bound sockets.",74,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"vec"}}],[11,"listen","","Use listener for accepting incoming connection requests",74,{"inputs":[{"name":"self"},{"name":"tcplistener"}],"output":{"name":"self"}}],[11,"bind","","The socket address to bind",74,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"start","","Start listening for incoming connections.",74,{"inputs":[{"name":"self"}],"output":{"generics":["syn"],"name":"addr"}}],[11,"run","","Spawn new thread and start listening for incoming connections.",74,{"inputs":[{"name":"self"}],"output":null}],[11,"start_incoming","","Start listening for incoming connections from a stream.",74,{"inputs":[{"name":"self"},{"name":"s"},{"name":"bool"}],"output":{"generics":["syn"],"name":"addr"}}],[11,"handle","","",74,{"inputs":[{"name":"self"},{"name":"signal"},{"name":"context"}],"output":null}],[11,"handle","","",74,{"inputs":[{"name":"self"},{"name":"pauseserver"},{"name":"context"}],"output":null}],[11,"handle","","",74,{"inputs":[{"name":"self"},{"name":"resumeserver"},{"name":"context"}],"output":null}],[11,"handle","","",74,null],[8,"HttpHandler","","Low level http request handler",null,null],[10,"handle","","Handle request",75,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"generics":["box","httprequest"],"name":"result"}}],[8,"IntoHttpHandler","","Conversion helper trait",null,null],[16,"Handler","","The associated type which is result of conversion.",76,null],[10,"into_handler","","Convert into `HttpHandler` object.",76,null],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"keepalive"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"keepalive"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"keepalive"}}],[11,"from","","",72,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",72,{"inputs":[{"generics":["usize"],"name":"option"}],"output":{"name":"self"}}],[0,"test","actix_web","Various helpers for Actix applications to use during testing.",null,null],[3,"TestServer","actix_web::test","The `TestServer` type.",null,null],[3,"TestServerBuilder","","An `TestServer` builder",null,null],[3,"TestApp","","Test application helper for testing request handlers.",null,null],[3,"TestRequest","","Test `HttpRequest` builder",null,null],[11,"new","","Start new test server",77,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","Create test server builder",77,{"inputs":[],"output":{"name":"testserverbuilder"}}],[11,"build_with_state","","Create test server builder with specific state factory",77,{"inputs":[{"name":"f"}],"output":{"name":"testserverbuilder"}}],[11,"with_factory","","Start new test server with application factory",77,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"unused_addr","","Get firat available unused address",77,{"inputs":[],"output":{"name":"socketaddr"}}],[11,"addr","","Construct test server url",77,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"url","","Construct test server url",77,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"execute","","Execute future on current core",77,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"ws","","Connect to websocket server",77,{"inputs":[{"name":"self"}],"output":{"generics":["clienterror"],"name":"result"}}],[11,"get","","Create `GET` request",77,{"inputs":[{"name":"self"}],"output":{"name":"clientrequestbuilder"}}],[11,"post","","Create `POST` request",77,{"inputs":[{"name":"self"}],"output":{"name":"clientrequestbuilder"}}],[11,"head","","Create `HEAD` request",77,{"inputs":[{"name":"self"}],"output":{"name":"clientrequestbuilder"}}],[11,"client","","Connect to test http server",77,{"inputs":[{"name":"self"},{"name":"method"},{"name":"str"}],"output":{"name":"clientrequestbuilder"}}],[11,"drop","","",77,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",78,{"inputs":[{"name":"f"}],"output":{"name":"testserverbuilder"}}],[11,"start","","Configure test application and run test server",78,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"testserver"}}],[11,"handler","","Register handler for \"/\"",79,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"middleware","","Register middleware",79,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"testapp"}}],[11,"resource","","Register resource. This method is similar to `App::resource()` method.",79,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"testapp"}}],[11,"into_handler","","",79,{"inputs":[{"name":"self"},{"name":"serversettings"}],"output":{"name":"httpapplication"}}],[11,"default","","",80,{"inputs":[],"output":{"name":"testrequest"}}],[11,"with_uri","","Create TestRequest and set request uri",80,{"inputs":[{"name":"str"}],"output":{"name":"testrequest"}}],[11,"with_hdr","","Create TestRequest and set header",80,{"inputs":[{"name":"h"}],"output":{"name":"testrequest"}}],[11,"with_header","","Create TestRequest and set header",80,{"inputs":[{"name":"k"},{"name":"v"}],"output":{"name":"testrequest"}}],[11,"with_state","","Start HttpRequest build process with application state",80,{"inputs":[{"name":"s"}],"output":{"name":"testrequest"}}],[11,"version","","Set HTTP version of this request",80,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"self"}}],[11,"method","","Set HTTP method of this request",80,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"self"}}],[11,"uri","","Set HTTP Uri of this request",80,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"set","","Set a header",80,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"self"}}],[11,"header","","Set a header",80,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"param","","Set request path pattern parameter",80,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"set_payload","","Set request payload",80,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"self"}}],[11,"finish","","Complete request creation and generate `HttpRequest` instance",80,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"run","","This method generates `HttpRequest` instance and runs handler with generated request.",80,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"generics":["httpresponse"],"name":"result"}}],[11,"run_async","","This method generates `HttpRequest` instance and runs handler with generated request.",80,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"generics":["httpresponse"],"name":"result"}}],[0,"ws","actix_web","`WebSocket` support for Actix",null,null],[3,"Client","actix_web::ws","`WebSocket` client",null,null],[3,"ClientHandshake","","Future that implementes client websocket handshake process.",null,null],[3,"ClientReader","","",null,null],[3,"ClientWriter","","",null,null],[3,"WebsocketContext","","Execution context for `WebSockets` actors",null,null],[3,"Frame","","A struct representing a `WebSocket` frame.",null,null],[3,"WsStream","","Maps `Payload` stream into stream of `ws::Message` items",null,null],[4,"ClientError","","Websocket client error",null,null],[13,"InvalidUrl","","",81,null],[13,"InvalidResponseStatus","","",81,null],[13,"InvalidUpgradeHeader","","",81,null],[13,"InvalidConnectionHeader","","",81,null],[13,"MissingConnectionHeader","","",81,null],[13,"MissingWebSocketAcceptHeader","","",81,null],[13,"InvalidChallengeResponse","","",81,null],[13,"Http","","",81,null],[13,"Url","","",81,null],[13,"ResponseParseError","","",81,null],[13,"SendRequest","","",81,null],[13,"Protocol","","",81,null],[13,"Io","","",81,null],[13,"Disconnected","","",81,null],[4,"CloseCode","","Status code used to indicate why an endpoint is closing the `WebSocket` connection.",null,null],[13,"Normal","","Indicates a normal closure, meaning that the purpose for which the connection was established has been fulfilled.",82,null],[13,"Away","","Indicates that an endpoint is \"going away\", such as a server going down or a browser having navigated away from a page.",82,null],[13,"Protocol","","Indicates that an endpoint is terminating the connection due to a protocol error.",82,null],[13,"Unsupported","","Indicates that an endpoint is terminating the connection because it has received a type of data it cannot accept (e.g., an endpoint that understands only text data MAY send this if it receives a binary message).",82,null],[13,"Status","","Indicates that no status code was included in a closing frame. This close code makes it possible to use a single method, `on_close` to handle even cases where no close code was provided.",82,null],[13,"Abnormal","","Indicates an abnormal closure. If the abnormal closure was due to an error, this close code will not be used. Instead, the `on_error` method of the handler will be called with the error. However, if the connection is simply dropped, without an error, this close code will be sent to the handler.",82,null],[13,"Invalid","","Indicates that an endpoint is terminating the connection because it has received data within a message that was not consistent with the type of the message (e.g., non-UTF-8 [RFC3629] data within a text message).",82,null],[13,"Policy","","Indicates that an endpoint is terminating the connection because it has received a message that violates its policy.  This is a generic status code that can be returned when there is no other more suitable status code (e.g., Unsupported or Size) or if there is a need to hide specific details about the policy.",82,null],[13,"Size","","Indicates that an endpoint is terminating the connection because it has received a message that is too big for it to process.",82,null],[13,"Extension","","Indicates that an endpoint (client) is terminating the connection because it has expected the server to negotiate one or more extension, but the server didn't return them in the response message of the WebSocket handshake.  The list of extensions that are needed should be given as the reason for closing. Note that this status code is not used by the server, because it can fail the WebSocket handshake instead.",82,null],[13,"Error","","Indicates that a server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request.",82,null],[13,"Restart","","Indicates that the server is restarting. A client may choose to reconnect, and if it does, it should use a randomized delay of 5-30 seconds between attempts.",82,null],[13,"Again","","Indicates that the server is overloaded and the client should either connect to a different IP (when multiple targets exist), or reconnect to the same IP when a user has performed an action.",82,null],[4,"OpCode","","Operation codes as part of rfc6455.",null,null],[13,"Continue","","Indicates a continuation frame of a fragmented message.",83,null],[13,"Text","","Indicates a text data frame.",83,null],[13,"Binary","","Indicates a binary data frame.",83,null],[13,"Close","","Indicates a close control frame.",83,null],[13,"Ping","","Indicates a ping control frame.",83,null],[13,"Pong","","Indicates a pong control frame.",83,null],[13,"Bad","","Indicates an invalid opcode was received.",83,null],[4,"ProtocolError","","Websocket protocol errors",null,null],[13,"UnmaskedFrame","","Received an unmasked frame from client",84,null],[13,"MaskedFrame","","Received a masked frame from server",84,null],[13,"InvalidOpcode","","Encountered invalid opcode",84,null],[13,"InvalidLength","","Invalid control frame length",84,null],[13,"BadOpCode","","Bad web socket op code",84,null],[13,"Overflow","","A payload reached size limit.",84,null],[13,"NoContinuation","","Continuation is not supported",84,null],[13,"BadEncoding","","Bad utf-8 encoding",84,null],[13,"Payload","","Payload error",84,null],[4,"HandshakeError","","Websocket handshake errors",null,null],[13,"GetMethodRequired","","Only get method is allowed",85,null],[13,"NoWebsocketUpgrade","","Upgrade header if not set to websocket",85,null],[13,"NoConnectionUpgrade","","Connection header is not set to upgrade",85,null],[13,"NoVersionHeader","","Websocket version header is not set",85,null],[13,"UnsupportedVersion","","Unsupported websocket version",85,null],[13,"BadWebsocketKey","","Websocket key is not set or wrong",85,null],[4,"Message","","`WebSocket` Message",null,null],[13,"Text","","",86,null],[13,"Binary","","",86,null],[13,"Ping","","",86,null],[13,"Pong","","",86,null],[13,"Close","","",86,null],[5,"start","","Do websocket handshake and start actor",null,{"inputs":[{"name":"httprequest"},{"name":"a"}],"output":{"generics":["httpresponse","error"],"name":"result"}}],[5,"handshake","","Prepare `WebSocket` handshake response.",null,{"inputs":[{"name":"httprequest"}],"output":{"generics":["httpresponsebuilder","handshakeerror"],"name":"result"}}],[11,"cause","","",81,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",81,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",81,{"inputs":[{"name":"error"}],"output":{"name":"clienterror"}}],[11,"from","","",81,{"inputs":[{"name":"urlparseerror"}],"output":{"name":"clienterror"}}],[11,"from","","",81,{"inputs":[{"name":"sendrequesterror"}],"output":{"name":"clienterror"}}],[11,"from","","",81,{"inputs":[{"name":"protocolerror"}],"output":{"name":"clienterror"}}],[11,"from","","",81,{"inputs":[{"name":"error"}],"output":{"name":"clienterror"}}],[11,"new","","Create new websocket connection",87,{"inputs":[{"name":"s"}],"output":{"name":"client"}}],[11,"with_connector","","Create new websocket connection with custom `ClientConnector`",87,{"inputs":[{"name":"s"},{"generics":["unsync","clientconnector"],"name":"addr"}],"output":{"name":"client"}}],[11,"protocols","","Set supported websocket protocols",87,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"self"}}],[11,"cookie","","Set cookie for handshake request",87,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"self"}}],[11,"origin","","Set request Origin",87,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"self"}}],[11,"max_frame_size","","Set max frame size",87,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"write_buffer_capacity","","Set write buffer capacity",87,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"header","","Set request header",87,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"timeout","","Set websocket handshake timeout",87,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"connect","","Connect to websocket server and do ws handshake",87,{"inputs":[{"name":"self"}],"output":{"name":"clienthandshake"}}],[11,"timeout","","Set handshake timeout",88,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"conn_timeout","","Set connection timeout",88,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"poll","","",88,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"text","","Send text frame",90,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"binary","","Send binary frame",90,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"ping","","Send ping frame",90,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"pong","","Send pong frame",90,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"close","","Send close frame",90,{"inputs":[{"name":"self"},{"name":"closecode"},{"name":"str"}],"output":null}],[11,"stop","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"terminate","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"state","","",91,{"inputs":[{"name":"self"}],"output":{"name":"actorstate"}}],[11,"spawn","","",91,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"spawnhandle"}}],[11,"wait","","",91,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"cancel_future","","",91,{"inputs":[{"name":"self"},{"name":"spawnhandle"}],"output":{"name":"bool"}}],[11,"new","","",91,{"inputs":[{"name":"httprequest"},{"name":"a"}],"output":{"name":"websocketcontext"}}],[11,"from_request","","",91,{"inputs":[{"name":"httprequest"}],"output":{"name":"websocketcontext"}}],[11,"actor","","",91,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"websocketcontext"}}],[11,"state","","Shared application state",91,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"request","","Incoming request",91,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"text","","Send text frame",91,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"binary","","Send binary frame",91,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"ping","","Send ping frame",91,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"pong","","Send pong frame",91,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"close","","Send close frame",91,{"inputs":[{"name":"self"},{"name":"closecode"},{"name":"str"}],"output":null}],[11,"drain","","Returns drain future",91,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"connected","","Check if connection still open",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"handle","","Handle of the running future",91,{"inputs":[{"name":"self"}],"output":{"name":"spawnhandle"}}],[11,"pack","","",91,{"inputs":[{"name":"m"},{"generics":["sender"],"name":"option"}],"output":{"name":"syncenvelope"}}],[11,"from","actix_web","",3,{"inputs":[{"name":"websocketcontext"}],"output":{"name":"body"}}],[11,"fmt","actix_web::ws","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unpack","","Destruct frame",92,null],[11,"close","","Create a new Close control frame.",92,{"inputs":[{"name":"closecode"},{"name":"str"},{"name":"bool"}],"output":{"name":"binary"}}],[11,"parse","","Parse the input stream into a frame.",92,{"inputs":[{"name":"payloadhelper"},{"name":"bool"},{"name":"usize"}],"output":{"generics":["option","protocolerror"],"name":"poll"}}],[11,"message","","Generate binary representation",92,{"inputs":[{"name":"b"},{"name":"opcode"},{"name":"bool"},{"name":"bool"}],"output":{"name":"binary"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"frame"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"opcode"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",83,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from","","",83,{"inputs":[{"name":"u8"}],"output":{"name":"opcode"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"closecode"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"closecode"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"closecode"}}],[11,"into","","",82,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from","","",82,{"inputs":[{"name":"u16"}],"output":{"name":"closecode"}}],[11,"cause","","",84,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",84,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",84,{"inputs":[{"name":"payloaderror"}],"output":{"name":"protocolerror"}}],[11,"cause","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"handshakeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"error_response","","",85,{"inputs":[{"name":"self"}],"output":{"name":"httpresponse"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"bool"}}],[11,"new","","Create new websocket frames stream",93,{"inputs":[{"name":"s"}],"output":{"name":"wsstream"}}],[11,"max_size","","Set max frame size",93,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"poll","","",93,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"Ok","actix_web","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"Created","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"Accepted","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"NonAuthoritativeInformation","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"NoContent","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"ResetContent","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"PartialContent","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"MultiStatus","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"AlreadyReported","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"MultipleChoices","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"MovedPermanenty","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"MovedPermanently","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"Found","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"SeeOther","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"NotModified","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"UseProxy","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"TemporaryRedirect","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"PermanentRedirect","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"BadRequest","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"NotFound","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"Unauthorized","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"PaymentRequired","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"Forbidden","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"MethodNotAllowed","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"NotAcceptable","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"ProxyAuthenticationRequired","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"RequestTimeout","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"Conflict","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"Gone","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"LengthRequired","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"PreconditionFailed","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"PayloadTooLarge","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"UriTooLong","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"UnsupportedMediaType","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"RangeNotSatisfiable","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"ExpectationFailed","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"InternalServerError","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"NotImplemented","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"BadGateway","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"ServiceUnavailable","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"GatewayTimeout","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"VersionNotSupported","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"VariantAlsoNegotiates","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"InsufficientStorage","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[11,"LoopDetected","","",9,{"inputs":[],"output":{"name":"httpresponsebuilder"}}],[0,"dev","","The `actix-web` prelude for library developers",null,null],[3,"Drain","actix_web::dev","",null,null],[3,"FormConfig","","Form extractor configuration",null,null],[3,"PayloadConfig","","Payload configuration for request's payload.",null,null],[3,"Reply","","Represents response process.",null,null],[3,"MessageBody","","Future that resolves to a complete http message body.",null,null],[3,"UrlEncoded","","Future that resolves to a parsed urlencoded values.",null,null],[3,"HttpResponseBuilder","","An HTTP response builder",null,null],[3,"ConnectionInfo","","`HttpRequest` connection information",null,null],[3,"JsonBody","","Request payload json parser that resolves to a deserialized `T` value.",null,null],[3,"JsonConfig","","Json extractor configuration",null,null],[3,"Params","","Route match information",null,null],[3,"ResourceHandler","","Resource is an entry in route table which corresponds to requested URL.",null,null],[3,"Route","","Resource route definition",null,null],[3,"Resource","","Reslource type describes an entry in resources table",null,null],[3,"Router","","Interface for application router.",null,null],[4,"ResourceType","","Resource type",null,null],[13,"Normal","","Normal resource",94,null],[13,"Default","","Resource for applicaiton default handler",94,null],[13,"External","","External resource",94,null],[13,"Unset","","Unknown resource type",94,null],[6,"BodyStream","","Type represent streaming body",null,null],[8,"Handler","","Trait defines object that could be registered as route handler",null,null],[16,"Result","","The type of value that handler will return.",95,null],[10,"handle","","Handle request",95,null],[8,"FromParam","","A trait to abstract the idea of creating a new instance of a type from a path parameter.",null,null],[16,"Err","","The associated error which can be returned from parsing.",96,null],[10,"from_param","","Parses a string `s` to return a value of this type.",96,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"http","actix_web","Various HTTP related types",null,null],[3,"Method","actix_web::http","The Request Method (VERB)",null,null],[3,"StatusCode","","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[3,"Version","","Represents a version of the HTTP spec.",null,null],[3,"Cookie","","Representation of an HTTP cookie.",null,null],[3,"CookieBuilder","","Structure that follows the builder pattern for building `Cookie` structs.",null,null],[3,"HttpRange","","HTTP Range header representation.",null,null],[12,"start","","",97,null],[12,"length","","",97,null],[3,"NormalizePath","","Path normalization helper",null,null],[4,"ContentEncoding","","Represents supported types of content encodings",null,null],[13,"Auto","","Automatically select encoding based on encoding negotiation",98,null],[13,"Br","","A format using the Brotli algorithm",98,null],[13,"Deflate","","A format using the zlib structure with deflate algorithm",98,null],[13,"Gzip","","Gzip algorithm",98,null],[13,"Identity","","Indicates the identity function (i.e. no compression, nor modification)",98,null],[4,"ConnectionType","","Represents various types of connection",null,null],[13,"Close","","Close connection after response",99,null],[13,"KeepAlive","","Keep connection alive after response",99,null],[13,"Upgrade","","Connection is upgraded to different type",99,null],[0,"header","","",null,null],[4,"ContentEncoding","actix_web::http::header","Represents supported types of content encodings",null,null],[13,"Auto","","Automatically select encoding based on encoding negotiation",98,null],[13,"Br","","A format using the Brotli algorithm",98,null],[13,"Deflate","","A format using the zlib structure with deflate algorithm",98,null],[13,"Gzip","","Gzip algorithm",98,null],[13,"Identity","","Indicates the identity function (i.e. no compression, nor modification)",98,null],[6,"FutureResponse","actix_web","Convenience type alias",null,null],[8,"AsyncResponder","","Convenience trait that converts `Future` object to a `Boxed` future",null,null],[10,"responder","","",100,{"inputs":[{"name":"self"}],"output":{"generics":["future"],"name":"box"}}],[8,"FromRequest","","Trait implemented by types that can be extracted from request.",null,null],[16,"Config","","Configuration for conversion process",101,null],[16,"Result","","Future that resolves to a Self",101,null],[10,"from_request","","Convert request to a Self",101,null],[8,"Responder","","Trait implemented by types that generate responses for clients.",null,null],[16,"Item","","The associated item which can be returned.",102,null],[16,"Error","","The associated error which can be returned.",102,null],[10,"respond_to","","Convert itself to `Reply` or `Error`.",102,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"name":"result"}}],[8,"HttpMessage","","Trait that implements general purpose operations on http messages",null,null],[10,"headers","","Read the message headers.",103,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"content_type","","Read the request content type. If request does not contain Content-Type header, empty str get returned.",103,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"encoding","","Get content type encoding",103,{"inputs":[{"name":"self"}],"output":{"generics":["encodingref","contenttypeerror"],"name":"result"}}],[11,"mime_type","","Convert the request content type to a known mime type.",103,{"inputs":[{"name":"self"}],"output":{"generics":["option","contenttypeerror"],"name":"result"}}],[11,"chunked","","Check if request has chunked transfer encoding",103,{"inputs":[{"name":"self"}],"output":{"generics":["bool","parseerror"],"name":"result"}}],[11,"range","","Parses Range HTTP header string as per RFC 2616. `size` is full size of response (file).",103,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["vec","httprangeerror"],"name":"result"}}],[11,"body","","Load http message body.",103,{"inputs":[{"name":"self"}],"output":{"name":"messagebody"}}],[11,"urlencoded","","Parse `application/x-www-form-urlencoded` encoded request's body. Return `UrlEncoded` future. Form can be deserialized to any type that implements `Deserialize` trait from serde.",103,{"inputs":[{"name":"self"}],"output":{"name":"urlencoded"}}],[11,"json","","Parse `application/json` encoded body. Return `JsonBody<T>` future. It resolves to a `T` value.",103,{"inputs":[{"name":"self"}],"output":{"name":"jsonbody"}}],[11,"multipart","","Return stream to http payload processes as multipart.",103,{"inputs":[{"name":"self"}],"output":{"name":"multipart"}}],[14,"header","","",null,null],[11,"new","actix_web::dev","",104,{"inputs":[{"name":"receiver"}],"output":{"name":"self"}}],[11,"poll","","",104,null],[11,"limit","","Change max size of payload. By default max size is 256Kb",105,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"default","","",105,{"inputs":[],"output":{"name":"self"}}],[11,"limit","","Change max size of payload. By default max size is 256Kb",106,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"mimetype","","Set required mime-type of the request. By default mime type is not enforced.",106,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"self"}}],[11,"default","","",106,{"inputs":[],"output":{"name":"self"}}],[11,"async","","Create async response",107,{"inputs":[{"name":"f"}],"output":{"name":"reply"}}],[11,"response","","Send response",107,{"inputs":[{"name":"r"}],"output":{"name":"reply"}}],[11,"respond_to","","",107,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"generics":["reply","error"],"name":"result"}}],[11,"from","","",107,{"inputs":[{"name":"httpresponse"}],"output":{"name":"reply"}}],[11,"from","","",107,{"inputs":[{"generics":["reply"],"name":"result"}],"output":{"name":"self"}}],[11,"from","","",107,{"inputs":[{"generics":["httpresponse"],"name":"result"}],"output":{"name":"self"}}],[11,"from","","",107,{"inputs":[{"generics":["future"],"name":"box"}],"output":{"name":"reply"}}],[11,"fmt","actix_web::error","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","actix_web::http","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","actix_web::error","",24,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"eq","actix_web::http","",108,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"clone","actix_web::error","",24,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"clone","actix_web::http","",109,{"inputs":[{"name":"self"}],"output":{"name":"cookiebuilder"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"cookie"}}],[11,"from_str","","",108,{"inputs":[{"name":"str"}],"output":{"generics":["cookie","parseerror"],"name":"result"}}],[11,"description","actix_web::error","",24,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",24,{"inputs":[{"name":"utf8error"}],"output":{"name":"parseerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","actix_web::http","Formats the cookie `self` as a `Set-Cookie` header value.",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","actix_web::error","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"description","","",23,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",23,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"eq","actix_web::http","",110,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"from_str","","",111,{"inputs":[{"name":"str"}],"output":{"generics":["method"],"name":"result"}}],[11,"from_str","","",110,{"inputs":[{"name":"str"}],"output":{"generics":["statuscode","invalidstatuscode"],"name":"result"}}],[11,"cmp","","",110,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"ordering"}}],[11,"cmp","","",112,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"ordering"}}],[11,"hash","","",110,null],[11,"hash","","",112,null],[11,"hash","","",111,null],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"partial_cmp","","",110,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",110,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"le","","",110,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"gt","","",110,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"ge","","",110,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",112,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",112,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"le","","",112,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"gt","","",112,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ge","","",112,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"default","","",110,{"inputs":[],"output":{"name":"statuscode"}}],[11,"default","","",112,{"inputs":[],"output":{"name":"version"}}],[11,"default","","",111,{"inputs":[],"output":{"name":"method"}}],[11,"try_from","","",110,{"inputs":[{"name":"u16"}],"output":{"generics":["statuscode"],"name":"result"}}],[11,"try_from","","",111,{"inputs":[{"name":"str"}],"output":{"generics":["method"],"name":"result"}}],[11,"try_from","","",110,{"inputs":[{"name":"statuscode"}],"output":{"generics":["statuscode"],"name":"result"}}],[11,"try_from","","",110,{"inputs":[{"name":"str"}],"output":{"generics":["statuscode"],"name":"result"}}],[11,"try_from","","",110,null],[11,"try_from","","",111,{"inputs":[{"name":"method"}],"output":{"generics":["method"],"name":"result"}}],[11,"try_from","","",111,null],[11,"as_ref","","",111,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"httprange"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"contentencoding"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_compression","","",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","",98,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"quality","","default quality value",98,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"from","","",98,{"inputs":[{"name":"str"}],"output":{"name":"contentencoding"}}],[11,"default","","Create default `NormalizePath` instance, append is set to true, merge is set to true and redirect is set to `StatusCode::MOVED_PERMANENTLY`",113,{"inputs":[],"output":{"name":"normalizepath"}}],[11,"new","","Create new `NormalizePath` instance",113,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"statuscode"}],"output":{"name":"normalizepath"}}],[11,"handle","","",113,null],[11,"content_type","actix_web","Read the request content type. If request does not contain Content-Type header, empty str get returned.",103,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"encoding","","Get content type encoding",103,{"inputs":[{"name":"self"}],"output":{"generics":["encodingref","contenttypeerror"],"name":"result"}}],[11,"mime_type","","Convert the request content type to a known mime type.",103,{"inputs":[{"name":"self"}],"output":{"generics":["option","contenttypeerror"],"name":"result"}}],[11,"chunked","","Check if request has chunked transfer encoding",103,{"inputs":[{"name":"self"}],"output":{"generics":["bool","parseerror"],"name":"result"}}],[11,"range","","Parses Range HTTP header string as per RFC 2616. `size` is full size of response (file).",103,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["vec","httprangeerror"],"name":"result"}}],[11,"body","","Load http message body.",103,{"inputs":[{"name":"self"}],"output":{"name":"messagebody"}}],[11,"urlencoded","","Parse `application/x-www-form-urlencoded` encoded request's body. Return `UrlEncoded` future. Form can be deserialized to any type that implements `Deserialize` trait from serde.",103,{"inputs":[{"name":"self"}],"output":{"name":"urlencoded"}}],[11,"json","","Parse `application/json` encoded body. Return `JsonBody<T>` future. It resolves to a `T` value.",103,{"inputs":[{"name":"self"}],"output":{"name":"jsonbody"}}],[11,"multipart","","Return stream to http payload processes as multipart.",103,{"inputs":[{"name":"self"}],"output":{"name":"multipart"}}],[11,"new","actix_web::dev","Create `RequestBody` for request.",114,{"inputs":[{"name":"t"}],"output":{"name":"messagebody"}}],[11,"limit","","Change max size of payload. By default max size is 256Kb",114,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"poll","","",114,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"new","","",115,{"inputs":[{"name":"t"}],"output":{"name":"urlencoded"}}],[11,"limit","","Change max size of payload. By default max size is 256Kb",115,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"poll","","",115,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","actix_web::http","",99,{"inputs":[{"name":"self"}],"output":{"name":"connectiontype"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"connectiontype"}],"output":{"name":"bool"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"status","actix_web::dev","Set HTTP status code of this response.",116,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"self"}}],[11,"version","","Set HTTP version of this response.",116,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"self"}}],[11,"header","","Set a header.",116,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"reason","","Set the custom reason for the response.",116,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"content_encoding","","Set content encoding.",116,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"self"}}],[11,"force_close","","Force close connection, even if it is marked as keep-alive",116,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"chunked","","Enables automatic chunked transfer encoding",116,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"no_chunking","","Force disable chunked encoding",116,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"content_type","","Set response content type",116,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"self"}}],[11,"content_length","","Set content length",116,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"cookie","","Set a cookie",116,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"self"}}],[11,"del_cookie","","Remove cookie, cookie has to be cookie from `HttpRequest::cookies()` method.",116,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"self"}}],[11,"if_true","","This method calls provided closure with builder reference if value is true.",116,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"f"}],"output":{"name":"self"}}],[11,"if_some","","This method calls provided closure with builder reference if value is Some.",116,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"self"}}],[11,"write_buffer_capacity","","Set write buffer capacity",116,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"body","","Set a body and generate `HttpResponse`.",116,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"httpresponse"}}],[11,"streaming","","Set a streaming body and generate `HttpResponse`.",116,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"httpresponse"}}],[11,"json","","Set a json body and generate `HttpResponse`",116,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"httpresponse"}}],[11,"finish","","Set an empty body and generate `HttpResponse`",116,{"inputs":[{"name":"self"}],"output":{"name":"httpresponse"}}],[11,"take","","This method construct new `HttpResponseBuilder`",116,{"inputs":[{"name":"self"}],"output":{"name":"httpresponsebuilder"}}],[11,"respond_to","","",116,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"generics":["httpresponse","error"],"name":"result"}}],[11,"from","","",116,{"inputs":[{"name":"clientresponse"}],"output":{"name":"httpresponsebuilder"}}],[11,"from","","",116,{"inputs":[{"name":"httprequest"}],"output":{"name":"httpresponsebuilder"}}],[11,"new","","Create ConnectionInfo instance for a request.",117,{"inputs":[{"name":"httprequest"}],"output":{"name":"connectioninfo"}}],[11,"scheme","","Scheme of the request.",117,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"host","","Hostname of the request.",117,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"remote","","Remote IP of client initiated HTTP request.",117,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"limit","","Change max size of payload. By default max size is 256Kb",118,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"error_handler","","Set custom error handler",118,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"default","","",118,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create `JsonBody` for request.",119,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"limit","","Change max size of payload. By default max size is 256Kb",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"poll","","",119,{"inputs":[{"name":"self"}],"output":{"generics":["jsonpayloaderror"],"name":"poll"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_empty","","Check if there are any matched patterns",120,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Check number of extracted parameters",120,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","Get matched parameter by name without type conversion",120,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[11,"query","","Get matched `FromParam` compatible parameter by name.",120,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"iter","","Return iterator to items in parameter container",120,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"default","","",121,{"inputs":[],"output":{"name":"self"}}],[11,"name","","Set resource name",121,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"route","","Register a new route and return mutable reference to Route object. Route is used for route configuration, i.e. adding predicates, setting up handler.",121,{"inputs":[{"name":"self"}],"output":{"name":"route"}}],[11,"get","","Register a new `GET` route.",121,{"inputs":[{"name":"self"}],"output":{"name":"route"}}],[11,"post","","Register a new `POST` route.",121,{"inputs":[{"name":"self"}],"output":{"name":"route"}}],[11,"put","","Register a new `PUT` route.",121,{"inputs":[{"name":"self"}],"output":{"name":"route"}}],[11,"delete","","Register a new `DELETE` route.",121,{"inputs":[{"name":"self"}],"output":{"name":"route"}}],[11,"head","","Register a new `HEAD` route.",121,{"inputs":[{"name":"self"}],"output":{"name":"route"}}],[11,"method","","Register a new route and add method check to route.",121,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"route"}}],[11,"h","","Register a new route and add handler object.",121,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"f","","Register a new route and add handler function.",121,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"with","","Register a new route and add handler.",121,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"middleware","","Register a resource middleware",121,{"inputs":[{"name":"self"},{"name":"m"}],"output":null}],[11,"default","","",122,{"inputs":[],"output":{"name":"route"}}],[11,"filter","","Add match predicate to route.",122,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"h","","Set handler object. Usually call to this method is last call during route configuration, so it does not return reference to self.",122,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"f","","Set handler function. Usually call to this method is last call during route configuration, so it does not return reference to self.",122,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"a","","Set async handler function.",122,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"with","","Set handler function, use request extractor for paramters.",122,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"extractorconfig"}}],[11,"with2","","Set handler function, use request extractor for both paramters.",122,null],[11,"with3","","Set handler function, use request extractor for all paramters.",122,null],[11,"new","","Create new router",123,null],[11,"prefix","","Router prefix",123,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"server_settings","","Server settings",123,{"inputs":[{"name":"self"}],"output":{"name":"serversettings"}}],[11,"recognize","","Query for matched resource",123,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"generics":["usize"],"name":"option"}}],[11,"has_route","","Check if application contains matching route.",123,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"resource_path","","Build named resource path.",123,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u"}],"output":{"generics":["string","urlgenerationerror"],"name":"result"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"router"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"resourcetype"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"resourcetype"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"resource"}}],[11,"new","","Parse path pattern and create new `Resource` instance.",124,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"external","","Construct external resource",124,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_prefix","","Parse path pattern and create new `Resource` instance with custom prefix",124,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"name","","Name of the resource",124,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"rtype","","Resource type",124,{"inputs":[{"name":"self"}],"output":{"name":"resourcetype"}}],[11,"pattern","","Path pattern of the resource",124,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_match","","",124,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"match_with_params","","",124,{"inputs":[{"name":"self"},{"name":"str"},{"name":"params"}],"output":{"name":"bool"}}],[11,"resource_path","","Build reousrce path.",124,{"inputs":[{"name":"self"},{"name":"router"},{"name":"u"}],"output":{"generics":["string","urlgenerationerror"],"name":"result"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"resource"}],"output":{"name":"bool"}}],[11,"hash","","",124,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"as_str","actix_web::error","Returns a description of this error as a string",24,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[18,"GET","actix_web::http","GET",111,null],[18,"POST","","POST",111,null],[18,"PUT","","PUT",111,null],[18,"DELETE","","DELETE",111,null],[18,"HEAD","","HEAD",111,null],[18,"OPTIONS","","OPTIONS",111,null],[18,"CONNECT","","CONNECT",111,null],[18,"PATCH","","PATCH",111,null],[18,"TRACE","","TRACE",111,null],[11,"from_bytes","","Converts a slice of bytes to an HTTP method.",111,null],[11,"is_safe","","Whether a method is considered \"safe\", meaning the request is essentially read-only.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result if executed multiple times.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","Return a &str representation of the HTTP method",111,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_u16","","Converts a u16 to a status code.",110,{"inputs":[{"name":"u16"}],"output":{"generics":["statuscode","invalidstatuscode"],"name":"result"}}],[11,"from_bytes","","Converts a &[u8] to a status code",110,null],[11,"as_u16","","Returns the `u16` corresponding to this `StatusCode`.",110,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"is_informational","","Check if status is within 100-199.",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_success","","Check if status is within 200-299.",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_redirection","","Check if status is within 300-399.",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_client_error","","Check if status is within 400-499.",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_server_error","","Check if status is within 500-599.",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[18,"CONTINUE","","100 Continue [RFC7231, Section 6.2.1]",110,null],[18,"SWITCHING_PROTOCOLS","","101 Switching Protocols [RFC7231, Section 6.2.2]",110,null],[18,"PROCESSING","","102 Processing [RFC2518]",110,null],[18,"OK","","200 OK [RFC7231, Section 6.3.1]",110,null],[18,"CREATED","","201 Created [RFC7231, Section 6.3.2]",110,null],[18,"ACCEPTED","","202 Accepted [RFC7231, Section 6.3.3]",110,null],[18,"NON_AUTHORITATIVE_INFORMATION","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",110,null],[18,"NO_CONTENT","","204 No Content [RFC7231, Section 6.3.5]",110,null],[18,"RESET_CONTENT","","205 Reset Content [RFC7231, Section 6.3.6]",110,null],[18,"PARTIAL_CONTENT","","206 Partial Content [RFC7233, Section 4.1]",110,null],[18,"MULTI_STATUS","","207 Multi-Status [RFC4918]",110,null],[18,"ALREADY_REPORTED","","208 Already Reported [RFC5842]",110,null],[18,"IM_USED","","226 IM Used [RFC3229]",110,null],[18,"MULTIPLE_CHOICES","","300 Multiple Choices [RFC7231, Section 6.4.1]",110,null],[18,"MOVED_PERMANENTLY","","301 Moved Permanently [RFC7231, Section 6.4.2]",110,null],[18,"FOUND","","302 Found [RFC7231, Section 6.4.3]",110,null],[18,"SEE_OTHER","","303 See Other [RFC7231, Section 6.4.4]",110,null],[18,"NOT_MODIFIED","","304 Not Modified [RFC7232, Section 4.1]",110,null],[18,"USE_PROXY","","305 Use Proxy [RFC7231, Section 6.4.5]",110,null],[18,"TEMPORARY_REDIRECT","","307 Temporary Redirect [RFC7231, Section 6.4.7]",110,null],[18,"PERMANENT_REDIRECT","","308 Permanent Redirect [RFC7238]",110,null],[18,"BAD_REQUEST","","400 Bad Request [RFC7231, Section 6.5.1]",110,null],[18,"UNAUTHORIZED","","401 Unauthorized [RFC7235, Section 3.1]",110,null],[18,"PAYMENT_REQUIRED","","402 Payment Required [RFC7231, Section 6.5.2]",110,null],[18,"FORBIDDEN","","403 Forbidden [RFC7231, Section 6.5.3]",110,null],[18,"NOT_FOUND","","404 Not Found [RFC7231, Section 6.5.4]",110,null],[18,"METHOD_NOT_ALLOWED","","405 Method Not Allowed [RFC7231, Section 6.5.5]",110,null],[18,"NOT_ACCEPTABLE","","406 Not Acceptable [RFC7231, Section 6.5.6]",110,null],[18,"PROXY_AUTHENTICATION_REQUIRED","","407 Proxy Authentication Required [RFC7235, Section 3.2]",110,null],[18,"REQUEST_TIMEOUT","","408 Request Timeout [RFC7231, Section 6.5.7]",110,null],[18,"CONFLICT","","409 Conflict [RFC7231, Section 6.5.8]",110,null],[18,"GONE","","410 Gone [RFC7231, Section 6.5.9]",110,null],[18,"LENGTH_REQUIRED","","411 Length Required [RFC7231, Section 6.5.10]",110,null],[18,"PRECONDITION_FAILED","","412 Precondition Failed [RFC7232, Section 4.2]",110,null],[18,"PAYLOAD_TOO_LARGE","","413 Payload Too Large [RFC7231, Section 6.5.11]",110,null],[18,"URI_TOO_LONG","","414 URI Too Long [RFC7231, Section 6.5.12]",110,null],[18,"UNSUPPORTED_MEDIA_TYPE","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",110,null],[18,"RANGE_NOT_SATISFIABLE","","416 Range Not Satisfiable [RFC7233, Section 4.4]",110,null],[18,"EXPECTATION_FAILED","","417 Expectation Failed [RFC7231, Section 6.5.14]",110,null],[18,"IM_A_TEAPOT","","418 I'm a teapot [curiously not registered by IANA but RFC2324]",110,null],[18,"MISDIRECTED_REQUEST","","421 Misdirected Request RFC7540, Section 9.1.2",110,null],[18,"UNPROCESSABLE_ENTITY","","422 Unprocessable Entity [RFC4918]",110,null],[18,"LOCKED","","423 Locked [RFC4918]",110,null],[18,"FAILED_DEPENDENCY","","424 Failed Dependency [RFC4918]",110,null],[18,"UPGRADE_REQUIRED","","426 Upgrade Required [RFC7231, Section 6.5.15]",110,null],[18,"PRECONDITION_REQUIRED","","428 Precondition Required [RFC6585]",110,null],[18,"TOO_MANY_REQUESTS","","429 Too Many Requests [RFC6585]",110,null],[18,"REQUEST_HEADER_FIELDS_TOO_LARGE","","431 Request Header Fields Too Large [RFC6585]",110,null],[18,"UNAVAILABLE_FOR_LEGAL_REASONS","","451 Unavailable For Legal Reasons [RFC7725]",110,null],[18,"INTERNAL_SERVER_ERROR","","500 Internal Server Error [RFC7231, Section 6.6.1]",110,null],[18,"NOT_IMPLEMENTED","","501 Not Implemented [RFC7231, Section 6.6.2]",110,null],[18,"BAD_GATEWAY","","502 Bad Gateway [RFC7231, Section 6.6.3]",110,null],[18,"SERVICE_UNAVAILABLE","","503 Service Unavailable [RFC7231, Section 6.6.4]",110,null],[18,"GATEWAY_TIMEOUT","","504 Gateway Timeout [RFC7231, Section 6.6.5]",110,null],[18,"HTTP_VERSION_NOT_SUPPORTED","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",110,null],[18,"VARIANT_ALSO_NEGOTIATES","","506 Variant Also Negotiates [RFC2295]",110,null],[18,"INSUFFICIENT_STORAGE","","507 Insufficient Storage [RFC4918]",110,null],[18,"LOOP_DETECTED","","508 Loop Detected [RFC5842]",110,null],[18,"NOT_EXTENDED","","510 Not Extended [RFC2774]",110,null],[18,"NETWORK_AUTHENTICATION_REQUIRED","","511 Network Authentication Required [RFC6585]",110,null],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",110,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"as_str","","Returns a &str representation of the `StatusCode`",110,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[18,"HTTP_09","","`HTTP/0.9`",112,null],[18,"HTTP_10","","`HTTP/1.0`",112,null],[18,"HTTP_11","","`HTTP/1.1`",112,null],[18,"HTTP_2","","`HTTP/2.0`",112,null],[11,"new","","Creates a new `Cookie` with the given name and value.",108,{"inputs":[{"name":"n"},{"name":"v"}],"output":{"name":"cookie"}}],[11,"named","","Creates a new `Cookie` with the given name and an empty value.",108,{"inputs":[{"name":"n"}],"output":{"name":"cookie"}}],[11,"build","","Creates a new `CookieBuilder` instance from the given key and value strings.",108,{"inputs":[{"name":"n"},{"name":"v"}],"output":{"name":"cookiebuilder"}}],[11,"parse","","Parses a `Cookie` from the given HTTP cookie header value string. Does not perform any percent-decoding.",108,{"inputs":[{"name":"s"}],"output":{"generics":["cookie","parseerror"],"name":"result"}}],[11,"parse_encoded","","Parses a `Cookie` from the given HTTP cookie header value string where the name and value fields are percent-encoded. Percent-decodes the name/value fields.",108,{"inputs":[{"name":"s"}],"output":{"generics":["cookie","parseerror"],"name":"result"}}],[11,"encoded","","Wraps `self` in an `EncodedCookie`: a cost-free wrapper around `Cookie` whose `Display` implementation percent-encodes the name and value of the wrapped `Cookie`.",108,{"inputs":[{"name":"self"}],"output":{"name":"encodedcookie"}}],[11,"into_owned","","Converts `self` into a `Cookie` with a static lifetime. This method results in at most one allocation.",108,{"inputs":[{"name":"self"}],"output":{"name":"cookie"}}],[11,"name","","Returns the name of `self`.",108,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"value","","Returns the value of `self`.",108,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"name_value","","Returns the name and value of `self` as a tuple of `(name, value)`.",108,null],[11,"http_only","","Returns whether this cookie was marked `HttpOnly` or not.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"secure","","Returns whether this cookie was marked `Secure` or not.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"same_site","","Returns the `SameSite` attribute of this cookie if one was specified.",108,{"inputs":[{"name":"self"}],"output":{"generics":["samesite"],"name":"option"}}],[11,"max_age","","Returns the specified max-age of the cookie if one was specified.",108,{"inputs":[{"name":"self"}],"output":{"generics":["duration"],"name":"option"}}],[11,"path","","Returns the `Path` of the cookie if one was specified.",108,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"domain","","Returns the `Domain` of the cookie if one was specified.",108,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"expires","","Returns the `Expires` time of the cookie if one was specified.",108,{"inputs":[{"name":"self"}],"output":{"generics":["tm"],"name":"option"}}],[11,"set_name","","Sets the name of `self` to `name`.",108,null],[11,"set_value","","Sets the value of `self` to `value`.",108,null],[11,"set_http_only","","Sets the value of `http_only` in `self` to `value`.",108,null],[11,"set_secure","","Sets the value of `secure` in `self` to `value`.",108,null],[11,"set_same_site","","Sets the value of `same_site` in `self` to `value`.",108,null],[11,"set_max_age","","Sets the value of `max_age` in `self` to `value`.",108,null],[11,"set_path","","Sets the `path` of `self` to `path`.",108,null],[11,"set_domain","","Sets the `domain` of `self` to `domain`.",108,null],[11,"set_expires","","Sets the expires field of `self` to `time`.",108,null],[11,"make_permanent","","Makes `self` a \"permanent\" cookie by extending its expiration and max age 20 years into the future.",108,null],[11,"name_raw","","Returns the name of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, returns `None`.",108,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"value_raw","","Returns the value of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, returns `None`.",108,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"path_raw","","Returns the `Path` of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, or if `self` doesn't contain a `Path`, or if the `Path` has changed since parsing, returns `None`.",108,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"domain_raw","","Returns the `Domain` of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, or if `self` doesn't contain a `Domain`, or if the `Domain` has changed since parsing, returns `None`.",108,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"new","","Creates a new `CookieBuilder` instance from the given name and value.",109,{"inputs":[{"name":"n"},{"name":"v"}],"output":{"name":"cookiebuilder"}}],[11,"expires","","Sets the `expires` field in the cookie being built.",109,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"cookiebuilder"}}],[11,"max_age","","Sets the `max_age` field in the cookie being built.",109,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"cookiebuilder"}}],[11,"domain","","Sets the `domain` field in the cookie being built.",109,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"cookiebuilder"}}],[11,"path","","Sets the `path` field in the cookie being built.",109,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"cookiebuilder"}}],[11,"secure","","Sets the `secure` field in the cookie being built.",109,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"cookiebuilder"}}],[11,"http_only","","Sets the `http_only` field in the cookie being built.",109,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"cookiebuilder"}}],[11,"same_site","","Sets the `same_site` field in the cookie being built.",109,{"inputs":[{"name":"self"},{"name":"samesite"}],"output":{"name":"cookiebuilder"}}],[11,"permanent","","Makes the cookie being built 'permanent' by extending its expiration and max age 20 years into the future.",109,{"inputs":[{"name":"self"}],"output":{"name":"cookiebuilder"}}],[11,"finish","","Finishes building and returns the built `Cookie`.",109,{"inputs":[{"name":"self"}],"output":{"name":"cookie"}}],[11,"parse","","Parses Range HTTP header string as per RFC 2616.",97,{"inputs":[{"name":"str"},{"name":"u64"}],"output":{"generics":["vec","httprangeparseerror"],"name":"result"}}]],"paths":[[3,"Form"],[3,"Json"],[4,"Binary"],[4,"Body"],[4,"Either"],[3,"App"],[3,"HttpContext"],[3,"Path"],[3,"Query"],[3,"HttpResponse"],[3,"State"],[3,"HttpRequest"],[3,"ClientConnectorStats"],[4,"ClientConnectorError"],[4,"SendRequestError"],[3,"Connect"],[3,"Pause"],[3,"ClientConnector"],[3,"Connection"],[3,"SendRequest"],[3,"ClientRequest"],[3,"ClientRequestBuilder"],[3,"ClientResponse"],[4,"UrlParseError"],[4,"CookieParseError"],[4,"ParseError"],[4,"PayloadError"],[4,"HttpRangeError"],[4,"MultipartError"],[4,"ExpectError"],[4,"ContentTypeError"],[4,"UrlencodedError"],[4,"JsonPayloadError"],[4,"UriSegmentError"],[4,"UrlGenerationError"],[8,"ResponseError"],[3,"Error"],[3,"InternalError"],[3,"NamedFile"],[3,"ChunkedReadFile"],[3,"Directory"],[3,"StaticFiles"],[4,"Started"],[4,"Response"],[4,"Finished"],[3,"Logger"],[4,"CorsError"],[4,"AllOrSome"],[3,"Cors"],[3,"CorsBuilder"],[4,"CsrfError"],[3,"CsrfFilter"],[3,"DefaultHeaders"],[3,"ErrorHandlers"],[8,"RequestIdentity"],[8,"Identity"],[8,"IdentityPolicy"],[3,"IdentityService"],[3,"CookieIdentityPolicy"],[4,"CookieSessionError"],[8,"RequestSession"],[3,"Session"],[3,"SessionStorage"],[3,"CookieSessionBackend"],[8,"Middleware"],[4,"MultipartItem"],[3,"Multipart"],[3,"Field"],[8,"Predicate"],[3,"AnyPredicate"],[3,"AllPredicate"],[3,"StopServer"],[4,"KeepAlive"],[3,"ServerSettings"],[3,"HttpServer"],[8,"HttpHandler"],[8,"IntoHttpHandler"],[3,"TestServer"],[3,"TestServerBuilder"],[3,"TestApp"],[3,"TestRequest"],[4,"ClientError"],[4,"CloseCode"],[4,"OpCode"],[4,"ProtocolError"],[4,"HandshakeError"],[4,"Message"],[3,"Client"],[3,"ClientHandshake"],[3,"ClientReader"],[3,"ClientWriter"],[3,"WebsocketContext"],[3,"Frame"],[3,"WsStream"],[4,"ResourceType"],[8,"Handler"],[8,"FromParam"],[3,"HttpRange"],[4,"ContentEncoding"],[4,"ConnectionType"],[8,"AsyncResponder"],[8,"FromRequest"],[8,"Responder"],[8,"HttpMessage"],[3,"Drain"],[3,"FormConfig"],[3,"PayloadConfig"],[3,"Reply"],[3,"Cookie"],[3,"CookieBuilder"],[3,"StatusCode"],[3,"Method"],[3,"Version"],[3,"NormalizePath"],[3,"MessageBody"],[3,"UrlEncoded"],[3,"HttpResponseBuilder"],[3,"ConnectionInfo"],[3,"JsonConfig"],[3,"JsonBody"],[3,"Params"],[3,"ResourceHandler"],[3,"Route"],[3,"Router"],[3,"Resource"]]};
searchIndex["adler32"] = {"doc":"A minimal implementation of Adler32 for Rust.","items":[[3,"RollingAdler32","adler32","A rolling version of the Adler32 hash, which can 'forget' past bytes.",null,null],[5,"adler32","","Consume a Read object and returns the Adler32 hash.",null,{"inputs":[{"name":"r"}],"output":{"generics":["u32"],"name":"result"}}],[11,"new","","Creates an empty Adler32 context (with hash 1).",0,{"inputs":[],"output":{"name":"rollingadler32"}}],[11,"from_value","","Creates an Adler32 context with the given initial value.",0,{"inputs":[{"name":"u32"}],"output":{"name":"rollingadler32"}}],[11,"from_buffer","","Convenience function initializing a context from the hash of a buffer.",0,null],[11,"hash","","Returns the current hash.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"remove","","Removes the given `byte` that was fed to the algorithm `size` bytes ago.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"}],"output":null}],[11,"update","","Feeds a new `byte` to the algorithm to update the hash.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"update_buffer","","Feeds a vector of bytes to the algorithm to update the hash.",0,null]],"paths":[[3,"RollingAdler32"]]};
searchIndex["aho_corasick"] = {"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"generics":["dense"],"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"dense"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sparse"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["antidote"] = {"doc":"Mutex and RwLock types that do not poison themselves.","items":[[3,"WaitTimeoutResult","antidote","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",null,null],[3,"Mutex","","Like `std::sync::Mutex` except that it does not poison itself.",null,null],[3,"MutexGuard","","Like `std::sync::MutexGuard`.",null,null],[3,"Condvar","","Like `std::sync::Condvar`.",null,null],[3,"TryLockError","","Like `std::sync::TryLockError`.",null,null],[3,"RwLock","","Like `std::sync::RwLock` except that it does not poison itself.",null,null],[3,"RwLockReadGuard","","Like `std::sync::RwLockReadGuard`.",null,null],[3,"RwLockWriteGuard","","Like `std::sync::RwLockWriteGuard`.",null,null],[6,"TryLockResult","","Like `std::sync::TryLockResult`.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Like `std::sync::Mutex::new`.",0,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"into_inner","","Like `std::sync::Mutex::into_inner`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","Like `std::sync::Mutex::lock`.",0,{"inputs":[{"name":"self"}],"output":{"name":"mutexguard"}}],[11,"try_lock","","Like `std::sync::Mutex::try_lock`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["mutexguard"],"name":"trylockresult"}}],[11,"get_mut","","Like `std::sync::Mutex::get_mut`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Like `std::sync::Condvar::new`.",2,{"inputs":[],"output":{"name":"condvar"}}],[11,"wait","","Like `std::sync::Condvar::wait`.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"}],"output":{"name":"mutexguard"}}],[11,"wait_timeout","","Like `std::sync::Condvar::wait_timeout`.",2,null],[11,"notify_one","","Like `std::sync::Condvar::notify_one`.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"notify_all","","Like `std::sync::Condvar::notify_all`.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Like `std::sync::RwLock::new`.",4,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"into_inner","","Like `std::sync::RwLock::into_inner`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read","","Like `std::sync::RwLock::read`.",4,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read","","Like `std::sync::RwLock::try_read`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockreadguard"],"name":"trylockresult"}}],[11,"write","","Like `std::sync::RwLock::write`.",4,{"inputs":[{"name":"self"}],"output":{"name":"rwlockwriteguard"}}],[11,"try_write","","Like `std::sync::RwLock::try_write`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockwriteguard"],"name":"trylockresult"}}],[11,"get_mut","","Like `std::sync::RwLock::get_mut`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"waittimeoutresult"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[3,"Mutex"],[3,"MutexGuard"],[3,"Condvar"],[3,"TryLockError"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"WaitTimeoutResult"]]};
searchIndex["argon2rs"] = {"doc":"","items":[[3,"Argon2","argon2rs","Main entry point for running Argon2 on customized parameters (cf. note for `Argon2::new`).",null,null],[4,"ParamErr","","",null,null],[13,"TooFewPasses","","",0,null],[13,"TooFewLanes","","",0,null],[13,"TooManyLanes","","",0,null],[13,"MinKiB","","",0,null],[4,"Variant","","",null,null],[13,"Argon2d","","",1,null],[13,"Argon2i","","",1,null],[5,"argon2d_simple","","Convenience wrapper around Argon2d for the majority of use cases where only a password and salt are supplied. Note that a salt between 8 and 2^32-1 bytes must be provided.",null,null],[5,"argon2i_simple","","Convenience wrapper around Argon2i for the majority of use cases where only a password and salt are supplied. Note that a salt between 8 and 2^32-1 bytes must be provided.",null,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"paramerr"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"paramerr"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"paramerr"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"default","","Returns an `Argon2` set to default input parameters. See below for a description of these parameters.",2,{"inputs":[{"name":"variant"}],"output":{"name":"argon2"}}],[11,"new","","Use this to customize Argon2's time and memory cost parameters. Adjusting any of these will affect the value of the final hash result.",2,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"variant"}],"output":{"generics":["argon2","paramerr"],"name":"result"}}],[11,"hash","","Runs the selected Argon2 variant over provided inputs, writing the final hash to the byte slice `out`. Note that the output length is assumed to be `out.len()` and must be between 4 and 2^32 - 1. The inputs are:",2,null],[11,"params","","Provides read-only access to `(variant, kibbibytes, passes, lanes)`.",2,null],[0,"verifier","","",null,null],[3,"Encoded","argon2rs::verifier","Represents a single Argon2 hashing session. A hash session comprises of the hash algorithm parameters, salt, key, and data used to hash a given input.",null,null],[4,"DecodeError","","",null,null],[13,"ParseError","","Byte position of first parse error",3,null],[13,"InvalidParams","","Invalid Argon2 parameters given in encoding",3,null],[5,"constant_eq","","Compares two byte arrays for equality. Assumes that both are already of equal length.",null,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"decodeerror"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_u8","","Reconstruct a previous hash session from serialized bytes.",4,null],[11,"to_u8","","Serialize this hashing session into raw bytes that can later be recovered by `Encoded::from_u8`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"new","","Generates a new hashing session from password, salt, and other byte input.  Parameters are:",4,null],[11,"default2i","","Same as `Encoded::new`, but with the default Argon2i hash algorithm parameters.",4,null],[11,"default2d","","Same as `Encoded::new`, but with the default Argon2d hash algorithm parameters.",4,null],[11,"verify","","Verifies password input against the hash that was previously created in this hashing session.",4,null],[0,"defaults","argon2rs","",null,null],[17,"PASSES","argon2rs::defaults","",null,null],[17,"KIB","","",null,null],[17,"LANES","","",null,null],[17,"LENGTH","","",null,null]],"paths":[[4,"ParamErr"],[4,"Variant"],[3,"Argon2"],[4,"DecodeError"],[3,"Encoded"]]};
searchIndex["arrayvec"] = {"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[3,"ArrayString","arrayvec","A string with a fixed capacity.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[11,"default","","Return an empty `ArrayString`",0,{"inputs":[],"output":{"name":"arraystring"}}],[11,"new","","Create a new empty `ArrayString`.",0,{"inputs":[],"output":{"name":"arraystring"}}],[11,"from","","Create a new `ArrayString` from a `str`.",0,{"inputs":[{"name":"str"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",0,{"inputs":[{"name":"a"}],"output":{"generics":["utf8error"],"name":"result"}}],[11,"capacity","","Return the capacity of the `ArrayString`.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayString` is completely filled.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Adds the given char to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"try_push","","Adds the given char to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"push_str","","Adds the given string slice to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"try_push_str","","Adds the given string slice to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"pop","","Removes the last character from the string and returns it.",0,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"truncate","","Shortens this `ArrayString` to the specified length.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remove","","Removes a `char` from this `ArrayString` at a byte position and returns it.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"clear","","Make the string empty.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"set_len","","Set the strings’s length.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_str","","Return a string slice of the whole `ArrayString`.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_char","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_str","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"arraystring"}}],[11,"clone_from","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"new","","Create a new `CapacityError` from `element`.",1,{"inputs":[{"name":"t"}],"output":{"name":"capacityerror"}}],[11,"element","","Extract the overflowing element",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",1,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array’s element type",2,null],[8,"RangeArgument","","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"end","","End index (exclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new empty `ArrayVec`.",4,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"len","","Return the number of elements in the `ArrayVec`.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Return the capacity of the `ArrayVec`.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayVec` is completely filled.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push `element` to the end of the vector.",4,null],[11,"try_push","","Push `element` to the end of the vector.",4,null],[11,"push_unchecked","","Push `element` to the end of the vector without checking the capacity.",4,null],[11,"insert","","Insert `element` at position `index`.",4,null],[11,"try_insert","","Insert `element` at position `index`.",4,null],[11,"pop","","Remove the last element in the vector and return it.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",4,null],[11,"swap_pop","","Remove the element at `index` and swap the last element into its place.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"remove","","Remove the element at `index` and shift down the following elements.",4,null],[11,"pop_at","","Remove the element at `index` and shift down the following elements.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clear","","Remove all elements in the vector.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"retain","","Retains only the elements specified by the predicate.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_len","","Set the vector’s length without dropping or moving out elements",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"as_slice","","Return a slice containing all elements of the vector.",4,null],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"from","","",4,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"into_iter","","",4,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Return an empty array",4,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"name":"ordering"}}],[11,"start","","Start index (inclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"end","","End index (exclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}]],"paths":[[3,"ArrayString"],[3,"CapacityError"],[8,"Array"],[8,"RangeArgument"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["ascii_utils"] = {"doc":"Handles ASCII characters.","items":[[4,"AsciiError","ascii_utils","",null,null],[13,"ControlChar","","",0,null],[13,"NonAscii","","",0,null],[5,"check_ascii_printable","","Reports an error wheter the string has a non-ASCII character or any ASCII control character.",null,{"inputs":[{"name":"str"}],"output":{"generics":["asciierror"],"name":"result"}}],[0,"table","","Defines the ASCII control characters.",null,null],[17,"NUL","ascii_utils::table","Null char",null,null],[17,"NUL_AS_CHAR","","",null,null],[17,"SOH","","Start of Heading",null,null],[17,"SOH_AS_CHAR","","",null,null],[17,"STX","","Start of Text",null,null],[17,"STX_AS_CHAR","","",null,null],[17,"ETX","","End of Text",null,null],[17,"ETX_AS_CHAR","","",null,null],[17,"EOT","","End of Transmission",null,null],[17,"EOT_AS_CHAR","","",null,null],[17,"ENQ","","Enquiry",null,null],[17,"ENQ_AS_CHAR","","",null,null],[17,"ACK","","Acknowledgment",null,null],[17,"ACK_AS_CHAR","","",null,null],[17,"BEL","","Bell",null,null],[17,"BEL_AS_CHAR","","",null,null],[17,"BS","","Back Space",null,null],[17,"BS_AS_CHAR","","",null,null],[17,"HT","","Horizontal Tab",null,null],[17,"HT_AS_CHAR","","",null,null],[17,"LF","","Line Feed",null,null],[17,"LF_AS_CHAR","","",null,null],[17,"VT","","Vertical Tab",null,null],[17,"VT_AS_CHAR","","",null,null],[17,"FF","","Form Feed",null,null],[17,"FF_AS_CHAR","","",null,null],[17,"CR","","Carriage Return",null,null],[17,"CR_AS_CHAR","","",null,null],[17,"SO","","Shift Out / X-On",null,null],[17,"SO_AS_CHAR","","",null,null],[17,"SI","","Shift In / X-Off",null,null],[17,"SI_AS_CHAR","","",null,null],[17,"DLE","","Data Line Escape",null,null],[17,"DLE_AS_CHAR","","",null,null],[17,"DC1","","Device Control 1 (oft. XON)",null,null],[17,"DC1_AS_CHAR","","",null,null],[17,"DC2","","Device Control 2",null,null],[17,"DC2_AS_CHAR","","",null,null],[17,"DC3","","Device Control 3 (oft. XOFF)",null,null],[17,"DC3_AS_CHAR","","",null,null],[17,"DC4","","Device Control 4",null,null],[17,"DC4_AS_CHAR","","",null,null],[17,"NAK","","Negative Acknowledgement",null,null],[17,"NAK_AS_CHAR","","",null,null],[17,"SYN","","Synchronous Idle",null,null],[17,"SYN_AS_CHAR","","",null,null],[17,"ETB","","End of Transmit Block",null,null],[17,"ETB_AS_CHAR","","",null,null],[17,"CAN","","Cancel",null,null],[17,"CAN_AS_CHAR","","",null,null],[17,"EM","","End of Medium",null,null],[17,"EM_AS_CHAR","","",null,null],[17,"SUB","","Substitute",null,null],[17,"SUB_AS_CHAR","","",null,null],[17,"ESC","","Escape",null,null],[17,"ESC_AS_CHAR","","",null,null],[17,"FS","","File Separator",null,null],[17,"FS_AS_CHAR","","",null,null],[17,"GS","","Group Separator",null,null],[17,"GS_AS_CHAR","","",null,null],[17,"RS","","Record Separator",null,null],[17,"RS_AS_CHAR","","",null,null],[17,"US","","Unit Separator",null,null],[17,"US_AS_CHAR","","",null,null],[17,"DELETE","","Delete",null,null],[17,"DELETE_AS_CHAR","","",null,null],[17,"SPACE","","Space",null,null],[17,"SPACE_AS_CHAR","","",null,null],[11,"fmt","ascii_utils","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"asciierror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"asciierror"}],"output":{"name":"bool"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Check","","Defines the methods for ASCII operations on characters.",null,null],[10,"is_letter","","`is_letter` checks whether it is an ASCII letter (a-z / A-Z).",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_lower","","`is_lower` checks whether it is an ASCII lower case letter (a-z).",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_upper","","`is_upper` checks whether it is an ASCII upper case letter (A-Z).",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_digit","","`is_digit` checks whether it is an ASCII digit (0-9).",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_space","","`is_space` checks whether it is an ASCII space character (Space, Horizontal Tab, Line Feed, Vertical Tab, Form Feed, Carriage Return).",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_control","","`is_control` checks whether it is an ASCII control character. The control characters are unprintable control codes and are used to control peripherals such as printers.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_printable","","`is_printable` checks whether it is an ASCII printable character. The printable characters are common for all the different variations of the ASCII table; represent letters, digits, punctuation marks, and a few miscellaneous symbols.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_us_ascii","","`is_us_ascii` checks whether it is an US-ASCII character.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_extended","","`is_extended` checks whether it is an extended ASCII character.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[4,"AsciiError"],[8,"Check"]]};
searchIndex["atty"] = {"doc":"atty is a simple utility that answers one question > is this a tty?","items":[[4,"Stream","atty","possible stream sources",null,null],[13,"Stdout","","",0,null],[13,"Stderr","","",0,null],[13,"Stdin","","",0,null],[5,"is","","returns true if this is a tty",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[5,"isnt","","returns true if this is not a tty",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Stream"]]};
searchIndex["backoff"] = {"doc":"`ExponentialBackoff` is a backoff implementation that increases the backoff  period for each retry attempt using a randomization function that grows exponentially.","items":[[3,"SystemClock","backoff","`SystemClock` uses the system's clock to get the current time. This Clock should be used for real use-cases.",null,null],[4,"Error","","Error is the error value in an operation's result.",null,null],[13,"Permanent","","Permanent means that it's impossible to execute the operation successfully. This error is immediately returned from `retry()`.",0,null],[13,"Transient","","Transient means that the error is temporary, the operation should be retried according to the backoff policy.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"e"}],"output":{"name":"error"}}],[0,"backoff","","",null,null],[3,"Zero","backoff::backoff","Immediately retry the operation.",null,null],[3,"Stop","","The operation should never be retried.",null,null],[3,"Constant","","Contant is a backoff policy which always returns a constant duration.",null,null],[8,"Backoff","","`Backoff` is a backoff policy for retrying an operation.",null,null],[11,"reset","","Resets the internal state to the initial value.",1,{"inputs":[{"name":"self"}],"output":null}],[10,"next_backoff","","next_backoff() time is elapsed before it is called again. If it returns None, it means the operation timed out and no further retries are done.",1,{"inputs":[{"name":"self"}],"output":{"generics":["duration"],"name":"option"}}],[11,"next_backoff","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["duration"],"name":"option"}}],[11,"next_backoff","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["duration"],"name":"option"}}],[11,"new","","Creates a new Constant backoff with `interval` contant backoff.",4,{"inputs":[{"name":"duration"}],"output":{"name":"constant"}}],[11,"next_backoff","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["duration"],"name":"option"}}],[0,"exponential","backoff","",null,null],[3,"ExponentialBackoff","backoff::exponential","",null,null],[12,"current_interval","","The current retry interval.",5,null],[12,"initial_interval","","The initial retry interval.",5,null],[12,"randomization_factor","","The randomization factor to use for creating a range around the retry interval.",5,null],[12,"multiplier","","The value to multiply the current interval with for each retry attempt.",5,null],[12,"max_interval","","The maximum value of the back off period. Once the retry interval reaches this value it stops increasing.",5,null],[12,"start_time","","The system time. It is calculated when an `ExponentialBackoff` instance is created and is reset when `retry` is called.",5,null],[12,"max_elapsed_time","","The maximum elapsed time after instantiating `ExponentialBackfff` or calling `reset` after which `next_backoff` returns `None`.",5,null],[12,"clock","","The clock used to get the current time.",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"exponentialbackoff"}}],[11,"get_elapsed_time","","Returns the elapsed time since start_time.",5,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"reset","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next_backoff","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["duration"],"name":"option"}}],[0,"default","backoff","Constants for the exponential backoff policy.",null,null],[17,"INITIAL_INTERVAL_MILLIS","backoff::default","The default initial interval value in milliseconds (0.5 seconds).",null,null],[17,"RANDOMIZATION_FACTOR","","The default randomization factor (0.5 which results in a random period ranging between 50% below and 50% above the retry interval).",null,null],[17,"MULTIPLIER","","The default multiplier value (1.5 which is 50% increase per back off).",null,null],[17,"MAX_INTERVAL_MILLIS","","The default maximum back off time in milliseconds (1 minute).",null,null],[17,"MAX_ELAPSED_TIME_MILLIS","","The default maximum elapsed time in milliseconds (15 minutes).",null,null],[11,"now","backoff","",6,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[6,"ExponentialBackoff","","Exponential backoff policy with system's clock.",null,null],[8,"Clock","","Clock returns the current time.",null,null],[10,"now","","",7,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[8,"Notify","","Notify is called in `retry_notify` in case of errors.",null,null],[10,"notify","","",8,{"inputs":[{"name":"self"},{"name":"e"},{"name":"duration"}],"output":null}],[8,"Operation","","Operation is an operation that can be retried if it fails.",null,null],[10,"call_op","","call_op implements the effective operation.",9,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"retry","","Retries this operation according to the backoff policy. backoff is reset before it is used.",9,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["error"],"name":"result"}}],[11,"retry_notify","","Retries this operation according to the backoff policy. Calls notify on failed attempts (in case of transient errors). backoff is reset before it is used.",9,{"inputs":[{"name":"self"},{"name":"b"},{"name":"n"}],"output":{"generics":["error"],"name":"result"}}],[11,"retry","","Retries this operation according to the backoff policy. backoff is reset before it is used.",9,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["error"],"name":"result"}}],[11,"retry_notify","","Retries this operation according to the backoff policy. Calls notify on failed attempts (in case of transient errors). backoff is reset before it is used.",9,{"inputs":[{"name":"self"},{"name":"b"},{"name":"n"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[4,"Error"],[8,"Backoff"],[3,"Zero"],[3,"Stop"],[3,"Constant"],[3,"ExponentialBackoff"],[3,"SystemClock"],[8,"Clock"],[8,"Notify"],[8,"Operation"]]};
searchIndex["backtrace"] = {"doc":"A library for acquiring a backtrace at runtime","items":[[3,"SymbolName","backtrace","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",null,null],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",null,null],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",null,null],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",null,null],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",null,null],[11,"new","","Creates a new symbol name from the raw underlying bytes.",0,null],[11,"as_str","","Returns the raw symbol name as `&str` if the symbols is valid utf-8.",0,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"backtraceframe"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"backtracesymbol"}}],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",1,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",1,null],[11,"ip","","",2,null],[11,"symbol_address","","",2,null],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",2,null],[11,"name","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["symbolname"],"name":"option"}}],[11,"addr","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"lineno","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"backtrace"}}],[8,"Frame","","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",null,null],[10,"ip","","Returns the current instruction pointer of this frame.",4,null],[10,"symbol_address","","Returns the starting symbol address of the frame of this function.",4,null],[8,"Symbol","","A trait representing the resolution of a symbol in a file.",null,null],[11,"name","","Returns the name of this function.",5,{"inputs":[{"name":"self"}],"output":{"generics":["symbolname"],"name":"option"}}],[11,"addr","","Returns the starting address of this function.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Returns the file name where this function was defined.",5,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"lineno","","Returns the line number for where this symbol is currently executing.",5,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","Returns the name of this function.",5,{"inputs":[{"name":"self"}],"output":{"generics":["symbolname"],"name":"option"}}],[11,"addr","","Returns the starting address of this function.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Returns the file name where this function was defined.",5,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"lineno","","Returns the line number for where this symbol is currently executing.",5,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"],[8,"Frame"],[8,"Symbol"]]};
searchIndex["backtrace_sys"] = {"doc":"","items":[[4,"backtrace_state","backtrace_sys","",null,null],[5,"backtrace_create_state","","",null,null],[5,"backtrace_syminfo","","",null,null],[5,"backtrace_pcinfo","","",null,null],[6,"backtrace_syminfo_callback","","",null,null],[6,"backtrace_full_callback","","",null,null],[6,"backtrace_error_callback","","",null,null]],"paths":[]};
searchIndex["base64"] = {"doc":"Configs","items":[[3,"Config","base64","Contains configuration parameters for base64 encoding",null,null],[4,"DecodeError","","Errors that can occur while decoding.",null,null],[13,"InvalidByte","","An invalid byte was found in the input. The offset and offending byte are provided.",0,null],[13,"InvalidLength","","The length of the input is invalid.",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[13,"Crypt","","The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`)",1,null],[4,"LineEnding","","Line ending used in optional line wrapping.",null,null],[13,"LF","","Unix-style \\n",2,null],[13,"CRLF","","Windows-style \\r\\n",2,null],[4,"LineWrap","","Line wrap configuration.",null,null],[13,"NoWrap","","Don't wrap.",3,null],[13,"Wrap","","Wrap lines with the specified length and line ending. The length must be > 0.",3,null],[5,"encode","","Encode arbitrary octets as base64. Returns a String. Convenience for `encode_config(input, base64::STANDARD);`.",null,{"inputs":[{"name":"t"}],"output":{"name":"string"}}],[5,"encode_config","","Encode arbitrary octets as base64. Returns a String.",null,{"inputs":[{"name":"t"},{"name":"config"}],"output":{"name":"string"}}],[5,"encode_config_buf","","Encode arbitrary octets as base64. Writes into the supplied output buffer, which will grow the buffer if needed.",null,{"inputs":[{"name":"t"},{"name":"config"},{"name":"string"}],"output":null}],[5,"encode_config_slice","","Encode arbitrary octets as base64. Writes into the supplied output buffer.",null,null],[5,"decode","","Decode from string reference as octets. Returns a Result containing a Vec. Convenience `decode_config(input, base64::STANDARD);`.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec","decodeerror"],"name":"result"}}],[5,"decode_config","","Decode from string reference as octets. Returns a Result containing a Vec.",null,{"inputs":[{"name":"t"},{"name":"config"}],"output":{"generics":["vec","decodeerror"],"name":"result"}}],[5,"decode_config_buf","","Decode from string reference as octets. Writes into the supplied buffer to avoid allocation. Returns a Result containing an empty tuple, aka ().",null,{"inputs":[{"name":"t"},{"name":"config"},{"name":"vec"}],"output":{"generics":["decodeerror"],"name":"result"}}],[5,"decode_config_slice","","Decode the input into the provided output slice.",null,null],[0,"display","","Enables base64'd output anywhere you might use a `Display` implementation, like a format string.",null,null],[3,"Base64Display","base64::display","A convenience wrapper for base64'ing bytes into a format string without heap allocation.",null,null],[4,"DisplayError","","Errors that can occur initializing a Base64Display.",null,null],[13,"InvalidLineLength","","If wrapping is configured, the line length must be a multiple of 4, and must not be absurdly large (currently capped at 1024, subject to change).",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"displayerror"}],"output":{"name":"bool"}}],[11,"with_config","","Create a `Base64Display` with the provided config.",5,null],[11,"standard","","Convenience method for creating a `Base64Display` with the `STANDARD` configuration.",5,null],[11,"url_safe","","Convenience method for creating a `Base64Display` with the `URL_SAFE` configuration.",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","base64","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[17,"STANDARD","","Standard character set with padding.",null,null],[17,"STANDARD_NO_PAD","","Standard character set without padding.",null,null],[17,"MIME","","As per standards for MIME encoded messages",null,null],[17,"URL_SAFE","","URL-safe character set with padding",null,null],[17,"URL_SAFE_NO_PAD","","URL-safe character set without padding",null,null],[17,"CRYPT","","As per `crypt(3)` requirements",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"lineending"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"linewrap"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Config`.",6,{"inputs":[{"name":"characterset"},{"name":"bool"},{"name":"bool"},{"name":"linewrap"}],"output":{"name":"config"}}]],"paths":[[4,"DecodeError"],[4,"CharacterSet"],[4,"LineEnding"],[4,"LineWrap"],[4,"DisplayError"],[3,"Base64Display"],[3,"Config"]]};
searchIndex["bigdecimal"] = {"doc":"A Big Decimal","items":[[8,"Num","bigdecimal","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",0,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",1,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",2,{"inputs":[],"output":{"name":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",3,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",3,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",3,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",3,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",3,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",3,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",3,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",3,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",3,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",3,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",3,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",3,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[3,"BigDecimal","","A big decimal type.",null,null],[4,"ParseBigDecimalError","","",null,null],[13,"ParseDecimal","","",6,null],[13,"ParseInt","","",6,null],[13,"ParseBigInt","","",6,null],[13,"Empty","","",6,null],[13,"Other","","",6,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bigdecimal"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates and initializes a `BigDecimal`.",7,{"inputs":[{"name":"bigint"},{"name":"i64"}],"output":{"name":"bigdecimal"}}],[11,"parse_bytes","","Creates and initializes a `BigDecimal`.",7,null],[11,"with_scale","","Return a new BigDecimal object equivalent to self, with internal scaling set to the number specified. If the new_scale is lower than the current value, digits will be dropped.",7,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigdecimal"}}],[11,"sign","","Return the sign of the `BigDecimal` as `num::bigint::Sign`.",7,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"as_bigint_and_exponent","","Return the internal big integer value and an exponent",7,null],[11,"into_bigint_and_exponent","","Convert into the internal big integer value and an exponent",7,null],[11,"abs","","Compute the absolute value of number",7,{"inputs":[{"name":"self"}],"output":{"name":"bigdecimal"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"parsebigdecimalerror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"parsebigdecimalerror"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",6,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsebigdecimalerror"}}],[11,"from","","",6,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebigdecimalerror"}}],[11,"from","","",6,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"parsebigdecimalerror"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"generics":["bigdecimal","parsebigdecimalerror"],"name":"result"}}],[11,"hash","","",7,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"bigdecimal"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","Complete ordering implementation for BigDecimal",7,{"inputs":[{"name":"self"},{"name":"bigdecimal"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"bigdecimal"}],"output":{"name":"bool"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"bigdecimal"}}],[11,"zero","","",7,{"inputs":[],"output":{"name":"bigdecimal"}}],[11,"is_zero","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",7,{"inputs":[],"output":{"name":"bigdecimal"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"bigdecimal"}],"output":{"name":"bigdecimal"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"bigdecimal"}],"output":{"name":"bigdecimal"}}],[11,"add_assign","","",7,{"inputs":[{"name":"self"},{"name":"bigdecimal"}],"output":null}],[11,"add_assign","","",7,{"inputs":[{"name":"self"},{"name":"bigdecimal"}],"output":null}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"bigdecimal"}],"output":{"name":"bigdecimal"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"bigdecimal"}],"output":{"name":"bigdecimal"}}],[11,"sub_assign","","",7,{"inputs":[{"name":"self"},{"name":"bigdecimal"}],"output":null}],[11,"sub_assign","","",7,{"inputs":[{"name":"self"},{"name":"bigdecimal"}],"output":null}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"bigdecimal"}],"output":{"name":"bigdecimal"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"bigdecimal"}],"output":{"name":"bigdecimal"}}],[11,"mul_assign","","",7,{"inputs":[{"name":"self"},{"name":"bigdecimal"}],"output":null}],[11,"mul_assign","","",7,{"inputs":[{"name":"self"},{"name":"bigdecimal"}],"output":null}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"bigdecimal"}],"output":{"name":"bigdecimal"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"bigdecimal"}],"output":{"name":"bigdecimal"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"bigdecimal"}],"output":{"name":"bigdecimal"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"bigdecimal"}],"output":{"name":"bigdecimal"}}],[11,"neg","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bigdecimal"}}],[11,"abs","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bigdecimal"}}],[11,"abs_sub","","",7,{"inputs":[{"name":"self"},{"name":"bigdecimal"}],"output":{"name":"bigdecimal"}}],[11,"signum","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bigdecimal"}}],[11,"is_positive","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigDecimal.",7,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["bigdecimal","parsebigdecimalerror"],"name":"result"}}],[11,"to_i64","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f64","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from","","",7,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",7,null],[11,"from","","",7,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from_i64","","",7,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",7,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",7,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",7,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"to_bigint","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}]],"paths":[[8,"Num"],[8,"Zero"],[8,"One"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"Signed"],[4,"ParseBigDecimalError"],[3,"BigDecimal"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style bitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["blake2_rfc"] = {"doc":"A pure Rust implementation of BLAKE2 based on RFC 7693.","items":[[5,"selftest","blake2_rfc","Runs the self-test for both BLAKE2b and BLAKE2s.",null,{"inputs":[],"output":null}],[0,"blake2b","","The BLAKE2b hash function.",null,null],[3,"Blake2bResult","blake2_rfc::blake2b","Container for a hash result.",null,null],[3,"Blake2b","","State context.",null,null],[5,"blake2b","","Convenience function for all-in-one computation.",null,null],[5,"selftest","","Runs the self-test for this hash function.",null,{"inputs":[],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"blake2bresult"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_bytes","","Returns the contained hash result as a byte string.",0,null],[11,"len","","Returns the length of the hash result.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ref","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"blake2b"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new hashing context without a key.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_key","","Creates a new hashing context with a key.",1,null],[11,"update","","Updates the hashing context with more data.",1,null],[11,"finalize","","Consumes the hashing context and returns the resulting hash.",1,{"inputs":[{"name":"self"}],"output":{"name":"blake2bresult"}}],[11,"write","","",1,null],[11,"flush","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"blake2s","blake2_rfc","The BLAKE2s hash function.",null,null],[3,"Blake2sResult","blake2_rfc::blake2s","Container for a hash result.",null,null],[3,"Blake2s","","State context.",null,null],[5,"blake2s","","Convenience function for all-in-one computation.",null,null],[5,"selftest","","Runs the self-test for this hash function.",null,{"inputs":[],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"blake2sresult"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_bytes","","Returns the contained hash result as a byte string.",2,null],[11,"len","","Returns the length of the hash result.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ref","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"blake2s"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new hashing context without a key.",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_key","","Creates a new hashing context with a key.",3,null],[11,"update","","Updates the hashing context with more data.",3,null],[11,"finalize","","Consumes the hashing context and returns the resulting hash.",3,{"inputs":[{"name":"self"}],"output":{"name":"blake2sresult"}}],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[3,"Blake2bResult"],[3,"Blake2b"],[3,"Blake2sResult"],[3,"Blake2s"]]};
searchIndex["brotli2"] = {"doc":"Brotli Compression/Decompression for Rust","items":[[3,"CompressParams","brotli2","Parameters passed to various compression routines.",null,null],[4,"CompressMode","","Possible choices for modes of compression",null,null],[13,"Generic","","Default compression mode, the compressor does not know anything in advance about the properties of the input.",0,null],[13,"Text","","Compression mode for utf-8 formatted text input.",0,null],[13,"Font","","Compression mode in WOFF 2.0.",0,null],[0,"raw","","Raw interface to in-memory compression/decompression streams",null,null],[3,"Decompress","brotli2::raw","In-memory state for decompressing brotli-encoded data.",null,null],[3,"Compress","","In-memory state for compressing/encoding data with brotli",null,null],[3,"Error","","Error that can happen from decompressing or compressing a brotli stream.",null,null],[4,"CompressOp","","Possible choices for the operation performed by the compressor.",null,null],[13,"Process","","Compress input data",1,null],[13,"Flush","","Compress input data, ensuring that all input so far has been written out",1,null],[13,"Finish","","Compress input data, ensuring that all input so far has been written out and then finalizing the stream so no more data can be written",1,null],[13,"EmitMetadata","","Emit a metadata block to the stream, an opaque piece of out-of-band data that does not interfere with the main stream of data. Metadata blocks must be no longer than 16MiB",1,null],[4,"CoStatus","","Indication of whether a compression operation is 'complete'. This does not indicate whether the whole stream is complete - see `Compress::compress` for details.",null,null],[13,"Finished","","The operation completed successfully",2,null],[13,"Unfinished","","The operation has more work to do and needs to be called again with the same buffer",2,null],[4,"DeStatus","","Possible status results returned from decompressing.",null,null],[13,"Finished","","Decompression was successful and has finished",3,null],[13,"NeedInput","","More input is needed to continue",3,null],[13,"NeedOutput","","More output is needed to continue",3,null],[5,"decompress_buf","","Decompress data in one go in memory.",null,null],[5,"compress_buf","","Compresses the data in `input` into `output`.",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"compressop"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"compressop"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"costatus"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"costatus"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"destatus"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"destatus"}],"output":{"name":"bool"}}],[11,"new","","Creates a new brotli decompression/decoding stream ready to receive data.",5,{"inputs":[],"output":{"name":"decompress"}}],[11,"decompress","","Decompress some input data and write it to a buffer of output data.",5,null],[11,"take_output","","Retrieve a slice of the internal decompressor buffer up to `size_limit` in length (unlimited length if `None`), consuming it. As the internal buffer may not be contiguous, consecutive calls may return more output until this function returns `None`.",5,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"option"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new compressor ready to encode data into brotli",6,{"inputs":[],"output":{"name":"compress"}}],[11,"compress","","Pass some input data to the compressor and write it to a buffer of output data, compressing or otherwise handling it as instructed by the specified operation.",6,null],[11,"take_output","","Retrieve a slice of the internal compressor buffer up to `size_limit` in length (unlimited length if `None`), consuming it. As the internal buffer may not be contiguous, consecutive calls may return more output until this function returns `None`.",6,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"option"}}],[11,"set_params","","Configure the parameters of this compression session.",6,{"inputs":[{"name":"self"},{"name":"compressparams"}],"output":null}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"bufread","brotli2","I/O streams for wrapping `BufRead` types as encoders/decoders",null,null],[3,"BrotliEncoder","brotli2::bufread","A brotli encoder, or compressor.",null,null],[3,"BrotliDecoder","","A brotli decoder, or decompressor.",null,null],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",7,{"inputs":[{"name":"r"},{"name":"u32"}],"output":{"name":"brotliencoder"}}],[11,"from_params","","Creates a new encoder with a custom `CompressParams`.",7,{"inputs":[{"name":"r"},{"name":"compressparams"}],"output":{"name":"brotliencoder"}}],[11,"get_ref","","Acquires a reference to the underlying stream",7,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",7,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",7,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",7,null],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",8,{"inputs":[{"name":"r"}],"output":{"name":"brotlidecoder"}}],[11,"get_ref","","Acquires a reference to the underlying stream",8,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",8,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",8,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",8,null],[0,"read","brotli2","Reader-based compression/decompression streams",null,null],[3,"BrotliEncoder","brotli2::read","A compression stream which wraps an uncompressed stream of data. Compressed data will be read from the stream.",null,null],[3,"BrotliDecoder","","A decompression stream which wraps a compressed stream of data. Decompressed data will be read from the stream.",null,null],[11,"new","","Create a new compression stream which will compress at the given level to read compress output to the give output stream.",9,{"inputs":[{"name":"r"},{"name":"u32"}],"output":{"name":"brotliencoder"}}],[11,"from_params","","Configure the compression parameters of this encoder.",9,{"inputs":[{"name":"r"},{"name":"compressparams"}],"output":{"name":"brotliencoder"}}],[11,"get_ref","","Acquires a reference to the underlying stream",9,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",9,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Unwrap the underlying writer, finishing the compression stream.",9,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",9,null],[11,"new","","Create a new decompression stream, which will read compressed data from the given input stream and decompress it.",10,{"inputs":[{"name":"r"}],"output":{"name":"brotlidecoder"}}],[11,"get_ref","","Acquires a reference to the underlying stream",10,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",10,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Unwrap the underlying writer, finishing the compression stream.",10,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",10,null],[0,"write","brotli2","Writer-based compression/decompression streams",null,null],[3,"BrotliEncoder","brotli2::write","A compression stream which will have uncompressed data written to it and will write compressed data to an output stream.",null,null],[3,"BrotliDecoder","","A compression stream which will have compressed data written to it and will write uncompressed data to an output stream.",null,null],[11,"new","","Create a new compression stream which will compress at the given level to write compress output to the give output stream.",11,{"inputs":[{"name":"w"},{"name":"u32"}],"output":{"name":"brotliencoder"}}],[11,"from_params","","Creates a new encoder with a custom `CompressParams`.",11,{"inputs":[{"name":"w"},{"name":"compressparams"}],"output":{"name":"brotliencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",11,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",11,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",11,null],[11,"flush","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new decoding stream which will decode all input written to it into `obj`.",12,{"inputs":[{"name":"w"}],"output":{"name":"brotlidecoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",12,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",12,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"finish","","Unwrap the underlying writer, finishing the compression stream.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",12,null],[11,"flush","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","brotli2","",0,{"inputs":[{"name":"self"}],"output":{"name":"compressmode"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"compressmode"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"compressparams"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new default set of compression parameters.",13,{"inputs":[],"output":{"name":"compressparams"}}],[11,"mode","","Set the mode of this compression.",13,{"inputs":[{"name":"self"},{"name":"compressmode"}],"output":{"name":"compressparams"}}],[11,"quality","","Controls the compression-speed vs compression-density tradeoffs.",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"compressparams"}}],[11,"lgwin","","Sets the base 2 logarithm of the sliding window size.",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"compressparams"}}],[11,"lgblock","","Sets the base 2 logarithm of the maximum input block size.",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"compressparams"}}],[11,"get_lgblock_readable","","Get the current block size",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_lgblock","","Get the native lgblock size",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_lgwin_readable","","Get the current window size",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_lgwin","","Get the native lgwin value",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}]],"paths":[[4,"CompressMode"],[4,"CompressOp"],[4,"CoStatus"],[4,"DeStatus"],[3,"Error"],[3,"Decompress"],[3,"Compress"],[3,"BrotliEncoder"],[3,"BrotliDecoder"],[3,"BrotliEncoder"],[3,"BrotliDecoder"],[3,"BrotliEncoder"],[3,"BrotliDecoder"],[3,"CompressParams"]]};
searchIndex["brotli_sys"] = {"doc":"","items":[[4,"BrotliDecoderState","brotli_sys","",null,null],[4,"BrotliEncoderState","","",null,null],[5,"BrotliDecoderCreateInstance","","",null,null],[5,"BrotliDecoderDestroyInstance","","",null,null],[5,"BrotliDecoderDecompress","","",null,null],[5,"BrotliDecoderDecompressStream","","",null,null],[5,"BrotliDecoderSetCustomDictionary","","",null,null],[5,"BrotliDecoderHasMoreOutput","","",null,null],[5,"BrotliDecoderTakeOutput","","",null,null],[5,"BrotliDecoderIsUsed","","",null,null],[5,"BrotliDecoderIsFinished","","",null,null],[5,"BrotliDecoderGetErrorCode","","",null,null],[5,"BrotliDecoderErrorString","","",null,null],[5,"BrotliDecoderVersion","","",null,null],[5,"BrotliEncoderSetParameter","","",null,null],[5,"BrotliEncoderCreateInstance","","",null,null],[5,"BrotliEncoderDestroyInstance","","",null,null],[5,"BrotliEncoderSetCustomDictionary","","",null,null],[5,"BrotliEncoderMaxCompressedSize","","",null,null],[5,"BrotliEncoderCompress","","",null,null],[5,"BrotliEncoderCompressStream","","",null,null],[5,"BrotliEncoderIsFinished","","",null,null],[5,"BrotliEncoderHasMoreOutput","","",null,null],[5,"BrotliEncoderTakeOutput","","",null,null],[5,"BrotliEncoderVersion","","",null,null],[6,"__enum_ty_s","","",null,null],[6,"brotli_alloc_func","","",null,null],[6,"brotli_free_func","","",null,null],[6,"BrotliDecoderResult","","",null,null],[6,"BrotliDecoderErrorCode","","",null,null],[6,"BrotliEncoderMode","","",null,null],[6,"BrotliEncoderParameter","","",null,null],[6,"BrotliEncoderOperation","","",null,null],[17,"BROTLI_DECODER_RESULT_ERROR","","",null,null],[17,"BROTLI_DECODER_RESULT_SUCCESS","","",null,null],[17,"BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT","","",null,null],[17,"BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT","","",null,null],[17,"BROTLI_DECODER_NO_ERROR","","",null,null],[17,"BROTLI_DECODER_SUCCESS","","",null,null],[17,"BROTLI_DECODER_NEEDS_MORE_INPUT","","",null,null],[17,"BROTLI_DECODER_NEEDS_MORE_OUTPUT","","",null,null],[17,"BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE","","",null,null],[17,"BROTLI_DECODER_ERROR_FORMAT_RESERVED","","",null,null],[17,"BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE","","",null,null],[17,"BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET","","",null,null],[17,"BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME","","",null,null],[17,"BROTLI_DECODER_ERROR_FORMAT_CL_SPACE","","",null,null],[17,"BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE","","",null,null],[17,"BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT","","",null,null],[17,"BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1","","",null,null],[17,"BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2","","",null,null],[17,"BROTLI_DECODER_ERROR_FORMAT_TRANSFORM","","",null,null],[17,"BROTLI_DECODER_ERROR_FORMAT_DICTIONARY","","",null,null],[17,"BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS","","",null,null],[17,"BROTLI_DECODER_ERROR_FORMAT_PADDING_1","","",null,null],[17,"BROTLI_DECODER_ERROR_FORMAT_PADDING_2","","",null,null],[17,"BROTLI_DECODER_ERROR_INVALID_ARGUMENTS","","",null,null],[17,"BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES","","",null,null],[17,"BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS","","",null,null],[17,"BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP","","",null,null],[17,"BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1","","",null,null],[17,"BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2","","",null,null],[17,"BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES","","",null,null],[17,"BROTLI_DECODER_ERROR_UNREACHABLE","","",null,null],[17,"BROTLI_MODE_GENERIC","","",null,null],[17,"BROTLI_MODE_TEXT","","",null,null],[17,"BROTLI_MODE_FONT","","",null,null],[17,"BROTLI_PARAM_MODE","","",null,null],[17,"BROTLI_PARAM_QUALITY","","",null,null],[17,"BROTLI_PARAM_LGWIN","","",null,null],[17,"BROTLI_PARAM_LGBLOCK","","",null,null],[17,"BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING","","",null,null],[17,"BROTLI_PARAM_SIZE_HINT","","",null,null],[17,"BROTLI_OPERATION_PROCESS","","",null,null],[17,"BROTLI_OPERATION_FLUSH","","",null,null],[17,"BROTLI_OPERATION_FINISH","","",null,null],[17,"BROTLI_OPERATION_EMIT_METADATA","","",null,null],[17,"BROTLI_DEFAULT_QUALITY","","",null,null],[17,"BROTLI_DEFAULT_WINDOW","","",null,null],[17,"BROTLI_DEFAULT_MODE","","",null,null]],"paths":[]};
searchIndex["buf_redux"] = {"doc":"Drop-in replacements for buffered I/O types in `std::io`.","items":[[3,"BufReader","buf_redux","A drop-in replacement for `std::io::BufReader` with more functionality.",null,null],[3,"BufWriter","","A drop-in replacement for `std::io::BufWriter` with more functionality.",null,null],[3,"LineWriter","","A drop-in replacement for `std::io::LineWriter` with more functionality.",null,null],[3,"IntoInnerError","","The error type for `BufWriter::into_inner()`, contains the `BufWriter` as well as the error that occurred.",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"Buffer","","A deque-like datastructure for managing bytes.",null,null],[3,"Unbuffer","","A `Read` adapter for a consumed `BufReader` which will empty bytes from the buffer before reading from `inner` directly. Frees the buffer when it has been emptied. ",null,null],[5,"copy_buf","","Copy data between a `BufRead` and a `Write` without an intermediate buffer.",null,{"inputs":[{"name":"b"},{"name":"w"}],"output":{"generics":["u64"],"name":"result"}}],[0,"strategy","","Types which can be used to tune the behavior of `BufReader`.",null,null],[3,"IfEmpty","buf_redux::strategy","A `ReadStrategy` which tells the buffer to read more data only when empty.",null,null],[3,"LessThan","","A `ReadStrategy` which returns `true` if there is fewer bytes in the buffer than the provided value.",null,null],[12,"0","","",1,null],[3,"AtEndLessThan1k","","A `MoveStrategy` which tells the buffer to move data if there is no more room at the end of the buffer, and if there is less than 1 KiB of valid data in the buffer.",null,null],[3,"AtEndLessThan","","A `MoveStrategy` which triggers if there is no more room at the end of the buffer, and there are fewer valid bytes in the buffer than the provided value.",null,null],[12,"0","","",2,null],[3,"NeverMove","","A `MoveStrategy` which always returns `false`. Use this to restore original `std::io::BufReader` behavior.",null,null],[3,"WhenFull","","Flush the buffer if there is no more headroom. Equivalent to the behavior or `std::io::BufWriter`.",null,null],[3,"FlushAtLeast","","Flush the buffer if it contains at least the given number of bytes.",null,null],[12,"0","","",3,null],[3,"FlushAtLeast8k","","Flush the buffer if it contains at least `8Kb (8192b)`.",null,null],[3,"FlushOn","","Flush the buffer if it contains the given byte.",null,null],[12,"0","","",4,null],[3,"FlushOnNewline","","Flush the buffer if it contains a newline (`\\n`).",null,null],[6,"DefaultReadStrategy","","The default `ReadStrategy` for this crate.",null,null],[6,"DefaultMoveStrategy","","The default `MoveStrategy` for this crate.",null,null],[6,"DefaultFlushStrategy","","The default `FlushStrategy` for this crate.",null,null],[8,"ReadStrategy","","Trait for types which `BufReader` can consult to determine when it should read more data into the buffer.",null,null],[10,"should_read","","Returns `true` if the buffer should read more data, `false` otherwise.",5,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"bool"}}],[8,"MoveStrategy","","Trait for types which `BufReader` can consult to determine when it should move data to the beginning of the buffer.",null,null],[10,"should_move","","Returns `true` if the buffer should move the data down to the beginning,  `false` otherwise.",6,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"bool"}}],[8,"FlushStrategy","","A trait which tells `BufWriter` when to flush.",null,null],[10,"flush_before","","Return `true` if the buffer should be flushed before reading into it.",7,{"inputs":[{"name":"self"},{"name":"buffer"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"flush_after","","Return `true` if the buffer should be flushed after reading into it.",7,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"ifempty"}}],[11,"should_read","","",8,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"lessthan"}}],[11,"should_read","","",1,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"atendlessthan1k"}}],[11,"should_move","","",9,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"atendlessthan"}}],[11,"should_move","","",2,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"nevermove"}}],[11,"should_move","","",10,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"whenfull"}}],[11,"flush_before","","",11,{"inputs":[{"name":"self"},{"name":"buffer"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"flushatleast"}}],[11,"flush_before","","",3,{"inputs":[{"name":"self"},{"name":"buffer"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"flushatleast8k"}}],[11,"flush_before","","",12,{"inputs":[{"name":"self"},{"name":"buffer"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"flushon"}}],[11,"flush_before","","Same as `WhenFull`.",4,{"inputs":[{"name":"self"},{"name":"buffer"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"flush_after","","",4,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"flushonnewline"}}],[11,"flush_before","","Same as `WhenFull`.",13,{"inputs":[{"name":"self"},{"name":"buffer"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"flush_after","","",13,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"bool"}}],[8,"TrustRead","buf_redux","A trait which `Buffer` can use to determine whether or not it is safe to elide zeroing of its buffer.",null,null],[10,"is_trusted","","Return `true` if this reader does not need a zeroed slice passed to `.read()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new `BufReader` wrapping `inner`, with a buffer of a default capacity and the default strategies.",15,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `BufReader` wrapping `inner` with a capacity of at least `cap` bytes and the default strategies.",15,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"name":"self"}}],[11,"with_strategies","","Create a new `BufReader` wrapping `inner`, with a default buffer capacity and with the given `ReadStrategy` and `MoveStrategy`.",15,{"inputs":[{"name":"r"},{"name":"rs"},{"name":"ms"}],"output":{"name":"self"}}],[11,"with_cap_and_strategies","","Create a new `BufReader` wrapping `inner`, with a buffer capacity of at least `cap` bytes and the given `ReadStrategy` and `MoveStrategy`.",15,{"inputs":[{"name":"r"},{"name":"usize"},{"name":"rs"},{"name":"ms"}],"output":{"name":"self"}}],[11,"move_strategy","","Apply a new `MoveStrategy` to this `BufReader`, returning the transformed type.",15,{"inputs":[{"name":"self"},{"name":"ms_"}],"output":{"name":"bufreader"}}],[11,"read_strategy","","Apply a new `ReadStrategy` to this `BufReader`, returning the transformed type.",15,{"inputs":[{"name":"self"},{"name":"rs_"}],"output":{"name":"bufreader"}}],[11,"move_strategy_mut","","Accessor for updating the `MoveStrategy` in-place.",15,{"inputs":[{"name":"self"}],"output":{"name":"ms"}}],[11,"read_strategy_mut","","Accessor for updating the `ReadStrategy` in-place.",15,{"inputs":[{"name":"self"}],"output":{"name":"rs"}}],[11,"make_room","","Move data to the start of the buffer, making room at the end for more  reading.",15,{"inputs":[{"name":"self"}],"output":null}],[11,"grow","","Grow the internal buffer by at least `additional` bytes. May not be quite exact due to implementation details of the buffer's allocator.",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"get_buf","","Get the section of the buffer containing valid data; may be empty.",15,null],[11,"available","","Get the current number of bytes available in the buffer.",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Get the total buffer capacity.",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_ref","","Get an immutable reference to the underlying reader.",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Get a mutable reference to the underlying reader.",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consume `self` and return the inner reader only.",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner_with_buf","","Consume `self` and return both the underlying reader and the buffer, with the data moved to the beginning and the length truncated to contain only valid data.",15,null],[11,"unbuffer","","Consume `self` and return an adapter which implements `Read` and will empty the buffer before reading directly from the underlying reader.",15,{"inputs":[{"name":"self"}],"output":{"name":"unbuffer"}}],[11,"read_into_buf","","Unconditionally perform a read into the buffer, calling `.make_room()` if appropriate or necessary, as determined by the implementation.",15,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"boxed","","Box the inner reader without losing data.",15,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"bufreader"}}],[11,"read","","",15,null],[11,"fill_buf","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",15,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64"],"name":"result"}}],[11,"new","","Wrap `inner` with the default buffer capacity and flush strategy.",16,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_capacity","","Wrap `inner` with the given buffer capacity and the default flush strategy.",16,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"self"}}],[11,"with_strategy","","Wrap `inner` with the default buffer capacity and given flush strategy",16,{"inputs":[{"name":"w"},{"name":"fs"}],"output":{"name":"self"}}],[11,"with_capacity_and_strategy","","Wrap `inner` with the given buffer capacity and flush strategy.",16,{"inputs":[{"name":"usize"},{"name":"w"},{"name":"fs"}],"output":{"name":"self"}}],[11,"flush_strategy","","Set a new `FlushStrategy`, returning the transformed type.",16,{"inputs":[{"name":"self"},{"name":"fs_"}],"output":{"name":"bufwriter"}}],[11,"flush_strategy_mut","","Mutate the current flush strategy.",16,{"inputs":[{"name":"self"}],"output":{"name":"fs"}}],[11,"get_ref","","Get a reference to the inner writer.",16,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Get a mutable reference to the inner writer.",16,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"capacity","","Get the capacty of the inner buffer.",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"buffered","","Get the number of bytes currently in the buffer.",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"grow","","Grow the internal buffer by at least `additional` bytes. May not be quite exact due to implementation details of the buffer's allocator.",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"into_inner","","Flush the buffer and unwrap, returning the inner writer on success, or a type wrapping `self` plus the error otherwise.",16,{"inputs":[{"name":"self"}],"output":{"generics":["intoinnererror"],"name":"result"}}],[11,"into_inner_with_err","","Flush the buffer and unwrap, returning the inner writer and any error encountered during flushing.",16,null],[11,"into_inner_with_buf","","Consume `self` and return both the underlying writer and the buffer, with the data moved to the beginning and the length truncated to contain only valid data.",16,null],[11,"write","","",16,null],[11,"flush","","",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",16,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64"],"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Wrap `inner` with the default buffer capacity.",17,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_capacity","","Wrap `inner` with the given buffer capacity.",17,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"self"}}],[11,"get_ref","","Get a reference to the inner writer.",17,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Get a mutable reference to the inner writer.",17,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"capacity","","Get the capacty of the inner buffer.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"buffered","","Get the number of bytes currently in the buffer.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"grow","","Grow the internal buffer by at least `additional` bytes. May not be quite exact due to implementation details of the buffer's allocator.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"into_inner","","Flush the buffer and unwrap, returning the inner writer on success, or a type wrapping `self` plus the error otherwise.",17,{"inputs":[{"name":"self"}],"output":{"generics":["intoinnererror"],"name":"result"}}],[11,"into_inner_with_err","","Flush the buffer and unwrap, returning the inner writer and any error encountered during flushing.",17,null],[11,"into_inner_with_buf","","Consume `self` and return both the underlying writer and the buffer, with the data moved to the beginning and the length truncated to contain only valid data.",17,null],[11,"write","","",17,null],[11,"flush","","",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"error","","Get the error",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"into_inner","","Take the writer.",0,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new buffer with a default capacity.",18,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new buffer with the given capacity.",18,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"buffered","","Return the number of bytes currently in this buffer.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"headroom","","Return the number of bytes that can be read into this buffer before it needs to grow or the data in the buffer needs to be moved.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Return the total capacity of this buffer.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if there are no bytes in the buffer, false otherwise.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"grow","","Grow the buffer by `additional` bytes.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"make_room","","Make room in the buffer, moving data down to the beginning if necessary.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"buf","","Get an immutable slice of the available bytes in this buffer.",18,null],[11,"buf_mut","","Get a mutable slice representing the available bytes in this buffer.",18,null],[11,"read_from","","Read from `rdr`, returning the number of bytes read or any errors.",18,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"generics":["usize"],"name":"result"}}],[11,"copy_from_slice","","Copy from `src` to the head of this buffer. Returns the number of bytes copied.",18,null],[11,"write_to","","Write bytes from this buffer to `wrt`. Returns the number of bytes written or any errors.",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["usize"],"name":"result"}}],[11,"write_all","","Write all bytes in this buffer, ignoring interrupts. Continues writing until the buffer is empty or an error is returned.",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"copy_to_slice","","Copy bytes to `out` from this buffer, returning the number of bytes written.",18,null],[11,"push_bytes","","Push `bytes` to the end of the buffer, growing it if necessary.",18,null],[11,"consume","","Consume `amt` bytes from the tail of this buffer. No more than `self.available()` bytes will be consumed.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clear","","Empty this buffer by resetting the cursors.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"into_inner","","Move the bytes down the beginning of the buffer and take the inner vector, truncated to the number of bytes available.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_buf_empty","","Returns `true` if the buffer still has some bytes left, `false` otherwise.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"buf_len","","Returns the number of bytes remaining in the buffer.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"buf","","Get a slice over the available bytes in the buffer.",19,null],[11,"into_inner","","Return the underlying reader, releasing the buffer.",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"IntoInnerError"],[3,"LessThan"],[3,"AtEndLessThan"],[3,"FlushAtLeast"],[3,"FlushOn"],[8,"ReadStrategy"],[8,"MoveStrategy"],[8,"FlushStrategy"],[3,"IfEmpty"],[3,"AtEndLessThan1k"],[3,"NeverMove"],[3,"WhenFull"],[3,"FlushAtLeast8k"],[3,"FlushOnNewline"],[8,"TrustRead"],[3,"BufReader"],[3,"BufWriter"],[3,"LineWriter"],[3,"Buffer"],[3,"Unbuffer"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for [`BigEndian`].",null,null],[6,"LE","","A type alias for [`LittleEndian`].",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["bytes"] = {"doc":"Provides abstractions for working with bytes.","items":[[8,"ByteOrder","bytes","`ByteOrder` describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",0,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",0,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",0,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",0,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",0,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",0,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",0,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",0,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",0,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",0,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",0,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",0,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",0,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",0,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",0,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",0,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",0,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",0,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",0,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",0,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",0,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",0,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",0,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",0,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",0,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",0,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",0,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",0,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",0,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",0,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",0,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",0,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",0,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",0,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",0,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",0,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",0,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",0,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",0,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[3,"Bytes","","A reference counted contiguous slice of memory.",null,null],[3,"BytesMut","","A unique reference to a contiguous slice of memory.",null,null],[0,"buf","","Utilities for working with buffers.",null,null],[3,"Chain","bytes::buf","A `Chain` sequences two buffers.",null,null],[3,"Iter","","Iterator over the bytes contained by the buffer.",null,null],[3,"Reader","","A `Buf` adapter which implements `io::Read` for the inner value.",null,null],[3,"Take","","A `Buf` adapter which limits the bytes read from an underlying buffer.",null,null],[3,"Writer","","A `BufMut` adapter which implements `io::Write` for the inner value.",null,null],[11,"from_buf","bytes","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_buf","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","bytes::buf","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Chain` sequencing the provided values.",3,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"chain"}}],[11,"first_ref","","Gets a reference to the first underlying `Buf`.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"first_mut","","Gets a mutable reference to the first underlying `Buf`.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"last_ref","","Gets a reference to the last underlying `Buf`.",3,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"last_mut","","Gets a mutable reference to the last underlying `Buf`.",3,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"into_inner","","Consumes this `Chain`, returning the underlying values.",3,null],[11,"remaining","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes","","",3,null],[11,"advance","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"bytes_vec","","",3,null],[11,"remaining_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes_mut","","",3,null],[11,"advance_mut","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"bytes_vec_mut","","",3,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes this `Iter`, returning the underlying value.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying `Buf`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",4,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Gets a reference to the underlying `Buf`.",5,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",5,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"into_inner","","Consumes this `Reader`, returning the underlying value.",5,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"read","","",5,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes this `Take`, returning the underlying value.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying `Buf`.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"limit","","Returns the maximum number of bytes that can be read.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit","","Sets the maximum number of bytes that can be read.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remaining","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes","","",6,null],[11,"advance","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Gets a reference to the underlying `BufMut`.",7,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"get_mut","","Gets a mutable reference to the underlying `BufMut`.",7,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"into_inner","","Consumes this `Writer`, returning the underlying value.",7,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Buf","","Read bytes from a buffer.",null,null],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",8,null],[11,"bytes_vec","","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,null],[10,"advance","","Advance the internal cursor of the Buf",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,null],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[8,"BufMut","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"bytes_mut","","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",9,null],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,null],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,null],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"writer"}}],[8,"FromBuf","","Conversion from a [`Buf`]",null,null],[10,"from_buf","","Creates a value from a buffer.",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"IntoBuf","","Conversion into a `Buf`",null,null],[16,"Buf","","The `Buf` type that `self` is being converted into",11,null],[10,"into_buf","","Creates a `Buf` from a value.",11,null],[11,"with_capacity","bytes","Creates a new `Bytes` with the specified capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"bytes"}}],[11,"new","","Creates a new empty `Bytes`.",1,{"inputs":[],"output":{"name":"bytes"}}],[11,"from_static","","Creates a new `Bytes` from a static slice.",1,null],[11,"len","","Returns the number of bytes contained in this `Bytes`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Bytes` has a length of 0.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"slice","","Returns a slice of self for the index range `[begin..end)`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_from","","Returns a slice of self for the index range `[begin..self.len())`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_to","","Returns a slice of self for the index range `[0..end)`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_off","","Splits the bytes into two at the given index.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_to","","Splits the bytes into two at the given index.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clear","","Clears the buffer, removing all data.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"try_mut","","Attempts to convert into a `BytesMut` handle.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bytesmut","bytes"],"name":"result"}}],[11,"extend_from_slice","","Appends given bytes to this object.",1,null],[11,"into_buf","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"as_ref","","",1,null],[11,"deref","","",1,null],[11,"from","","",1,{"inputs":[{"name":"bytesmut"}],"output":{"name":"bytes"}}],[11,"from","","",1,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"bytes"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"bytes"}}],[11,"from","","",1,null],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"bytes"}}],[11,"from_iter","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_iter","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"bytes"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",1,null],[11,"into_iter","","",1,null],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"with_capacity","","Creates a new `BytesMut` with the specified capacity.",2,{"inputs":[{"name":"usize"}],"output":{"name":"bytesmut"}}],[11,"new","","Creates a new `BytesMut` with default capacity.",2,{"inputs":[],"output":{"name":"bytesmut"}}],[11,"len","","Returns the number of bytes contained in this `BytesMut`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `BytesMut` has a length of 0.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","Returns the number of bytes the `BytesMut` can hold without reallocating.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"freeze","","Converts `self` into an immutable `Bytes`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"split_off","","Splits the bytes into two at the given index.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytesmut"}}],[11,"take","","Removes the bytes from the current view, returning them in a new `BytesMut` handle.",2,{"inputs":[{"name":"self"}],"output":{"name":"bytesmut"}}],[11,"split_to","","Splits the buffer into two at the given index.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytesmut"}}],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clear","","Clears the buffer, removing all data.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"set_len","","Sets the length of the buffer.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted into the given `BytesMut`.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"extend_from_slice","","Appends given bytes to this object.",2,null],[11,"unsplit","","Combine splitted BytesMut objects back as contiguous.",2,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":null}],[11,"remaining_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"advance_mut","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"bytes_mut","","",2,null],[11,"put_slice","","",2,null],[11,"put_u8","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"put_i8","","",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"into_buf","","",2,null],[11,"as_ref","","",2,null],[11,"deref","","",2,null],[11,"as_mut","","",2,null],[11,"deref_mut","","",2,null],[11,"from","","",2,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"bytesmut"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"bytesmut"}}],[11,"from","","",2,null],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"bytesmut"}}],[11,"from","","",2,{"inputs":[{"name":"bytes"}],"output":{"name":"bytesmut"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"name":"ordering"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"bytesmut"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",2,null],[11,"borrow_mut","","",2,null],[11,"write_str","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","",2,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bytesmut"}}],[11,"into_iter","","",2,null],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"eq","","",2,null],[11,"partial_cmp","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[8,"Buf","","Read bytes from a buffer.",null,null],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",8,null],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,null],[10,"advance","bytes","Advance the internal cursor of the Buf",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining","bytes::buf","Returns true if there are any more bytes to consume",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,null],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[8,"BufMut","bytes","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining_mut","bytes::buf","Returns true if there is space in `self` for more bytes.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"bytes_mut","bytes","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",9,null],[11,"bytes_vec_mut","bytes::buf","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,null],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,null],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"writer"}}],[8,"IntoBuf","bytes","Conversion into a `Buf`",null,null],[16,"Buf","","The `Buf` type that `self` is being converted into",11,null],[10,"into_buf","","Creates a `Buf` from a value.",11,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"read_u16","","",12,null],[11,"read_u32","","",12,null],[11,"read_u64","","",12,null],[11,"read_uint","","",12,null],[11,"write_u16","","",12,null],[11,"write_u32","","",12,null],[11,"write_u64","","",12,null],[11,"write_uint","","",12,null],[11,"read_u16_into","","",12,null],[11,"read_u32_into","","",12,null],[11,"read_u64_into","","",12,null],[11,"write_u16_into","","",12,null],[11,"write_u32_into","","",12,null],[11,"write_u64_into","","",12,null],[11,"from_slice_u16","","",12,null],[11,"from_slice_u32","","",12,null],[11,"from_slice_u64","","",12,null],[11,"from_slice_f32","","",12,null],[11,"from_slice_f64","","",12,null],[11,"read_u16","","",13,null],[11,"read_u32","","",13,null],[11,"read_u64","","",13,null],[11,"read_uint","","",13,null],[11,"write_u16","","",13,null],[11,"write_u32","","",13,null],[11,"write_u64","","",13,null],[11,"write_uint","","",13,null],[11,"read_u16_into","","",13,null],[11,"read_u32_into","","",13,null],[11,"read_u64_into","","",13,null],[11,"write_u16_into","","",13,null],[11,"write_u32_into","","",13,null],[11,"write_u64_into","","",13,null],[11,"from_slice_u16","","",13,null],[11,"from_slice_u32","","",13,null],[11,"from_slice_u64","","",13,null],[11,"from_slice_f32","","",13,null],[11,"from_slice_f64","","",13,null],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"littleendian"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"bigendian"}}],[11,"hash","","",12,null],[11,"hash","","",13,null],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,null],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,null],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,null],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,null],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"writer"}}]],"paths":[[8,"ByteOrder"],[3,"Bytes"],[3,"BytesMut"],[3,"Chain"],[3,"Iter"],[3,"Reader"],[3,"Take"],[3,"Writer"],[8,"Buf"],[8,"BufMut"],[8,"FromBuf"],[8,"IntoBuf"],[4,"LittleEndian"],[4,"BigEndian"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["chrono"] = {"doc":"Chrono 0.4.0","items":[[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"Date","","ISO 8601 calendar date with time zone.",null,null],[3,"DateTime","","ISO 8601 combined date and time with time zone.",null,null],[3,"ParseWeekdayError","","An error resulting from reading `Weekday` value with `FromStr`.",null,null],[4,"SecondsFormat","","Specific formatting options for seconds. This may be extended in the future, so exhaustive matching in external code is not recommended.",null,null],[13,"Secs","","Format whole seconds only, with no decimal point nor subseconds.",0,null],[13,"Millis","","Use fixed 3 subsecond digits. This corresponds to Fixed::Nanosecond3.",0,null],[13,"Micros","","Use fixed 6 subsecond digits. This corresponds to Fixed::Nanosecond6.",0,null],[13,"Nanos","","Use fixed 9 subsecond digits. This corresponds to Fixed::Nanosecond9.",0,null],[13,"AutoSi","","Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to display all available non-zero sub-second digits.  This corresponds to Fixed::Nanosecond.",0,null],[4,"Weekday","","The day of week.",null,null],[13,"Mon","","Monday.",1,null],[13,"Tue","","Tuesday.",1,null],[13,"Wed","","Wednesday.",1,null],[13,"Thu","","Thursday.",1,null],[13,"Fri","","Friday.",1,null],[13,"Sat","","Saturday.",1,null],[13,"Sun","","Sunday.",1,null],[0,"prelude","","A convenience module appropriate for glob imports (`use chrono::prelude::*;`).",null,null],[0,"offset","","The time zone, which calculates offsets from the local time to UTC.",null,null],[3,"Utc","chrono::offset","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",null,null],[3,"FixedOffset","","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[3,"Local","","The local timescale. This is implemented via the standard `time` crate.",null,null],[4,"LocalResult","","The conversion result from the local time to the timezone-aware datetime types.",null,null],[13,"None","","Given local time representation is invalid. This can occur when, for example, the positive timezone transition.",2,null],[13,"Single","","Given local time representation has a single unique result.",2,null],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous. This can occur when, for example, the negative timezone transition.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"utc"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"utc"}],"output":{"name":"bool"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",3,{"inputs":[],"output":{"generics":["utc"],"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",3,{"inputs":[],"output":{"generics":["utc"],"name":"datetime"}}],[11,"from_offset","","",3,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",3,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["utc"],"name":"localresult"}}],[11,"offset_from_local_datetime","","",3,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["utc"],"name":"localresult"}}],[11,"offset_from_utc_date","","",3,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"utc"}}],[11,"offset_from_utc_datetime","","",3,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"utc"}}],[11,"fix","","",3,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",4,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",4,{"inputs":[{"name":"i32"}],"output":{"generics":["fixedoffset"],"name":"option"}}],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",4,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",4,{"inputs":[{"name":"i32"}],"output":{"generics":["fixedoffset"],"name":"option"}}],[11,"local_minus_utc","","Returns the number of seconds to add to convert from UTC to the local time.",4,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"utc_minus_local","","Returns the number of seconds to add to convert from the local time to UTC.",4,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_offset","","",4,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_local_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["fixedoffset"],"name":"localresult"}}],[11,"offset_from_local_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["fixedoffset"],"name":"localresult"}}],[11,"offset_from_utc_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"fix","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","chrono","",5,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}],[11,"clone","chrono::offset","",6,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",6,{"inputs":[],"output":{"generics":["local"],"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",6,{"inputs":[],"output":{"generics":["local"],"name":"datetime"}}],[11,"from_offset","","",6,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"local"}}],[11,"offset_from_local_date","","",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["fixedoffset"],"name":"localresult"}}],[11,"offset_from_local_datetime","","",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["fixedoffset"],"name":"localresult"}}],[11,"offset_from_utc_date","","",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"from_local_date","","",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["date"],"name":"localresult"}}],[11,"from_local_datetime","","",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"from_utc_date","","",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["local"],"name":"date"}}],[11,"from_utc_datetime","","",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["local"],"name":"datetime"}}],[8,"Offset","","The offset from the local time to UTC.",null,null],[10,"fix","","Returns the fixed offset from UTC to the local time stored.",7,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type. This type is used to store the actual offset in date and time types. The original `TimeZone` value can be recovered via `TimeZone::from_offset`.",8,null],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["date"],"name":"localresult"}}],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"}],"output":{"generics":["date"],"name":"localresult"}}],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",8,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"date"}}],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",8,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"generics":["date"],"name":"localresult"}}],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",8,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",8,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"datetime_from_str","","Parses a string with the specified format string and returns a `DateTime` with the current offset. See the `format::strftime` module on the supported escape sequences.",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[10,"from_offset","","Reconstructs the time zone from the offset.",8,null],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",8,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",8,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",8,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["date"],"name":"localresult"}}],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",8,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["datetime"],"name":"localresult"}}],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",8,null],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",8,null],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",8,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",8,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"localresult"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"map","","Maps a `LocalResult<T>` into `LocalResult<U>` with given function.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"localresult"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",2,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",2,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",2,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",2,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",2,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"naive","chrono","Date and time types which do not concern about the timezones.",null,null],[3,"NaiveDate","chrono::naive","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date.",null,null],[3,"IsoWeek","","ISO 8601 week.",null,null],[3,"NaiveTime","","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation.",null,null],[3,"NaiveDateTime","","ISO 8601 combined date and time without timezone.",null,null],[11,"serialize","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"ordering"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"from_ymd","","Makes a new `NaiveDate` from the calendar date (year, month and day).",9,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_ymd_opt","","Makes a new `NaiveDate` from the calendar date (year, month and day).",9,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"from_yo","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",9,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_yo_opt","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",9,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"from_isoywd","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",9,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"naivedate"}}],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",9,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",9,{"inputs":[{"name":"i32"}],"output":{"name":"naivedate"}}],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",9,{"inputs":[{"name":"i32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`. See the `format::strftime` module on the supported escape sequences.",9,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["naivedate"],"name":"parseresult"}}],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",9,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"succ","","Makes a new `NaiveDate` for the next calendar date.",9,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"succ_opt","","Makes a new `NaiveDate` for the next calendar date.",9,{"inputs":[{"name":"self"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"pred","","Makes a new `NaiveDate` for the previous calendar date.",9,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"pred_opt","","Makes a new `NaiveDate` for the previous calendar date.",9,{"inputs":[{"name":"self"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"checked_add_signed","","Adds the `days` part of given `Duration` to the current date.",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"checked_sub_signed","","Subtracts the `days` part of given `Duration` from the current date.",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"signed_duration_since","","Subtracts another `NaiveDate` from the current date. Returns a `Duration` of integral numbers.",9,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the date with the specified formatting items. Otherwise it is same to the ordinary `format` method.",9,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["strftimeitems"],"name":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",9,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","Returns the month number starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","Returns the month number starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","Returns the day of month starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","Returns the day of week.",9,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"iso_week","","",9,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"with_year","","Makes a new `NaiveDate` with the year number changed.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"with_month","","Makes a new `NaiveDate` with the month number (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"with_month0","","Makes a new `NaiveDate` with the month number (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"with_day","","Makes a new `NaiveDate` with the day of month (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"with_day0","","Makes a new `NaiveDate` with the day of month (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDate` with the day of year (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDate` with the day of year (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"add","","",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedate"}}],[11,"add_assign","","",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedate"}}],[11,"sub_assign","","",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"oldduration"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"generics":["naivedate"],"name":"parseresult"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"ordering"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"year","","Returns the year number for this ISO week.",10,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"week","","Returns the ISO week number starting from 1.",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"week0","","Returns the ISO week number starting from 0.",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"ordering"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",11,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",11,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",11,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",11,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",11,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",11,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",11,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",11,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",11,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",11,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`. See the `format::strftime` module on the supported escape sequences.",11,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["naivetime"],"name":"parseresult"}}],[11,"overflowing_add_signed","","Adds given `Duration` to the current time, and also returns the number of seconds in the integral number of days ignored from the addition. (We cannot return `Duration` because it is subject to overflow or underflow.)",11,null],[11,"overflowing_sub_signed","","Subtracts given `Duration` from the current time, and also returns the number of seconds in the integral number of days ignored from the subtraction. (We cannot return `Duration` because it is subject to overflow or underflow.)",11,null],[11,"signed_duration_since","","Subtracts another `NaiveTime` from the current time. Returns a `Duration` within +/- 1 day. This does not overflow or underflow at all.",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",11,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the time with the specified format string. See the `format::strftime` module on the supported escape sequences.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["strftimeitems"],"name":"delayedformat"}}],[11,"hour","","Returns the hour number from 0 to 23.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","Makes a new `NaiveTime` with the hour number changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"with_minute","","Makes a new `NaiveTime` with the minute number changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"with_second","","Makes a new `NaiveTime` with the second number changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivetime"}}],[11,"add_assign","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivetime"}}],[11,"sub_assign","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"oldduration"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"generics":["naivetime"],"name":"parseresult"}}],[11,"serialize","","",12,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"ordering"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"new","","Makes a new `NaiveDateTime` from date and time components. Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",12,{"inputs":[{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",12,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",12,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`. See the `format::strftime` module on the supported escape sequences.",12,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["naivedatetime"],"name":"parseresult"}}],[11,"date","","Retrieves a date component.",12,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"time","","Retrieves a time component.",12,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since the midnight on January 1, 1970.",12,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_millis","","Returns the number of non-leap milliseconds since midnight on January 1, 1970.",12,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole non-leap second.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole non-leap second.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole non-leap second.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",12,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",12,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"signed_duration_since","","Subtracts another `NaiveDateTime` from the current date and time. This does not overflow or underflow at all.",12,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",12,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["strftimeitems"],"name":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",12,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","Returns the month number starting from 1.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","Returns the month number starting from 0.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","Returns the day of month starting from 1.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","Returns the day of week.",12,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"iso_week","","",12,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"with_year","","Makes a new `NaiveDateTime` with the year number changed.",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_month","","Makes a new `NaiveDateTime` with the month number (starting from 1) changed.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_month0","","Makes a new `NaiveDateTime` with the month number (starting from 0) changed.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_day","","Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_day0","","Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"hour","","Returns the hour number from 0 to 23.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","Makes a new `NaiveDateTime` with the hour number changed.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_minute","","Makes a new `NaiveDateTime` with the minute number changed.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_second","","Makes a new `NaiveDateTime` with the second number changed.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"hash","","",12,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",12,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedatetime"}}],[11,"add_assign","","",12,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"sub","","",12,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedatetime"}}],[11,"sub_assign","","",12,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"sub","","",12,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"oldduration"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",12,{"inputs":[{"name":"str"}],"output":{"generics":["naivedatetime"],"name":"parseresult"}}],[0,"serde","","Serialization/Deserialization of naive types in alternate formats",null,null],[0,"ts_seconds","chrono::naive::serde","Used to serialize/deserialize from second-precision timestamps",null,null],[5,"deserialize","chrono::naive::serde::ts_seconds","Deserialize a `DateTime` from a seconds timestamp",null,{"inputs":[{"name":"d"}],"output":{"generics":["naivedatetime"],"name":"result"}}],[5,"serialize","","Serialize a UTC datetime into an integer number of seconds since the epoch",null,{"inputs":[{"name":"naivedatetime"},{"name":"s"}],"output":{"name":"result"}}],[17,"MIN_DATE","chrono::naive","The minimum possible `NaiveDate` (January 1, 262145 BCE).",null,null],[17,"MAX_DATE","","The maximum possible `NaiveDate` (December 31, 262143 CE).",null,null],[11,"clone","chrono","",13,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"from_utc","","Makes a new `Date` with given UTC date and offset. The local date should be constructed via the `TimeZone` trait.",13,null],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"succ","","Makes a new `Date` for the next date.",13,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"succ_opt","","Makes a new `Date` for the next date.",13,{"inputs":[{"name":"self"}],"output":{"generics":["date"],"name":"option"}}],[11,"pred","","Makes a new `Date` for the prior date.",13,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"pred_opt","","Makes a new `Date` for the prior date.",13,{"inputs":[{"name":"self"}],"output":{"generics":["date"],"name":"option"}}],[11,"offset","","Retrieves an associated offset from UTC.",13,null],[11,"timezone","","Retrieves an associated time zone.",13,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `Date` (but will change the string representation).",13,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"date"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date.",13,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["date"],"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date.",13,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["date"],"name":"option"}}],[11,"signed_duration_since","","Subtracts another `Date` from the current date. Returns a `Duration` of integral numbers.",13,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"oldduration"}}],[11,"naive_utc","","Returns a view to the naive UTC date.",13,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"naive_local","","Returns a view to the naive local date.",13,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"format_with_items","","Formats the date with the specified formatting items.",13,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["strftimeitems"],"name":"delayedformat"}}],[11,"year","","",13,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",13,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"iso_week","","",13,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"with_year","","",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["date"],"name":"option"}}],[11,"with_month","","",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["date"],"name":"option"}}],[11,"with_month0","","",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["date"],"name":"option"}}],[11,"with_day","","",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["date"],"name":"option"}}],[11,"with_day0","","",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["date"],"name":"option"}}],[11,"with_ordinal","","",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["date"],"name":"option"}}],[11,"with_ordinal0","","",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["date"],"name":"option"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"ordering"}}],[11,"hash","","",13,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",13,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"date"}}],[11,"sub","","",13,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"date"}}],[11,"sub","","",13,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"oldduration"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","Serialize into a rfc3339 time string",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"secondsformat"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"secondsformat"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"from_utc","","Makes a new `DateTime` with given UTC datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",5,null],[11,"date","","Retrieves a date component.",5,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",5,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",5,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_millis","","Returns the number of non-leap-milliseconds since January 1, 1970 UTC",5,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"offset","","Retrieves an associated offset from UTC.",5,null],[11,"timezone","","Retrieves an associated time zone.",5,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",5,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"datetime"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",5,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",5,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"signed_duration_since","","Subtracts another `DateTime` from the current date and time. This does not overflow or underflow at all.",5,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"oldduration"}}],[11,"naive_utc","","Returns a view to the naive UTC datetime.",5,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"naive_local","","Returns a view to the naive local datetime.",5,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",5,{"inputs":[{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",5,{"inputs":[{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",5,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_rfc3339_opts","","Return an RFC 3339 and ISO 8601 date and time string with subseconds formatted as per a `SecondsFormat`. If passed `use_z` true and the timezone is UTC (offset 0), use 'Z', as per Fixed::TimezoneOffsetColonZ. If passed `use_z` false, use Fixed::TimezoneOffsetColon.",5,{"inputs":[{"name":"self"},{"name":"secondsformat"},{"name":"bool"}],"output":{"name":"string"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["strftimeitems"],"name":"delayedformat"}}],[11,"year","","",5,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",5,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"iso_week","","",5,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"with_year","","",5,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_month","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_month0","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_day","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_day0","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_ordinal","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_ordinal0","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"hour","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_minute","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_second","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_nanosecond","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"ordering"}}],[11,"hash","","",5,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"datetime"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"datetime"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"oldduration"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"from","","",5,{"inputs":[{"name":"systemtime"}],"output":{"generics":["utc"],"name":"datetime"}}],[11,"from","","",5,{"inputs":[{"name":"systemtime"}],"output":{"generics":["local"],"name":"datetime"}}],[0,"format","","Formatting (and parsing) utilities for date and time.",null,null],[3,"Parsed","chrono::format","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year.",14,null],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE when set.",14,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when set.",14,null],[12,"isoyear","","Year in the ISO week date.",14,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is >= 1 BCE when set.",14,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is >= 1 BCE when set.",14,null],[12,"month","","Month (1--12).",14,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January (0--53, 1--53 or 1--52 depending on the year).",14,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January (0--53, 1--53 or 1--52 depending on the year).",14,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",14,null],[12,"weekday","","Day of the week.",14,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",14,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",14,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",14,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",14,null],[12,"minute","","Minute number (0--59).",14,null],[12,"second","","Second number (0--60, accounting for leap seconds).",14,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",14,null],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970.",14,null],[12,"offset","","Offset from the local time to UTC, in seconds.",14,null],[3,"InternalNumeric","","An opaque type representing numeric item types for internal uses only.",null,null],[3,"InternalFixed","","An opaque type representing fixed-format item types for internal uses only.",null,null],[3,"ParseError","","An error from the `parse` function.",null,null],[3,"DelayedFormat","","A temporary object which can be used as an argument to `format!` or others. This is normally constructed via `format` methods of each date and time type.",null,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",15,null],[13,"Zero","","Zero (`0`) padding.",15,null],[13,"Space","","Space padding.",15,null],[4,"Numeric","","Numeric item types. They have associated formatting width (FW) and parsing width (PW).",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",16,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",16,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",16,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",16,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",16,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",16,null],[13,"Month","","Month (FW=PW=2).",16,null],[13,"Day","","Day of the month (FW=PW=2).",16,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",16,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",16,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",16,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",16,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",16,null],[13,"Ordinal","","Day of the year (FW=PW=3).",16,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",16,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",16,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",16,null],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",16,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9). Note that this is not left-aligned; see also `Fixed::Nanosecond`.",16,null],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞). For formatting, it assumes UTC upon the absence of time zone offset.",16,null],[13,"Internal","","Internal uses only.",16,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",17,null],[13,"LongMonthName","","Full month names.",17,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",17,null],[13,"LongWeekdayName","","Full day of the week names.",17,null],[13,"LowerAmPm","","AM/PM.",17,null],[13,"UpperAmPm","","AM/PM.",17,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds. May print nothing, 3, 6 or 9 digits according to the available accuracy. See also `Numeric::Nanosecond`.",17,null],[13,"Nanosecond3","","Same to `Nanosecond` but the accuracy is fixed to 3.",17,null],[13,"Nanosecond6","","Same to `Nanosecond` but the accuracy is fixed to 6.",17,null],[13,"Nanosecond9","","Same to `Nanosecond` but the accuracy is fixed to 9.",17,null],[13,"TimezoneName","","Timezone name.",17,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",17,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",17,null],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",17,null],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",17,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",17,null],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",17,null],[13,"Internal","","Internal uses only.",17,null],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",null,null],[13,"Literal","","A literally printed and parsed text.",18,null],[13,"OwnedLiteral","","Same to `Literal` but with the string owned by the item.",18,null],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",18,null],[13,"OwnedSpace","","Same to `Space` but with the string owned by the item.",18,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting; the parser simply ignores any padded whitespace and zeroes.",18,null],[13,"Fixed","","Fixed-format item.",18,null],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",18,null],[5,"parse","","Tries to parse given string into `parsed` with given formatting items. Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used). There should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",null,{"inputs":[{"name":"parsed"},{"name":"str"},{"name":"i"}],"output":{"name":"parseresult"}}],[5,"format","","Tries to format given arguments with given formatting items. Internally used by `DelayedFormat`.",null,{"inputs":[{"name":"formatter"},{"generics":["naivedate"],"name":"option"},{"generics":["naivetime"],"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"parsed"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"parsed"}}],[11,"new","","Returns the initial value of parsed parts.",14,{"inputs":[],"output":{"name":"parsed"}}],[11,"set_year","","Tries to set the `year` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_month","","Tries to set the `month` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_weekday","","Tries to set the `weekday` field from given value.",14,{"inputs":[{"name":"self"},{"name":"weekday"}],"output":{"name":"parseresult"}}],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_day","","Tries to set the `day` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",14,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parseresult"}}],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_minute","","Tries to set the `minute` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_second","","Tries to set the `second` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_offset","","Tries to set the `offset` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",14,{"inputs":[{"name":"self"}],"output":{"generics":["naivedate"],"name":"parseresult"}}],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",14,{"inputs":[{"name":"self"}],"output":{"generics":["naivetime"],"name":"parseresult"}}],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, except for the `offset` field (assumed to have a given value). This is required for parsing a local time or other known-timezone inputs.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["naivedatetime"],"name":"parseresult"}}],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",14,{"inputs":[{"name":"self"}],"output":{"generics":["fixedoffset"],"name":"parseresult"}}],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",14,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields, with an additional `TimeZone` used to interpret and validate the local date.",14,{"inputs":[{"name":"self"},{"name":"tz"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[0,"strftime","","`strftime`/`strptime`-inspired date and time formatting syntax.",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",null,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"strftimeitems"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",19,{"inputs":[{"name":"str"}],"output":{"name":"strftimeitems"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["item"],"name":"option"}}],[6,"ParseResult","chrono::format","Same to `Result<T, ParseError>`.",null,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"pad"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"pad"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"numeric"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"internalnumeric"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"fixed"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"internalfixed"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",22,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",23,{"inputs":[{"generics":["naivedate"],"name":"option"},{"generics":["naivetime"],"name":"option"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",23,{"inputs":[{"generics":["naivedate"],"name":"option"},{"generics":["naivetime"],"name":"option"},{"name":"off"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","chrono","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"serde","","Serialization/Deserialization in alternate formats",null,null],[0,"ts_seconds","chrono::serde","Ser/de to/from timestamps in seconds",null,null],[5,"deserialize","chrono::serde::ts_seconds","Deserialize a `DateTime` from a seconds timestamp",null,{"inputs":[{"name":"d"}],"output":{"generics":["datetime"],"name":"result"}}],[5,"serialize","","Serialize a UTC datetime into an integer number of seconds since the epoch",null,{"inputs":[{"name":"datetime"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","chrono","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[17,"MIN_DATE","","The minimum possible `Date`.",null,null],[17,"MAX_DATE","","The maximum possible `Date`.",null,null],[8,"SubsecRound","","Extension trait for subsecond rounding or truncation to a maximum number of digits. Rounding can be used to decrease the error variance when serializing/persisting to lower precision. Truncation is the default behavior in Chrono display formatting.  Either can be used to guarantee equality (e.g. for testing) when round-tripping through a lower precision format.",null,null],[10,"round_subsecs","","Return a copy rounded to the specified number of subsecond digits. With 9 or more digits, self is returned unmodified. Halfway values are rounded up (away from zero).",24,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"self"}}],[10,"trunc_subsecs","","Return a copy truncated to the specified number of subsecond digits. With 9 or more digits, self is returned unmodified.",24,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"self"}}],[8,"Datelike","","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the calendar date.",25,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",25,null],[10,"month","","Returns the month number starting from 1.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"month0","","Returns the month number starting from 0.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day","","Returns the day of month starting from 1.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"weekday","","Returns the day of week.",25,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[10,"iso_week","","Returns the ISO week.",25,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[10,"with_year","","Makes a new value with the year number changed.",25,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",25,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",26,null],[10,"minute","","Returns the minute number from 0 to 59.",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"weekday"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"succ","","The next day in the week.",1,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"pred","","The previous day in the week.",1,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_i64","","",1,{"inputs":[{"name":"i64"}],"output":{"generics":["weekday"],"name":"option"}}],[11,"from_u64","","",1,{"inputs":[{"name":"u64"}],"output":{"generics":["weekday"],"name":"option"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"parseweekdayerror"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"parseweekdayerror"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"parseweekdayerror"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",28,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",28,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",28,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",28,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",28,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",28,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",28,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",28,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",28,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",28,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",28,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",28,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",28,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",28,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",28,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",28,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",28,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",28,{"inputs":[{"name":"duration"}],"output":{"generics":["duration","outofrangeerror"],"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",28,{"inputs":[{"name":"self"}],"output":{"generics":["duration","outofrangeerror"],"name":"result"}}],[11,"mul","","",28,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"div","","",28,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"add","","",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"neg","","",28,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"sub","","",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"add","chrono::naive","",11,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivetime"}}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivetime"}}],[11,"add","","",12,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivedatetime"}}],[11,"sub","","",12,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivedatetime"}}]],"paths":[[4,"SecondsFormat"],[4,"Weekday"],[4,"LocalResult"],[3,"Utc"],[3,"FixedOffset"],[3,"DateTime"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"IsoWeek"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"Parsed"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"StrftimeItems"],[3,"InternalNumeric"],[3,"InternalFixed"],[3,"ParseError"],[3,"DelayedFormat"],[8,"SubsecRound"],[8,"Datelike"],[8,"Timelike"],[3,"ParseWeekdayError"],[3,"Duration"]]};
searchIndex["codepage_437"] = {"doc":"Conversion to and from codepage 437.","items":[[3,"Cp437Dialect","codepage_437","Specifier for the specific kind of cp437.",null,null],[3,"IntoCp437Error","","A possible error value when converting a `String` into a cp437 byte vector.",null,null],[3,"Cp437Error","","Errors which can occur when attempting to interpret a string as a sequence of cp437 codepoints.",null,null],[12,"representable_up_to","","Returns the index in the given string up to which valid cp437 was verified.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"cp437error"}}],[11,"hash","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"cp437error"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"cp437error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"cp437error"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"cp437error"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"cp437error"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"cp437error"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"cp437error"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"cp437error"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"intocp437error"}}],[11,"hash","","",1,null],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"intocp437error"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"intocp437error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"intocp437error"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"intocp437error"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"intocp437error"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"intocp437error"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"intocp437error"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"intocp437error"}],"output":{"name":"bool"}}],[11,"as_str","","Returns a `&str` that was attempted to convert to cp437.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","Returns the `String` that was attempted to convert to cp437.",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"cp437_error","","Fetch a `Cp437Error` to get more details about the conversion failure.",1,{"inputs":[{"name":"self"}],"output":{"name":"cp437error"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"cp437dialect"}}],[11,"overlap_unicode","","Check, whether the specified Unicode codepoint overlaps with a cp437 one.",2,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"overlap_cp437","","Check, whether the specified cp437 codepoint overlaps with a Unicode one.",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"decode","","Decode a single cp437 codepoint into a Unicode one.",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"char"}}],[11,"encode","","Try to encode a single Unicode codepoint as a cp437 one.",2,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["u8"],"name":"option"}}],[11,"remap","","Map the specified cp437 codepoint mapped to the specified unicode character instead.",2,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"char"}],"output":{"name":"cp437dialect"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"cp437dialect"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"cp437dialect"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"cp437dialect"}],"output":{"generics":["ordering"],"name":"option"}}],[7,"CP437_CONTROL","","`cp437_DOSLatinUS` as provided by the Unicode Consortium.",null,null],[7,"CP437_WINGDINGS","","cp437 with wingdings, as seen on Wikipedia.",null,null],[8,"BorrowFromCp437","","Try to borrow data encoded in cp437 as a Unicode container of the specified type.",null,null],[10,"borrow_from_cp437","","Do the conversion.",3,{"inputs":[{"name":"t"},{"name":"cp437dialect"}],"output":{"name":"self"}}],[8,"FromCp437","","Move data encoded in cp437 to a Unicode container of the specified type.",null,null],[10,"from_cp437","","Do the conversion.",4,{"inputs":[{"name":"t"},{"name":"cp437dialect"}],"output":{"name":"self"}}],[8,"IntoCp437","","Move Unicode data to a container of cp437 data.",null,null],[10,"into_cp437","","Do the conversion.",5,{"inputs":[{"name":"self"},{"name":"cp437dialect"}],"output":{"generics":["intocp437error"],"name":"result"}}],[8,"ToCp437","","Borrow (if possible) Unicode data as cp437 data.",null,null],[10,"to_cp437","","Do the conversion.",6,{"inputs":[{"name":"self"},{"name":"cp437dialect"}],"output":{"generics":["cp437error"],"name":"result"}}]],"paths":[[3,"Cp437Error"],[3,"IntoCp437Error"],[3,"Cp437Dialect"],[8,"BorrowFromCp437"],[8,"FromCp437"],[8,"IntoCp437"],[8,"ToCp437"]]};
searchIndex["color_quant"] = {"doc":"Color quantization library This library provides a color quantizer based on the NEUQUANT quantization algorithm by Anthony Dekker. ### Usage `let data = vec![0; 40]; let nq = color_quant::NeuQuant::new(10, 256, &data); let indixes: Vec<u8> = data.chunks(4).map(|pix| nq.index_of(pix) as u8).collect(); let color_map = nq.color_map_rgba();`","items":[[3,"NeuQuant","color_quant","Neural network based color quantizer.",null,null],[11,"new","","Creates a new neuronal network and trains it with the supplied data.",0,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data.",0,null],[11,"map_pixel","","Maps the rgba-pixel in-place to the best-matching color in the color map.",0,null],[11,"index_of","","Finds the best-matching index in the color map.",0,null],[11,"color_map_rgba","","Returns the RGBA color map calculated from the sample. ",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"color_map_rgb","","Returns the RGBA color map calculated from the sample. ",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}]],"paths":[[3,"NeuQuant"]]};
searchIndex["config"] = {"doc":"Config organizes hierarchical or layered configurations for Rust applications.","items":[[3,"Config","config","A prioritized configuration repository. It maintains a set of configuration sources, fetches values to populate those, and provides them according to the source's priority.",null,null],[12,"cache","","Root of the cached configuration.",0,null],[3,"Value","","A configuration value.",null,null],[12,"kind","","Underlying kind of the configuration value.",1,null],[3,"File","","",null,null],[3,"Environment","","",null,null],[4,"ConfigError","","Represents all possible errors that can occur when working with configuration.",null,null],[13,"Frozen","","Configuration is frozen and no further mutations can be made.",2,null],[13,"NotFound","","Configuration property was not found",2,null],[13,"PathParse","","Configuration path could not be parsed.",2,null],[13,"FileParse","","Configuration could not be parsed from file.",2,null],[12,"uri","config::ConfigError","The URI used to access the file (if not loaded from a string). Example: `/path/to/config.json`",2,null],[12,"cause","","The captured error from attempting to parse the file in its desired format. This is the actual error object from the library used for the parsing.",2,null],[13,"Type","config","Value could not be converted into the requested type.",2,null],[12,"origin","config::ConfigError","The URI that references the source that the value came from. Example: `/path/to/config.json` or `Environment` or `etcd://localhost`",2,null],[12,"unexpected","","What we found when parsing the value",2,null],[12,"expected","","What was expected when parsing the value",2,null],[12,"key","","The key in the configuration hash of this value (if available where the error is generated).",2,null],[13,"Message","config","Custom message",2,null],[13,"Foreign","","Unadorned error from a foreign origin.",2,null],[4,"FileFormat","","",null,null],[13,"Toml","","TOML (parsed with toml)",3,null],[13,"Json","","JSON (parsed with serde_json)",3,null],[13,"Yaml","","YAML (parsed with yaml_rust)",3,null],[13,"Hjson","","HJSON (parsed with serde_hjson)",3,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"custom","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"value"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"new","","Create a new value instance that will remember its source uri.",1,{"inputs":[{"generics":["string"],"name":"option"},{"name":"v"}],"output":{"name":"self"}}],[11,"try_into","","Attempt to deserialize this value into the requested type.",1,{"inputs":[{"name":"self"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"into_bool","","Returns `self` as a bool, if possible.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool","configerror"],"name":"result"}}],[11,"into_int","","Returns `self` into an i64, if possible.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i64","configerror"],"name":"result"}}],[11,"into_float","","Returns `self` into a f64, if possible.",1,{"inputs":[{"name":"self"}],"output":{"generics":["f64","configerror"],"name":"result"}}],[11,"into_str","","Returns `self` into a str, if possible.",1,{"inputs":[{"name":"self"}],"output":{"generics":["string","configerror"],"name":"result"}}],[11,"into_array","","Returns `self` into an array, if possible",1,{"inputs":[{"name":"self"}],"output":{"generics":["vec","configerror"],"name":"result"}}],[11,"into_table","","If the `Value` is a Table, returns the associated Map.",1,{"inputs":[{"name":"self"}],"output":{"generics":["hashmap","configerror"],"name":"result"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"generics":["value"],"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_bool","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_i8","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_i16","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_i32","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_i64","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_u8","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_u16","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_u32","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_u64","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_f32","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_f64","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_str","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_string","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_option","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_char","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",1,null],[11,"deserialize_unit","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",1,null],[11,"deserialize_newtype_struct","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_identifier","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_identifier","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"config"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"merge","","Merge in a configuration property source.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["config","configerror"],"name":"result"}}],[11,"refresh","","Refresh the configuration cache with fresh data from added sources.",0,{"inputs":[{"name":"self"}],"output":{"generics":["config","configerror"],"name":"result"}}],[11,"set_default","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["config","configerror"],"name":"result"}}],[11,"set","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["config","configerror"],"name":"result"}}],[11,"get","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"get_str","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string","configerror"],"name":"result"}}],[11,"get_int","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["i64","configerror"],"name":"result"}}],[11,"get_float","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["f64","configerror"],"name":"result"}}],[11,"get_bool","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["bool","configerror"],"name":"result"}}],[11,"get_table","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["hashmap","configerror"],"name":"result"}}],[11,"get_array","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["vec","configerror"],"name":"result"}}],[11,"try_into","","Attempt to deserialize the entire configuration into the requested type.",0,{"inputs":[{"name":"self"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"clone_into_box","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["source"],"name":"box"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["hashmap","configerror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"fileformat"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"fileformat"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"},{"name":"fileformat"}],"output":{"name":"self"}}],[11,"new","","",4,{"inputs":[{"name":"str"},{"name":"fileformat"}],"output":{"name":"self"}}],[11,"with_name","","Given the basename of a file, will attempt to locate a file by setting its extension to a registered format.",4,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"path"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"pathbuf"}],"output":{"name":"self"}}],[11,"format","","",4,{"inputs":[{"name":"self"},{"name":"fileformat"}],"output":{"name":"self"}}],[11,"required","","",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"clone_into_box","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["source"],"name":"box"}}],[11,"collect","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["hashmap","configerror"],"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"environment"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"with_prefix","","",5,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"prefix","","",5,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"self"}}],[11,"separator","","",5,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"self"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"environment"}}],[11,"clone_into_box","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["source"],"name":"box"}}],[11,"collect","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["hashmap","configerror"],"name":"result"}}],[8,"Source","","Describes a generic source of configuration properties.",null,null],[10,"clone_into_box","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["source"],"name":"box"}}],[10,"collect","","Collect all configuration properties available from this source and return a HashMap.",6,{"inputs":[{"name":"self"}],"output":{"generics":["hashmap","configerror"],"name":"result"}}],[11,"collect_to","","",6,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["configerror"],"name":"result"}}],[11,"collect_to","","",6,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["configerror"],"name":"result"}}]],"paths":[[3,"Config"],[3,"Value"],[4,"ConfigError"],[4,"FileFormat"],[3,"File"],[3,"Environment"],[8,"Source"]]};
searchIndex["constant_time_eq"] = {"doc":"","items":[[5,"constant_time_eq","constant_time_eq","Compares two equal-sized byte strings in constant time.",null,null]],"paths":[]};
searchIndex["cookie"] = {"doc":"HTTP cookie parsing and cookie jar management.","items":[[3,"PrivateJar","cookie","A child cookie jar that provides authenticated encryption for its cookies.",null,null],[3,"SignedJar","","A child cookie jar that authenticates its cookies.",null,null],[3,"Key","","A cryptographic master key for use with `Signed` and/or `Private` jars.",null,null],[3,"CookieBuilder","","Structure that follows the builder pattern for building `Cookie` structs.",null,null],[3,"CookieJar","","A collection of cookies that tracks its modifications.",null,null],[3,"Delta","","Iterator over the changes to a cookie jar.",null,null],[3,"Iter","","Iterator over all of the cookies in a jar.",null,null],[3,"Cookie","","Representation of an HTTP cookie.",null,null],[3,"EncodedCookie","","Wrapper around `Cookie` whose `Display` implementation percent-encodes the cookie's name and value.",null,null],[4,"ParseError","","Enum corresponding to a parsing error.",null,null],[13,"MissingPair","","The cookie did not contain a name/value pair.",0,null],[13,"EmptyName","","The cookie's name was empty.",0,null],[13,"Utf8Error","","Decoding the cookie's name or value resulted in invalid UTF-8.",0,null],[4,"SameSite","","The `SameSite` cookie attribute.",null,null],[13,"Strict","","The \"Strict\" `SameSite` attribute.",1,null],[13,"Lax","","The \"Lax\" `SameSite` attribute.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"cookiebuilder"}}],[11,"new","","Creates a new `CookieBuilder` instance from the given name and value.",2,{"inputs":[{"name":"n"},{"name":"v"}],"output":{"name":"cookiebuilder"}}],[11,"expires","","Sets the `expires` field in the cookie being built.",2,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"cookiebuilder"}}],[11,"max_age","","Sets the `max_age` field in the cookie being built.",2,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"cookiebuilder"}}],[11,"domain","","Sets the `domain` field in the cookie being built.",2,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"cookiebuilder"}}],[11,"path","","Sets the `path` field in the cookie being built.",2,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"cookiebuilder"}}],[11,"secure","","Sets the `secure` field in the cookie being built.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"cookiebuilder"}}],[11,"http_only","","Sets the `http_only` field in the cookie being built.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"cookiebuilder"}}],[11,"same_site","","Sets the `same_site` field in the cookie being built.",2,{"inputs":[{"name":"self"},{"name":"samesite"}],"output":{"name":"cookiebuilder"}}],[11,"permanent","","Makes the cookie being built 'permanent' by extending its expiration and max age 20 years into the future.",2,{"inputs":[{"name":"self"}],"output":{"name":"cookiebuilder"}}],[11,"finish","","Finishes building and returns the built `Cookie`.",2,{"inputs":[{"name":"self"}],"output":{"name":"cookie"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"as_str","","Returns a description of this error as a string",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"utf8error"}],"output":{"name":"parseerror"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"cookiejar"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cookiejar"}}],[11,"new","","Creates an empty cookie jar.",3,{"inputs":[],"output":{"name":"cookiejar"}}],[11,"get","","Returns a reference to the `Cookie` inside this jar with the name `name`. If no such cookie exists, returns `None`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["cookie"],"name":"option"}}],[11,"add_original","","Adds an \"original\" `cookie` to this jar. Adding an original cookie does not affect the delta computation. This method is intended to be used to seed the cookie jar with cookies received from a client's HTTP message.",3,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":null}],[11,"add","","Adds `cookie` to this jar.",3,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":null}],[11,"remove","","Removes `cookie` from this jar. If an original cookie with the same name as `cookie` is present in the jar, a removal cookie will be present in the `delta` computation. To properly generate the removal cookie, `cookie` must contain the same `path` and `domain` as the cookie that was initially set.",3,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":null}],[11,"clear","","Removes all cookies from this cookie jar.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"delta","","Returns an iterator over cookies that represent the changes to this jar over time. These cookies can be rendered directly as `Set-Cookie` header values to affect the changes made to this jar on the client.",3,{"inputs":[{"name":"self"}],"output":{"name":"delta"}}],[11,"iter","","Returns an iterator over all of the cookies present in this jar.",3,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"private","","Returns a `PrivateJar` with `self` as its parent jar using the key `key` to sign/encrypt and verify/decrypt cookies added/retrieved from the child jar.",3,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"privatejar"}}],[11,"signed","","Returns a `SignedJar` with `self` as its parent jar using the key `key` to sign/verify cookies added/retrieved from the child jar.",3,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"signedjar"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["cookie"],"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["cookie"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"samesite"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"samesite"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"is_strict","","Returns `true` if `self` is `SameSite::Strict` and `false` otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_lax","","Returns `true` if `self` is `SameSite::Lax` and `false` otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Returns a reference to the `Cookie` inside this jar with the name `name` and authenticates and decrypts the cookie's value, returning a `Cookie` with the decrypted value. If the cookie cannot be found, or the cookie fails to authenticate or decrypt, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["cookie"],"name":"option"}}],[11,"add","","Adds `cookie` to the parent jar. The cookie's value is encrypted with authenticated encryption assuring confidentiality, integrity, and authenticity.",6,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":null}],[11,"remove","","Removes `cookie` from the parent jar.",6,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":null}],[11,"get","","Returns a reference to the `Cookie` inside this jar with the name `name` and verifies the authenticity and integrity of the cookie's value, returning a `Cookie` with the authenticated value. If the cookie cannot be found, or the cookie fails to verify, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["cookie"],"name":"option"}}],[11,"add","","Adds `cookie` to the parent jar. The cookie's value is signed assuring integrity and authenticity.",7,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":null}],[11,"remove","","Removes `cookie` from the parent jar.",7,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"key"}}],[11,"from_master","","Derives new signing/encryption keys from a master key.",8,null],[11,"generate","","Generates signing/encryption keys from a secure, random source. Keys are generated nondeterministically.",8,{"inputs":[],"output":{"name":"key"}}],[11,"try_generate","","Attempts to generate signing/encryption keys from a secure, random source. Keys are generated nondeterministically. If randomness cannot be retrieved from the underlying operating system, returns `None`.",8,{"inputs":[],"output":{"generics":["key"],"name":"option"}}],[11,"signing","","Returns the raw bytes of a key suitable for signing cookies.",8,null],[11,"encryption","","Returns the raw bytes of a key suitable for encrypting cookies.",8,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"cookie"}}],[11,"new","","Creates a new `Cookie` with the given name and value.",9,{"inputs":[{"name":"n"},{"name":"v"}],"output":{"name":"cookie"}}],[11,"named","","Creates a new `Cookie` with the given name and an empty value.",9,{"inputs":[{"name":"n"}],"output":{"name":"cookie"}}],[11,"build","","Creates a new `CookieBuilder` instance from the given key and value strings.",9,{"inputs":[{"name":"n"},{"name":"v"}],"output":{"name":"cookiebuilder"}}],[11,"parse","","Parses a `Cookie` from the given HTTP cookie header value string. Does not perform any percent-decoding.",9,{"inputs":[{"name":"s"}],"output":{"generics":["cookie","parseerror"],"name":"result"}}],[11,"parse_encoded","","Parses a `Cookie` from the given HTTP cookie header value string where the name and value fields are percent-encoded. Percent-decodes the name/value fields.",9,{"inputs":[{"name":"s"}],"output":{"generics":["cookie","parseerror"],"name":"result"}}],[11,"encoded","","Wraps `self` in an `EncodedCookie`: a cost-free wrapper around `Cookie` whose `Display` implementation percent-encodes the name and value of the wrapped `Cookie`.",9,{"inputs":[{"name":"self"}],"output":{"name":"encodedcookie"}}],[11,"into_owned","","Converts `self` into a `Cookie` with a static lifetime. This method results in at most one allocation.",9,{"inputs":[{"name":"self"}],"output":{"name":"cookie"}}],[11,"name","","Returns the name of `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"value","","Returns the value of `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"name_value","","Returns the name and value of `self` as a tuple of `(name, value)`.",9,null],[11,"http_only","","Returns whether this cookie was marked `HttpOnly` or not.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"secure","","Returns whether this cookie was marked `Secure` or not.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"same_site","","Returns the `SameSite` attribute of this cookie if one was specified.",9,{"inputs":[{"name":"self"}],"output":{"generics":["samesite"],"name":"option"}}],[11,"max_age","","Returns the specified max-age of the cookie if one was specified.",9,{"inputs":[{"name":"self"}],"output":{"generics":["duration"],"name":"option"}}],[11,"path","","Returns the `Path` of the cookie if one was specified.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"domain","","Returns the `Domain` of the cookie if one was specified.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"expires","","Returns the `Expires` time of the cookie if one was specified.",9,{"inputs":[{"name":"self"}],"output":{"generics":["tm"],"name":"option"}}],[11,"set_name","","Sets the name of `self` to `name`.",9,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_value","","Sets the value of `self` to `value`.",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"set_http_only","","Sets the value of `http_only` in `self` to `value`.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_secure","","Sets the value of `secure` in `self` to `value`.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_same_site","","Sets the value of `same_site` in `self` to `value`.",9,{"inputs":[{"name":"self"},{"name":"samesite"}],"output":null}],[11,"set_max_age","","Sets the value of `max_age` in `self` to `value`.",9,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"set_path","","Sets the `path` of `self` to `path`.",9,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"set_domain","","Sets the `domain` of `self` to `domain`.",9,{"inputs":[{"name":"self"},{"name":"d"}],"output":null}],[11,"set_expires","","Sets the expires field of `self` to `time`.",9,{"inputs":[{"name":"self"},{"name":"tm"}],"output":null}],[11,"make_permanent","","Makes `self` a \"permanent\" cookie by extending its expiration and max age 20 years into the future.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"name_raw","","Returns the name of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, returns `None`.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"value_raw","","Returns the value of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, returns `None`.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"path_raw","","Returns the `Path` of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, or if `self` doesn't contain a `Path`, or if the `Path` has changed since parsing, returns `None`.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"domain_raw","","Returns the `Domain` of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, or if `self` doesn't contain a `Domain`, or if the `Domain` has changed since parsing, returns `None`.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Formats the cookie `self` as a `Set-Cookie` header value.",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"generics":["cookie","parseerror"],"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}]],"paths":[[4,"ParseError"],[4,"SameSite"],[3,"CookieBuilder"],[3,"CookieJar"],[3,"Delta"],[3,"Iter"],[3,"PrivateJar"],[3,"SignedJar"],[3,"Key"],[3,"Cookie"],[3,"EncodedCookie"]]};
searchIndex["crossbeam_channel"] = {"doc":"Multi-producer multi-consumer channels for message passing.","items":[[3,"Receiver","crossbeam_channel","The receiving half of a channel.",null,null],[3,"Sender","","The sending half of a channel.",null,null],[3,"IntoIter","","An owning iterator that waits for messages until the channel is disconnected.",null,null],[3,"Iter","","An iterator that waits for messages until the channel is disconnected.",null,null],[3,"TryIter","","An iterator that receives messages until the channel is empty or disconnected.",null,null],[3,"RecvError","","An error returned from the [`Receiver::recv`] method.",null,null],[3,"SendError","","An error returned from the [`Sender::send`] method.",null,null],[12,"0","","",0,null],[3,"SelectRecvError","","An error returned from the [`Select::recv`] method.",null,null],[3,"SelectSendError","","An error returned from the [`Select::send`] method.",null,null],[12,"0","","",1,null],[3,"Select","","The dynamic selection interface.",null,null],[4,"RecvTimeoutError","","This enumeration is the list of possible errors that made [`recv_timeout`] unable to return data when called. This can occur with both bounded and unbounded channels.",null,null],[13,"Timeout","","This channel is currently empty, but the senders have not yet disconnected, so data may yet become available.",2,null],[13,"Disconnected","","The channel's sending half has become disconnected, and there will never be any more data received on it.",2,null],[4,"TryRecvError","","This enumeration is the list of the possible reasons that [`try_recv`] could not return data when called. This can occur with both bounded and unbounded channels.",null,null],[13,"Empty","","This channel is currently empty, but the senders have not yet disconnected, so data may yet become available.",3,null],[13,"Disconnected","","The channel's sending half has become disconnected, and there will never be any more data received on it.",3,null],[4,"SendTimeoutError","","This enumeration is the list of possible errors that made [`send_timeout`] unable to return data when called. This can occur with bounded channels only.",null,null],[13,"Timeout","","This channel is currently full, but the receivers have not yet disconnected.",4,null],[13,"Disconnected","","The channel's receiving half has become disconnected.",4,null],[4,"TrySendError","","This enumeration is the list of the possible error outcomes for the [`try_send`] method.",null,null],[13,"Full","","The data could not be sent on the channel because it would require that the callee block to send the data.",5,null],[13,"Disconnected","","This channel's receiving half has disconnected, so the data could not be sent. The data is returned back to the callee in this case.",5,null],[5,"bounded","","Creates a new channel of bounded capacity, returning the sender/receiver halves.",null,null],[5,"unbounded","","Creates a new channel of unbounded capacity, returning the sender/receiver halves.",null,null],[11,"try_send","","Attempts to send a message into the channel without blocking.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["trysenderror"],"name":"result"}}],[11,"send","","Sends a message into the channel, blocking if the channel is full.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"result"}}],[11,"send_timeout","","Sends a message into the channel, blocking if the channel is full for a limited time.",6,{"inputs":[{"name":"self"},{"name":"t"},{"name":"duration"}],"output":{"generics":["sendtimeouterror"],"name":"result"}}],[11,"is_empty","","Returns `true` if the channel is empty.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of messages in the channel.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","If the channel is bounded, returns its capacity.",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"is_disconnected","","Returns `true` if the channel is disconnected (i.e. there are no receivers).",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_recv","","Attempts to receive a message from the channel without blocking.",7,{"inputs":[{"name":"self"}],"output":{"generics":["tryrecverror"],"name":"result"}}],[11,"recv","","Waits for a message to be received from the channel.",7,{"inputs":[{"name":"self"}],"output":{"generics":["recverror"],"name":"result"}}],[11,"recv_timeout","","Waits for a message to be received from the channel but only for a limited time.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["recvtimeouterror"],"name":"result"}}],[11,"is_empty","","Returns `true` if the channel is empty.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of messages in the channel.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","If the channel is bounded, returns its capacity.",7,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"is_disconnected","","Returns `true` if the channel is disconnected (i.e. there are no senders).",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator that waits for messages until the channel is disconnected.",7,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"try_iter","","Returns an iterator that receives messages until the channel is empty or disconnected.",7,{"inputs":[{"name":"self"}],"output":{"name":"tryiter"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter","","",7,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"senderror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"trysenderror"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"sendtimeouterror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"sendtimeouterror"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"sendtimeouterror"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"selectsenderror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"selectsenderror"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"selectsenderror"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"recverror"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"tryrecverror"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"recvtimeouterror"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"recvtimeouterror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"selectrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"selectrecverror"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"into_inner","","Unwraps the value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"into_inner","","Unwraps the value.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"into_inner","","Unwraps the value.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"into_inner","","Unwraps the value.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"new","","Constructs a new state machine for selection.",13,{"inputs":[],"output":{"name":"select"}}],[11,"with_timeout","","Constructs a new state machine for selection with a specific `timeout`.",13,{"inputs":[{"name":"duration"}],"output":{"name":"select"}}],[11,"send","","Probes a send case.",13,{"inputs":[{"name":"self"},{"name":"sender"},{"name":"t"}],"output":{"generics":["selectsenderror"],"name":"result"}}],[11,"recv","","Probes a receive case.",13,{"inputs":[{"name":"self"},{"name":"receiver"}],"output":{"generics":["selectrecverror"],"name":"result"}}],[11,"disconnected","","Probes a disconnected case.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"would_block","","Probes a would block case.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"timed_out","","Probes a timed out case.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"select"}}],[14,"select_loop","","The static selection macro.",null,null]],"paths":[[3,"SendError"],[3,"SelectSendError"],[4,"RecvTimeoutError"],[4,"TryRecvError"],[4,"SendTimeoutError"],[4,"TrySendError"],[3,"Sender"],[3,"Receiver"],[3,"Iter"],[3,"TryIter"],[3,"IntoIter"],[3,"RecvError"],[3,"SelectRecvError"],[3,"Select"]]};
searchIndex["crossbeam_deque"] = {"doc":"A concurrent work-stealing deque.","items":[[3,"Deque","crossbeam_deque","A concurrent work-stealing deque.",null,null],[3,"Stealer","","A stealer that steals elements from the top of a deque.",null,null],[4,"Steal","","Possible outcomes of a steal operation.",null,null],[13,"Empty","","The deque was empty at the time of stealing.",0,null],[13,"Data","","Some data has been successfully stolen.",0,null],[13,"Retry","","Lost the race for stealing data to another concurrent operation. Try again.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"ordering"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"new","","Returns a new deque.",1,{"inputs":[],"output":{"name":"deque"}}],[11,"with_min_capacity","","Returns a new deque with the specified minimum capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"deque"}}],[11,"is_empty","","Returns `true` if the deque is empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of elements in the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"push","","Pushes an element into the bottom of the deque.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Pops an element from the bottom of the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","Steals an element from the top of the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"stealer","","Creates a stealer that can be shared with other threads.",1,{"inputs":[{"name":"self"}],"output":{"name":"stealer"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"deque"}}],[11,"is_empty","","Returns `true` if the deque is empty.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of elements in the deque.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"steal","","Steals an element from the top of the deque.",2,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"clone","","Creates another stealer.",2,{"inputs":[{"name":"self"}],"output":{"name":"stealer"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Steal"],[3,"Deque"],[3,"Stealer"]]};
searchIndex["crossbeam_epoch"] = {"doc":"Epoch-based memory reclamation.","items":[[3,"Atomic","crossbeam_epoch","An atomic pointer that can be safely shared between threads.",null,null],[3,"CompareAndSetError","","The error returned on failed compare-and-set operation.",null,null],[12,"current","","The value in the atomic pointer at the time of the failed operation.",0,null],[12,"new","","The new value, which the operation failed to store.",0,null],[3,"Owned","","An owned heap-allocated object.",null,null],[3,"Shared","","A pointer to an object protected by the epoch GC.",null,null],[3,"Guard","","A guard that keeps the current thread pinned.",null,null],[3,"Collector","","An epoch-based garbage collector.",null,null],[3,"Handle","","A handle to a garbage collector.",null,null],[5,"unprotected","","Returns a reference to a dummy guard that allows unprotected access to [`Atomic`]s.",null,{"inputs":[],"output":{"name":"guard"}}],[5,"default_handle","","Returns the default handle associated with the current thread.",null,{"inputs":[],"output":{"name":"handle"}}],[5,"is_pinned","","Returns `true` if the current thread is pinned.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"pin","","Pins the current thread.",null,{"inputs":[],"output":{"name":"guard"}}],[11,"null","","Returns a new null atomic pointer.",1,{"inputs":[],"output":{"name":"atomic"}}],[11,"new","","Allocates `value` on the heap and returns a new atomic pointer pointing to it.",1,{"inputs":[{"name":"t"}],"output":{"name":"atomic"}}],[11,"load","","Loads a `Shared` from the atomic pointer.",1,{"inputs":[{"name":"self"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"store","","Stores a `Shared` or `Owned` pointer into the atomic pointer.",1,{"inputs":[{"name":"self"},{"name":"p"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a `Shared` or `Owned` pointer into the atomic pointer, returning the previous `Shared`.",1,{"inputs":[{"name":"self"},{"name":"p"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"compare_and_set","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`.",1,{"inputs":[{"name":"self"},{"name":"shared"},{"name":"p"},{"name":"o"},{"name":"guard"}],"output":{"generics":["shared","compareandseterror"],"name":"result"}}],[11,"compare_and_set_weak","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`.",1,{"inputs":[{"name":"self"},{"name":"shared"},{"name":"p"},{"name":"o"},{"name":"guard"}],"output":{"generics":["shared","compareandseterror"],"name":"result"}}],[11,"fetch_and","","Bitwise \"and\" with the current tag.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"fetch_or","","Bitwise \"or\" with the current tag.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current tag.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","Returns a copy of the atomic value.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `owned`.",1,{"inputs":[{"name":"owned"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `ptr`.",1,{"inputs":[{"name":"shared"}],"output":{"name":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `raw`.",1,null],[11,"new","","Allocates `value` on the heap and returns a new owned pointer pointing to it.",2,{"inputs":[{"name":"t"}],"output":{"name":"owned"}}],[11,"from_raw","","Returns a new owned pointer pointing to `raw`.",2,null],[11,"into_shared","","Converts the owned pointer into a [`Shared`].",2,{"inputs":[{"name":"self"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"into_box","","Converts the owned pointer into a `Box`.",2,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"tag","","Returns the tag stored within the pointer.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"owned"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","Returns a new owned pointer pointing to `b`.",2,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"borrow","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"null","","Returns a new null pointer.",3,{"inputs":[],"output":{"name":"shared"}}],[11,"is_null","","Returns `true` if the pointer is null.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_raw","","Converts the pointer to a raw pointer (without the tag).",3,null],[11,"deref","","Dereferences the pointer.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","Converts the pointer to a reference.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_owned","","Takes ownership of the pointee.",3,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"tag","","Returns the tag stored within the pointer.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"shared"}}],[11,"from","","Returns a new pointer pointing to `raw`.",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new collector.",4,{"inputs":[],"output":{"name":"self"}}],[11,"handle","","Creates a new handle for the collector.",4,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"clone","","Creates another reference to the same garbage collector.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pin","","Pins the handle.",5,{"inputs":[{"name":"self"}],"output":{"name":"guard"}}],[11,"is_pinned","","Returns `true` if the handle is pinned.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"defer","","Stores a function so that it can be executed at some point after all currently pinned threads get unpinned.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"flush","","Clears up the thread-local cache of deferred functions by executing them or moving into the global cache.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"repin","","Unpins and then immediately re-pins the thread.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"repin_after","","Temporarily unpins the thread, executes the given function and then re-pins the thread.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"guard"}}],[8,"CompareAndSetOrdering","","Memory orderings for compare-and-set operations.",null,null],[10,"success","","The ordering of the operation when it succeeds.",7,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[10,"failure","","The ordering of the operation when it fails.",7,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}]],"paths":[[3,"CompareAndSetError"],[3,"Atomic"],[3,"Owned"],[3,"Shared"],[3,"Collector"],[3,"Handle"],[3,"Guard"],[8,"CompareAndSetOrdering"]]};
searchIndex["crossbeam_utils"] = {"doc":"","items":[[0,"cache_padded","crossbeam_utils","",null,null],[3,"CachePadded","crossbeam_utils::cache_padded","Pads `T` to the length of a cache line.",null,null],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Pads a value to the length of a cache line.",0,{"inputs":[{"name":"t"}],"output":{"name":"cachepadded"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"atomic_option","crossbeam_utils","",null,null],[3,"AtomicOption","crossbeam_utils::atomic_option","",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"swap_box","","",1,{"inputs":[{"name":"self"},{"name":"box"},{"name":"ordering"}],"output":{"generics":["box"],"name":"option"}}],[11,"swap","","",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"take","","",1,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[0,"scoped","crossbeam_utils","",null,null],[3,"Scope","crossbeam_utils::scoped","",null,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[3,"ScopedThreadBuilder","","Scoped thread configuration. Provides detailed control over the properties and behavior of new scoped threads.",null,null],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[5,"builder_spawn_unsafe","","Like `std::thread::Builder::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"generics":["joinhandle"],"name":"result"}}],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"defer","","Schedule code to be executed when exiting the scope.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"spawn","","Create a scoped thread.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scopedjoinhandle"}}],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",2,{"inputs":[{"name":"self"}],"output":{"name":"scopedthreadbuilder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification only in panic messages.",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"scopedthreadbuilder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"scopedthreadbuilder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["scopedjoinhandle"],"name":"result"}}],[11,"join","","Join the scoped thread, returning the result it produced.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"thread","","Get the underlying thread handle.",3,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"CachePadded"],[3,"AtomicOption"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"ScopedThreadBuilder"]]};
searchIndex["data_encoding"] = {"doc":"Efficient and customizable data-encoding functions","items":[[3,"DecodeError","data_encoding","Decoding error",null,null],[12,"position","","Error position",0,null],[12,"kind","","Error kind",0,null],[3,"DecodePartial","","Decoding error with partial result",null,null],[12,"read","","Number of bytes read from input",1,null],[12,"written","","Number of bytes written to output",1,null],[12,"error","","Decoding error",1,null],[3,"Encoding","","Base-conversion encoding",null,null],[12,"0","","",2,null],[3,"Translate","","How to translate characters when decoding",null,null],[12,"from","","Characters to translate from",3,null],[12,"to","","Characters to translate to",3,null],[3,"Wrap","","How to wrap the output when encoding",null,null],[12,"width","","Wrapping width",4,null],[12,"separator","","Wrapping characters",4,null],[3,"Specification","","Base-conversion specification",null,null],[12,"symbols","","Symbols",5,null],[12,"bit_order","","Bit-order",5,null],[12,"check_trailing_bits","","Check trailing bits",5,null],[12,"padding","","Padding",5,null],[12,"ignore","","Characters to ignore when decoding",5,null],[12,"wrap","","How to wrap the output when encoding",5,null],[12,"translate","","How to translate characters when decoding",5,null],[3,"SpecificationError","","Specification error",null,null],[4,"DecodeKind","","Decoding error kind",null,null],[13,"Length","","Invalid length",6,null],[13,"Symbol","","Invalid symbol",6,null],[13,"Trailing","","Non-zero trailing bits",6,null],[13,"Padding","","Invalid padding length",6,null],[4,"BitOrder","","Order in which bits are read from a byte",null,null],[13,"MostSignificantFirst","","Most significant bit first",7,null],[13,"LeastSignificantFirst","","Least significant bit first",7,null],[17,"HEXLOWER","","Lowercase hexadecimal encoding",null,null],[17,"HEXLOWER_PERMISSIVE","","Lowercase hexadecimal encoding with case-insensitive decoding",null,null],[17,"HEXUPPER","","Uppercase hexadecimal encoding",null,null],[17,"HEXUPPER_PERMISSIVE","","Uppercase hexadecimal encoding with case-insensitive decoding",null,null],[17,"BASE32","","Padded base32 encoding",null,null],[17,"BASE32_NOPAD","","Unpadded base32 encoding",null,null],[17,"BASE32HEX","","Padded base32hex encoding",null,null],[17,"BASE32HEX_NOPAD","","Unpadded base32hex encoding",null,null],[17,"BASE32_DNSSEC","","DNSSEC base32 encoding",null,null],[17,"BASE32_DNSCURVE","","DNSCurve base32 encoding",null,null],[17,"BASE64","","Padded base64 encoding",null,null],[17,"BASE64_NOPAD","","Unpadded base64 encoding",null,null],[17,"BASE64_MIME","","MIME base64 encoding",null,null],[17,"BASE64URL","","Padded base64url encoding",null,null],[17,"BASE64URL_NOPAD","","Unpadded base64url encoding",null,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"decodekind"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"decodekind"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"decodeerror"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"decodepartial"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"decodepartial"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"decodepartial"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bitorder"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"bitorder"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"translate"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"wrap"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"specification"}}],[11,"new","","Returns a default specification",5,{"inputs":[],"output":{"name":"specification"}}],[11,"encode_len","","Returns the encoded length of an input of length `len`",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"encode_mut","","Encodes `input` in `output`",2,null],[11,"encode","","Returns encoded `input`",2,null],[11,"decode_len","","Returns the decoded length of an input of length `len`",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize","decodeerror"],"name":"result"}}],[11,"decode_mut","","Decodes `input` in `output`",2,null],[11,"decode","","Returns decoded `input`",2,null],[11,"bit_width","","Returns the bit-width",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_canonical","","Returns whether the encoding is canonical",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"specification","","Returns the encoding specification",2,{"inputs":[{"name":"self"}],"output":{"name":"specification"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"specificationerror"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"encoding","","Returns the specified encoding",5,{"inputs":[{"name":"self"}],"output":{"generics":["encoding","specificationerror"],"name":"result"}}]],"paths":[[3,"DecodeError"],[3,"DecodePartial"],[3,"Encoding"],[3,"Translate"],[3,"Wrap"],[3,"Specification"],[4,"DecodeKind"],[4,"BitOrder"],[3,"SpecificationError"]]};
searchIndex["dbghelp"] = {"doc":"","items":[],"paths":[]};
searchIndex["deflate"] = {"doc":"An implementation an encoder using DEFLATE compression algorightm in pure rust.","items":[[3,"CompressionOptions","deflate","A struct describing the options for a compressor or compression function.",null,null],[12,"max_hash_checks","","The maximum number of checks to make in the hash table for matches.",0,null],[12,"lazy_if_less_than","","Only lazy match if we have a length less than this value.",0,null],[12,"matching_type","","Whether to use lazy or greedy matching.",0,null],[12,"special","","Force fixed/stored blocks (Not implemented yet). * Default value: `SpecialOptions::Normal`",0,null],[4,"SpecialOptions","","Enum allowing some special options (not implemented yet)!",null,null],[13,"Normal","","Compress normally.",1,null],[13,"_ForceFixed","","Force fixed huffman tables. (Unimplemented!).",1,null],[13,"_ForceStored","","Force stored (uncompressed) blocks only. (Unimplemented!).",1,null],[4,"Compression","","An enum describing the level of compression to be used by the encoder",null,null],[13,"Fast","","Fast minimal compression (`CompressionOptions::fast()`).",2,null],[13,"Default","","Default level (`CompressionOptions::default()`).",2,null],[13,"Best","","Higher compression level (`CompressionOptions::high()`).",2,null],[4,"MatchingType","","An enum describing whether we use lazy or greedy matching.",null,null],[13,"Greedy","","Use greedy matching: the matching algorithm simply uses a match right away if found.",3,null],[13,"Lazy","","Use lazy matching: after finding a match, the next input byte is checked, to see if there is a better match starting at that byte.",3,null],[5,"deflate_bytes_conf","","Compress the given slice of bytes with DEFLATE compression.",null,null],[5,"deflate_bytes","","Compress the given slice of bytes with DEFLATE compression using the default compression level.",null,null],[5,"deflate_bytes_zlib_conf","","Compress the given slice of bytes with DEFLATE compression, including a zlib header and trailer.",null,null],[5,"deflate_bytes_zlib","","Compress the given slice of bytes with DEFLATE compression, including a zlib header and trailer, using the default compression level.",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"compression"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"compression"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"specialoptions"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"specialoptions"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"specialoptions"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"compressionoptions"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"compressionoptions"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"compressionoptions"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"high","","Returns compression settings rouhgly corresponding to the `HIGH(9)` setting in miniz.",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"fast","","Returns  a fast set of compression settings",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"huffman_only","","Returns a set of compression settings that makes the compressor only compress using huffman coding. (Ignoring any length/distance matching)",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"rle","","Returns a set of compression settings that makes the compressor compress only using run-length encoding (i.e only looking for matches one byte back).",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"default","","Returns the options describing the default compression level.",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"from","","",0,{"inputs":[{"name":"compression"}],"output":{"name":"compressionoptions"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"matchingtype"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"matchingtype"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"matchingtype"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"matchingtype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"write","","Encoders implementing a `Write` interface.",null,null],[3,"DeflateEncoder","deflate::write","A DEFLATE encoder/compressor.",null,null],[3,"ZlibEncoder","","A Zlib encoder/compressor.",null,null],[11,"new","","Creates a new encoder using the provided compression options.",4,{"inputs":[{"name":"w"},{"name":"o"}],"output":{"name":"deflateencoder"}}],[11,"finish","","Encode all pending data to the contained writer, consume this `DeflateEncoder`, and return the contained writer if writing succeeds.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"reset","","Resets the encoder (except the compression options), replacing the current writer with a new one, returning the old one.",4,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write","","",4,null],[11,"flush","","Flush the encoder.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","When the encoder is dropped, output the rest of the data.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new `ZlibEncoder` using the provided compression options.",5,{"inputs":[{"name":"w"},{"name":"o"}],"output":{"name":"zlibencoder"}}],[11,"finish","","Encode all pending data to the contained writer, consume this `ZlibEncoder`, and return the contained writer if writing succeeds.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"reset","","Resets the encoder (except the compression options), replacing the current writer with a new one, returning the old one.",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"checksum","","Return the adler32 checksum of the currently consumed data.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write","","",5,null],[11,"flush","","Flush the encoder.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","When the encoder is dropped, output the rest of the data.",5,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"CompressionOptions"],[4,"SpecialOptions"],[4,"Compression"],[4,"MatchingType"],[3,"DeflateEncoder"],[3,"ZlibEncoder"]]};
searchIndex["derive_error_chain"] = {"doc":"A Macros 1.1 implementation of https://crates.io/crates/error-chain","items":[[5,"derive_error_chain","derive_error_chain","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["diesel"] = {"doc":"Diesel","items":[[5,"debug_query","diesel","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",null,{"inputs":[{"name":"t"}],"output":{"name":"debugquery"}}],[5,"delete","","Creates a `DELETE` statement.",null,{"inputs":[{"name":"t"}],"output":{"name":"deletestatement"}}],[5,"insert_into","","Creates an `INSERT` statement for the target table.",null,{"inputs":[{"name":"t"}],"output":{"generics":["insert"],"name":"incompleteinsertstatement"}}],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",null,{"inputs":[{"name":"t"}],"output":{"generics":["insertorignore"],"name":"incompleteinsertstatement"}}],[5,"replace_into","","Creates a `REPLACE` statement.",null,{"inputs":[{"name":"t"}],"output":{"generics":["replace"],"name":"incompleteinsertstatement"}}],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",null,{"inputs":[{"name":"t"}],"output":{"generics":["selectstatement"],"name":"select"}}],[5,"sql_query","","Construct a full SQL query using raw SQL.",null,{"inputs":[{"name":"t"}],"output":{"name":"sqlquery"}}],[5,"update","","Creates an `UPDATE` statement.",null,{"inputs":[{"name":"t"}],"output":{"name":"updatestatement"}}],[0,"associations","","Traits related to relationships between multiple tables.",null,null],[8,"BelongsTo","diesel::associations","Indicates that a type belongs to `Parent`",null,null],[16,"ForeignKey","","The foreign key of this struct",0,null],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",0,null],[10,"foreign_key","","Returns the foreign key for `self`",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",0,null],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",null,null],[10,"grouped_by","","See the trait documentation.",1,null],[8,"HasTable","","This trait indicates that a struct is associated with a single database table.",null,null],[16,"Table","","The table this type is associated with.",2,null],[10,"table","","Returns the table this type is associated with.",2,null],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",null,null],[16,"Id","","The type of this struct's identifier.",3,null],[10,"id","","Returns the identifier for this record.",3,null],[0,"backend","diesel","Types which represent various database backends",null,null],[8,"Backend","diesel::backend","A database backend",null,null],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",4,null],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",4,null],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",4,null],[16,"ByteOrder","","What byte order is used to transmit integers?",4,null],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",null,null],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",null,null],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",null,null],[0,"connection","diesel","Types related to database connections",null,null],[3,"AnsiTransactionManager","diesel::connection","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",null,null],[11,"default","","",5,{"inputs":[],"output":{"name":"ansitransactionmanager"}}],[11,"new","","Create a new transaction manager",5,{"inputs":[],"output":{"name":"self"}}],[11,"begin_transaction_sql","","Begin a transaction with custom SQL",5,{"inputs":[{"name":"self"},{"name":"conn"},{"name":"str"}],"output":{"name":"queryresult"}}],[11,"begin_transaction","","",5,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[11,"rollback_transaction","","",5,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[11,"commit_transaction","","",5,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[11,"get_transaction_depth","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"TransactionManager","","Manages the internal transaction state for a connection.",null,null],[10,"begin_transaction","","Begin a new transaction or savepoint",6,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",6,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",6,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[10,"get_transaction_depth","","Fetch the current transaction depth",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"SimpleConnection","","Perform simple operations on a backend.",null,null],[10,"batch_execute","","Execute multiple SQL statements within the same string.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"queryresult"}}],[8,"Connection","","A connection to a database",null,null],[16,"Backend","","The backend this type connects to",8,null],[10,"establish","","Establishes a new connection to the database",8,{"inputs":[{"name":"str"}],"output":{"name":"connectionresult"}}],[11,"transaction","","Executes the given function inside of a database transaction",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",8,{"inputs":[{"name":"self"}],"output":{"name":"queryresult"}}],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[0,"data_types","diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",null,null],[0,"deserialize","","Types and traits related to deserializing values from the database",null,null],[6,"Result","diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",null,null],[8,"Queryable","","Trait indicating that a record can be queried from the database.",null,null],[16,"Row","","The Rust type you'd like to map from.",9,null],[10,"build","","Construct an instance of this type",9,null],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",null,null],[10,"build","","Construct an instance of `Self` from the database row",10,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[8,"FromSql","","Deserialize a single field of a given SQL type.",null,null],[10,"from_sql","","See the trait documentation.",11,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[8,"FromSqlRow","","Deserialize one or more fields.",null,null],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",12,null],[10,"build_from_row","","See the trait documentation.",12,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"expression","diesel","AST types representing various typed SQL expressions.",null,null],[3,"SqlLiteral","diesel::expression","Returned by the [`sql()`] function.",null,null],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",null,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"sqlliteral"}}],[11,"bind","","Bind a value for use with this SQL query.",13,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"uncheckedbind"}}],[11,"sql","","Use literal SQL in the query builder",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"sqlliteral"}}],[11,"walk_ast","","",13,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"uncheckedbind"}}],[11,"sql","","Use literal SQL in the query builder",14,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"sqlliteral"}}],[11,"walk_ast","","",14,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[8,"Expression","","Represents a typed fragment of SQL.",null,null],[16,"SqlType","","The type that this expression represents in SQL",15,null],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",null,null],[16,"Expression","","The expression being returned",16,null],[10,"as_expression","","Perform the conversion",16,null],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",null,null],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",17,{"inputs":[{"name":"self"}],"output":{"name":"asexprof"}}],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",17,{"inputs":[{"name":"self"}],"output":{"name":"asexprof"}}],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",null,null],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",null,null],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",null,null],[8,"BoxableExpression","","Helper trait used when boxing expressions.",null,null],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",null,null],[16,"Expression","","The final output expression",18,null],[10,"as_expression_list","","Perform the conversion",18,null],[0,"expression_methods","diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",null,null],[8,"BoolExpressionMethods","diesel::expression_methods","Methods present on boolean expressions",null,null],[11,"and","","Creates a SQL `AND` expression",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"and"}}],[11,"or","","Creates a SQL `OR` expression",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["or"],"name":"grouped"}}],[8,"EscapeExpressionMethods","","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",null,null],[11,"escape","","See the trait documentation.",20,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["asexprof"],"name":"escape"}}],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",null,null],[11,"eq","","Creates a SQL `=` expression.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"eq"}}],[11,"ne","","Creates a SQL `!=` expression.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"noteq"}}],[11,"eq_any","","Creates a SQL `IN` statement.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"in"}}],[11,"ne_any","","Deprecated alias for `ne_all`",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"notin"}}],[11,"ne_all","","Creates a SQL `NOT IN` statement.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"notin"}}],[11,"is_null","","Creates a SQL `IS NULL` expression.",21,{"inputs":[{"name":"self"}],"output":{"name":"isnull"}}],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",21,{"inputs":[{"name":"self"}],"output":{"name":"isnotnull"}}],[11,"gt","","Creates a SQL `>` expression.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"gt"}}],[11,"ge","","Creates a SQL `>=` expression.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"gteq"}}],[11,"lt","","Creates a SQL `<` expression.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"lt"}}],[11,"le","","Creates a SQL `<=` expression.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"lteq"}}],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",21,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"generics":["and"],"name":"between"}}],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",21,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"generics":["and"],"name":"notbetween"}}],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",21,{"inputs":[{"name":"self"}],"output":{"name":"desc"}}],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",21,{"inputs":[{"name":"self"}],"output":{"name":"asc"}}],[8,"NullableExpressionMethods","","Methods present on all expressions",null,null],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",22,{"inputs":[{"name":"self"}],"output":{"name":"nullable"}}],[8,"TextExpressionMethods","","Methods present on text expressions",null,null],[11,"concat","","Concatenates two strings using the `||` operator.",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"concat"}}],[11,"like","","Returns a SQL `LIKE` expression",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"like"}}],[11,"not_like","","Returns a SQL `NOT LIKE` expression",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"notlike"}}],[8,"PgExpressionMethods","","PostgreSQL specific methods which are present on all expressions.",null,null],[11,"is_not_distinct_from","","Creates a PostgreSQL `IS NOT DISTINCT FROM` expression.",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"isnotdistinctfrom"}}],[11,"is_distinct_from","","Creates a PostgreSQL `IS DISTINCT FROM` expression.",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"isdistinctfrom"}}],[8,"PgTimestampExpressionMethods","","PostgreSQL specific methods present on timestamp expressions.",null,null],[11,"at_time_zone","","Creates a PostgreSQL \"AT TIME ZONE\" expression.",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"attimezone"}}],[8,"PgArrayExpressionMethods","","PostgreSQL specific methods present on array expressions.",null,null],[11,"overlaps_with","","Creates a PostgreSQL `&&` expression.",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"overlapswith"}}],[11,"contains","","Creates a PostgreSQL `@>` expression.",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"contains"}}],[11,"is_contained_by","","Creates a PostgreSQL `<@` expression.",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"iscontainedby"}}],[8,"PgSortExpressionMethods","","PostgreSQL expression methods related to sorting.",null,null],[11,"nulls_first","","Specify that nulls should come before other values in this ordering.",27,{"inputs":[{"name":"self"}],"output":{"name":"nullsfirst"}}],[11,"nulls_last","","Specify that nulls should come after other values in this ordering.",27,{"inputs":[{"name":"self"}],"output":{"name":"nullslast"}}],[8,"PgTextExpressionMethods","","PostgreSQL specific methods present on text expressions.",null,null],[11,"ilike","","Creates a  PostgreSQL `ILIKE` expression",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ilike"}}],[11,"not_ilike","","Creates a PostgreSQL `NOT ILIKE` expression",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"notilike"}}],[0,"query_builder","diesel","Contains traits responsible for the actual construction of SQL statements",null,null],[3,"AstPass","diesel::query_builder","The primary type used when walking a Diesel AST during query execution.",null,null],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",null,null],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",null,null],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",null,null],[3,"InsertStatement","","A fully constructed insert statement.",null,null],[3,"SqlQuery","","The return value of `sql_query`.",null,null],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",null,null],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",null,{"inputs":[{"name":"t"}],"output":{"name":"debugquery"}}],[11,"reborrow","","Call this method whenever you pass an instance of `AstPass` by value.",29,{"inputs":[{"name":"self"}],"output":{"name":"astpass"}}],[11,"unsafe_to_cache_prepared","","Mark the current query being constructed as unsafe to store in the prepared statement cache.",29,{"inputs":[{"name":"self"}],"output":null}],[11,"push_sql","","Push the given SQL string on the end of the query being constructed.",29,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"push_identifier","","Push the given SQL identifier on the end of the query being constructed.",29,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"queryresult"}}],[11,"push_bind_param","","Push a value onto the given query to be sent separate from the SQL",29,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"queryresult"}}],[0,"bind_collector","","Types related to managing bind parameters during query construction.",null,null],[3,"RawBytesBindCollector","diesel::query_builder::bind_collector","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",null,null],[12,"metadata","","The metadata associated with each bind parameter.",30,null],[12,"binds","","The serialized bytes for each bind parameter.",30,null],[8,"BindCollector","","A type which manages serializing bind parameters during query construction.",null,null],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",31,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct an empty `RawBytesBindCollector`",30,{"inputs":[],"output":{"name":"self"}}],[11,"push_bound_value","","",30,null],[11,"fmt","diesel::query_builder","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"deletestatement"}}],[11,"filter","","Adds the given predicate to the `WHERE` clause of the statement being constructed.",33,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"name":"filter"}}],[11,"into_boxed","","Boxes the `WHERE` clause of this delete statement.",33,{"inputs":[{"name":"self"}],"output":{"name":"intoboxed"}}],[11,"filter","","",33,null],[11,"internal_into_boxed","","",33,null],[11,"walk_ast","","",33,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"as_query","","",33,null],[11,"returning","","Specify what expression is returned after execution of the `delete`.",33,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"generics":["returningclause"],"name":"deletestatement"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sqlquery"}}],[11,"bind","","Bind a value for use with this SQL query.",34,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"uncheckedbind"}}],[11,"walk_ast","","",34,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"internal_load","","",34,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"generics":["vec"],"name":"queryresult"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"incompleteinsertstatement"}}],[11,"default_values","","Inserts `DEFAULT VALUES` into the targeted table.",35,{"inputs":[{"name":"self"}],"output":{"generics":["defaultvalues"],"name":"insertstatement"}}],[11,"values","","Inserts the given values into the table passed to `insert_into`.",35,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"insertstatement"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"insertstatement"}}],[11,"into_columns","","Set the column list when inserting from a select statement",36,{"inputs":[{"name":"self"},{"name":"c2"}],"output":{"generics":["insertfromselect"],"name":"insertstatement"}}],[11,"walk_ast","","",36,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"as_query","","",36,null],[11,"returning","","Specify what expression is returned after execution of the `insert`. # Examples",36,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"generics":["returningclause"],"name":"insertstatement"}}],[11,"set","","Provides the `SET` clause of the `UPDATE` statement.",37,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"updatestatement"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"updatestatement"}}],[11,"filter","","Adds the given predicate to the `WHERE` clause of the statement being constructed.",37,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"name":"filter"}}],[11,"into_boxed","","Boxes the `WHERE` clause of this update statement.",37,{"inputs":[{"name":"self"}],"output":{"name":"intoboxed"}}],[11,"filter","","",37,null],[11,"internal_into_boxed","","",37,null],[11,"walk_ast","","",37,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"as_query","","",37,null],[11,"returning","","Specify what expression is returned after execution of the `update`. # Examples",37,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"generics":["returningclause"],"name":"updatestatement"}}],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",null,null],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",null,null],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",null,null],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",null,null],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",null,null],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",null,null],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",38,null],[18,"HAS_STATIC_QUERY_ID","","Can the SQL generated by `Self` be uniquely identified by its type?",38,null],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",38,{"inputs":[],"output":{"generics":["typeid"],"name":"option"}}],[8,"AsChangeset","","Types which can be passed to `update.set`.",null,null],[16,"Target","","The table which `Self::Changeset` will be updating",39,null],[16,"Changeset","","The update statement this type represents",39,null],[10,"as_changeset","","Convert `self` into the actual update statement being executed",39,null],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",null,null],[16,"WhereClause","","What is the `WHERE` clause of this target?",40,null],[10,"into_update_target","","Decomposes `self` into the table and where clause.",40,{"inputs":[{"name":"self"}],"output":{"name":"updatetarget"}}],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",null,null],[10,"push_sql","","Add `sql` to the end of the query being constructed.",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"queryresult"}}],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",41,{"inputs":[{"name":"self"}],"output":null}],[10,"finish","","Returns the constructed SQL query.",41,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"Query","","A complete SQL query with a return type.",null,null],[16,"SqlType","","The SQL type that this query represents.",42,null],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",null,null],[16,"SqlType","","The SQL type of the `SELECT` clause",43,null],[8,"QueryFragment","","An untyped fragment of SQL.",null,null],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",44,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"to_sql","","Converts this `QueryFragment` to its SQL representation.",44,null],[11,"collect_binds","","Serializes all bind parameters in this query.",44,null],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",44,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"queryresult"}}],[8,"AsQuery","","Types that can be converted into a complete, typed SQL query.",null,null],[16,"SqlType","","The SQL type of `Self::Query`",45,null],[16,"Query","","What kind of query does this type represent?",45,null],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",45,null],[0,"query_dsl","diesel","Traits that construct SELECT statements",null,null],[0,"methods","diesel::query_dsl","The traits used by `QueryDsl`.",null,null],[8,"BoxedDsl","diesel::query_dsl::methods","The `into_boxed` method",null,null],[16,"Output","","The return type of `internal_into_boxed`",46,null],[10,"internal_into_boxed","","See the trait documentation.",46,null],[8,"DistinctDsl","","The `distinct` method",null,null],[16,"Output","","The type returned by `.distinct`",47,null],[10,"distinct","","See the trait documentation.",47,null],[8,"DistinctOnDsl","","The `distinct_on` method",null,null],[16,"Output","","The type returned by `.distinct_on`",48,null],[10,"distinct_on","","See the trait documentation",48,null],[8,"FilterDsl","","The `filter` method",null,null],[16,"Output","","The type returned by `.filter`.",49,null],[10,"filter","","See the trait documentation.",49,null],[8,"FindDsl","","The `find` method",null,null],[16,"Output","","The type returned by `.find`.",50,null],[10,"find","","See the trait documentation.",50,null],[8,"OrFilterDsl","","The `or_filter` method",null,null],[16,"Output","","The type returned by `.filter`.",51,null],[10,"or_filter","","See the trait documentation.",51,null],[8,"LimitDsl","","The `limit` method",null,null],[16,"Output","","The type returned by `.limit`",52,null],[10,"limit","","See the trait documentation",52,null],[8,"ExecuteDsl","","The `execute` method",null,null],[10,"execute","","Execute this command",53,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"generics":["usize"],"name":"queryresult"}}],[8,"LoadQuery","","The `load` method",null,null],[10,"internal_load","","Load this query",54,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"generics":["vec"],"name":"queryresult"}}],[8,"ForUpdateDsl","","The `for_update` method",null,null],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",55,null],[10,"for_update","","See the trait level documentation",55,null],[8,"OffsetDsl","","The `offset` method",null,null],[16,"Output","","The type returned by `.offset`.",56,null],[10,"offset","","See the trait documentation",56,null],[8,"OrderDsl","","The `order` method",null,null],[16,"Output","","The type returned by `.order`.",57,null],[10,"order","","See the trait documentation.",57,null],[8,"ThenOrderDsl","","The `then_order_by` method",null,null],[16,"Output","","The type returned by `.then_order_by`.",58,null],[10,"then_order_by","","See the trait documentation.",58,null],[8,"SelectDsl","","The `select` method",null,null],[16,"Output","","The type returned by `.select`",59,null],[10,"select","","See the trait documentation",59,null],[8,"SingleValueDsl","","The `single_value` method",null,null],[16,"Output","","The type returned by `.single_value`.",60,null],[10,"single_value","","See the trait documentation.",60,null],[8,"BelongingToDsl","diesel::query_dsl","Constructs a query that finds record(s) based on directional association with other record(s).",null,null],[16,"Output","","The query returned by `belonging_to`",61,null],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",61,null],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",null,null],[11,"on","","See the trait documentation.",62,{"inputs":[{"name":"self"},{"name":"on"}],"output":{"name":"onclausewrapper"}}],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",null,null],[11,"save_changes","","See the trait documentation.",63,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[8,"QueryDsl","","Methods used to construct select statements.",null,null],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",64,{"inputs":[{"name":"self"}],"output":{"name":"distinct"}}],[11,"distinct_on","","Adds the `DISTINCT ON` clause to a query.",64,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"distincton"}}],[11,"select","","Adds a `SELECT` clause to the query.",64,{"inputs":[{"name":"self"},{"name":"selection"}],"output":{"name":"select"}}],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",64,{"inputs":[{"name":"self"}],"output":{"generics":["countstar"],"name":"select"}}],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",64,null],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",64,null],[11,"left_join","","Alias for [`left_outer_join`].",64,null],[11,"filter","","Adds to the `WHERE` clause of a query.",64,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"name":"filter"}}],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",64,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"name":"orfilter"}}],[11,"find","","Attempts to find a single record from the given table by primary key.",64,{"inputs":[{"name":"self"},{"name":"pk"}],"output":{"name":"find"}}],[11,"order","","Sets the order clause of a query.",64,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"order"}}],[11,"order_by","","Alias for `order`",64,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"order"}}],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",64,{"inputs":[{"name":"self"},{"name":"order"}],"output":{"name":"thenorderby"}}],[11,"limit","","Sets the limit clause of the query.",64,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"limit"}}],[11,"offset","","Sets the offset clause of the query.",64,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"offset"}}],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",64,{"inputs":[{"name":"self"}],"output":{"name":"forupdate"}}],[11,"into_boxed","","Boxes the pieces of a query into a single type.",64,{"inputs":[{"name":"self"}],"output":{"name":"intoboxed"}}],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",64,{"inputs":[{"name":"self"}],"output":{"name":"singlevalue"}}],[8,"RunQueryDsl","","Methods used to execute queries.",null,null],[11,"execute","","Executes the given command, returning the number of rows affected.",65,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"generics":["usize"],"name":"queryresult"}}],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",65,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"generics":["vec"],"name":"queryresult"}}],[11,"get_result","","Runs the command, and returns the affected row.",65,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",65,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"generics":["vec"],"name":"queryresult"}}],[11,"first","","Attempts to load a single record.",65,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[0,"query_source","diesel","Types related to describing schema, and interactions between tables.",null,null],[3,"Never","diesel::query_source","A table never appears in the from clause.",null,null],[3,"Once","","A table appears in the from clause exactly one time.",null,null],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",null,null],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",null,null],[8,"Plus","","Add two peano numbers together.",null,null],[16,"Output","","The result of adding these numbers together",66,null],[8,"QuerySource","","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",null,null],[16,"FromClause","","The type returned by `from_clause`",67,null],[16,"DefaultSelection","","The type returned by `default_selection`",67,null],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",67,null],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",67,null],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",null,null],[16,"Table","","The table which this column belongs to",68,null],[18,"NAME","","The name of this column",68,null],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",null,null],[16,"PrimaryKey","","The type returned by `primary_key`",69,null],[16,"AllColumns","","The type returned by `all_columns`",69,null],[10,"primary_key","","Returns the primary key of this table.",69,null],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",69,null],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",null,null],[16,"Count","","How many times does `Self` appear in `QS`?",70,null],[0,"r2d2","diesel","Connection pooling via r2d2",null,null],[3,"ConnectionManager","diesel::r2d2","An r2d2 connection manager for use with Diesel.",null,null],[4,"Error","","The error used when managing connections with `r2d2`.",null,null],[13,"ConnectionError","","An error occurred establishing the connection",71,null],[13,"QueryError","","An error occurred pinging the database",71,null],[6,"PoolError","","A re-export of [`r2d2::Error`], which is only used by methods on [`r2d2::Pool`].",null,null],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"connectionmanager"}}],[11,"new","","Returns a new connection manager, which establishes connections to the given database URL.",72,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",71,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"connect","","",72,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"is_valid","","",72,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"has_broken","","",72,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[0,"result","diesel","Errors, type aliases, and functions related to working with `Result`.",null,null],[3,"UnexpectedNullError","diesel::result","An unexpected `NULL` was encountered during deserialization",null,null],[4,"Error","","Represents all the ways that a query can fail.",null,null],[13,"InvalidCString","","The query contained a nul byte.",73,null],[13,"DatabaseError","","The database returned an error.",73,null],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",73,null],[13,"QueryBuilderError","","The query could not be constructed",73,null],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",73,null],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",73,null],[13,"RollbackTransaction","","Roll back the current transaction.",73,null],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",73,null],[4,"DatabaseErrorKind","","The kind of database error that occurred.",null,null],[13,"UniqueViolation","","A unique constraint was violated.",74,null],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",74,null],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",74,null],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",null,null],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",75,null],[13,"BadConnection","","The database returned an error.",75,null],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",75,null],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",75,null],[6,"QueryResult","","A specialized result type for queries.",null,null],[6,"ConnectionResult","","A specialized result type for establishing connections.",null,null],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",null,null],[10,"message","","The primary human-readable error message. Typically one line.",76,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",76,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",76,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",76,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",76,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",76,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[8,"OptionalExtension","","See the method documentation.",null,null],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",77,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"databaseerrorkind"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"connectionerror"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"connectionerror"}],"output":{"name":"bool"}}],[11,"optional","","",78,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"from","","",75,{"inputs":[{"name":"nulerror"}],"output":{"name":"self"}}],[11,"from","","",73,{"inputs":[{"name":"nulerror"}],"output":{"name":"self"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",73,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",73,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",75,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"unexpectednullerror"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",79,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"serialize","diesel","Types and traits related to serializing values for the database",null,null],[3,"Output","diesel::serialize","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",null,null],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",null,null],[13,"Yes","","No data was written, as this type is null",80,null],[13,"No","","The value is not null",80,null],[6,"Result","","A specialized result type representing the result of serializing a value for the database.",null,null],[8,"ToSql","","Serializes a single value to be sent to the database.",null,null],[10,"to_sql","","See the trait documentation.",81,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"isnull"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"isnull"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"output"}}],[11,"new","","Construct a new `Output`",82,null],[11,"with_buffer","","Create a new `Output` with the given buffer",82,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"output"}}],[11,"into_inner","","Return the raw buffer this type is wrapping",82,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"metadata_lookup","","Returns the backend's mechanism for dynamically looking up type metadata at runtime, if relevant for the given backend.",82,null],[11,"write","","",82,null],[11,"flush","","",82,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",82,null],[11,"write_fmt","","",82,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"deref","","",82,null],[11,"deref_mut","","",82,null],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"sql_types","diesel","Types which represent a SQL data type.",null,null],[3,"Bool","diesel::sql_types","The boolean SQL type.",null,null],[3,"Tinyint","","The tiny integer SQL type.",null,null],[3,"SmallInt","","The small integer SQL type.",null,null],[3,"Integer","","The integer SQL type.",null,null],[3,"BigInt","","The big integer SQL type.",null,null],[3,"Float","","The float SQL type.",null,null],[3,"Double","","The double precision float SQL type.",null,null],[3,"Numeric","","The arbitrary precision numeric SQL type.",null,null],[3,"Text","","The text SQL type.",null,null],[3,"Binary","","The binary SQL type.",null,null],[3,"Date","","The date SQL type.",null,null],[3,"Interval","","The interval SQL type.",null,null],[3,"Time","","The time SQL type.",null,null],[3,"Timestamp","","The timestamp SQL type.",null,null],[3,"Nullable","","The nullable SQL type.",null,null],[0,"ops","","Represents the output of numeric operators in SQL",null,null],[8,"Add","diesel::sql_types::ops","Represents SQL types which can be added.",null,null],[16,"Rhs","","The SQL type which can be added to this one",83,null],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",83,null],[8,"Sub","","Represents SQL types which can be subtracted.",null,null],[16,"Rhs","","The SQL type which can be subtracted from this one",84,null],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",84,null],[8,"Mul","","Represents SQL types which can be multiplied.",null,null],[16,"Rhs","","The SQL type which this can be multiplied by",85,null],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",85,null],[8,"Div","","Represents SQL types which can be divided.",null,null],[16,"Rhs","","The SQL type which this one can be divided by",86,null],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",86,null],[6,"Decimal","diesel::sql_types","Alias for `Numeric`",null,null],[6,"VarChar","","The SQL `VARCHAR` type",null,null],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",null,null],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",null,null],[16,"Sum","","The SQL type of `sum(this_type)`",87,null],[16,"Avg","","The SQL type of `avg(this_type)`",87,null],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",null,null],[10,"metadata","","Fetch the metadata for the given type",88,null],[11,"row_metadata","","Fetch the metadata for a tuple representing an entire row",88,null],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",null,null],[16,"TypeMetadata","","The actual type used to represent metadata.",89,null],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",89,null],[8,"NotNull","","A marker trait indicating that a SQL type is not null.",null,null],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",null,null],[16,"Nullable","","The nullable representation of this type.",90,null],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",null,null],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",91,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"tinyint"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"tinyint"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"smallint"}}],[11,"default","","",93,{"inputs":[],"output":{"name":"smallint"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"default","","",94,{"inputs":[],"output":{"name":"integer"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"default","","",95,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"float"}}],[11,"default","","",96,{"inputs":[],"output":{"name":"float"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"double"}}],[11,"default","","",97,{"inputs":[],"output":{"name":"double"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"numeric"}}],[11,"default","","",98,{"inputs":[],"output":{"name":"numeric"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"text"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"binary"}}],[11,"default","","",100,{"inputs":[],"output":{"name":"binary"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"default","","",101,{"inputs":[],"output":{"name":"date"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"interval"}}],[11,"default","","",102,{"inputs":[],"output":{"name":"interval"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"time"}}],[11,"default","","",103,{"inputs":[],"output":{"name":"time"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"timestamp"}}],[11,"default","","",104,{"inputs":[],"output":{"name":"timestamp"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"nullable"}}],[11,"default","","",105,{"inputs":[],"output":{"name":"nullable"}}],[0,"types","diesel","",null,null],[6,"Bool","diesel::types","",null,null],[6,"Tinyint","","",null,null],[6,"SmallInt","","",null,null],[6,"Integer","","",null,null],[6,"BigInt","","",null,null],[6,"Float","","",null,null],[6,"Double","","",null,null],[6,"Numeric","","",null,null],[6,"Text","","",null,null],[6,"Binary","","",null,null],[6,"Date","","",null,null],[6,"Interval","","",null,null],[6,"Time","","",null,null],[6,"Timestamp","","",null,null],[6,"Oid","","",null,null],[6,"Timestamptz","","",null,null],[6,"Array","","",null,null],[6,"Range","","",null,null],[6,"Uuid","","",null,null],[6,"Json","","",null,null],[6,"Jsonb","","",null,null],[6,"Money","","",null,null],[6,"MacAddr","","",null,null],[6,"Inet","","",null,null],[6,"Cidr","","",null,null],[6,"Nullable","","",null,null],[6,"ToSqlOutput","","",null,null],[0,"row","diesel","Contains the `Row` trait",null,null],[8,"Row","diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",null,null],[10,"take","","Returns the value of the next column in the row.",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",106,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"advance","","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",106,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[8,"NamedRow","","Represents a row of a SQL query, where the values are accessed by name rather than by index.",null,null],[11,"get","","Retrieve and deserialize a single value from the query",107,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[0,"pg","diesel","Provides types and functions related to working with PostgreSQL",null,null],[3,"Pg","diesel::pg","The PostgreSQL backend",null,null],[3,"PgTypeMetadata","","The [OIDs] for a SQL type",null,null],[12,"oid","","The [OID] of `T`",108,null],[12,"array_oid","","The [OID] of `T[]`",108,null],[3,"PgConnection","","The connection string expected by `PgConnection::establish` should be a PostgreSQL connection string, as documented at https://www.postgresql.org/docs/9.4/static/libpq-connect.html#LIBPQ-CONNSTRING",null,null],[3,"PgMetadataLookup","","Determines the OID of types at runtime",null,null],[3,"PgQueryBuilder","","The PostgreSQL query builder",null,null],[3,"DistinctOnClause","","Represents `DISTINCT ON (...)`",null,null],[3,"TransactionBuilder","","Used to build a transaction, specifying additional details.",null,null],[0,"expression","","PostgreSQL related query builder extensions",null,null],[11,"is_not_distinct_from","diesel::expression_methods","Creates a PostgreSQL `IS NOT DISTINCT FROM` expression.",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"isnotdistinctfrom"}}],[11,"is_distinct_from","","Creates a PostgreSQL `IS DISTINCT FROM` expression.",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"isdistinctfrom"}}],[11,"at_time_zone","","Creates a PostgreSQL \"AT TIME ZONE\" expression.",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"attimezone"}}],[11,"overlaps_with","","Creates a PostgreSQL `&&` expression.",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"overlapswith"}}],[11,"contains","","Creates a PostgreSQL `@>` expression.",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"contains"}}],[11,"is_contained_by","","Creates a PostgreSQL `<@` expression.",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"iscontainedby"}}],[11,"nulls_first","","Specify that nulls should come before other values in this ordering.",27,{"inputs":[{"name":"self"}],"output":{"name":"nullsfirst"}}],[11,"nulls_last","","Specify that nulls should come after other values in this ordering.",27,{"inputs":[{"name":"self"}],"output":{"name":"nullslast"}}],[11,"ilike","","Creates a  PostgreSQL `ILIKE` expression",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ilike"}}],[11,"not_ilike","","Creates a PostgreSQL `NOT ILIKE` expression",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"notilike"}}],[0,"extensions","diesel::pg::expression","This module contains extensions that are added to core types to aid in building expressions. These traits are not exported by default. The are also re-exported in `diesel::dsl`",null,null],[8,"IntervalDsl","diesel::pg::expression::extensions","A DSL added to integers and `f64` to construct PostgreSQL intervals.",null,null],[10,"microseconds","","Returns a PgInterval representing `self` as microseconds",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[10,"days","","Returns a PgInterval representing `self` in days",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[10,"months","","Returns a PgInterval representing `self` in months",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"milliseconds","","Returns a PgInterval representing `self` as milliseconds",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"seconds","","Returns a PgInterval representing `self` as seconds",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"minutes","","Returns a PgInterval representing `self` as minutes",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"hours","","Returns a PgInterval representing `self` as hours",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"weeks","","Returns a PgInterval representing `self` in weeks",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"years","","Returns a PgInterval representing `self` in weeks",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"microsecond","","Identical to `microseconds`",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"millisecond","","Identical to `milliseconds`",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"second","","Identical to `seconds`",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"minute","","Identical to `minutes`",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"hour","","Identical to `hours`",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"day","","Identical to `days`",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"week","","Identical to `weeks`",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"month","","Identical to `months`",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"year","","Identical to `years`",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[0,"dsl","diesel::pg::expression","PostgreSQL specific expression DSL methods.",null,null],[5,"all","diesel::pg::expression::dsl","Creates a PostgreSQL `ALL` expression.",null,{"inputs":[{"name":"t"}],"output":{"name":"all"}}],[5,"any","","Creates a PostgreSQL `ANY` expression.",null,{"inputs":[{"name":"t"}],"output":{"name":"any"}}],[5,"array","","Creates an `ARRAY[...]` expression.",null,{"inputs":[{"name":"t"}],"output":{"name":"arrayliteral"}}],[0,"types","diesel::pg","PostgreSQL specific types",null,null],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[0,"sql_types","diesel::pg::types","PostgreSQL specific SQL types",null,null],[3,"Oid","diesel::pg::types::sql_types","The `OID` SQL type. This is a PostgreSQL specific type.",null,null],[3,"Timestamptz","","The \"timestamp with time zone\" SQL type, which PostgreSQL abbreviates to `timestamptz`.",null,null],[3,"Array","","The `Array` SQL type.",null,null],[3,"Range","","The `Range` SQL type.",null,null],[3,"Uuid","","The `UUID` SQL type. This type can only be used with `feature = \"uuid\"`",null,null],[3,"Json","","The JSON SQL type.  This type can only be used with `feature = \"serde_json\"`",null,null],[3,"Jsonb","","The `jsonb` SQL type.  This type can only be used with `feature = \"serde_json\"`",null,null],[3,"Money","","The PostgreSQL Money type.",null,null],[3,"MacAddr","","The `MACADDR` SQL type. This type can only be used with `feature = \"network-address\"`",null,null],[3,"Inet","","The `INET` SQL type. This type can only be used with `feature = \"network-address\"`",null,null],[3,"Cidr","","The `CIDR` SQL type. This type can only be used with `feature = \"network-address\"`",null,null],[11,"metadata","diesel::pg","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[6,"SmallSerial","diesel::pg::types::sql_types","Alias for `SmallInt`",null,null],[6,"Serial","","Alias for `Integer`",null,null],[6,"BigSerial","","Alias for `BigInt`",null,null],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"default","","",111,{"inputs":[],"output":{"name":"oid"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"timestamptz"}}],[11,"default","","",112,{"inputs":[],"output":{"name":"timestamptz"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"array"}}],[11,"default","","",113,{"inputs":[],"output":{"name":"array"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"default","","",114,{"inputs":[],"output":{"name":"range"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[11,"default","","",115,{"inputs":[],"output":{"name":"uuid"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"default","","",116,{"inputs":[],"output":{"name":"json"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"jsonb"}}],[11,"default","","",117,{"inputs":[],"output":{"name":"jsonb"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"money"}}],[11,"default","","",118,{"inputs":[],"output":{"name":"money"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"macaddr"}}],[11,"default","","",119,{"inputs":[],"output":{"name":"macaddr"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"inet"}}],[11,"default","","",120,{"inputs":[],"output":{"name":"inet"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"cidr"}}],[11,"default","","",121,{"inputs":[],"output":{"name":"cidr"}}],[0,"upsert","diesel::pg","Types and functions related to PG's `ON CONFLICT` clause",null,null],[3,"IncompleteOnConflict","diesel::pg::upsert","A partially constructed `ON CONFLICT` clause.",null,null],[3,"IncompleteDoUpdate","","A partially constructed `ON CONFLICT DO UPDATE` clause.",null,null],[5,"excluded","","Represents `excluded.column` in an `ON CONFLICT DO UPDATE` clause.",null,{"inputs":[{"name":"t"}],"output":{"name":"excluded"}}],[5,"on_constraint","","Used to specify the constraint name for an upsert statement in the form `ON CONFLICT ON CONSTRAINT`. Note that `constraint_name` must be the name of a unique constraint, not the name of an index.",null,{"inputs":[{"name":"str"}],"output":{"name":"onconstraint"}}],[11,"on_conflict_do_nothing","diesel::query_builder","Adds `ON CONFLICT DO NOTHING` to the insert statement, without specifying any columns or constraints to restrict the conflict to.",36,{"inputs":[{"name":"self"}],"output":{"generics":["onconflictvalues"],"name":"insertstatement"}}],[11,"on_conflict","","Adds an `ON CONFLICT` to the insert statement, if a conflict occurs for the given unique constraint.",36,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"generics":["conflicttarget"],"name":"incompleteonconflict"}}],[11,"fmt","diesel::pg::upsert","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"incompleteonconflict"}}],[11,"do_nothing","","Creates a query with `ON CONFLICT (target) DO NOTHING`",122,{"inputs":[{"name":"self"}],"output":{"generics":["onconflictvalues"],"name":"insertstatement"}}],[11,"do_update","","Used to create a query in the form `ON CONFLICT (...) DO UPDATE ...`",122,{"inputs":[{"name":"self"}],"output":{"name":"incompletedoupdate"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"incompletedoupdate"}}],[11,"set","","See [`do_update`] for usage examples.",123,{"inputs":[{"name":"self"},{"name":"changes"}],"output":{"generics":["onconflictvalues"],"name":"insertstatement"}}],[11,"fmt","diesel::pg","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"pg"}}],[11,"hash","","",110,null],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"pg"}],"output":{"name":"bool"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"pgtypemetadata"}}],[11,"hash","","",108,null],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"pgtypemetadata"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"pgtypemetadata"}],"output":{"name":"bool"}}],[11,"default","","",108,{"inputs":[],"output":{"name":"pgtypemetadata"}}],[11,"build","","",108,null],[11,"batch_execute","","",124,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"queryresult"}}],[11,"establish","","",124,{"inputs":[{"name":"str"}],"output":{"generics":["pgconnection"],"name":"connectionresult"}}],[11,"build_transaction","","Build a transaction, specifying additional details such as isolation level",124,{"inputs":[{"name":"self"}],"output":{"name":"transactionbuilder"}}],[11,"lookup_type","","Determine the type metadata for the given `type_name`",125,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"pgtypemetadata"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"distinctonclause"}}],[11,"walk_ast","","",126,{"inputs":[{"name":"self"},{"generics":["pg"],"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"default","","",127,{"inputs":[],"output":{"name":"pgquerybuilder"}}],[11,"new","","Constructs a new query builder with an empty query",127,{"inputs":[],"output":{"name":"self"}}],[11,"push_sql","","",127,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"push_identifier","","",127,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"queryresult"}}],[11,"push_bind_param","","",127,{"inputs":[{"name":"self"}],"output":null}],[11,"finish","","",127,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"transactionbuilder"}}],[11,"read_only","","Makes the transaction `READ ONLY`",128,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"read_write","","Makes the transaction `READ WRITE`",128,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deferrable","","Makes the transaction `DEFERRABLE`",128,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"not_deferrable","","Makes the transaction `NOT DEFERRABLE`",128,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"read_committed","","Makes the transaction `ISOLATION LEVEL READ COMMITTED`",128,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"repeatable_read","","Makes the transaction `ISOLATION LEVEL REPEATABLE READ`",128,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"serializable","","Makes the transaction `ISOLATION LEVEL SERIALIZABLE`",128,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"run","","Runs the given function inside of the transaction with the parameters given to this builder.",128,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"walk_ast","","",128,{"inputs":[{"name":"self"},{"generics":["pg"],"name":"astpass"}],"output":{"name":"queryresult"}}],[0,"data_types","","Data structures for PG types which have no corresponding Rust type",null,null],[3,"PgDate","diesel::pg::data_types","Dates are represented in Postgres as a 32 bit signed integer representing the number of julian days since January 1st 2000. This struct is a dumb wrapper type, meant only to indicate the integer's meaning.",null,null],[12,"0","","",129,null],[3,"PgInterval","","Intervals in Postgres are separated into 3 parts. A 64 bit integer representing time in microseconds, a 32 bit integer representing number of days, and a 32 bit integer representing number of months. This struct is a dumb wrapper type, meant only to indicate the meaning of these parts.",null,null],[12,"microseconds","","The number of whole microseconds",130,null],[12,"days","","The number of whole days",130,null],[12,"months","","The number of whole months",130,null],[3,"PgTime","","Time is represented in Postgres as a 64 bit signed integer representing the number of microseconds since midnight. This struct is a dumb wrapper type, meant only to indicate the integer's meaning.",null,null],[12,"0","","",131,null],[3,"PgTimestamp","","Timestamps are represented in Postgres as a 64 bit signed integer representing the number of microseconds since January 1st 2000. This struct is a dumb wrapper type, meant only to indicate the integer's meaning.",null,null],[12,"0","","",132,null],[3,"PgMoney","","Money is represented in Postgres as a 64 bit signed integer.  This struct is a dumb wrapper type, meant only to indicate the integer's meaning.  The fractional precision of the value is determined by the `lc_monetary` setting of the database. This struct is re-exported as `Cents` as a convenient and conventional expression of a typical unit of 1/100th of currency. For other names or precisions, users might consider a differently named `use` of the `PgMoney` struct.",null,null],[12,"0","","",133,null],[3,"Cents","","Money is represented in Postgres as a 64 bit signed integer.  This struct is a dumb wrapper type, meant only to indicate the integer's meaning.  The fractional precision of the value is determined by the `lc_monetary` setting of the database. This struct is re-exported as `Cents` as a convenient and conventional expression of a typical unit of 1/100th of currency. For other names or precisions, users might consider a differently named `use` of the `PgMoney` struct.",null,null],[12,"0","","",133,null],[4,"PgNumeric","","Represents a NUMERIC value, closely mirroring the PG wire protocol representation",null,null],[13,"Positive","","A positive number",134,null],[12,"weight","diesel::pg::data_types::PgNumeric","How many digits come before the decimal point?",134,null],[12,"scale","","How many significant digits are there?",134,null],[12,"digits","","The digits in this number, stored in base 10000",134,null],[13,"Negative","diesel::pg::data_types","A negative number",134,null],[12,"weight","diesel::pg::data_types::PgNumeric","How many digits come before the decimal point?",134,null],[12,"scale","","How many significant digits are there?",134,null],[12,"digits","","The digits in this number, stored in base 10000",134,null],[13,"NaN","diesel::pg::data_types","Not a number",134,null],[0,"dsl","diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",null,null],[3,"now","diesel::dsl","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",null,null],[5,"count","","Creates a SQL `COUNT` expression",null,{"inputs":[{"name":"t"}],"output":{"name":"count"}}],[5,"count_star","","Creates a SQL `COUNT(*)` expression",null,{"inputs":[],"output":{"name":"countstar"}}],[5,"exists","","Creates a SQL `EXISTS` expression.",null,{"inputs":[{"name":"t"}],"output":{"name":"exists"}}],[5,"sum","","Represents a SQL `SUM` function. This function can only take types which are Foldable.",null,{"inputs":[{"name":"t"}],"output":{"name":"sum"}}],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",null,{"inputs":[{"name":"t"}],"output":{"name":"avg"}}],[5,"max","","Represents a SQL `MAX` function. This function can only take types which are ordered.",null,{"inputs":[{"name":"t"}],"output":{"name":"max"}}],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",null,{"inputs":[{"name":"t"}],"output":{"name":"min"}}],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date.",null,{"inputs":[{"name":"expr"}],"output":{"name":"date"}}],[5,"not","","Creates a SQL `NOT` expression",null,{"inputs":[{"name":"t"}],"output":{"name":"not"}}],[5,"sql","","Use literal SQL in the query builder",null,{"inputs":[{"name":"str"}],"output":{"name":"sqlliteral"}}],[6,"SqlTypeOf","","The SQL type of an expression",null,null],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",null,null],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",null,null],[6,"Eq","","The return type of `lhs.eq(rhs)`",null,null],[6,"NotEq","","The return type of `lhs.ne(rhs)`",null,null],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",null,null],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",null,null],[6,"IsNull","","The return type of `expr.is_null()`",null,null],[6,"IsNotNull","","The return type of `expr.is_not_null()`",null,null],[6,"Gt","","The return type of `lhs.gt(rhs)`",null,null],[6,"GtEq","","The return type of `lhs.ge(rhs)`",null,null],[6,"Lt","","The return type of `lhs.lt(rhs)`",null,null],[6,"LtEq","","The return type of `lhs.le(rhs)`",null,null],[6,"Between","","The return type of `lhs.between(lower, upper)`",null,null],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",null,null],[6,"Desc","","The return type of `expr.desc()`",null,null],[6,"Asc","","The return type of `expr.asc()`",null,null],[6,"Nullable","","The return type of `expr.nullable()`",null,null],[6,"And","","The return type of `lhs.and(rhs)`",null,null],[6,"Or","","The return type of `lhs.or(rhs)`",null,null],[6,"Escape","","The return type of `lhs.escape('x')`",null,null],[6,"Like","","The return type of `lhs.like(rhs)`",null,null],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",null,null],[6,"not","","The return type of `not(expr)`",null,null],[6,"Not","","The return type of `not(expr)`",null,null],[6,"max","","The return type of `max(expr)`",null,null],[6,"min","","The return type of `min(expr)`",null,null],[6,"sum","","The return type of `sum(expr)`",null,null],[6,"avg","","The return type of `avg(expr)`",null,null],[6,"Select","","Represents the return type of `.select(selection)`",null,null],[6,"Filter","","Represents the return type of `.filter(predicate)`",null,null],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",null,null],[6,"ForUpdate","","Represents the return type of `.for_update()`",null,null],[6,"Find","","Represents the return type of `.find(pk)`",null,null],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",null,null],[6,"Order","","Represents the return type of `.order(ordering)`",null,null],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",null,null],[6,"Limit","","Represents the return type of `.limit()`",null,null],[6,"Offset","","Represents the return type of `.offset()`",null,null],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",null,null],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",null,null],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",null,null],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",null,null],[6,"Distinct","","Represents the return type of `.distinct()`",null,null],[6,"DistinctOn","","Represents the return type of `.distinct_on(expr)`",null,null],[6,"SingleValue","","Represents the return type of `.single_value()`",null,null],[6,"date","","The return type of `date(expr)`",null,null],[0,"helper_types","diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",null,null],[6,"SqlTypeOf","diesel::helper_types","The SQL type of an expression",null,null],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",null,null],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",null,null],[6,"Eq","","The return type of `lhs.eq(rhs)`",null,null],[6,"NotEq","","The return type of `lhs.ne(rhs)`",null,null],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",null,null],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",null,null],[6,"IsNull","","The return type of `expr.is_null()`",null,null],[6,"IsNotNull","","The return type of `expr.is_not_null()`",null,null],[6,"Gt","","The return type of `lhs.gt(rhs)`",null,null],[6,"GtEq","","The return type of `lhs.ge(rhs)`",null,null],[6,"Lt","","The return type of `lhs.lt(rhs)`",null,null],[6,"LtEq","","The return type of `lhs.le(rhs)`",null,null],[6,"Between","","The return type of `lhs.between(lower, upper)`",null,null],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",null,null],[6,"Desc","","The return type of `expr.desc()`",null,null],[6,"Asc","","The return type of `expr.asc()`",null,null],[6,"Nullable","","The return type of `expr.nullable()`",null,null],[6,"And","","The return type of `lhs.and(rhs)`",null,null],[6,"Or","","The return type of `lhs.or(rhs)`",null,null],[6,"Escape","","The return type of `lhs.escape('x')`",null,null],[6,"Like","","The return type of `lhs.like(rhs)`",null,null],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",null,null],[6,"not","","The return type of `not(expr)`",null,null],[6,"Not","","The return type of `not(expr)`",null,null],[6,"max","","The return type of `max(expr)`",null,null],[6,"min","","The return type of `min(expr)`",null,null],[6,"sum","","The return type of `sum(expr)`",null,null],[6,"avg","","The return type of `avg(expr)`",null,null],[6,"Select","","Represents the return type of `.select(selection)`",null,null],[6,"Filter","","Represents the return type of `.filter(predicate)`",null,null],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",null,null],[6,"ForUpdate","","Represents the return type of `.for_update()`",null,null],[6,"Find","","Represents the return type of `.find(pk)`",null,null],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",null,null],[6,"Order","","Represents the return type of `.order(ordering)`",null,null],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",null,null],[6,"Limit","","Represents the return type of `.limit()`",null,null],[6,"Offset","","Represents the return type of `.offset()`",null,null],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",null,null],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",null,null],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",null,null],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",null,null],[6,"Distinct","","Represents the return type of `.distinct()`",null,null],[6,"DistinctOn","","Represents the return type of `.distinct_on(expr)`",null,null],[6,"SingleValue","","Represents the return type of `.single_value()`",null,null],[0,"prelude","diesel","Re-exports important traits and types. Meant to be glob imported when using Diesel.",null,null],[3,"PgConnection","diesel::prelude","The connection string expected by `PgConnection::establish` should be a PostgreSQL connection string, as documented at https://www.postgresql.org/docs/9.4/static/libpq-connect.html#LIBPQ-CONNSTRING",null,null],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",null,null],[10,"grouped_by","","See the trait documentation.",1,null],[8,"Insertable","","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",null,null],[16,"Values","","The `VALUES` clause to insert these records",135,null],[10,"values","","Construct `Self::Values`",135,null],[11,"insert_into","","Insert `self` into a given table.",135,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"insertstatement"}}],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",null,null],[16,"Output","","The query returned by `belonging_to`",61,null],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",61,null],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",null,null],[11,"on","diesel::query_dsl","See the trait documentation.",62,{"inputs":[{"name":"self"},{"name":"on"}],"output":{"name":"onclausewrapper"}}],[8,"SaveChangesDsl","diesel::prelude","Sugar for types which implement both `AsChangeset` and `Identifiable`",null,null],[11,"save_changes","diesel::query_dsl","See the trait documentation.",63,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[8,"JoinTo","diesel::prelude","Indicates that two tables can be joined without an explicit `ON` clause.",null,null],[14,"table","diesel","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",null,null],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",null,null],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",null,null],[14,"not_none","","Gets the value out of an option, or returns an error.",null,null],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",null,null],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",null,null],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",null,null],[14,"sql_function","","Declare a sql function for use in your code. Useful if you have your own SQL functions that you'd like to use. You can optionally provide a doc string as well. `$struct_name` should just be any unique name. You will not need to reference it in your code, but it is required due to the fact that `concat_idents!` is useless.",null,null],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",null,null],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",null,null],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",null,null],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",null,null],[11,"fmt","diesel::dsl","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"now"}}],[11,"walk_ast","","",136,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"add","","",136,null],[11,"sub","","",136,null],[11,"as_expression","","",136,null],[11,"as_expression","","",136,null],[11,"and","diesel::expression_methods","Creates a SQL `AND` expression",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"and"}}],[11,"or","","Creates a SQL `OR` expression",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["or"],"name":"grouped"}}],[11,"escape","","See the trait documentation.",20,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["asexprof"],"name":"escape"}}],[11,"eq","","Creates a SQL `=` expression.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"eq"}}],[11,"ne","","Creates a SQL `!=` expression.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"noteq"}}],[11,"eq_any","","Creates a SQL `IN` statement.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"in"}}],[11,"ne_any","","Deprecated alias for `ne_all`",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"notin"}}],[11,"ne_all","","Creates a SQL `NOT IN` statement.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"notin"}}],[11,"is_null","","Creates a SQL `IS NULL` expression.",21,{"inputs":[{"name":"self"}],"output":{"name":"isnull"}}],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",21,{"inputs":[{"name":"self"}],"output":{"name":"isnotnull"}}],[11,"gt","","Creates a SQL `>` expression.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"gt"}}],[11,"ge","","Creates a SQL `>=` expression.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"gteq"}}],[11,"lt","","Creates a SQL `<` expression.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"lt"}}],[11,"le","","Creates a SQL `<=` expression.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"lteq"}}],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",21,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"generics":["and"],"name":"between"}}],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",21,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"generics":["and"],"name":"notbetween"}}],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",21,{"inputs":[{"name":"self"}],"output":{"name":"desc"}}],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",21,{"inputs":[{"name":"self"}],"output":{"name":"asc"}}],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",22,{"inputs":[{"name":"self"}],"output":{"name":"nullable"}}],[11,"concat","","Concatenates two strings using the `||` operator.",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"concat"}}],[11,"like","","Returns a SQL `LIKE` expression",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"like"}}],[11,"not_like","","Returns a SQL `NOT LIKE` expression",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"notlike"}}],[11,"insert_into","diesel::prelude","Insert `self` into a given table.",135,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"insertstatement"}}],[18,"HAS_STATIC_QUERY_ID","diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",38,null],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",38,{"inputs":[],"output":{"generics":["typeid"],"name":"option"}}],[11,"on","diesel::query_dsl","See the trait documentation.",62,{"inputs":[{"name":"self"},{"name":"on"}],"output":{"name":"onclausewrapper"}}],[11,"save_changes","","See the trait documentation.",63,{"inputs":[{"name":"self"},{"name":"conn"}],"output":{"name":"queryresult"}}],[11,"metadata","diesel::pg","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"metadata","","",110,{"inputs":[{"name":"pgmetadatalookup"}],"output":{"name":"pgtypemetadata"}}],[11,"milliseconds","diesel::pg::expression::extensions","Returns a PgInterval representing `self` as milliseconds",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"seconds","","Returns a PgInterval representing `self` as seconds",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"minutes","","Returns a PgInterval representing `self` as minutes",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"hours","","Returns a PgInterval representing `self` as hours",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"weeks","","Returns a PgInterval representing `self` in weeks",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"years","","Returns a PgInterval representing `self` in weeks",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"microsecond","","Identical to `microseconds`",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"millisecond","","Identical to `milliseconds`",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"second","","Identical to `seconds`",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"minute","","Identical to `minutes`",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"hour","","Identical to `hours`",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"day","","Identical to `days`",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"week","","Identical to `weeks`",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"month","","Identical to `months`",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"year","","Identical to `years`",109,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"build_from_row","diesel::pg::data_types","",132,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"build","","",132,null],[11,"to_sql","","",132,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"result"}}],[11,"as_expression","","",132,null],[11,"as_expression","","",132,null],[11,"to_sql","","",132,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"result"}}],[11,"as_expression","","",132,null],[11,"as_expression","","",132,null],[11,"build_from_row","","",129,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"build","","",129,null],[11,"to_sql","","",129,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"result"}}],[11,"as_expression","","",129,null],[11,"as_expression","","",129,null],[11,"build_from_row","","",131,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"build","","",131,null],[11,"to_sql","","",131,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"result"}}],[11,"as_expression","","",131,null],[11,"as_expression","","",131,null],[11,"build_from_row","","",130,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"build","","",130,null],[11,"to_sql","","",130,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"result"}}],[11,"as_expression","","",130,null],[11,"as_expression","","",130,null],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"pgtimestamp"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"pgtimestamp"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"self"},{"name":"pgtimestamp"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",132,{"inputs":[{"name":"self"},{"name":"pgtimestamp"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",132,{"inputs":[{"name":"self"},{"name":"pgtimestamp"}],"output":{"name":"bool"}}],[11,"le","","",132,{"inputs":[{"name":"self"},{"name":"pgtimestamp"}],"output":{"name":"bool"}}],[11,"gt","","",132,{"inputs":[{"name":"self"},{"name":"pgtimestamp"}],"output":{"name":"bool"}}],[11,"ge","","",132,{"inputs":[{"name":"self"},{"name":"pgtimestamp"}],"output":{"name":"bool"}}],[11,"cmp","","",132,{"inputs":[{"name":"self"},{"name":"pgtimestamp"}],"output":{"name":"ordering"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"pgdate"}}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"pgdate"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"self"},{"name":"pgdate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",129,{"inputs":[{"name":"self"},{"name":"pgdate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",129,{"inputs":[{"name":"self"},{"name":"pgdate"}],"output":{"name":"bool"}}],[11,"le","","",129,{"inputs":[{"name":"self"},{"name":"pgdate"}],"output":{"name":"bool"}}],[11,"gt","","",129,{"inputs":[{"name":"self"},{"name":"pgdate"}],"output":{"name":"bool"}}],[11,"ge","","",129,{"inputs":[{"name":"self"},{"name":"pgdate"}],"output":{"name":"bool"}}],[11,"cmp","","",129,{"inputs":[{"name":"self"},{"name":"pgdate"}],"output":{"name":"ordering"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"pgtime"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"pgtime"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"self"},{"name":"pgtime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",131,{"inputs":[{"name":"self"},{"name":"pgtime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",131,{"inputs":[{"name":"self"},{"name":"pgtime"}],"output":{"name":"bool"}}],[11,"le","","",131,{"inputs":[{"name":"self"},{"name":"pgtime"}],"output":{"name":"bool"}}],[11,"gt","","",131,{"inputs":[{"name":"self"},{"name":"pgtime"}],"output":{"name":"bool"}}],[11,"ge","","",131,{"inputs":[{"name":"self"},{"name":"pgtime"}],"output":{"name":"bool"}}],[11,"cmp","","",131,{"inputs":[{"name":"self"},{"name":"pgtime"}],"output":{"name":"ordering"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"pginterval"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"pginterval"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"self"},{"name":"pginterval"}],"output":{"name":"bool"}}],[11,"new","","Constructs a new `PgInterval`",130,{"inputs":[{"name":"i64"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[11,"from_microseconds","","Equivalent to `new(microseconds, 0, 0)`",130,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from_days","","Equivalent to `new(0, days, 0)`",130,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from_months","","Equivalent to `new(0, 0, months)`",130,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"to_sql","","",132,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"result"}}],[11,"from_sql","","",132,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"to_sql","","",132,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"result"}}],[11,"from_sql","","",132,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"to_sql","","",129,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"result"}}],[11,"from_sql","","",129,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"to_sql","","",131,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"result"}}],[11,"from_sql","","",131,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"to_sql","","",130,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"result"}}],[11,"from_sql","","",130,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"add","","",130,null],[11,"build_from_row","","",134,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"build","","",134,null],[11,"to_sql","","",134,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"result"}}],[11,"as_expression","","",134,null],[11,"as_expression","","",134,null],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"pgnumeric"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"pgnumeric"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"pgnumeric"}],"output":{"name":"bool"}}],[11,"from_sql","","",134,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"to_sql","","",134,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"result"}}],[11,"from","","",134,{"inputs":[{"name":"bigdecimal"}],"output":{"name":"self"}}],[11,"from","","",134,{"inputs":[{"name":"bigdecimal"}],"output":{"name":"self"}}],[11,"build_from_row","","",133,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"build","","",133,null],[11,"to_sql","","",133,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"result"}}],[11,"as_expression","","",133,null],[11,"as_expression","","",133,null],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"pgmoney"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"pgmoney"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"self"},{"name":"pgmoney"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",133,{"inputs":[{"name":"self"},{"name":"pgmoney"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",133,{"inputs":[{"name":"self"},{"name":"pgmoney"}],"output":{"name":"bool"}}],[11,"le","","",133,{"inputs":[{"name":"self"},{"name":"pgmoney"}],"output":{"name":"bool"}}],[11,"gt","","",133,{"inputs":[{"name":"self"},{"name":"pgmoney"}],"output":{"name":"bool"}}],[11,"ge","","",133,{"inputs":[{"name":"self"},{"name":"pgmoney"}],"output":{"name":"bool"}}],[11,"cmp","","",133,{"inputs":[{"name":"self"},{"name":"pgmoney"}],"output":{"name":"ordering"}}],[11,"from_sql","","",133,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"to_sql","","",133,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"result"}}],[11,"add","","Panics",133,null],[11,"add_assign","","Panics",133,{"inputs":[{"name":"self"},{"name":"pgmoney"}],"output":null}],[11,"sub","","Panics",133,null],[11,"sub_assign","","Panics",133,{"inputs":[{"name":"self"},{"name":"pgmoney"}],"output":null}]],"paths":[[8,"BelongsTo"],[8,"GroupedBy"],[8,"HasTable"],[8,"Identifiable"],[8,"Backend"],[3,"AnsiTransactionManager"],[8,"TransactionManager"],[8,"SimpleConnection"],[8,"Connection"],[8,"Queryable"],[8,"QueryableByName"],[8,"FromSql"],[8,"FromSqlRow"],[3,"SqlLiteral"],[3,"UncheckedBind"],[8,"Expression"],[8,"AsExpression"],[8,"IntoSql"],[8,"AsExpressionList"],[8,"BoolExpressionMethods"],[8,"EscapeExpressionMethods"],[8,"ExpressionMethods"],[8,"NullableExpressionMethods"],[8,"TextExpressionMethods"],[8,"PgExpressionMethods"],[8,"PgTimestampExpressionMethods"],[8,"PgArrayExpressionMethods"],[8,"PgSortExpressionMethods"],[8,"PgTextExpressionMethods"],[3,"AstPass"],[3,"RawBytesBindCollector"],[8,"BindCollector"],[3,"DebugQuery"],[3,"DeleteStatement"],[3,"SqlQuery"],[3,"IncompleteInsertStatement"],[3,"InsertStatement"],[3,"UpdateStatement"],[8,"QueryId"],[8,"AsChangeset"],[8,"IntoUpdateTarget"],[8,"QueryBuilder"],[8,"Query"],[8,"SelectQuery"],[8,"QueryFragment"],[8,"AsQuery"],[8,"BoxedDsl"],[8,"DistinctDsl"],[8,"DistinctOnDsl"],[8,"FilterDsl"],[8,"FindDsl"],[8,"OrFilterDsl"],[8,"LimitDsl"],[8,"ExecuteDsl"],[8,"LoadQuery"],[8,"ForUpdateDsl"],[8,"OffsetDsl"],[8,"OrderDsl"],[8,"ThenOrderDsl"],[8,"SelectDsl"],[8,"SingleValueDsl"],[8,"BelongingToDsl"],[8,"JoinOnDsl"],[8,"SaveChangesDsl"],[8,"QueryDsl"],[8,"RunQueryDsl"],[8,"Plus"],[8,"QuerySource"],[8,"Column"],[8,"Table"],[8,"AppearsInFromClause"],[4,"Error"],[3,"ConnectionManager"],[4,"Error"],[4,"DatabaseErrorKind"],[4,"ConnectionError"],[8,"DatabaseErrorInformation"],[8,"OptionalExtension"],[6,"QueryResult"],[3,"UnexpectedNullError"],[4,"IsNull"],[8,"ToSql"],[3,"Output"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Foldable"],[8,"HasSqlType"],[8,"TypeMetadata"],[8,"IntoNullable"],[3,"Bool"],[3,"Tinyint"],[3,"SmallInt"],[3,"Integer"],[3,"BigInt"],[3,"Float"],[3,"Double"],[3,"Numeric"],[3,"Text"],[3,"Binary"],[3,"Date"],[3,"Interval"],[3,"Time"],[3,"Timestamp"],[3,"Nullable"],[8,"Row"],[8,"NamedRow"],[3,"PgTypeMetadata"],[8,"IntervalDsl"],[3,"Pg"],[3,"Oid"],[3,"Timestamptz"],[3,"Array"],[3,"Range"],[3,"Uuid"],[3,"Json"],[3,"Jsonb"],[3,"Money"],[3,"MacAddr"],[3,"Inet"],[3,"Cidr"],[3,"IncompleteOnConflict"],[3,"IncompleteDoUpdate"],[3,"PgConnection"],[3,"PgMetadataLookup"],[3,"DistinctOnClause"],[3,"PgQueryBuilder"],[3,"TransactionBuilder"],[3,"PgDate"],[3,"PgInterval"],[3,"PgTime"],[3,"PgTimestamp"],[3,"Cents"],[4,"PgNumeric"],[8,"Insertable"],[3,"now"]]};
searchIndex["diesel_derive_enum"] = {"doc":"","items":[[5,"derive","diesel_derive_enum","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["diesel_derives"] = {"doc":"","items":[[5,"derive_as_changeset","diesel_derives","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_as_expression","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_associations","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_from_sql_row","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_identifiable","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_insertable","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_query_id","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_queryable","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_queryable_by_name","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_sql_type","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["dotenv"] = {"doc":"This crate provides a configuration loader in the style of the ruby dotenv gem. This library is meant to be used on development or testing environments in which setting environment variables is not practical. It loads environment variables from a .env file, if available, and mashes those with the actual environment variables provided by the operating system.","items":[[3,"Error","dotenv","The Error type.",null,null],[12,"0","","The kind of the error.",0,null],[12,"1","","Contains the error chain and the backtrace.",0,null],[4,"ErrorKind","","",null,null],[13,"Msg","","",1,null],[13,"LineParse","","",1,null],[13,"ParseFormatter","","",1,null],[13,"Io","","",1,null],[13,"EnvVar","","",1,null],[5,"var","","After loading the dotenv file, fetches the environment variable key from the current process.",null,{"inputs":[{"name":"k"}],"output":{"generics":["string"],"name":"result"}}],[5,"vars","","After loading the dotenv file, returns an iterator of (variable, value) pairs of strings, for all the environment variables of the current process.",null,{"inputs":[],"output":{"name":"vars"}}],[5,"from_path","","Loads the file at the specified absolute path.",null,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[5,"from_path_iter","","Like `from_path`, but returns an iterator over variables instead of loading into environment.",null,{"inputs":[{"name":"path"}],"output":{"generics":["iter"],"name":"result"}}],[5,"from_filename","","Loads the specified file from the environment's current directory or its parents in sequence.",null,{"inputs":[{"name":"str"}],"output":{"generics":["pathbuf"],"name":"result"}}],[5,"from_filename_iter","","Like `from_filename`, but returns an iterator over variables instead of loading into environment.",null,{"inputs":[{"name":"str"}],"output":{"generics":["iter"],"name":"result"}}],[5,"dotenv","","This is usually what you want. It loads the .env file located in the environment's current directory or its parents in sequence.",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"result"}}],[5,"dotenv_iter","","Like `dotenv`, but returns an iterator over variables instead of loading into environment.",null,{"inputs":[],"output":{"generics":["iter"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",0,{"inputs":[{"name":"__e"},{"name":"__k"}],"output":{"name":"self"}}],[11,"with_boxed_chain","","Constructs a chained error from another boxed error and a kind, and generates a backtrace",0,{"inputs":[{"generics":["error"],"name":"box"},{"name":"__k"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",0,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",0,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",0,{"inputs":[{"name":"self"},{"name":"__f"}],"output":{"name":"self"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"varerror"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"deref","","",0,null],[11,"new","","",0,null],[11,"from_kind","","",0,null],[11,"with_chain","","",0,{"inputs":[{"name":"__e"},{"name":"__k"}],"output":{"name":"self"}}],[11,"kind","","",0,null],[11,"iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"chain_err","","",0,{"inputs":[{"name":"self"},{"name":"__f"}],"output":{"name":"self"}}],[11,"extract_backtrace","","",0,{"inputs":[{"name":"error"}],"output":{"generics":["arc"],"name":"option"}}],[11,"not_found","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[6,"Result","","Convenient wrapper around `::std::result::Result`",null,null],[8,"ResultExt","","Additional methods for `Result` and `Option`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",2,{"inputs":[{"name":"self"},{"name":"__f"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"]]};
searchIndex["dtoa"] = {"doc":"","items":[[5,"write","dtoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"generics":["usize"],"name":"result"}}],[8,"Floating","","",null,null],[10,"write","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["usize"],"name":"result"}}],[14,"diyfp","","",null,null],[14,"dtoa","","",null,null]],"paths":[[8,"Floating"]]};
searchIndex["either"] = {"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["encoding"] = {"doc":"Encoding 0.2.33","items":[[0,"types","encoding","Interface to the character encoding.",null,null],[3,"CodecError","encoding::types","Error information from either encoder or decoder.",null,null],[12,"upto","","The byte position of the first remaining byte, with respect to the current input. For the `finish` call, this should be no more than zero (since there is no input). It can be negative if the remaining byte is in the prior inputs, as long as the remaining byte is not yet processed. The caller should feed the bytes starting from this point again in order to continue encoding or decoding after an error.",0,null],[12,"cause","","A human-readable cause of the error.",0,null],[4,"DecoderTrap","","Trap, which handles decoder errors.",null,null],[13,"Strict","","Immediately fails on errors. Corresponds to WHATWG \"fatal\" error algorithm.",1,null],[13,"Replace","","Replaces an error with a U+FFFD (decoder). Corresponds to WHATWG \"replacement\" error algorithm.",1,null],[13,"Ignore","","Silently ignores an error, effectively replacing it with an empty sequence.",1,null],[13,"Call","","Calls given function to handle decoder errors. The function is given the current decoder, input and output writer, and should return true only when it is fine to keep going.",1,null],[4,"EncoderTrap","","",null,null],[13,"Strict","","Immediately fails on errors. Corresponds to WHATWG \"fatal\" error algorithm.",2,null],[13,"Replace","","Replaces an error with `?` in given encoding. Note that this fails when `?` cannot be represented in given encoding. Corresponds to WHATWG \"URL\" error algorithms.",2,null],[13,"Ignore","","Silently ignores an error, effectively replacing it with an empty sequence.",2,null],[13,"NcrEscape","","Replaces an error with XML numeric character references (e.g. `&#1234;`). The encoder trap fails when NCRs cannot be represented in given encoding. Corresponds to WHATWG \"\" error algorithms.",2,null],[13,"Call","","Calls given function to handle encoder errors. The function is given the current encoder, input and output writer, and should return true only when it is fine to keep going.",2,null],[5,"decode","","Determine the encoding by looking for a Byte Order Mark (BOM) and decoded a single string in memory. Return the result and the used encoding.",null,null],[6,"EncodingRef","","A trait object using dynamic dispatch which is a sendable reference to the encoding, for code where the encoding is not known at compile-time.",null,null],[6,"EncoderTrapFunc","","A type of the bare function in `EncoderTrap` values.",null,null],[6,"DecoderTrapFunc","","A type of the bare function in `DecoderTrap` values.",null,null],[8,"ByteWriter","","Byte writer used by encoders. In most cases this will be an owned vector of `u8`.",null,null],[11,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output until the next call to `writer_hint`, so that the writer can reserve the memory for writing. `RawEncoder`s are recommended but not required to call this method with an appropriate estimate. By default this method does nothing.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"write_byte","","Writes a single byte.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[10,"write_bytes","","Writes a number of bytes.",3,null],[8,"StringWriter","","String writer used by decoders. In most cases this will be an owned string.",null,null],[11,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output until the next call to `writer_hint`, so that the writer can reserve the memory for writing. `RawDecoder`s are recommended but not required to call this method with an appropriate estimate. By default this method does nothing.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"write_char","","Writes a single character.",4,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[10,"write_str","","Writes a string.",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[8,"RawEncoder","","Encoder converting a Unicode string into a byte sequence. This is a lower level interface, and normally `Encoding::encode` should be used instead.",null,null],[10,"from_self","","Creates a fresh `RawEncoder` instance which parameters are same as `self`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII, i.e. U+0000 through U+007F always map to bytes 00 through 7F and nothing else.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"raw_feed","","Feeds given portion of string to the encoder, pushes the an encoded byte sequence at the end of the given output, and returns a byte offset to the first unprocessed character (that can be zero when the first such character appeared in the prior calls to `raw_feed`) and optional error information (None means success).",5,null],[10,"raw_finish","","Finishes the encoder, pushes the an encoded byte sequence at the end of the given output, and returns optional error information (None means success). `remaining` value of the error information, if any, is always an empty string.",5,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"generics":["codecerror"],"name":"option"}}],[8,"RawDecoder","","Decoder converting a byte sequence into a Unicode string. This is a lower level interface, and normally `Encoding::decode` should be used instead.",null,null],[10,"from_self","","Creates a fresh `RawDecoder` instance which parameters are same as `self`.",6,{"inputs":[{"name":"self"}],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII, i.e. bytes 00 through 7F always map to U+0000 through U+007F and nothing else.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"raw_feed","","Feeds given portion of byte sequence to the encoder, pushes the a decoded string at the end of the given output, and returns an offset to the first unprocessed byte (that can be zero when the first such byte appeared in the prior calls to `raw_feed`) and optional error information (None means success).",6,null],[10,"raw_finish","","Finishes the decoder, pushes the a decoded string at the end of the given output, and returns optional error information (None means success).",6,{"inputs":[{"name":"self"},{"name":"stringwriter"}],"output":{"generics":["codecerror"],"name":"option"}}],[8,"Encoding","","Character encoding.",null,null],[10,"name","","Returns the canonical name of given encoding. This name is guaranteed to be unique across built-in encodings, but it is not normative and would be at most arbitrary.",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","Returns a name of given encoding defined in the WHATWG Encoding standard, if any. This name often differs from `name` due to the compatibility reason.",7,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[10,"raw_encoder","","Creates a new encoder.",7,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[10,"raw_decoder","","Creates a new decoder.",7,{"inputs":[{"name":"self"}],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"encode","","An easy-to-use interface to `RawEncoder`. On the encoder error `trap` is called, which may return a replacement sequence to continue processing, or a failure to return the error.",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"encodertrap"}],"output":{"generics":["vec","cow"],"name":"result"}}],[11,"encode_to","","Encode into a `ByteWriter`.",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"encodertrap"},{"name":"bytewriter"}],"output":{"generics":["cow"],"name":"result"}}],[11,"decode","","An easy-to-use interface to `RawDecoder`. On the decoder error `trap` is called, which may return a replacement string to continue processing, or a failure to return the error.",7,null],[11,"decode_to","","Decode into a `StringWriter`.",7,null],[11,"trap","","Handles a decoder error. May write to the output writer. Returns true only when it is fine to keep going.",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"decodertrap"}}],[11,"trap","","Handles an encoder error. May write to the output writer. Returns true only when it is fine to keep going.",2,{"inputs":[{"name":"self"},{"name":"rawencoder"},{"name":"str"},{"name":"bytewriter"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"encodertrap"}}],[0,"codec","encoding","Codec implementations.",null,null],[0,"error","encoding::codec","A placeholder encoding that returns encoder/decoder error for every case.",null,null],[3,"ErrorEncoding","encoding::codec::error","An encoding that returns encoder/decoder error for every case.",null,null],[3,"ErrorEncoder","","An encoder that always returns error.",null,null],[3,"ErrorDecoder","","A decoder that always returns error.",null,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"errorencoding"}}],[11,"name","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"raw_encoder","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"raw_decoder","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"errorencoder"}}],[11,"new","","",9,{"inputs":[],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"from_self","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"raw_feed","","",9,null],[11,"raw_finish","","",9,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"generics":["codecerror"],"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errordecoder"}}],[11,"new","","",10,{"inputs":[],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"from_self","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"raw_feed","","",10,null],[11,"raw_finish","","",10,{"inputs":[{"name":"self"},{"name":"stringwriter"}],"output":{"generics":["codecerror"],"name":"option"}}],[0,"ascii","encoding::codec","7-bit ASCII encoding.",null,null],[3,"ASCIIEncoding","encoding::codec::ascii","ASCII, also known as ISO/IEC 646:US.",null,null],[3,"ASCIIEncoder","","An encoder for ASCII.",null,null],[3,"ASCIIDecoder","","A decoder for ASCII.",null,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"asciiencoding"}}],[11,"name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"raw_encoder","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"raw_decoder","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"asciiencoder"}}],[11,"new","","",12,{"inputs":[],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"from_self","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"is_ascii_compatible","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",12,null],[11,"raw_finish","","",12,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"generics":["codecerror"],"name":"option"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"asciidecoder"}}],[11,"new","","",13,{"inputs":[],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"from_self","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"is_ascii_compatible","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",13,null],[11,"raw_finish","","",13,{"inputs":[{"name":"self"},{"name":"stringwriter"}],"output":{"generics":["codecerror"],"name":"option"}}],[0,"singlebyte","encoding::codec","Common codec implementation for single-byte encodings.",null,null],[3,"SingleByteEncoding","encoding::codec::singlebyte","A common framework for single-byte encodings based on ASCII.",null,null],[12,"name","","",14,null],[12,"whatwg_name","","",14,null],[12,"index_forward","","",14,null],[12,"index_backward","","",14,null],[3,"SingleByteEncoder","","An encoder for single-byte encodings based on ASCII.",null,null],[3,"SingleByteDecoder","","A decoder for single-byte encodings based on ASCII.",null,null],[0,"iso_8859_1","","Algorithmic mapping for ISO 8859-1.",null,null],[5,"forward","encoding::codec::singlebyte::iso_8859_1","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[11,"clone","encoding::codec::singlebyte","",14,{"inputs":[{"name":"self"}],"output":{"name":"singlebyteencoding"}}],[11,"name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"raw_encoder","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"raw_decoder","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"singlebyteencoder"}}],[11,"new","","",15,null],[11,"from_self","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"is_ascii_compatible","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",15,null],[11,"raw_finish","","",15,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"generics":["codecerror"],"name":"option"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"singlebytedecoder"}}],[11,"new","","",16,null],[11,"from_self","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"is_ascii_compatible","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",16,null],[11,"raw_finish","","",16,{"inputs":[{"name":"self"},{"name":"stringwriter"}],"output":{"generics":["codecerror"],"name":"option"}}],[0,"utf_8","encoding::codec","UTF-8, the universal encoding.",null,null],[3,"UTF8Encoding","encoding::codec::utf_8","UTF-8 (UCS Transformation Format, 8-bit).",null,null],[3,"UTF8Encoder","","An encoder for UTF-8.",null,null],[3,"UTF8Decoder","","A decoder for UTF-8.",null,null],[5,"from_utf8","","Almost equivalent to `std::str::from_utf8`. This function is provided for the fair benchmark against the stdlib's UTF-8 conversion functions, as rust-encoding always allocates a new string.",null,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"utf8encoding"}}],[11,"name","","",17,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"raw_encoder","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"raw_decoder","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"utf8encoder"}}],[11,"new","","",18,{"inputs":[],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"from_self","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"is_ascii_compatible","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",18,null],[11,"raw_finish","","",18,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"generics":["codecerror"],"name":"option"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"utf8decoder"}}],[11,"new","","",19,{"inputs":[],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"from_self","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"is_ascii_compatible","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",19,null],[11,"raw_finish","","",19,{"inputs":[{"name":"self"},{"name":"stringwriter"}],"output":{"generics":["codecerror"],"name":"option"}}],[0,"utf_16","encoding::codec","UTF-16.",null,null],[3,"Little","encoding::codec::utf_16","An implementation type for little endian.",null,null],[3,"Big","","An implementation type for big endian.",null,null],[3,"UTF16Encoding","","UTF-16 (UCS Transformation Format, 16-bit).",null,null],[3,"UTF16Encoder","","An encoder for UTF-16.",null,null],[3,"UTF16Decoder","","A decoder for UTF-16.",null,null],[6,"UTF16LEEncoding","","A type for UTF-16 in little endian.",null,null],[6,"UTF16BEEncoding","","A type for UTF-16 in big endian.",null,null],[17,"UTF_16LE_ENCODING","","An instance for UTF-16 in little endian.",null,null],[17,"UTF_16BE_ENCODING","","An instance for UTF-16 in big endian.",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"little"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"big"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"utf16encoding"}}],[11,"name","","",22,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"raw_encoder","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"raw_decoder","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"utf16encoder"}}],[11,"from_self","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"raw_feed","","",23,null],[11,"raw_finish","","",23,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"generics":["codecerror"],"name":"option"}}],[11,"new","","",24,{"inputs":[],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"from_self","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"raw_feed","","",24,null],[11,"raw_finish","","",24,{"inputs":[{"name":"self"},{"name":"stringwriter"}],"output":{"generics":["codecerror"],"name":"option"}}],[0,"korean","encoding::codec","Legacy Korean encodings based on KS X 1001.",null,null],[3,"Windows949Encoding","encoding::codec::korean","Windows code page 949.",null,null],[3,"Windows949Encoder","","An encoder for Windows code page 949.",null,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"windows949encoding"}}],[11,"name","","",25,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"raw_encoder","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"raw_decoder","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"windows949encoder"}}],[11,"new","","",26,{"inputs":[],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"from_self","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"is_ascii_compatible","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",26,null],[11,"raw_finish","","",26,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"generics":["codecerror"],"name":"option"}}],[0,"japanese","encoding::codec","Legacy Japanese encodings based on JIS X 0208 and JIS X 0212.",null,null],[3,"EUCJPEncoding","encoding::codec::japanese","EUC-JP. (XXX with asymmetric JIS X 0212 support)",null,null],[3,"EUCJPEncoder","","An encoder for EUC-JP with unused G3 character set.",null,null],[3,"Windows31JEncoding","","Windows code page 932, i.e. Shift_JIS with IBM/NEC extensions.",null,null],[3,"Windows31JEncoder","","An encoder for Shift_JIS with IBM/NEC extensions.",null,null],[3,"ISO2022JPEncoding","","ISO-2022-JP.",null,null],[3,"ISO2022JPEncoder","","An encoder for ISO-2022-JP without JIS X 0212/0213 support.",null,null],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"eucjpencoding"}}],[11,"name","","",27,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"raw_encoder","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"raw_decoder","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"eucjpencoder"}}],[11,"new","","",28,{"inputs":[],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"from_self","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"is_ascii_compatible","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",28,null],[11,"raw_finish","","",28,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"generics":["codecerror"],"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"windows31jencoding"}}],[11,"name","","",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"raw_encoder","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"raw_decoder","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"windows31jencoder"}}],[11,"new","","",30,{"inputs":[],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"from_self","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"is_ascii_compatible","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",30,null],[11,"raw_finish","","",30,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"generics":["codecerror"],"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"iso2022jpencoding"}}],[11,"name","","",31,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"raw_encoder","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"raw_decoder","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"iso2022jpencoder"}}],[11,"new","","",32,{"inputs":[],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"from_self","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"is_ascii_compatible","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",32,null],[11,"raw_finish","","",32,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"generics":["codecerror"],"name":"option"}}],[0,"simpchinese","encoding::codec","Legacy simplified Chinese encodings based on GB 2312 and GB 18030.",null,null],[3,"GBK","encoding::codec::simpchinese","An implementation type for GBK.",null,null],[3,"GB18030","","An implementation type for GB18030.",null,null],[3,"GBEncoding","","GBK and GB 18030-2005.",null,null],[3,"GBEncoder","","An encoder for GBK and GB18030.",null,null],[3,"HZEncoding","","HZ. (RFC 1843)",null,null],[3,"HZEncoder","","An encoder for HZ.",null,null],[6,"GBKEncoding","","A type for GBK.",null,null],[6,"GB18030Encoding","","A type for GB18030.",null,null],[17,"GBK_ENCODING","","An instance for GBK.",null,null],[17,"GB18030_ENCODING","","An instance for GB18030.",null,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"gbk"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"gb18030"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"gbencoding"}}],[11,"name","","",35,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"raw_encoder","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"raw_decoder","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"gbencoder"}}],[11,"new","","",36,{"inputs":[],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"from_self","","",36,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"is_ascii_compatible","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",36,null],[11,"raw_finish","","",36,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"generics":["codecerror"],"name":"option"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"hzencoding"}}],[11,"name","","",37,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"raw_encoder","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"raw_decoder","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"hzencoder"}}],[11,"new","","",38,{"inputs":[],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"from_self","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"is_ascii_compatible","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",38,null],[11,"raw_finish","","",38,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"generics":["codecerror"],"name":"option"}}],[0,"tradchinese","encoding::codec","Legacy traditional Chinese encodings.",null,null],[3,"BigFive2003Encoding","encoding::codec::tradchinese","Big5-2003 with common extensions. (XXX with asymmetric HKSCS-2008 support)",null,null],[3,"BigFive2003Encoder","","An encoder for Big5-2003.",null,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"bigfive2003encoding"}}],[11,"name","","",39,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"raw_encoder","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"raw_decoder","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["rawdecoder"],"name":"box"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bigfive2003encoder"}}],[11,"new","","",40,{"inputs":[],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"from_self","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"is_ascii_compatible","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_feed","","",40,null],[11,"raw_finish","","",40,{"inputs":[{"name":"self"},{"name":"bytewriter"}],"output":{"generics":["codecerror"],"name":"option"}}],[0,"whatwg","encoding::codec","Asymmetric or special encoding constructions required by the WHATWG Encoding standard.",null,null],[3,"EncoderOnlyUTF8Encoding","encoding::codec::whatwg","Replacement encoding used to solve a particular attack vector due to mismatching server and client supports for encodings. It is rarely useful outside.",null,null],[0,"x_user_defined","","Algorithmic mapping for `x-user-defined` encoding.",null,null],[5,"forward","encoding::codec::whatwg::x_user_defined","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[11,"clone","encoding::codec::whatwg","",41,{"inputs":[{"name":"self"}],"output":{"name":"encoderonlyutf8encoding"}}],[11,"name","","",41,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"whatwg_name","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"raw_encoder","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["rawencoder"],"name":"box"}}],[11,"raw_decoder","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["rawdecoder"],"name":"box"}}],[0,"all","encoding","A list of all supported encodings. Useful for encodings fixed in the compile time.",null,null],[5,"encodings","encoding::all","Returns a list of references to the encodings available.",null,null],[0,"whatwg","","",null,null],[17,"X_USER_DEFINED","encoding::all::whatwg","",null,null],[17,"ISO_8859_8_I","","",null,null],[17,"REPLACEMENT","","",null,null],[17,"ERROR","encoding::all","",null,null],[17,"ASCII","","",null,null],[17,"IBM866","","",null,null],[17,"ISO_8859_1","","",null,null],[17,"ISO_8859_2","","",null,null],[17,"ISO_8859_3","","",null,null],[17,"ISO_8859_4","","",null,null],[17,"ISO_8859_5","","",null,null],[17,"ISO_8859_6","","",null,null],[17,"ISO_8859_7","","",null,null],[17,"ISO_8859_8","","",null,null],[17,"ISO_8859_10","","",null,null],[17,"ISO_8859_13","","",null,null],[17,"ISO_8859_14","","",null,null],[17,"ISO_8859_15","","",null,null],[17,"ISO_8859_16","","",null,null],[17,"KOI8_R","","",null,null],[17,"KOI8_U","","",null,null],[17,"MAC_ROMAN","","",null,null],[17,"WINDOWS_874","","",null,null],[17,"WINDOWS_1250","","",null,null],[17,"WINDOWS_1251","","",null,null],[17,"WINDOWS_1252","","",null,null],[17,"WINDOWS_1253","","",null,null],[17,"WINDOWS_1254","","",null,null],[17,"WINDOWS_1255","","",null,null],[17,"WINDOWS_1256","","",null,null],[17,"WINDOWS_1257","","",null,null],[17,"WINDOWS_1258","","",null,null],[17,"MAC_CYRILLIC","","",null,null],[17,"UTF_8","","",null,null],[17,"UTF_16LE","","",null,null],[17,"UTF_16BE","","",null,null],[17,"WINDOWS_949","","",null,null],[17,"EUC_JP","","",null,null],[17,"WINDOWS_31J","","",null,null],[17,"ISO_2022_JP","","",null,null],[17,"GBK","","",null,null],[17,"GB18030","","",null,null],[17,"HZ","","",null,null],[17,"BIG5_2003","","",null,null],[0,"label","encoding","An interface for retrieving an encoding (or a set of encodings) from a string/numeric label.",null,null],[5,"encoding_from_whatwg_label","encoding::label","Returns an encoding from given label, defined in the WHATWG Encoding standard, if any. Implements \"get an encoding\" algorithm: http://encoding.spec.whatwg.org/#concept-encoding-get",null,{"inputs":[{"name":"str"}],"output":{"generics":["encodingref"],"name":"option"}}],[5,"encoding_from_windows_code_page","","Returns an encoding from Windows code page number. http://msdn.microsoft.com/en-us/library/windows/desktop/dd317756%28v=vs.85%29.aspx Sometimes it can return a superset of the requested encoding, e.g. for several CJK encodings.",null,{"inputs":[{"name":"usize"}],"output":{"generics":["encodingref"],"name":"option"}}]],"paths":[[3,"CodecError"],[4,"DecoderTrap"],[4,"EncoderTrap"],[8,"ByteWriter"],[8,"StringWriter"],[8,"RawEncoder"],[8,"RawDecoder"],[8,"Encoding"],[3,"ErrorEncoding"],[3,"ErrorEncoder"],[3,"ErrorDecoder"],[3,"ASCIIEncoding"],[3,"ASCIIEncoder"],[3,"ASCIIDecoder"],[3,"SingleByteEncoding"],[3,"SingleByteEncoder"],[3,"SingleByteDecoder"],[3,"UTF8Encoding"],[3,"UTF8Encoder"],[3,"UTF8Decoder"],[3,"Little"],[3,"Big"],[3,"UTF16Encoding"],[3,"UTF16Encoder"],[3,"UTF16Decoder"],[3,"Windows949Encoding"],[3,"Windows949Encoder"],[3,"EUCJPEncoding"],[3,"EUCJPEncoder"],[3,"Windows31JEncoding"],[3,"Windows31JEncoder"],[3,"ISO2022JPEncoding"],[3,"ISO2022JPEncoder"],[3,"GBK"],[3,"GB18030"],[3,"GBEncoding"],[3,"GBEncoder"],[3,"HZEncoding"],[3,"HZEncoder"],[3,"BigFive2003Encoding"],[3,"BigFive2003Encoder"],[3,"EncoderOnlyUTF8Encoding"]]};
searchIndex["encoding_index_japanese"] = {"doc":"Japanese index tables for rust-encoding.","items":[[0,"jis0208","encoding_index_japanese","JIS X 0208 with common extensions.",null,null],[5,"forward","encoding_index_japanese::jis0208","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}],[5,"backward_remapped","","Returns the index shift_jis pointer for code point `code`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}],[0,"jis0212","encoding_index_japanese","JIS X 0212.",null,null],[5,"forward","encoding_index_japanese::jis0212","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}]],"paths":[]};
searchIndex["encoding_index_korean"] = {"doc":"Korean index tables for rust-encoding.","items":[[0,"euc_kr","encoding_index_korean","KS X 1001 plus Unified Hangul Code.",null,null],[5,"forward","encoding_index_korean::euc_kr","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}]],"paths":[]};
searchIndex["encoding_index_simpchinese"] = {"doc":"Simplified Chinese index tables for rust-encoding.","items":[[0,"gb18030","encoding_index_simpchinese","GB 18030 two-byte area.",null,null],[5,"forward","encoding_index_simpchinese::gb18030","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}],[0,"gb18030_ranges","encoding_index_simpchinese","GB 18030 four-byte area.",null,null],[5,"forward","encoding_index_simpchinese::gb18030_ranges","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}]],"paths":[]};
searchIndex["encoding_index_singlebyte"] = {"doc":"Single-byte index tables for rust-encoding.","items":[[0,"ibm866","encoding_index_singlebyte","IBM code page 866.",null,null],[5,"forward","encoding_index_singlebyte::ibm866","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_2","encoding_index_singlebyte","ISO 8859-2.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_2","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_3","encoding_index_singlebyte","ISO 8859-3.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_3","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_4","encoding_index_singlebyte","ISO 8859-4.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_4","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_5","encoding_index_singlebyte","ISO 8859-5.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_5","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_6","encoding_index_singlebyte","ISO 8859-6.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_6","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_7","encoding_index_singlebyte","ISO 8859-7.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_7","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_8","encoding_index_singlebyte","ISO 8859-8 (either visual or logical).",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_8","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_10","encoding_index_singlebyte","ISO 8859-10.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_10","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_13","encoding_index_singlebyte","ISO 8859-13.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_13","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_14","encoding_index_singlebyte","ISO 8859-14.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_14","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_15","encoding_index_singlebyte","ISO 8859-15.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_15","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_16","encoding_index_singlebyte","ISO 8859-16.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_16","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"koi8_r","encoding_index_singlebyte","KOI8-R.",null,null],[5,"forward","encoding_index_singlebyte::koi8_r","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"koi8_u","encoding_index_singlebyte","KOI8-U.",null,null],[5,"forward","encoding_index_singlebyte::koi8_u","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"macintosh","encoding_index_singlebyte","MacRoman.",null,null],[5,"forward","encoding_index_singlebyte::macintosh","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_874","encoding_index_singlebyte","Windows code page 874.",null,null],[5,"forward","encoding_index_singlebyte::windows_874","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1250","encoding_index_singlebyte","Windows code page 1250.",null,null],[5,"forward","encoding_index_singlebyte::windows_1250","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1251","encoding_index_singlebyte","Windows code page 1251.",null,null],[5,"forward","encoding_index_singlebyte::windows_1251","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1252","encoding_index_singlebyte","Windows code page 1252.",null,null],[5,"forward","encoding_index_singlebyte::windows_1252","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1253","encoding_index_singlebyte","Windows code page 1253.",null,null],[5,"forward","encoding_index_singlebyte::windows_1253","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1254","encoding_index_singlebyte","Windows code page 1254.",null,null],[5,"forward","encoding_index_singlebyte::windows_1254","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1255","encoding_index_singlebyte","Windows code page 1254.",null,null],[5,"forward","encoding_index_singlebyte::windows_1255","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1256","encoding_index_singlebyte","Windows code page 1256.",null,null],[5,"forward","encoding_index_singlebyte::windows_1256","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1257","encoding_index_singlebyte","Windows code page 1257.",null,null],[5,"forward","encoding_index_singlebyte::windows_1257","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1258","encoding_index_singlebyte","Windows code page 1258.",null,null],[5,"forward","encoding_index_singlebyte::windows_1258","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"x_mac_cyrillic","encoding_index_singlebyte","MacCyrillic.",null,null],[5,"forward","encoding_index_singlebyte::x_mac_cyrillic","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}]],"paths":[]};
searchIndex["encoding_index_tests"] = {"doc":"Macros and utilities for testing indices.","items":[[14,"single_byte_tests","encoding_index_tests","Makes a common test suite for single-byte indices.",null,null],[14,"multi_byte_tests","","Makes a common test suite for multi-byte indices.",null,null],[14,"multi_byte_range_tests","","Makes a common test suite for multi-byte range indices.",null,null]],"paths":[]};
searchIndex["encoding_index_tradchinese"] = {"doc":"Traditional Chinese index tables for rust-encoding.","items":[[0,"big5","encoding_index_tradchinese","Big5 and HKSCS.",null,null],[5,"forward","encoding_index_tradchinese::big5","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}]],"paths":[]};
searchIndex["env_logger"] = {"doc":"A simple logger configured via environment variables which writes to stdout or stderr, for use with the logging facade exposed by the [`log` crate][log-crate-url].","items":[[3,"Env","env_logger","Set of environment variables to configure from.",null,null],[3,"Logger","","The env logger.",null,null],[3,"Builder","","`Builder` acts as builder for initializing a `Logger`.",null,null],[5,"try_init","","Attempts to initialize the global logger with an env logger.",null,{"inputs":[],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":null}],[5,"try_init_from_env","","Attempts to initialize the global logger with an env logger from the given environment variables.",null,{"inputs":[{"name":"e"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"init_from_env","","Initializes the global logger with an env logger from the given environment variables.",null,{"inputs":[{"name":"e"}],"output":null}],[0,"filter","","Filtering for log records.",null,null],[3,"Filter","env_logger::filter","A log filter.",null,null],[3,"Builder","","A builder for a log filter.",null,null],[11,"filter","","Returns the maximum `LevelFilter` that this filter instance is configured to output.",0,{"inputs":[{"name":"self"}],"output":{"name":"levelfilter"}}],[11,"matches","","Checks if this record matches the configured filter.",0,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"bool"}}],[11,"enabled","","Determines if a log message with the specified metadata would be logged.",0,{"inputs":[{"name":"self"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"new","","Initializes the filter builder with defaults.",1,{"inputs":[],"output":{"name":"builder"}}],[11,"from_env","","Initializes the filter builder from an environment.",1,{"inputs":[{"name":"str"}],"output":{"name":"builder"}}],[11,"filter_module","","Adds a directive to the filter for a specific module.",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"levelfilter"}],"output":{"name":"self"}}],[11,"filter_level","","Adds a directive to the filter for all modules.",1,{"inputs":[{"name":"self"},{"name":"levelfilter"}],"output":{"name":"self"}}],[11,"filter","","Adds a directive to the filter.",1,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"},{"name":"levelfilter"}],"output":{"name":"self"}}],[11,"parse","","Parses the directives string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"build","","Build a log filter.",1,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"fmt","env_logger","Formatting for log records.",null,null],[3,"Formatter","env_logger::fmt","A formatter to write logs into.",null,null],[3,"Style","","A set of styles to apply to the terminal output.",null,null],[3,"StyledValue","","A value that can be printed using the given styles.",null,null],[3,"Timestamp","","An [RFC3339] formatted timestamp.",null,null],[3,"ParseColorError","","An error from parsing an invalid color specification.",null,null],[4,"Target","","Log target, either `stdout` or `stderr`.",null,null],[13,"Stdout","","Logs will be sent to standard output.",2,null],[13,"Stderr","","Logs will be sent to standard error.",2,null],[4,"WriteStyle","","Whether or not to print styles to the target.",null,null],[13,"Auto","","Try to print styles, but don't force the issue.",3,null],[13,"Always","","Try very hard to print styles.",3,null],[13,"Never","","Never print styles.",3,null],[4,"Color","","The set of available colors for the terminal foreground/background.",null,null],[13,"Black","","",4,null],[13,"Blue","","",4,null],[13,"Green","","",4,null],[13,"Red","","",4,null],[13,"Cyan","","",4,null],[13,"Magenta","","",4,null],[13,"Yellow","","",4,null],[13,"White","","",4,null],[13,"Ansi256","","",4,null],[13,"Rgb","","",4,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"writestyle"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"writestyle"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"set_color","","Set the text color.",5,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"style"}}],[11,"set_bold","","Set the text weight.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"style"}}],[11,"set_intense","","Set the text intensity.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"style"}}],[11,"set_bg","","Set the background color.",5,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"style"}}],[11,"value","","Wrap a value in the style.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"styledvalue"}}],[11,"style","","Begin a new [`Style`].",6,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"timestamp","","Get a [`Timestamp`] for the current date and time in UTC.",6,{"inputs":[{"name":"self"}],"output":{"name":"timestamp"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"parsecolorerror"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"parsecolorerror"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"parsecolorerror"}],"output":{"name":"bool"}}],[11,"invalid","","Return the string that couldn't be parsed as a valid color.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["color","parsecolorerror"],"name":"result"}}],[11,"fmt","env_logger","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[17,"DEFAULT_FILTER_ENV","","The default name for the environment variable to read filters from.",null,null],[17,"DEFAULT_WRITE_STYLE_ENV","","The default name for the environment variable to read style preferences from.",null,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"builder"}}],[11,"new","","Initializes the log builder with defaults.",11,{"inputs":[],"output":{"name":"builder"}}],[11,"from_env","","Initializes the log builder from the environment.",11,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"from_default_env","","Initializes the log builder from the environment using default variable names.",11,{"inputs":[],"output":{"name":"self"}}],[11,"format","","Sets the format function for formatting the log output.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"default_format","","Use the default format.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default_format_level","","Whether or not to write the level in the default format.",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"default_format_module_path","","Whether or not to write the module path in the default format.",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"default_format_timestamp","","Whether or not to write the timestamp in the default format.",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"filter_module","","Adds a directive to the filter for a specific module.",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"levelfilter"}],"output":{"name":"self"}}],[11,"filter_level","","Adds a directive to the filter for all modules.",11,{"inputs":[{"name":"self"},{"name":"levelfilter"}],"output":{"name":"self"}}],[11,"filter","","Adds filters to the logger.",11,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"},{"name":"levelfilter"}],"output":{"name":"self"}}],[11,"parse","","Parses the directives string in the same form as the `RUST_LOG` environment variable.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"target","","Sets the target for the log output.",11,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"self"}}],[11,"write_style","","Sets whether or not styles will be written.",11,{"inputs":[{"name":"self"},{"name":"writestyle"}],"output":{"name":"self"}}],[11,"parse_write_style","","Parses whether or not to write styles in the same form as the `RUST_LOG_STYLE` environment variable.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"try_init","","Initializes the global logger with the built env logger.",11,{"inputs":[{"name":"self"}],"output":{"generics":["setloggererror"],"name":"result"}}],[11,"init","","Initializes the global logger with the built env logger.",11,{"inputs":[{"name":"self"}],"output":null}],[11,"build","","Build an env logger.",11,{"inputs":[{"name":"self"}],"output":{"name":"logger"}}],[11,"from_env","","Creates the logger from the environment.",10,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"from_default_env","","Creates the logger from the environment using default variable names.",10,{"inputs":[],"output":{"name":"self"}}],[11,"filter","","Returns the maximum `LevelFilter` that this env logger instance is configured to output.",10,{"inputs":[{"name":"self"}],"output":{"name":"levelfilter"}}],[11,"matches","","Checks if this record matches the configured filter.",10,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"bool"}}],[11,"enabled","","",10,{"inputs":[{"name":"self"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"log","","",10,{"inputs":[{"name":"self"},{"name":"record"}],"output":null}],[11,"flush","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Get a default set of environment variables.",12,{"inputs":[],"output":{"name":"self"}}],[11,"filter","","Specify an environment variable to read the filter from.",12,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"self"}}],[11,"filter_or","","Specify an environment variable to read the filter from.",12,{"inputs":[{"name":"self"},{"name":"e"},{"name":"v"}],"output":{"name":"self"}}],[11,"write_style","","Specify an environment variable to read the style from.",12,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"self"}}],[11,"write_style_or","","Specify an environment variable to read the style from.",12,{"inputs":[{"name":"self"},{"name":"e"},{"name":"v"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}]],"paths":[[3,"Filter"],[3,"Builder"],[4,"Target"],[4,"WriteStyle"],[4,"Color"],[3,"Style"],[3,"Formatter"],[3,"Timestamp"],[3,"StyledValue"],[3,"ParseColorError"],[3,"Logger"],[3,"Builder"],[3,"Env"]]};
searchIndex["error_chain"] = {"doc":"A library for consistent and reliable error handling","items":[[3,"Backtrace","error_chain","Representation of an owned and self-contained backtrace.",null,null],[3,"ErrorChainIter","","",null,null],[12,"0","","",0,null],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[14,"quick_error","","",null,null],[14,"error_chain","","",null,null],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",1,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"backtrace"}}]],"paths":[[3,"ErrorChainIter"],[3,"Backtrace"]]};
searchIndex["failure"] = {"doc":"An experimental new error-handling library.","items":[[3,"Backtrace","failure","A `Backtrace`.",null,null],[3,"Compat","","A compatibility wrapper around an error type from this crate.",null,null],[3,"Context","","An error with context around it.",null,null],[3,"SyncFailure","","Wrapper for `std` errors to make them `Sync`.",null,null],[3,"Error","","The `Error` type, which can contain any failure.",null,null],[3,"Causes","","A iterator over the causes of a `Fail`",null,null],[5,"err_msg","","Constructs a `Fail` type from a string.",null,{"inputs":[{"name":"d"}],"output":{"name":"error"}}],[11,"new","","Constructs a new backtrace. This will only create a real backtrace if the crate is compiled in std mode and the `RUST_BACKTRACE` environmental variable is activated.",0,{"inputs":[],"output":{"name":"backtrace"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"backtrace"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"compat"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"compat"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"compat"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"compat"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Unwraps this into the inner error.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Creates a new context without an underlying error message.",2,{"inputs":[{"name":"d"}],"output":{"name":"context"}}],[11,"get_context","","Returns a reference to the context provided with this error.",2,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"d"}],"output":{"name":"context"}}],[11,"new","","Wraps a non-`Sync` `Error` in order to make it implement `Fail`.",3,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"f"}],"output":{"name":"error"}}],[11,"cause","","Returns a reference to the underlying cause of this `Error`. Unlike the method on `Fail`, this does not return an `Option`. The `Error` type always has an underlying failure.",4,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"backtrace","","Gets a reference to the `Backtrace` for this `Error`.",4,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"context","","Provides context for this `Error`.",4,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"context"}}],[11,"compat","","Wraps `Error` in a compatibility type.",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"compat"}}],[11,"downcast","","Attempts to downcast this `Error` to a particular `Fail` type.",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"root_cause","","Returns the \"root cause\" of this error - the last value in the cause chain which does not return an underlying `cause`.",4,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"downcast_ref","","Attempts to downcast this `Error` to a particular `Fail` type by reference.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Attempts to downcast this `Error` to a particular `Fail` type by mutable reference.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"causes","","Returns a iterator over the causes of the `Error`, beginning with the failure returned by the `cause` method and ending with the failure returned by `root_cause`.",4,{"inputs":[{"name":"self"}],"output":{"name":"causes"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"ResultExt","","Extension methods for `Result`.",null,null],[10,"compat","","Wraps the error in `Compat` to make it compatible with older error handling APIs that expect `std::error::Error`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["compat"],"name":"result"}}],[10,"context","","Wraps the error type in a context type.",5,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"generics":["context"],"name":"result"}}],[10,"with_context","","Wraps the error type in a context type generated by looking at the error value.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["context"],"name":"result"}}],[8,"Fail","","The `Fail` trait.",null,null],[11,"cause","","Returns a reference to the underlying cause of this failure, if it is an error that wraps other errors.",6,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","Returns a reference to the `Backtrace` carried by this failure, if it carries one.",6,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"context","","Provides context for this failure.",6,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"context"}}],[11,"compat","","Wraps this failure in a compatibility wrapper that implements `std::error::Error`.",6,{"inputs":[{"name":"self"}],"output":{"name":"compat"}}],[11,"causes","","Returns a iterator over the causes of this `Fail` with itself as the first item and the `root_cause` as the final item.",6,{"inputs":[{"name":"self"}],"output":{"name":"causes"}}],[11,"root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",6,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"downcast_ref","","Attempts to downcast this failure to a concrete type by reference.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Attempts to downcast this failure to a concrete type by mutable reference.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",6,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"causes","","Returns a iterator over the causes of this `Fail` with itself as the first item and the `root_cause` as the final item.",6,{"inputs":[{"name":"self"}],"output":{"name":"causes"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[14,"bail","","Exits a function early with an `Error`.",null,null],[14,"ensure","","Exits a function early with an `Error` if the condition is not satisfied.",null,null],[14,"format_err","","Constructs an `Error` using the standard string interpolation syntax.",null,null]],"paths":[[3,"Backtrace"],[3,"Compat"],[3,"Context"],[3,"SyncFailure"],[3,"Error"],[8,"ResultExt"],[8,"Fail"],[3,"Causes"]]};
searchIndex["failure_derive"] = {"doc":"","items":[[5,"Fail","failure_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["fast_chemail"] = {"doc":"Package fast_chemail validates the email as it is defined in the HTML specification.","items":[[4,"ParseError","fast_chemail","",null,null],[13,"NoLocalPart","","",0,null],[13,"NoDomainPart","","",0,null],[13,"NoSignAt","","",0,null],[13,"TooAt","","",0,null],[13,"LocalTooLong","","",0,null],[13,"DomainTooLong","","",0,null],[13,"LabelTooLong","","",0,null],[13,"LocalStartPeriod","","",0,null],[13,"LocalEndPeriod","","",0,null],[13,"DomainStartPeriod","","",0,null],[13,"DomainEndPeriod","","",0,null],[13,"ConsecutivePeriod","","",0,null],[13,"NoPeriodDomain","","",0,null],[13,"Ascii","","",0,null],[13,"WrongCharLocal","","",0,null],[13,"WrongCharDomain","","",0,null],[13,"WrongStartLabel","","",0,null],[13,"WrongEndLabel","","",0,null],[5,"is_valid_email","","`is_valid_email` checks wheter an email address is valid.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"parse_email","","`parse_email` scans an email address to check wheter it is correct.",null,{"inputs":[{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"asciierror"}],"output":{"name":"parseerror"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"ParseError"]]};
searchIndex["filetime"] = {"doc":"Timestamps for files in Rust","items":[[3,"FileTime","filetime","A helper structure to represent a timestamp for a file.",null,null],[5,"set_file_times","","Set the last access and modification times for a file on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"filetime"},{"name":"filetime"}],"output":{"name":"result"}}],[5,"set_symlink_file_times","","Set the last access and modification times for a file on the filesystem. This function does not follow symlink.",null,{"inputs":[{"name":"p"},{"name":"filetime"},{"name":"filetime"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"filetime"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"filetime"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"filetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"filetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"filetime"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"filetime"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"filetime"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"filetime"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"filetime"}}],[11,"hash","","",0,null],[11,"zero","","Creates a new timestamp representing a 0 time.",0,{"inputs":[],"output":{"name":"filetime"}}],[11,"from_seconds_since_1970","","Creates a new instance of `FileTime` with a number of seconds and nanoseconds relative to January 1, 1970.",0,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"filetime"}}],[11,"from_last_modification_time","","Creates a new timestamp from the last modification time listed in the specified metadata.",0,{"inputs":[{"name":"metadata"}],"output":{"name":"filetime"}}],[11,"from_last_access_time","","Creates a new timestamp from the last access time listed in the specified metadata.",0,{"inputs":[{"name":"metadata"}],"output":{"name":"filetime"}}],[11,"from_creation_time","","Creates a new timestamp from the creation time listed in the specified metadata.",0,{"inputs":[{"name":"metadata"}],"output":{"generics":["filetime"],"name":"option"}}],[11,"seconds","","Returns the whole number of seconds represented by this timestamp.",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"seconds_relative_to_1970","","Returns the whole number of seconds represented by this timestamp, relative to the Unix epoch start of January 1, 1970.",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"nanoseconds","","Returns the nanosecond precision of this timestamp.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"FileTime"]]};
searchIndex["flate2"] = {"doc":"A DEFLATE-based stream compression/decompression library","items":[[3,"GzBuilder","flate2","A builder structure to create a new gzip Encoder.",null,null],[3,"GzHeader","","A structure representing the header of a gzip stream.",null,null],[3,"Compress","","Raw in-memory compression stream for blocks of data.",null,null],[3,"CompressError","","Error returned when a compression object is used incorrectly or otherwise generates an error.",null,null],[3,"DecompressError","","Error returned when a decompression object finds that the input stream of bytes was not a valid input stream of bytes.",null,null],[3,"Decompress","","Raw in-memory decompression stream for blocks of data.",null,null],[3,"Crc","","The CRC calculated by a [`CrcReader`].",null,null],[3,"CrcReader","","A wrapper around a [`Read`] that calculates the CRC.",null,null],[3,"Compression","","When compressing data, the compression level can be specified by a value in this enum.",null,null],[4,"Status","","Possible status results of compressing some data or successfully decompressing a block of data.",null,null],[13,"Ok","","Indicates success.",0,null],[13,"BufError","","Indicates that forward progress is not possible due to input or output buffers being empty.",0,null],[13,"StreamEnd","","Indicates that all input has been consumed and all output bytes have been written. Decompression/compression should not be called again.",0,null],[4,"FlushCompress","","Values which indicate the form of flushing to be used when compressing in-memory data.",null,null],[13,"None","","A typical parameter for passing to compression/decompression functions, this indicates that the underlying stream to decide how much data to accumulate before producing output in order to maximize compression.",1,null],[13,"Sync","","All pending output is flushed to the output buffer and the output is aligned on a byte boundary so that the decompressor can get all input data available so far.",1,null],[13,"Partial","","All pending output is flushed to the output buffer, but the output is not aligned to a byte boundary.",1,null],[13,"Full","","All output is flushed as with `Flush::Sync` and the compression state is reset so decompression can restart from this point if previous compressed data has been damaged or if random access is desired.",1,null],[13,"Finish","","Pending input is processed and pending output is flushed.",1,null],[4,"FlushDecompress","","Values which indicate the form of flushing to be used when decompressing in-memory data.",null,null],[13,"None","","A typical parameter for passing to compression/decompression functions, this indicates that the underlying stream to decide how much data to accumulate before producing output in order to maximize compression.",2,null],[13,"Sync","","All pending output is flushed to the output buffer and the output is aligned on a byte boundary so that the decompressor can get all input data available so far.",2,null],[13,"Finish","","Pending input is processed and pending output is flushed.",2,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new CRC.",3,{"inputs":[],"output":{"name":"crc"}}],[11,"sum","","bla",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"amount","","The number of bytes that have been used to calculate the CRC. This value is only accurate if the amount is lower than 232.",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"update","","Update the CRC with the bytes in `data`.",3,null],[11,"reset","","Reset the CRC.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"combine","","Combine the CRC with the CRC for the subsequent block of bytes.",3,{"inputs":[{"name":"self"},{"name":"crc"}],"output":null}],[11,"new","","Create a new CrcReader.",4,{"inputs":[{"name":"r"}],"output":{"name":"crcreader"}}],[11,"crc","","Get the Crc for this CrcReader.",4,{"inputs":[{"name":"self"}],"output":{"name":"crc"}}],[11,"into_inner","","Get the reader that is wrapped by this CrcReader.",4,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_ref","","Get the reader that is wrapped by this CrcReader by reference.",4,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Get a mutable reference to the reader that is wrapped by this CrcReader.",4,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"reset","","Reset the Crc in this CrcReader.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","",4,null],[11,"fill_buf","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"gzheader"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"gzheader"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gzheader"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"filename","","Returns the `filename` field of this gzip stream's header, if present.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extra","","Returns the `extra` field of this gzip stream's header, if present.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"comment","","Returns the `comment` field of this gzip stream's header, if present.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"operating_system","","Returns the `operating_system` field of this gzip stream's header.",5,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"mtime","","This gives the most recent modification time of the original file being compressed.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mtime_as_datetime","","Returns the most recent modification time represented by a date-time type. Returns `None` if the value of the underlying counter is 0, indicating no time stamp is available.",5,{"inputs":[{"name":"self"}],"output":{"generics":["systemtime"],"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new blank builder with no header by default.",6,{"inputs":[],"output":{"name":"gzbuilder"}}],[11,"mtime","","Configure the `mtime` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"gzbuilder"}}],[11,"operating_system","","Configure the `operating_system` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"gzbuilder"}}],[11,"extra","","Configure the `extra` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"gzbuilder"}}],[11,"filename","","Configure the `filename` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"gzbuilder"}}],[11,"comment","","Configure the `comment` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"gzbuilder"}}],[11,"write","","Consume this builder, creating a writer encoder in the process.",6,{"inputs":[{"name":"self"},{"name":"w"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"read","","Consume this builder, creating a reader encoder in the process.",6,{"inputs":[{"name":"self"},{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"buf_read","","Consume this builder, creating a reader encoder in the process.",6,{"inputs":[{"name":"self"},{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"flushcompress"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"flushcompress"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"flushdecompress"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"flushdecompress"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new object ready for compressing data that it's given.",7,{"inputs":[{"name":"compression"},{"name":"bool"}],"output":{"name":"compress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by this compression object.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by this compression object.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reset","","Quickly resets this compressor without having to reallocate anything.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"compress","","Compresses the input data into the output, consuming only as much input as needed and writing as much output as possible.",7,null],[11,"compress_vec","","Compresses the input data into the extra space of the output, consuming only as much input as needed and writing as much output as possible.",7,null],[11,"new","","Creates a new object ready for decompressing data that it's given.",8,{"inputs":[{"name":"bool"}],"output":{"name":"decompress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by this decompression object.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by this decompression object.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"decompress","","Decompresses the input data into the output, consuming only as much input as needed and writing as much output as possible.",8,null],[11,"decompress_vec","","Decompresses the input data into the extra space in the output vector specified by `output`.",8,null],[11,"reset","","Performs the equivalent of replacing this decompression state with a freshly allocated copy.",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","","Types which operate over [`Read`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::read","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[3,"MultiGzDecoder","","A gzip streaming decoder that decodes all members of a multistream",null,null],[0,"write","flate2","Types which operate over [`Write`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::write","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[0,"bufread","flate2","Types which operate over [`BufRead`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::bufread","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[3,"MultiGzDecoder","","A gzip streaming decoder that decodes all members of a multistream",null,null],[11,"clone","flate2","",11,{"inputs":[{"name":"self"}],"output":{"name":"compression"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new description of the compression level with an explicitly specified integer.",11,{"inputs":[{"name":"u32"}],"output":{"name":"compression"}}],[11,"none","","No compression is to be performed, this may actually inflate data slightly when encoding.",11,{"inputs":[],"output":{"name":"compression"}}],[11,"fast","","Optimize for the best speed of encoding.",11,{"inputs":[],"output":{"name":"compression"}}],[11,"best","","Optimize for the size of data being encoded.",11,{"inputs":[],"output":{"name":"compression"}}],[11,"level","","Returns an integer representing the compression level, typically on a scale of 0-9",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"compression"}}],[11,"fmt","flate2::bufread","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",12,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",12,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",12,null],[11,"write","","",12,null],[11,"flush","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",13,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"reset_data","","Resets the state of this decoder's data",13,{"inputs":[{"name":"self"}],"output":null}],[11,"get_ref","","Acquires a reference to the underlying stream",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",13,null],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::read","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",14,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",14,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",14,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",14,null],[11,"write","","",14,null],[11,"flush","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",15,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoder"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",15,{"inputs":[{"name":"r"},{"generics":["u8"],"name":"vec"}],"output":{"name":"deflatedecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",15,null],[11,"write","","",15,null],[11,"flush","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::write","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will write compressed data to the stream given at the given compression level.",16,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",16,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",16,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output stream for another.",16,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_finish","","Consumes this encoder, flushing the output stream.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that have been written to this compresor.",16,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",16,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",16,null],[11,"flush","","",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",16,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will write uncompressed data to the stream.",17,{"inputs":[{"name":"w"}],"output":{"name":"deflatedecoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",17,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",17,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output stream for another.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for decompression.",17,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its output stream.",17,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",17,null],[11,"flush","","",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",17,null],[11,"fmt","flate2::bufread","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",18,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying reader.",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",18,null],[11,"write","","",18,null],[11,"flush","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the gzip header.",19,{"inputs":[{"name":"r"}],"output":{"name":"gzdecoder"}}],[11,"header","","Returns the header associated with this stream, if it was valid",19,{"inputs":[{"name":"self"}],"output":{"generics":["gzheader"],"name":"option"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",19,null],[11,"write","","",19,null],[11,"flush","","",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the (first) gzip header. If the gzip stream contains multiple members all will be decoded.",20,{"inputs":[{"name":"r"}],"output":{"name":"multigzdecoder"}}],[11,"header","","Returns the current header associated with this stream, if it's valid",20,{"inputs":[{"name":"self"}],"output":{"generics":["gzheader"],"name":"option"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",20,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",20,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",20,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",20,null],[11,"write","","",20,null],[11,"flush","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::read","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",21,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying reader.",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",21,null],[11,"write","","",21,null],[11,"flush","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the gzip header.",22,{"inputs":[{"name":"r"}],"output":{"name":"gzdecoder"}}],[11,"header","","Returns the header associated with this stream, if it was valid.",22,{"inputs":[{"name":"self"}],"output":{"generics":["gzheader"],"name":"option"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",22,null],[11,"write","","",22,null],[11,"flush","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the (first) gzip header. If the gzip stream contains multiple members all will be decoded.",23,{"inputs":[{"name":"r"}],"output":{"name":"multigzdecoder"}}],[11,"header","","Returns the current header associated with this stream, if it's valid.",23,{"inputs":[{"name":"self"}],"output":{"generics":["gzheader"],"name":"option"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",23,null],[11,"write","","",23,null],[11,"flush","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::write","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",24,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",24,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",24,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Finish encoding this stream, returning the underlying writer once the encoding is done.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",24,null],[11,"flush","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",24,null],[11,"drop","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","flate2::bufread","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",25,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",25,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",25,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",25,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",25,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",25,null],[11,"write","","",25,null],[11,"flush","","",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",26,{"inputs":[{"name":"r"}],"output":{"name":"zlibdecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",26,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",26,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",26,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",26,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",26,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",26,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",26,null],[11,"write","","",26,null],[11,"flush","","",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::read","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",27,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",27,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",27,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",27,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",27,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",27,null],[11,"write","","",27,null],[11,"flush","","",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",28,{"inputs":[{"name":"r"}],"output":{"name":"zlibdecoder"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",28,{"inputs":[{"name":"r"},{"generics":["u8"],"name":"vec"}],"output":{"name":"zlibdecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",28,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",28,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",28,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",28,null],[11,"write","","",28,null],[11,"flush","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::write","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will write compressed data to the stream given at the given compression level.",29,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",29,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",29,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output stream for another.",29,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_finish","","Consumes this encoder, flushing the output stream.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that have been written to this compresor.",29,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",29,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",29,null],[11,"flush","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",29,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will write uncompressed data to the stream.",30,{"inputs":[{"name":"w"}],"output":{"name":"zlibdecoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",30,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",30,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output stream for another.",30,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for decompression.",30,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its output stream.",30,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",30,null],[11,"flush","","",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",30,null]],"paths":[[4,"Status"],[4,"FlushCompress"],[4,"FlushDecompress"],[3,"Crc"],[3,"CrcReader"],[3,"GzHeader"],[3,"GzBuilder"],[3,"Compress"],[3,"Decompress"],[3,"DecompressError"],[3,"CompressError"],[3,"Compression"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"MultiGzDecoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"MultiGzDecoder"],[3,"GzEncoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"]]};
searchIndex["fnv"] = {"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",null,null],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,{"inputs":[{"name":"u64"}],"output":{"name":"fnvhasher"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null]],"paths":[[3,"FnvHasher"]]};
searchIndex["futures"] = {"doc":"Zero-cost Futures in Rust","items":[[4,"Async","futures","Return type of future, indicating whether a value is ready or not.",null,null],[13,"Ready","","Represents that a value is immediately ready.",0,null],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",0,null],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",null,null],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",1,null],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",1,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"map","","Change the success value of this `Async` with the closure provided",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"async"}}],[11,"is_ready","","Returns whether this is `Async::Ready`",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"async"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"asyncsink"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"asyncsink"}}],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"future","","Futures",null,null],[3,"Empty","futures::future","A future which is never resolved.",null,null],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",null,null],[3,"PollFn","","A future which adapts a function returning `Poll`.",null,null],[3,"FutureResult","","A future representing a value that is immediately ready.",null,null],[3,"LoopFn","","A future implementing a tail-recursive loop.",null,null],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",null,null],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",null,null],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",null,null],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",null,null],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",null,null],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",null,null],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",null,null],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",null,null],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",null,null],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",null,null],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",null,null],[3,"Inspect","","Do something with the item of a future, passing it on.",null,null],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",null,null],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",null,null],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",null,null],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",null,null],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",null,null],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",null,null],[4,"Loop","","The status of a `loop_fn` loop.",null,null],[13,"Break","","Indicates that the loop has completed with output `T`.",2,null],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",2,null],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",null,null],[13,"A","","First branch of the type",3,null],[13,"B","","Second branch of the type",3,null],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",null,null],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",4,null],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",4,null],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",null,{"inputs":[{"name":"f"}],"output":{"name":"lazy"}}],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"result","","Creates a new \"leaf future\" which will resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",null,{"inputs":[{"name":"t"}],"output":{"name":"futureresult"}}],[5,"err","","Creates a \"leaf future\" from an immediate value of a failed computation.",null,{"inputs":[{"name":"e"}],"output":{"name":"futureresult"}}],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",null,{"inputs":[{"name":"s"},{"name":"f"}],"output":{"name":"loopfn"}}],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",null,{"inputs":[{"name":"i"}],"output":{"name":"joinall"}}],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectall"}}],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectok"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"futureresult"}}],[11,"poll","","",8,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"from","","",8,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",9,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",10,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",11,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_done","","Returns whether the underlying future has finished or not.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"poll","","",13,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",15,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",16,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",17,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",18,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",19,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",20,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",21,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",22,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",23,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",24,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",25,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",26,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split","","Splits out the homogeneous type from an either of tuples.",3,null],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",27,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",28,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",29,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",30,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",31,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",32,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"poll","","",32,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"shareditem"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sharederror"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",35,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",35,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",35,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"wait","","Block the current thread until this future is resolved.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",35,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",35,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",35,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",35,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",35,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",35,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",35,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",35,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",35,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",35,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",36,null],[16,"Item","","The item that the future may resolve with.",36,null],[16,"Error","","The error that the future may resolve with.",36,null],[10,"into_future","","Consumes this object and produces a future.",36,null],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",null,null],[16,"Future","","The future for the conversion.",37,null],[16,"Error","","Possible errors during conversion.",37,null],[10,"future_from","","Consume the given value, beginning the conversion.",37,null],[8,"Executor","","A trait for types which can spawn fresh futures.",null,null],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"executeerrorkind"}],"output":{"name":"bool"}}],[11,"new","","Create a new `ExecuteError`",39,{"inputs":[{"name":"executeerrorkind"},{"name":"f"}],"output":{"name":"executeerror"}}],[11,"kind","","Returns the associated reason for the error",39,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"into_future","","Consumes self and returns the original future that was spawned.",39,{"inputs":[{"name":"self"}],"output":{"name":"f"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"stream","futures","Asynchronous streams",null,null],[3,"Iter","futures::stream","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"Repeat","","Stream that produces the same element repeatedly.",null,null],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",null,null],[3,"Chain","","An adapter for chaining the output of two streams.",null,null],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"Empty","","A stream which contains no elements.",null,null],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",null,null],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",null,null],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",null,null],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",null,null],[3,"FromErr","","A stream combinator to change the error type of a stream.",null,null],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",null,null],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",null,null],[3,"Inspect","","Do something with the items of a stream, passing it on.",null,null],[3,"InspectErr","","Do something with the error of a stream, passing it on.",null,null],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",null,null],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",null,null],[3,"Merge","","An adapter for merging the output of two streams.",null,null],[3,"Once","","A stream which emits single element and then EOF.",null,null],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",null,null],[3,"Peekable","","A `Stream` that implements a `peek` method.",null,null],[3,"PollFn","","A stream which adapts a function returning `Poll`.",null,null],[3,"Select","","An adapter for merging the output of two streams.",null,null],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",null,null],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",null,null],[3,"Take","","A stream combinator which returns a maximum number of elements.",null,null],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",null,null],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",null,null],[3,"Unfold","","A stream which creates futures, polls them and return their result",null,null],[3,"Zip","","An adapter for merging the output of two streams.",null,null],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",null,null],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",null,null],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",null,null],[3,"Chunks","","An adaptor that chunks up elements in a vector.",null,null],[3,"Collect","","A future which collects all of the values of a stream into a vector.",null,null],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",null,null],[3,"SplitStream","","A `Stream` part of the split pair",null,null],[3,"SplitSink","","A `Sink` part of the split pair",null,null],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",null,null],[12,"0","","",40,null],[12,"1","","",40,null],[3,"FuturesOrdered","","An unbounded queue of futures.",null,null],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",null,null],[13,"First","","An item from the first stream",41,null],[13,"Second","","An item from the second stream",41,null],[13,"Both","","Items from both streams",41,null],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iter"}}],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"i"}],"output":{"name":"iterok"}}],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iterresult"}}],[5,"repeat","","Create a stream which produces the same item repeatedly.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"empty","","Creates a stream which contains no elements.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates a stream of single element",null,{"inputs":[{"name":"result"}],"output":{"name":"once"}}],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"unfold"}}],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresordered"}}],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresunordered"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",46,null],[11,"poll_complete","","",46,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",46,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"poll","","",48,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"poll","","",49,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",51,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",51,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",51,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",51,null],[11,"poll_complete","","",51,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",51,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",52,null],[11,"poll_complete","","",52,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",52,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",53,null],[11,"poll_complete","","",53,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",53,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",54,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",55,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",56,null],[11,"poll_complete","","",56,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",56,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",57,null],[11,"poll_complete","","",57,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",57,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"is_done","","Returns whether the underlying stream has finished or not.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"poll","","",58,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",59,null],[11,"poll_complete","","",59,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",59,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",60,null],[11,"poll_complete","","",60,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",60,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",61,null],[11,"poll_complete","","",61,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",61,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",61,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",62,null],[11,"poll_complete","","",62,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",62,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",65,null],[11,"poll_complete","","",65,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",65,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",65,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",66,null],[11,"poll_complete","","",66,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",66,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"peek","","Peek retrieves a reference to the next item in the stream.",66,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",69,null],[11,"poll_complete","","",69,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",69,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",69,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",70,null],[11,"poll_complete","","",70,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",70,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",71,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",71,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",71,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",71,null],[11,"poll_complete","","",71,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",71,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",71,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",72,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",72,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",72,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",72,null],[11,"poll_complete","","",72,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",72,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",72,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",73,null],[11,"poll_complete","","",73,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",73,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",73,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",74,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"poll","","",76,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",77,null],[11,"poll_complete","","",77,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",77,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",77,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",78,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",78,null],[11,"poll_complete","","",78,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",78,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",79,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",80,null],[11,"poll_complete","","",80,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",80,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",80,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",81,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"poll"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"next","","",82,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",83,{"inputs":[{"name":"self"},{"name":"splitsink"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"poll","","",83,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",84,{"inputs":[{"name":"self"},{"name":"splitstream"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"start_send","","",84,null],[11,"poll_complete","","",84,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",84,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",40,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"futures_unordered","","An unbounded set of futures.",null,null],[3,"FuturesUnordered","futures::stream::futures_unordered","An unbounded set of futures.",null,null],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",null,null],[11,"new","","Constructs a new, empty `FuturesUnordered`",85,{"inputs":[],"output":{"name":"futuresunordered"}}],[11,"len","","Returns the number of futures contained in the set.",85,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no futures",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the set.",85,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",85,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"poll","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"from_iter","","",85,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"new","futures::stream","Constructs a new, empty `FuturesOrdered`",87,{"inputs":[],"output":{"name":"futuresordered"}}],[11,"len","","Returns the number of futures contained in the queue.",87,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the queue contains no futures",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the queue.",87,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"poll","","",87,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",87,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Stream","","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",88,null],[16,"Error","","The type of error this stream may generate.",88,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",88,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",88,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"into_future","","Converts this stream into a `Future`.",88,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",88,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",88,{"inputs":[{"name":"self"}],"output":{"name":"concat2"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",88,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",88,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",88,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",88,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",88,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",88,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",88,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",88,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",88,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",88,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",88,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",88,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",88,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",88,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",88,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",88,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[0,"sink","futures","Asynchronous sinks",null,null],[3,"Buffer","futures::sink","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",null,null],[3,"Wait","","A sink combinator which converts an asynchronous sink to a blocking sink.",null,null],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",null,null],[3,"WithFlatMap","","Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator to run prior to pushing a value into the underlying sink",null,null],[3,"Flush","","Future for the `Sink::flush` combinator, which polls the sink until all data has been flushed.",null,null],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",null,null],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",null,null],[3,"SinkFromErr","","A sink combinator to change the error type of a sink.",null,null],[3,"Fanout","","Sink that clones incoming items and forwards them to two sinks at the same time.",null,null],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"get_ref","","Get a shared reference to the inner sink.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",89,null],[11,"poll_complete","","",89,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",89,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",90,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",90,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",90,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",90,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",90,null],[11,"poll_complete","","",90,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",90,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",91,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",91,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consume the `Flush` and return the inner sink.",91,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",91,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",92,null],[11,"poll_complete","","",92,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",92,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",92,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",93,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",93,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",93,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",94,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",95,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",95,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",95,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",95,null],[11,"poll_complete","","",95,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",95,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",95,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sinks.",96,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"start_send","","",96,null],[11,"poll_complete","","",96,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",96,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",97,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",97,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",97,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",97,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",97,null],[11,"poll_complete","","",97,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",97,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Sends a value to this sink, blocking the current thread until it's able to do so.",98,null],[11,"flush","","Flushes any buffered data in this sink, blocking the current thread until it's entirely flushed.",98,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"close","","Close this sink, blocking the current thread until it's entirely closed.",98,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"BoxSink","","A type alias for `Box<Sink + Send>`",null,null],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",99,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",99,null],[10,"start_send","","Begin the process of sending a value to the sink.",99,null],[10,"poll_complete","","Flush all output from this sink, if necessary.",99,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",99,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"wait","","Creates a new object which will produce a synchronous sink.",99,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"with","","Composes a function in front of the sink.",99,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"with"}}],[11,"with_flat_map","","Composes a function in front of the sink.",99,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"withflatmap"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",99,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"sinkmaperr"}}],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",99,{"inputs":[{"name":"self"}],"output":{"name":"sinkfromerr"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"fanout","","Fanout items to multiple sinks.",99,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"fanout"}}],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",99,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",99,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",99,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"sendall"}}],[0,"task","futures","Tasks used to drive a future computation",null,null],[3,"Task","futures::task","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",null,null],[3,"AtomicTask","","A synchronization primitive for task notification.",null,null],[3,"LocalKey","","A key for task-local data stored in a future's task.",null,null],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",null,null],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",null,{"inputs":[],"output":{"name":"task"}}],[5,"init","","Initialize the `futures` task system.",null,null],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",null,{"inputs":[{"name":"unparkevent"},{"name":"f"}],"output":{"name":"r"}}],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",null,null],[10,"insert","","Insert the given ID into the set",100,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[0,"executor","futures","Executors",null,null],[3,"Run","futures::executor","Units of work submitted to an `Executor`, currently only created internally.",null,null],[3,"Spawn","","Representation of a spawned future/stream.",null,null],[3,"NotifyHandle","","A `NotifyHandle` is the core value through which notifications are routed in the `futures` crate.",null,null],[5,"spawn","","Spawns a future or stream, returning it and the new task responsible for running it to completion.",null,{"inputs":[{"name":"t"}],"output":{"name":"spawn"}}],[5,"with_notify","","Sets the `NotifyHandle` of the current task for the duration of the provided closure.",null,{"inputs":[{"name":"t"},{"name":"usize"},{"name":"f"}],"output":{"name":"r"}}],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",null,null],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",101,{"inputs":[{"name":"self"}],"output":null}],[8,"Executor","","A trait representing requests to poll futures.",null,null],[10,"execute","","Requests that `Run` is executed soon on the given executor.",102,{"inputs":[{"name":"self"},{"name":"run"}],"output":null}],[8,"Notify","","A trait which represents a sink of notifications that a future is ready to make progress.",null,null],[10,"notify","","Indicates that an associated future and/or task are ready to make progress.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[8,"UnsafeNotify","","An unsafe trait for implementing custom forms of memory management behind a `Task`.",null,null],[10,"clone_raw","","Creates a new `NotifyHandle` from this instance of `UnsafeNotify`.",104,{"inputs":[{"name":"self"}],"output":{"name":"notifyhandle"}}],[10,"drop_raw","","Drops this instance of `UnsafeNotify`, deallocating resources associated with it.",104,{"inputs":[{"name":"self"}],"output":null}],[0,"sync","futures","Future-aware synchronization",null,null],[3,"BiLock","futures::sync","A type of futures-powered synchronization primitive which is a mutex between two possible owners.",null,null],[3,"BiLockGuard","","Returned RAII guard from the `poll_lock` method.",null,null],[3,"BiLockAcquire","","Future returned by `BiLock::lock` which will resolve when the lock is acquired.",null,null],[3,"BiLockAcquired","","Resolved value of the `BiLockAcquire<T>` future.",null,null],[0,"oneshot","","A one-shot, futures-aware channel",null,null],[3,"Receiver","futures::sync::oneshot","A future representing the completion of a computation happening elsewhere in memory.",null,null],[3,"Sender","","Represents the completion half of a oneshot through which the result of a computation is signaled.",null,null],[3,"Canceled","","Error returned from a `Receiver<T>` whenever the corresponding `Sender<T>` is dropped.",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Execute` instances below must be able to spawn.",null,null],[5,"channel","","Creates a new futures-aware, one-shot channel.",null,null],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Completes this oneshot with a successful result.",106,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",106,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",106,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",106,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"canceled"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"canceled"}],"output":{"name":"bool"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",107,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",105,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",105,{"inputs":[{"name":"self"}],"output":{"generics":["canceled"],"name":"poll"}}],[11,"drop","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"forget","","Drop this future without canceling the underlying future.",108,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",108,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",108,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",109,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",109,{"inputs":[{"name":"self"}],"output":null}],[0,"mpsc","futures::sync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure.",null,null],[3,"Sender","futures::sync::mpsc","The transmission end of a channel which is used to send values.",null,null],[3,"UnboundedSender","","The transmission end of a channel which is used to send values.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"UnboundedReceiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",null,null],[3,"TrySendError","","Error type returned from `try_send`",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",null,null],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait with bounded capacity.",null,null],[5,"unbounded","","Creates an in-memory channel implementation of the `Stream` trait with unbounded capacity.",null,null],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",null,{"inputs":[{"name":"s"},{"name":"e"},{"name":"usize"}],"output":{"name":"spawnhandle"}}],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",null,{"inputs":[{"name":"s"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"senderror"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"trysenderror"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",114,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_full","","Returns true if this error is a result of the channel being full",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",115,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"try_send","","Attempts to send a message on this `Sender<T>` without blocking.",110,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["trysenderror"],"name":"result"}}],[11,"poll_ready","","Polls the channel to determine if there is guaranteed to be capacity to send at least one item without waiting.",110,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"start_send","","",110,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"startsend"}}],[11,"poll_complete","","",110,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"close","","",110,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"unbounded_send","","Sends the provided message along this channel.",111,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"result"}}],[11,"start_send","","",111,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"startsend"}}],[11,"poll_complete","","",111,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"close","","",111,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"unboundedsender"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"drop","","",110,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Closes the receiving half",112,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",112,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"drop","","",112,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Closes the receiving half",113,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",113,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"poll","","",116,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",117,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","futures::sync","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BiLock` protecting the provided data.",118,null],[11,"poll_lock","","Attempt to acquire this lock, returning `NotReady` if it can't be acquired.",118,{"inputs":[{"name":"self"}],"output":{"generics":["bilockguard"],"name":"async"}}],[11,"lock","","Perform a \"blocking lock\" of this lock, consuming this lock handle and returning a future to the acquired lock.",118,{"inputs":[{"name":"self"}],"output":{"name":"bilockacquire"}}],[11,"reunite","","Attempts to put the two \"halves\" of a `BiLock<T>` back together and recover the original value. Succeeds only if the two `BiLock<T>`s originated from the same call to `BiLock::new`.",118,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",119,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",120,{"inputs":[{"name":"self"}],"output":{"generics":["bilockacquired"],"name":"poll"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock","","Recovers the original `BiLock<T>`, unlocking this lock.",121,{"inputs":[{"name":"self"}],"output":{"name":"bilock"}}],[11,"deref","","",121,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",121,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",121,{"inputs":[{"name":"self"}],"output":null}],[0,"unsync","futures","Future-aware single-threaded synchronization",null,null],[0,"mpsc","futures::unsync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure, for use communicating between tasks on the same thread.",null,null],[3,"Sender","futures::unsync::mpsc","The transmission end of a channel.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"UnboundedSender","","The transmission end of an unbounded channel.",null,null],[3,"UnboundedReceiver","","The receiving end of an unbounded channel.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",null,null],[5,"channel","","Creates a bounded in-memory channel with buffered storage.",null,null],[5,"unbounded","","Creates an unbounded in-memory channel with buffered storage.",null,null],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",null,{"inputs":[{"name":"s"},{"name":"e"},{"name":"usize"}],"output":{"name":"spawnhandle"}}],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",null,{"inputs":[{"name":"s"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_send","","",122,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"startsend"}}],[11,"poll_complete","","",122,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"close","","",122,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"drop","","",122,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","Closes the receiving half",123,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",123,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"drop","","",123,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_send","","",124,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"startsend"}}],[11,"poll_complete","","",124,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"close","","",124,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"unbounded_send","","Sends the provided message along this channel.",124,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","Closes the receiving half",125,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",125,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",126,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",126,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",127,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",128,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"oneshot","futures::unsync","A one-shot, futures-aware channel",null,null],[3,"Sender","futures::unsync::oneshot","Represents the completion half of a oneshot through which the result of a computation is signaled.",null,null],[3,"Receiver","","A future representing the completion of a computation happening elsewhere in memory.",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Spawn` instances below must be able to spawn.",null,null],[5,"channel","","Creates a new futures-aware, one-shot channel.",null,null],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Completes this oneshot with a successful result.",129,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",129,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",130,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",130,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",130,{"inputs":[{"name":"self"}],"output":null}],[11,"forget","","Drop this future without canceling the underlying future.",131,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",131,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",132,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"prelude","futures","A \"prelude\" for crates using the `futures` crate.",null,null],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",null,null],[6,"StartSend","","Return type of the `Sink::start_send` method, indicating the outcome of a send attempt. See `AsyncSink` for more details.",null,null],[14,"try_ready","","A macro for extracting the successful type of a `Poll<T, E>`.",null,null],[14,"task_local","","A macro to create a `static` of type `LocalKey`",null,null],[11,"new","futures::task","Create an `AtomicTask` initialized with the given `Task`",133,{"inputs":[],"output":{"name":"atomictask"}}],[11,"register","","Registers the current task to be notified on calls to `notify`.",133,{"inputs":[{"name":"self"}],"output":null}],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",133,{"inputs":[{"name":"self"},{"name":"task"}],"output":null}],[11,"notify","","Notifies the task that last called `register`.",133,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",133,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",134,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"poll_future","futures::executor","Polls the internal future, scheduling notifications to be sent to the `unpark` argument.",135,{"inputs":[{"name":"self"},{"generics":["unpark"],"name":"arc"}],"output":{"name":"poll"}}],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",135,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"execute","","A specialized function to request running a future to completion on the specified executor.",135,{"inputs":[{"name":"self"},{"generics":["executor"],"name":"arc"}],"output":null}],[11,"poll_stream","","Like `poll_future`, except polls the underlying stream.",135,{"inputs":[{"name":"self"},{"generics":["unpark"],"name":"arc"}],"output":{"generics":["option"],"name":"poll"}}],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",135,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"start_send","","Invokes the underlying `start_send` method with this task in place.",135,null],[11,"poll_flush","","Invokes the underlying `poll_complete` method with this task in place.",135,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"poll"}}],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",135,null],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",135,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",135,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",136,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","futures::task","",137,{"inputs":[{"name":"self"}],"output":{"name":"unparkevent"}}],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",137,{"inputs":[{"generics":["eventset"],"name":"arc"},{"name":"usize"}],"output":{"name":"unparkevent"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","futures::executor","",138,{"inputs":[{"name":"arc"}],"output":{"name":"notifyhandle"}}],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone","futures::task","",139,{"inputs":[{"name":"self"}],"output":{"name":"task"}}],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",139,{"inputs":[{"name":"self"}],"output":null}],[11,"is_current","","Returns `true` when called from within the context of the task.",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","futures::executor","Get a shared reference to the object the Spawn is wrapping.",135,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",135,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consume the Spawn, returning its inner object",135,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",135,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"poll"}}],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",135,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",135,null],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",135,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"poll"}}],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",135,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"poll"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `NotifyHandle` directly.",138,null],[11,"notify","","Invokes the underlying instance of `Notify` with the provided `id`.",138,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",138,{"inputs":[{"name":"self"}],"output":null}],[11,"from","","",138,{"inputs":[{"name":"t"}],"output":{"name":"notifyhandle"}}]],"paths":[[4,"Async"],[4,"AsyncSink"],[4,"Loop"],[4,"Either"],[4,"ExecuteErrorKind"],[3,"Empty"],[3,"Lazy"],[3,"PollFn"],[3,"FutureResult"],[3,"LoopFn"],[3,"AndThen"],[3,"Flatten"],[3,"FlattenStream"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"FromErr"],[3,"OrElse"],[3,"Select"],[3,"SelectNext"],[3,"Select2"],[3,"Then"],[3,"Inspect"],[3,"CatchUnwind"],[3,"JoinAll"],[3,"SelectAll"],[3,"SelectOk"],[3,"Shared"],[3,"SharedItem"],[3,"SharedError"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[3,"ExecuteError"],[3,"ReuniteError"],[4,"MergedItem"],[3,"Iter"],[3,"IterOk"],[3,"IterResult"],[3,"Repeat"],[3,"AndThen"],[3,"Chain"],[3,"Concat2"],[3,"Concat"],[3,"Empty"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"ForEach"],[3,"FromErr"],[3,"Fuse"],[3,"StreamFuture"],[3,"Inspect"],[3,"InspectErr"],[3,"Map"],[3,"MapErr"],[3,"Merge"],[3,"Once"],[3,"OrElse"],[3,"Peekable"],[3,"PollFn"],[3,"Select"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"Forward"],[3,"Buffered"],[3,"BufferUnordered"],[3,"CatchUnwind"],[3,"Chunks"],[3,"Collect"],[3,"Wait"],[3,"SplitStream"],[3,"SplitSink"],[3,"FuturesUnordered"],[3,"IterMut"],[3,"FuturesOrdered"],[8,"Stream"],[3,"With"],[3,"WithFlatMap"],[3,"Flush"],[3,"SinkFromErr"],[3,"Send"],[3,"SendAll"],[3,"SinkMapErr"],[3,"Fanout"],[3,"Buffer"],[3,"Wait"],[8,"Sink"],[8,"EventSet"],[8,"Unpark"],[8,"Executor"],[8,"Notify"],[8,"UnsafeNotify"],[3,"Receiver"],[3,"Sender"],[3,"Canceled"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"TrySendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"BiLock"],[3,"BiLockGuard"],[3,"BiLockAcquire"],[3,"BiLockAcquired"],[3,"Sender"],[3,"Receiver"],[3,"UnboundedSender"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"Receiver"],[3,"SpawnHandle"],[3,"Execute"],[3,"AtomicTask"],[3,"LocalKey"],[3,"Spawn"],[3,"Run"],[3,"UnparkEvent"],[3,"NotifyHandle"],[3,"Task"]]};
searchIndex["futures_cpupool"] = {"doc":"A simple crate for executing work on a thread pool, and getting back a future.","items":[[3,"CpuPool","futures_cpupool","A thread pool intended to run CPU intensive work.",null,null],[3,"Builder","","Thread pool configuration object",null,null],[3,"CpuFuture","","The type of future returned from the `CpuPool::spawn` function, which proxies the futures running on the thread pool.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new thread pool with `size` worker threads associated with it.",0,{"inputs":[{"name":"usize"}],"output":{"name":"cpupool"}}],[11,"new_num_cpus","","Creates a new thread pool with a number of workers equal to the number of CPUs on the host.",0,{"inputs":[],"output":{"name":"cpupool"}}],[11,"spawn","","Spawns a future to run on this thread pool, returning a future representing the produced value.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"cpufuture"}}],[11,"spawn_fn","","Spawns a closure on this thread pool.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"cpufuture"}}],[11,"execute","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"cpupool"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"forget","","Drop this future without canceling the underlying future.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"new","","Create a builder a number of workers equal to the number of CPUs on the host.",1,{"inputs":[],"output":{"name":"builder"}}],[11,"pool_size","","Set size of a future CpuPool",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"stack_size","","Set stack size of threads in the pool.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"name_prefix","","Set thread name prefix of a future CpuPool",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"after_start","","Execute function `f` right after each thread is started but before running any jobs on it.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"before_stop","","Execute function `f` before each worker thread stops.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"create","","Create CpuPool with configured parameters",1,{"inputs":[{"name":"self"}],"output":{"name":"cpupool"}}]],"paths":[[3,"CpuPool"],[3,"Builder"],[3,"CpuFuture"]]};
searchIndex["gif"] = {"doc":"GIF en- and decoding library Build Status","items":[[3,"Frame","gif","A GIF frame",null,null],[12,"delay","","Frame delay in units of 10 ms.",0,null],[12,"dispose","","Disposal method.",0,null],[12,"transparent","","Transparent index (if available).",0,null],[12,"needs_user_input","","True if the frame needs user input to be displayed.",0,null],[12,"top","","Offset from the top border of the canvas.",0,null],[12,"left","","Offset from the left border of the canvas.",0,null],[12,"width","","Width of the frame.",0,null],[12,"height","","Height of the frame.",0,null],[12,"interlaced","","True if the image is interlaced.",0,null],[12,"palette","","Frame local color palette if available.",0,null],[12,"buffer","","Buffer containing the image data. Only indices unless configured differently.",0,null],[3,"StreamingDecoder","","GIF decoder which supports streaming",null,null],[3,"MemoryLimit","","Memory limit in bytes. `MemoryLimit::Some(0)` means that there is no memory limit set.",null,null],[12,"0","","",1,null],[3,"Reader","","GIF decoder",null,null],[3,"Decoder","","GIF decoder",null,null],[3,"Encoder","","GIF encoder.",null,null],[4,"Block","","Known GIF block types",null,null],[13,"Image","","Image block.",2,null],[13,"Extension","","Extension block.",2,null],[13,"Trailer","","Image trailer.",2,null],[4,"Extension","","Known GIF extensions",null,null],[13,"Text","","Text extension.",3,null],[13,"Control","","Control extension.",3,null],[13,"Comment","","Comment extension.",3,null],[13,"Application","","Application extension.",3,null],[4,"DisposalMethod","","Disposal method",null,null],[13,"Any","","StreamingDecoder is not required to take any action.",4,null],[13,"Keep","","Do not dispose.",4,null],[13,"Background","","Restore to background color.",4,null],[13,"Previous","","Restore to previous.",4,null],[4,"Decoded","","Indicates whether a certain object has been decoded",null,null],[13,"Nothing","","Decoded nothing.",5,null],[13,"GlobalPalette","","Global palette.",5,null],[13,"BackgroundColor","","Index of the background color in the global palette.",5,null],[13,"Trailer","","Decoded the image trailer.",5,null],[13,"BlockStart","","The start of a block.",5,null],[13,"SubBlockFinished","","Decoded a sub-block. More sub-block are available.",5,null],[13,"BlockFinished","","Decoded the last (or only) sub-block of a block.",5,null],[13,"Frame","","Decoded all information of the next frame. The returned frame does not any image data.",5,null],[13,"Data","","Decoded some data of the current frame.",5,null],[13,"DataEnd","","No more data available the current frame.",5,null],[4,"DecodingError","","Decoding error.",null,null],[13,"Format","","Returned if the image is found to be malformed.",6,null],[13,"Internal","","Internal (logic) error.",6,null],[13,"Io","","Wraps `std::io::Error`.",6,null],[4,"ColorOutput","","Output mode for the image data",null,null],[13,"RGBA","","The decoder expands the image data to 32bit RGBA. This affects:",7,null],[13,"Indexed","","The decoder returns the raw indexed data.",7,null],[4,"Extensions","","Configures how extensions should be handled",null,null],[13,"Save","","Saves all extention data",8,null],[13,"Skip","","Skips the data of unknown extensions and extracts the data from known ones",8,null],[4,"ExtensionData","","Extension data.",null,null],[13,"Control","","Control extension. Use `ExtensionData::new_control_ext` to construct.",9,null],[12,"flags","gif::ExtensionData","Flags.",9,null],[12,"delay","","Frame delay.",9,null],[12,"trns","","Transparent index.",9,null],[13,"Repetitions","gif","Sets the number of repetitions",9,null],[4,"Repeat","","Number of repetitions",null,null],[13,"Finite","","Finite number of repetitions",10,null],[13,"Infinite","","Infinite number of repetitions",10,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"disposalmethod"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"disposalmethod"}],"output":{"name":"bool"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",4,{"inputs":[{"name":"u8"}],"output":{"generics":["disposalmethod"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",2,{"inputs":[{"name":"u8"}],"output":{"generics":["block"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"extension"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"extension"}],"output":{"name":"bool"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",3,{"inputs":[{"name":"u8"}],"output":{"generics":["extension"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"frame"}}],[11,"from_rgba","","Creates a frame from pixels in RGBA format.",0,null],[11,"from_palette_pixels","","Creates a frame from a palette and indexed pixels",0,null],[11,"from_indexed_pixels","","Creates a frame from indexed pixels in the global palette",0,null],[11,"from_rgb","","Creates a frame from pixels in RGB format.",0,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"extensions"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_param","","",8,{"inputs":[{"name":"self"},{"name":"streamingdecoder"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new streaming decoder",11,{"inputs":[],"output":{"name":"streamingdecoder"}}],[11,"update","","Updates the internal state of the decoder. ",11,null],[11,"last_ext","","Returns the data of the last extension that has been decoded.",11,null],[11,"current_frame_mut","","Current frame info as a mutable ref.",11,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"current_frame","","Current frame info as a ref.",11,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"width","","Width of the image",11,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"height","","Height of the image",11,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"coloroutput"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_param","","",7,{"inputs":[{"name":"self"},{"name":"decoder"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_param","","",1,{"inputs":[{"name":"self"},{"name":"decoder"}],"output":null}],[11,"new","","Creates a new decoder builder",12,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads the logical screen descriptor including the global color palette",12,{"inputs":[{"name":"self"}],"output":{"generics":["reader","decodingerror"],"name":"result"}}],[11,"next_frame_info","","Returns the next frame info",13,{"inputs":[{"name":"self"}],"output":{"generics":["option","decodingerror"],"name":"result"}}],[11,"read_next_frame","","Reads the next frame from the image.",13,{"inputs":[{"name":"self"}],"output":{"generics":["option","decodingerror"],"name":"result"}}],[11,"read_into_buffer","","Reads the data of the current frame into a pre-allocated buffer.",13,null],[11,"fill_buffer","","Reads data of the current frame into a pre-allocated buffer until the buffer has been filled completely.",13,null],[11,"buffer_size","","Output buffer size",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"line_length","","Line length of the current frame",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"palette","","Returns the color palette relevant for the current (next) frame",13,{"inputs":[{"name":"self"}],"output":{"generics":["decodingerror"],"name":"result"}}],[11,"global_palette","","The global color palette",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"width","","Width of the image",13,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"height","","Height of the image",13,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"bg_color","","Index of the background color in the global palette",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"set_param","","",10,null],[11,"new_control_ext","","Constructor for control extension data.",9,{"inputs":[{"name":"u16"},{"name":"disposalmethod"},{"name":"bool"},{"generics":["u8"],"name":"option"}],"output":{"name":"extensiondata"}}],[11,"new","","Creates a new encoder.",14,null],[11,"write_global_palette","","Writes the global color palette.",14,null],[11,"write_frame","","Writes a frame to the image.",14,{"inputs":[{"name":"self"},{"name":"frame"}],"output":{"name":"result"}}],[11,"write_extension","","Writes an extension to the image.",14,{"inputs":[{"name":"self"},{"name":"extensiondata"}],"output":{"name":"result"}}],[11,"write_raw_extension","","Writes a raw extension to the image.",14,null],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[8,"SetParameter","","Implemented for objects that have parameters.",null,null],[11,"set","","Sets `value` as a parameter of `self`.",15,null],[8,"Parameter","","Configuration parameter trait.",null,null],[16,"Result","","Result type of `set_param`.",16,null],[10,"set_param","","Sets `self` as a parameter of `Object`.",16,null],[11,"set","","Sets `value` as a parameter of `self`.",15,null]],"paths":[[3,"Frame"],[3,"MemoryLimit"],[4,"Block"],[4,"Extension"],[4,"DisposalMethod"],[4,"Decoded"],[4,"DecodingError"],[4,"ColorOutput"],[4,"Extensions"],[4,"ExtensionData"],[4,"Repeat"],[3,"StreamingDecoder"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[8,"SetParameter"],[8,"Parameter"]]};
searchIndex["glob"] = {"doc":"Support for matching file paths against Unix shell style patterns.","items":[[3,"Paths","glob","An iterator that yields `Path`s from the filesystem that match a particular pattern.",null,null],[3,"GlobError","","A glob iteration error.",null,null],[3,"PatternError","","A pattern parsing error.",null,null],[12,"pos","","The approximate character index of where the error occurred.",0,null],[12,"msg","","A message describing the error.",0,null],[3,"Pattern","","A compiled Unix shell style pattern.",null,null],[3,"MatchOptions","","Configuration options to modify the behaviour of `Pattern::matches_with(..)`",null,null],[12,"case_sensitive","","Whether or not patterns should be matched in a case-sensitive manner. This currently only considers upper/lower case relationships between ASCII characters, but in future this might be extended to work with Unicode.",1,null],[12,"require_literal_separator","","If this is true then path-component separator characters (e.g. `/` on Posix) must be matched by a literal `/`, rather than by `*` or `?` or `[...]`",1,null],[12,"require_literal_leading_dot","","If this is true then paths that contain components that start with a `.` will not match unless the `.` appears literally in the pattern: `*`, `?`, `**`, or `[...]` will not match. This is useful because such files are conventionally considered hidden on Unix systems and it might be desirable to skip them when listing files.",1,null],[5,"glob","","Return an iterator that produces all the Paths that match the given pattern, which may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"}],"output":{"generics":["paths","patternerror"],"name":"result"}}],[5,"glob_with","","Return an iterator that produces all the Paths that match the given pattern, which may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"},{"name":"matchoptions"}],"output":{"generics":["paths","patternerror"],"name":"result"}}],[6,"GlobResult","","An alias for a glob iteration result.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"path","","The Path that the error corresponds to.",2,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"error","","The error in question.",2,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["globresult"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"pattern"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"ordering"}}],[11,"hash","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"pattern"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["pattern","patternerror"],"name":"result"}}],[11,"new","","This function compiles Unix shell style patterns.",4,{"inputs":[{"name":"str"}],"output":{"generics":["pattern","patternerror"],"name":"result"}}],[11,"escape","","Escape metacharacters within the given string by surrounding them in brackets. The resulting string will, when compiled into a `Pattern`, match the input string and nothing else.",4,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"matches","","Return if the given `str` matches this `Pattern` using the default match options (i.e. `MatchOptions::new()`).",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches_path","","Return if the given `Path`, when converted to a `str`, matches this `Pattern` using the default match options (i.e. `MatchOptions::new()`).",4,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"matches_with","","Return if the given `str` matches this `Pattern` using the specified match options.",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"matches_path_with","","Return if the given `Path`, when converted to a `str`, matches this `Pattern` using the specified match options.",4,{"inputs":[{"name":"self"},{"name":"path"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"as_str","","Access the original glob pattern.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"matchoptions"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"ordering"}}],[11,"hash","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"matchoptions"}}],[11,"new","","Constructs a new `MatchOptions` with default field values. This is used when calling functions that do not take an explicit `MatchOptions` parameter.",1,{"inputs":[],"output":{"name":"matchoptions"}}]],"paths":[[3,"PatternError"],[3,"MatchOptions"],[3,"GlobError"],[3,"Paths"],[3,"Pattern"]]};
searchIndex["h2"] = {"doc":"An asynchronous, HTTP/2.0 server and client implementation.","items":[[3,"Error","h2","Represents HTTP/2.0 operation errors.",null,null],[3,"Reason","","HTTP/2.0 error codes.",null,null],[3,"SendStream","","Sends the body stream and trailers to the remote peer.",null,null],[3,"RecvStream","","Receives the body stream and trailers from the remote peer.",null,null],[3,"ReleaseCapacity","","A handle to release window capacity to a remote stream.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reason","","If the error was caused by the remote peer, the error reason.",0,{"inputs":[{"name":"self"}],"output":{"generics":["reason"],"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"reason"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"reason"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"reason"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"reason"}}],[18,"NO_ERROR","","The associated condition is not a result of an error.",1,null],[18,"PROTOCOL_ERROR","","The endpoint detected an unspecific protocol error.",1,null],[18,"INTERNAL_ERROR","","The endpoint encountered an unexpected internal error.",1,null],[18,"FLOW_CONTROL_ERROR","","The endpoint detected that its peer violated the flow-control protocol.",1,null],[18,"SETTINGS_TIMEOUT","","The endpoint sent a SETTINGS frame but did not receive a response in a timely manner.",1,null],[18,"STREAM_CLOSED","","The endpoint received a frame after a stream was half-closed.",1,null],[18,"FRAME_SIZE_ERROR","","The endpoint received a frame with an invalid size.",1,null],[18,"REFUSED_STREAM","","The endpoint refused the stream prior to performing any application processing.",1,null],[18,"CANCEL","","Used by the endpoint to indicate that the stream is no longer needed.",1,null],[18,"COMPRESSION_ERROR","","The endpoint is unable to maintain the header compression context for the connection.",1,null],[18,"CONNECT_ERROR","","The connection established in response to a CONNECT request was reset or abnormally closed.",1,null],[18,"ENHANCE_YOUR_CALM","","The endpoint detected that its peer is exhibiting a behavior that might be generating excessive load.",1,null],[18,"INADEQUATE_SECURITY","","The underlying transport has properties that do not meet minimum security requirements.",1,null],[18,"HTTP_1_1_REQUIRED","","The endpoint requires that HTTP/1.1 be used instead of HTTP/2.",1,null],[11,"description","","Get a string description of the error code.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"u32"}],"output":{"name":"reason"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"client","","Client implementation of the HTTP/2.0 protocol.",null,null],[3,"Handshake","h2::client","Performs the HTTP/2.0 connection handshake.",null,null],[3,"SendRequest","","Initializes new HTTP/2.0 streams on a connection by sending a request.",null,null],[3,"ReadySendRequest","","Returns a `SendRequest` instance once it is ready to send at least one request.",null,null],[3,"Connection","","Manages all state associated with an HTTP/2.0 client connection.",null,null],[3,"ResponseFuture","","A future of an HTTP response.",null,null],[3,"Builder","","Builds client connections with custom configuration values.",null,null],[5,"handshake","","Creates a new configured HTTP/2.0 client with default configuration values backed by `io`.",null,{"inputs":[{"name":"t"}],"output":{"generics":["bytes"],"name":"handshake"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"builder"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_ready","","Returns `Ready` when the connection can initialize a new HTTP/2.0 stream.",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"ready","","Consumes `self`, returning a future that returns `self` back once it is ready to send a request.",5,{"inputs":[{"name":"self"}],"output":{"name":"readysendrequest"}}],[11,"send_request","","Sends a HTTP/2.0 request to the server.",5,{"inputs":[{"name":"self"},{"name":"request"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"new","","Returns a new client builder instance initialized with default configuration values.",4,{"inputs":[],"output":{"name":"builder"}}],[11,"initial_window_size","","Indicates the initial window size (in octets) for stream-level flow control for received data.",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"initial_connection_window_size","","Indicates the initial window size (in octets) for connection-level flow control for received data.",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"max_frame_size","","Indicates the size (in octets) of the largest HTTP/2.0 frame payload that the configured client is able to accept.",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"max_header_list_size","","Sets the max size of received header frames.",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"max_concurrent_streams","","Sets the maximum number of concurrent streams.",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"initial_max_send_streams","","Sets the initial maximum of locally initiated (send) streams.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_concurrent_reset_streams","","Sets the maximum number of concurrent locally reset streams.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"reset_stream_duration","","Sets the maximum number of concurrent locally reset streams.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"enable_push","","Enables or disables server push promises.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"handshake","","Creates a new configured HTTP/2.0 client backed by `io`.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"handshake"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"builder"}}],[11,"set_target_window_size","","Sets the target window size for the whole connection.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[0,"server","h2","Server implementation of the HTTP/2.0 protocol.",null,null],[3,"Handshake","h2::server","In progress HTTP/2.0 connection handshake future.",null,null],[3,"Connection","","Accepts inbound HTTP/2.0 streams on a connection.",null,null],[3,"Builder","","Builds server connections with custom configuration values.",null,null],[3,"SendResponse","","Send a response back to the client",null,null],[5,"handshake","","Creates a new configured HTTP/2.0 server with default configuration values backed by `io`.",null,{"inputs":[{"name":"t"}],"output":{"generics":["bytes"],"name":"handshake"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"builder"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_target_window_size","","Sets the target window size for the whole connection.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"poll_close","","Returns `Ready` when the underlying connection has closed.",10,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"abrupt_shutdown","","Sets the connection to a GOAWAY state.",10,{"inputs":[{"name":"self"},{"name":"reason"}],"output":null}],[11,"graceful_shutdown","","Starts a [graceful shutdown][1] process.",10,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new server builder instance initialized with default configuration values.",8,{"inputs":[],"output":{"name":"builder"}}],[11,"initial_window_size","","Indicates the initial window size (in octets) for stream-level flow control for received data.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"initial_connection_window_size","","Indicates the initial window size (in octets) for connection-level flow control for received data.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"max_frame_size","","Indicates the size (in octets) of the largest HTTP/2.0 frame payload that the configured server is able to accept.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"max_header_list_size","","Sets the max size of received header frames.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"max_concurrent_streams","","Sets the maximum number of concurrent streams.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"max_concurrent_reset_streams","","Sets the maximum number of concurrent locally reset streams.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"reset_stream_duration","","Sets the maximum number of concurrent locally reset streams.",8,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"handshake","","Creates a new configured HTTP/2.0 server backed by `io`.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"handshake"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"builder"}}],[11,"send_response","","Send a response to a client request.",9,{"inputs":[{"name":"self"},{"name":"response"},{"name":"bool"}],"output":{"generics":["sendstream","error"],"name":"result"}}],[11,"send_reset","","Send a stream reset to the peer.",9,{"inputs":[{"name":"self"},{"name":"reason"}],"output":null}],[11,"poll","","",11,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","h2","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reserve_capacity","","Requests capacity to send data.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"capacity","","Returns the stream's current send capacity.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"poll_capacity","","Requests to be notified when the stream's capacity increases.",12,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"send_data","","Sends a single data frame to the remote peer.",12,{"inputs":[{"name":"self"},{"name":"b"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"send_trailers","","Sends trailers to the remote peer.",12,{"inputs":[{"name":"self"},{"name":"headermap"}],"output":{"generics":["error"],"name":"result"}}],[11,"send_reset","","Resets the stream.",12,{"inputs":[{"name":"self"},{"name":"reason"}],"output":null}],[11,"is_end_stream","","Returns true if the receive half has reached the end of stream.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"release_capacity","","Get a mutable reference to this streams `ReleaseCapacity`.",14,{"inputs":[{"name":"self"}],"output":{"name":"releasecapacity"}}],[11,"poll_trailers","","Returns received trailers.",14,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"poll","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"release_capacity","","Release window capacity back to remote stream.",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}]],"paths":[[3,"Error"],[3,"Reason"],[3,"ReadySendRequest"],[3,"ResponseFuture"],[3,"Builder"],[3,"SendRequest"],[3,"Connection"],[3,"Handshake"],[3,"Builder"],[3,"SendResponse"],[3,"Connection"],[3,"Handshake"],[3,"SendStream"],[3,"ReleaseCapacity"],[3,"RecvStream"]]};
searchIndex["heck"] = {"doc":"heck is a case conversion library.","items":[[8,"CamelCase","heck","This trait defines a camel case conversion.",null,null],[10,"to_camel_case","","Convert this type to camel case.",0,null],[8,"KebabCase","","This trait defines a kebab case conversion.",null,null],[10,"to_kebab_case","","Convert this type to kebab case.",1,null],[8,"MixedCase","","This trait defines a mixed case conversion.",null,null],[10,"to_mixed_case","","Convert this type to mixed case.",2,null],[8,"ShoutySnakeCase","","This trait defines a shouty snake case conversion.",null,null],[10,"to_shouty_snake_case","","Convert this type to shouty snake case.",3,null],[8,"ShoutySnekCase","","Oh heck, ShoutySnekCase is an alias for ShoutySnakeCase. See ShoutySnakeCase for more documentation.",null,null],[10,"TO_SHOUTY_SNEK_CASE","","CONVERT THIS TYPE TO SNEK CASE.",4,null],[8,"SnakeCase","","This trait defines a camel case conversion.",null,null],[10,"to_snake_case","","Convert this type to snake case.",5,null],[8,"SnekCase","","Oh heck, SnekCase is an alias for SnakeCase. See SnakeCase for more documentation.",null,null],[10,"to_snek_case","","Convert this type to snek case.",6,null],[8,"TitleCase","","This trait defines a title case conversion.",null,null],[10,"to_title_case","","Convert this type to title case.",7,null]],"paths":[[8,"CamelCase"],[8,"KebabCase"],[8,"MixedCase"],[8,"ShoutySnakeCase"],[8,"ShoutySnekCase"],[8,"SnakeCase"],[8,"SnekCase"],[8,"TitleCase"]]};
searchIndex["hostname"] = {"doc":"Get hostname. Compatible with windows and linux.","items":[[5,"get_hostname","hostname","Get hostname.",null,{"inputs":[],"output":{"generics":["string"],"name":"option"}}]],"paths":[]};
searchIndex["http"] = {"doc":"A general purpose library of common HTTP types","items":[[3,"Error","http","A generic \"error\" for HTTP connections",null,null],[3,"Extensions","","A type map of protocol extensions.",null,null],[3,"HeaderMap","","A set of HTTP headers",null,null],[0,"header","","HTTP header types",null,null],[3,"HeaderMap","http::header","A set of HTTP headers",null,null],[3,"Iter","","`HeaderMap` entry iterator.",null,null],[3,"Keys","","An iterator over `HeaderMap` keys.",null,null],[3,"Values","","`HeaderMap` value iterator.",null,null],[3,"Drain","","A drain iterator for `HeaderMap`.",null,null],[3,"GetAll","","A view to all values stored in a single entry.",null,null],[3,"VacantEntry","","A view into a single empty location in a `HeaderMap`.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a `HeaderMap`.",null,null],[3,"ValueIter","","An iterator of all values associated with a single header name.",null,null],[3,"ValueIterMut","","A mutable iterator of all values associated with a single header name.",null,null],[3,"ValueDrain","","An drain iterator of all values associated with a single header name.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `HeaderMap`.",null,null],[3,"HeaderName","","Represents an HTTP header field name",null,null],[3,"InvalidHeaderName","","A possible error when converting a `HeaderName` from another type.",null,null],[3,"InvalidHeaderNameBytes","","A possible error when converting a `HeaderName` from another type.",null,null],[3,"HeaderValue","","Represents an HTTP header field value.",null,null],[3,"InvalidHeaderValue","","A possible error when converting a `HeaderValue` from a string or byte slice.",null,null],[3,"InvalidHeaderValueBytes","","A possible error when converting a `HeaderValue` from a string or byte slice.",null,null],[3,"ToStrError","","A possible error when converting a `HeaderValue` to a string representation.",null,null],[4,"Entry","","A view into a single location in a `HeaderMap`, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied entry",0,null],[13,"Vacant","","A vacant entry",0,null],[11,"clone","http","",1,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"fmt","http::header","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","http","Create an empty `HeaderMap`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create an empty `HeaderMap` with the specified capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"headermap"}}],[11,"len","","Returns the number of headers stored in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"keys_len","","Returns the number of keys stored in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"capacity","","Returns the number of headers the map can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more headers to be inserted into the `HeaderMap`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"get","","Returns a reference to the value associated with the key.",1,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the value associated with the key.",1,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"get_all","","Returns a view of all values associated with a key.",1,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"getall"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"bool"}}],[11,"iter","","An iterator visiting all key-value pairs.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs, with mutable value references.",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","An iterator visiting all keys.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","An iterator visiting all values mutably.",1,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"drain","","Clears the map, returning all entries as an iterator.",1,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"generics":["entry","invalidheadername"],"name":"result"}}],[11,"insert","","Inserts a key-value pair into the map.",1,{"inputs":[{"name":"self"},{"name":"k"},{"name":"t"}],"output":{"name":"option"}}],[11,"append","","Inserts a key-value pair into the map.",1,{"inputs":[{"name":"self"},{"name":"k"},{"name":"t"}],"output":{"name":"bool"}}],[11,"remove","","Removes a key from the map, returning the value associated with the key.",1,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves keys and values out of the map in arbitary order. The map cannot be used after calling this.",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","Extend a `HeaderMap` with the contents of another `HeaderMap`.",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"headermap"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"t"}}],[11,"next","http::header","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"key","","Returns a reference to the entry's key",0,{"inputs":[{"name":"self"}],"output":{"name":"headername"}}],[11,"key","","Returns a reference to the entry's key",8,{"inputs":[{"name":"self"}],"output":{"name":"headername"}}],[11,"into_key","","Take ownership of the key",8,{"inputs":[{"name":"self"}],"output":{"name":"headername"}}],[11,"insert","","Insert the value into the entry.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"insert_entry","","Insert the value into the entry.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"occupiedentry"}}],[11,"iter","","Returns an iterator visiting all values associated with the entry.",7,{"inputs":[{"name":"self"}],"output":{"name":"valueiter"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"into_iter","","",7,{"inputs":[{"name":"self"}],"output":{"name":"valueiter"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"key","","Returns a reference to the entry's key.",9,{"inputs":[{"name":"self"}],"output":{"name":"headername"}}],[11,"get","","Get a reference to the first value in the entry.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the first value in the entry.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_mut","","Converts the `OccupiedEntry` into a mutable reference to the first value.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"insert","","Sets the value of the entry.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"insert_mult","","Sets the value of the entry.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"valuedrain"}}],[11,"append","","Insert the value into the entry.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"remove","","Remove the entry from the map.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"remove_entry","","Remove the entry from the map.",9,null],[11,"remove_entry_mult","","Remove the entry from the map.",9,null],[11,"iter","","Returns an iterator visiting all values associated with the entry.",9,{"inputs":[{"name":"self"}],"output":{"name":"valueiter"}}],[11,"iter_mut","","Returns an iterator mutably visiting all values associated with the entry.",9,{"inputs":[{"name":"self"}],"output":{"name":"valueitermut"}}],[11,"into_iter","","",9,{"inputs":[{"name":"self"}],"output":{"name":"valueitermut"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"headername"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"headername"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"headername"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_bytes","","Converts a slice of bytes to an HTTP header name.",13,null],[11,"from_lowercase","","Converts a slice of bytes to an HTTP header name.",13,null],[11,"as_str","","Returns a `str` representation of the header.",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","",13,{"inputs":[{"name":"str"}],"output":{"generics":["headername","invalidheadername"],"name":"result"}}],[11,"as_ref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",13,null],[11,"borrow","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"headername"}],"output":{"name":"headername"}}],[11,"try_from","","",13,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"try_from","","",13,null],[11,"try_from","","",13,{"inputs":[{"name":"bytes"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"headername"}],"output":{"name":"bool"}}],[11,"eq","","Performs a case-insensitive comparison of the string against the header name",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","Performs a case-insensitive comparison of the string against the header name",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",15,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"headervalue"}}],[11,"hash","","",16,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_static","","Convert a static string to a `HeaderValue`.",16,{"inputs":[{"name":"str"}],"output":{"name":"headervalue"}}],[11,"from_str","","Attempt to convert a string to a `HeaderValue`.",16,{"inputs":[{"name":"str"}],"output":{"generics":["headervalue","invalidheadervalue"],"name":"result"}}],[11,"from_bytes","","Attempt to convert a byte slice to a `HeaderValue`.",16,null],[11,"from_shared","","Attempt to convert a `Bytes` buffer to a `HeaderValue`.",16,{"inputs":[{"name":"bytes"}],"output":{"generics":["headervalue","invalidheadervaluebytes"],"name":"result"}}],[11,"from_shared_unchecked","","Convert a `Bytes` directly into a `HeaderValue` without validating.",16,{"inputs":[{"name":"bytes"}],"output":{"name":"headervalue"}}],[11,"to_str","","Yields a `&str` slice if the `HeaderValue` only contains visible ASCII chars.",16,{"inputs":[{"name":"self"}],"output":{"generics":["str","tostrerror"],"name":"result"}}],[11,"len","","Returns the length of `self`.",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `HeaderValue` has a length of zero bytes.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bytes","","Converts a `HeaderValue` to a byte slice.",16,null],[11,"set_sensitive","","Mark that the header value represents sensitive information.",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"is_sensitive","","Returns `true` if the value represents sensitive data.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",16,{"inputs":[{"name":"str"}],"output":{"generics":["headervalue"],"name":"result"}}],[11,"try_from","","",16,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"try_from","","",16,null],[11,"try_from","","",16,{"inputs":[{"name":"bytes"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",17,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"headervalue"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"headervalue"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",16,null],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",16,null],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}],[17,"ACCEPT","","Advertises which content types the client is able to understand.",null,null],[17,"ACCEPT_CHARSET","","Advertises which character set the client is able to understand.",null,null],[17,"ACCEPT_ENCODING","","Advertises which content encoding the client is able to understand.",null,null],[17,"ACCEPT_LANGUAGE","","Advertises which languages the client is able to understand.",null,null],[17,"ACCEPT_RANGES","","Marker used by the server to advertise partial request support.",null,null],[17,"ACCESS_CONTROL_ALLOW_CREDENTIALS","","Preflight response indicating if the response to the request can be exposed to the page.",null,null],[17,"ACCESS_CONTROL_ALLOW_HEADERS","","Preflight response indicating permitted HTTP headers.",null,null],[17,"ACCESS_CONTROL_ALLOW_METHODS","","Preflight header response indicating permitted access methods.",null,null],[17,"ACCESS_CONTROL_ALLOW_ORIGIN","","Indicates whether the response can be shared with resources with the given origin.",null,null],[17,"ACCESS_CONTROL_EXPOSE_HEADERS","","Indicates which headers can be exposed as part of the response by listing their names.",null,null],[17,"ACCESS_CONTROL_MAX_AGE","","Indicates how long the results of a preflight request can be cached.",null,null],[17,"ACCESS_CONTROL_REQUEST_HEADERS","","Informs the server which HTTP headers will be used when an actual request is made.",null,null],[17,"ACCESS_CONTROL_REQUEST_METHOD","","Informs the server know which HTTP method will be used when the actual request is made.",null,null],[17,"AGE","","Indicates the time in seconds the object has been in a proxy cache.",null,null],[17,"ALLOW","","Lists the set of methods support by a resource.",null,null],[17,"ALT_SVC","","Advertises the availability of alternate services to clients.",null,null],[17,"AUTHORIZATION","","Contains the credentials to authenticate a user agent with a server.",null,null],[17,"CACHE_CONTROL","","Specifies directives for caching mechanisms in both requests and responses.",null,null],[17,"CONNECTION","","Controls whether or not the network connection stays open after the current transaction finishes.",null,null],[17,"CONTENT_DISPOSITION","","Indicates if the content is expected to be displayed inline.",null,null],[17,"CONTENT_ENCODING","","Used to compress the media-type.",null,null],[17,"CONTENT_LANGUAGE","","Used to describe the languages intended for the audience.",null,null],[17,"CONTENT_LENGTH","","Indicates the size fo the entity-body.",null,null],[17,"CONTENT_LOCATION","","Indicates an alternate location for the returned data.",null,null],[17,"CONTENT_RANGE","","Indicates where in a full body message a partial message belongs.",null,null],[17,"CONTENT_SECURITY_POLICY","","Allows controlling resources the user agent is allowed to load for a given page.",null,null],[17,"CONTENT_SECURITY_POLICY_REPORT_ONLY","","Allows experimenting with policies by monitoring their effects.",null,null],[17,"CONTENT_TYPE","","Used to indicate the media type of the resource.",null,null],[17,"COOKIE","","Contains stored HTTP cookies previously sent by the server with the Set-Cookie header.",null,null],[17,"DNT","","Indicates the client's tracking preference.",null,null],[17,"DATE","","Contains the date and time at which the message was originated.",null,null],[17,"ETAG","","Identifier for a specific version of a resource.",null,null],[17,"EXPECT","","Indicates expectations that need to be fulfilled by the server in order to properly handle the request.",null,null],[17,"EXPIRES","","Contains the date/time after which the response is considered stale.",null,null],[17,"FORWARDED","","Contains information from the client-facing side of proxy servers that is altered or lost when a proxy is involved in the path of the request.",null,null],[17,"FROM","","Contains an Internet email address for a human user who controls the requesting user agent.",null,null],[17,"HOST","","Specifies the domain name of the server and (optionally) the TCP port number on which the server is listening.",null,null],[17,"IF_MATCH","","Makes a request conditional based on the E-Tag.",null,null],[17,"IF_MODIFIED_SINCE","","Makes a request conditional based on the modification date.",null,null],[17,"IF_NONE_MATCH","","Makes a request conditional based on the E-Tag.",null,null],[17,"IF_RANGE","","Makes a request conditional based on range.",null,null],[17,"IF_UNMODIFIED_SINCE","","Makes the request conditional based on the last modification date.",null,null],[17,"LAST_MODIFIED","","Content-Types that are acceptable for the response.",null,null],[17,"LINK","","Allows the server to point an interested client to another resource containing metadata about the requested resource.",null,null],[17,"LOCATION","","Indicates the URL to redirect a page to.",null,null],[17,"MAX_FORWARDS","","Indicates the max number of intermediaries the request should be sent through.",null,null],[17,"ORIGIN","","Indicates where a fetch originates from.",null,null],[17,"PRAGMA","","HTTP/1.0 header usually used for backwards compatibility.",null,null],[17,"PROXY_AUTHENTICATE","","Defines the authentication method that should be used to gain access to a proxy.",null,null],[17,"PROXY_AUTHORIZATION","","Contains the credentials to authenticate a user agent to a proxy server.",null,null],[17,"PUBLIC_KEY_PINS","","Associates a specific cryptographic public key with a certain server.",null,null],[17,"PUBLIC_KEY_PINS_REPORT_ONLY","","Sends reports of pinning violation to the report-uri specified in the header.",null,null],[17,"RANGE","","Indicates the part of a document that the server should return.",null,null],[17,"REFERER","","Contains the address of the previous web page from which a link to the currently requested page was followed.",null,null],[17,"REFERRER_POLICY","","Governs which referrer information should be included with requests made.",null,null],[17,"REFRESH","","Informs the web browser that the current page or frame should be refreshed.",null,null],[17,"RETRY_AFTER","","The Retry-After response HTTP header indicates how long the user agent should wait before making a follow-up request. There are two main cases this header is used:",null,null],[17,"SEC_WEBSOCKET_ACCEPT","","The |Sec-WebSocket-Accept| header field is used in the WebSocket opening handshake. It is sent from the server to the client to confirm that the server is willing to initiate the WebSocket connection.",null,null],[17,"SEC_WEBSOCKET_EXTENSIONS","","The |Sec-WebSocket-Extensions| header field is used in the WebSocket opening handshake. It is initially sent from the client to the server, and then subsequently sent from the server to the client, to agree on a set of protocol-level extensions to use for the duration of the connection.",null,null],[17,"SEC_WEBSOCKET_KEY","","The |Sec-WebSocket-Key| header field is used in the WebSocket opening handshake. It is sent from the client to the server to provide part of the information used by the server to prove that it received a valid WebSocket opening handshake. This helps ensure that the server does not accept connections from non-WebSocket clients (e.g., HTTP clients) that are being abused to send data to unsuspecting WebSocket servers.",null,null],[17,"SEC_WEBSOCKET_PROTOCOL","","The |Sec-WebSocket-Protocol| header field is used in the WebSocket opening handshake. It is sent from the client to the server and back from the server to the client to confirm the subprotocol of the connection.  This enables scripts to both select a subprotocol and be sure that the server agreed to serve that subprotocol.",null,null],[17,"SEC_WEBSOCKET_VERSION","","The |Sec-WebSocket-Version| header field is used in the WebSocket opening handshake.  It is sent from the client to the server to indicate the protocol version of the connection.  This enables servers to correctly interpret the opening handshake and subsequent data being sent from the data, and close the connection if the server cannot interpret that data in a safe manner.",null,null],[17,"SERVER","","Contains information about the software used by the origin server to handle the request.",null,null],[17,"SET_COOKIE","","Used to send cookies from the server to the user agent.",null,null],[17,"STRICT_TRANSPORT_SECURITY","","Tells the client to communicate with HTTPS instead of using HTTP.",null,null],[17,"TE","","Informs the server of transfer encodings willing to be accepted as part of the response.",null,null],[17,"TRAILER","","Allows the sender to include additional fields at the end of chunked messages.",null,null],[17,"TRANSFER_ENCODING","","Specifies the form of encoding used to safely transfer the entity to the client.",null,null],[17,"UPGRADE","","Used as part of the exchange to upgrade the protocol.",null,null],[17,"UPGRADE_INSECURE_REQUESTS","","Sends a signal to the server expressing the client’s preference for an encrypted and authenticated response.",null,null],[17,"USER_AGENT","","Contains a string that allows identifying the requesting client's software.",null,null],[17,"VARY","","Determines how to match future requests with cached responses.",null,null],[17,"VIA","","Added by proxies to track routing.",null,null],[17,"WARNING","","General HTTP header contains information about possible problems with the status of the message.",null,null],[17,"WWW_AUTHENTICATE","","Defines the authentication method that should be used to gain access to a resource.",null,null],[17,"X_CONTENT_TYPE_OPTIONS","","Marker used by the server to indicate that the MIME types advertised in the `content-type` headers should not be changed and be followed.",null,null],[17,"X_DNS_PREFETCH_CONTROL","","Controls DNS prefetching.",null,null],[17,"X_FRAME_OPTIONS","","Indicates whether or not a browser should be allowed to render a page in a frame.",null,null],[17,"X_XSS_PROTECTION","","Stop pages from loading when an XSS attack is detected.",null,null],[8,"AsHeaderName","","A marker trait used to identify values that can be used as search keys to a `HeaderMap`.",null,null],[8,"IntoHeaderName","","A marker trait used to identify values that can be used as insert keys to a `HeaderMap`.",null,null],[0,"method","http","The HTTP request method",null,null],[3,"Method","http::method","The Request Method (VERB)",null,null],[3,"InvalidMethod","","A possible error value when converting `Method` from bytes.",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"GET","","GET",20,null],[18,"POST","","POST",20,null],[18,"PUT","","PUT",20,null],[18,"DELETE","","DELETE",20,null],[18,"HEAD","","HEAD",20,null],[18,"OPTIONS","","OPTIONS",20,null],[18,"CONNECT","","CONNECT",20,null],[18,"PATCH","","PATCH",20,null],[18,"TRACE","","TRACE",20,null],[11,"from_bytes","","Converts a slice of bytes to an HTTP method.",20,null],[11,"is_safe","","Whether a method is considered \"safe\", meaning the request is essentially read-only.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result if executed multiple times.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","Return a &str representation of the HTTP method",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"method"}}],[11,"try_from","","",20,null],[11,"try_from","","",20,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",20,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"request","http","HTTP request types.",null,null],[3,"Request","http::request","Represents an HTTP request.",null,null],[3,"Parts","","Component parts of an HTTP `Request`",null,null],[12,"method","","The request's method",22,null],[12,"uri","","The request's URI",22,null],[12,"version","","The request's version",22,null],[12,"headers","","The request's headers",22,null],[12,"extensions","","The request's extensions",22,null],[3,"Builder","","An HTTP request builder",null,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"builder","","Creates a new builder-style object to manufacture a `Request`",24,{"inputs":[],"output":{"name":"builder"}}],[11,"get","","Creates a new `Builder` initialized with a GET method and the given URI.",24,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"put","","Creates a new `Builder` initialized with a PUT method and the given URI.",24,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"post","","Creates a new `Builder` initialized with a POST method and the given URI.",24,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"delete","","Creates a new `Builder` initialized with a DELETE method and the given URI.",24,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"options","","Creates a new `Builder` initialized with an OPTIONS method and the given URI.",24,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"head","","Creates a new `Builder` initialized with a HEAD method and the given URI.",24,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"connect","","Creates a new `Builder` initialized with a CONNECT method and the given URI.",24,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"patch","","Creates a new `Builder` initialized with a PATCH method and the given URI.",24,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"trace","","Creates a new `Builder` initialized with a TRACE method and the given URI.",24,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"new","","Creates a new blank `Request` with the body",24,{"inputs":[{"name":"t"}],"output":{"name":"request"}}],[11,"from_parts","","Creates a new `Request` with the given components parts and body.",24,{"inputs":[{"name":"parts"},{"name":"t"}],"output":{"name":"request"}}],[11,"method","","Returns a reference to the associated HTTP method.",24,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"method_mut","","Returns a mutable reference to the associated HTTP method.",24,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"uri","","Returns a reference to the associated URI.",24,{"inputs":[{"name":"self"}],"output":{"name":"uri"}}],[11,"uri_mut","","Returns a mutable reference to the associated URI.",24,{"inputs":[{"name":"self"}],"output":{"name":"uri"}}],[11,"version","","Returns the associated version.",24,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"version_mut","","Returns a mutable reference to the associated version.",24,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"headers","","Returns a reference to the associated header field map.",24,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"headers_mut","","Returns a mutable reference to the associated header field map.",24,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"extensions","","Returns a reference to the associated extensions.",24,{"inputs":[{"name":"self"}],"output":{"name":"extensions"}}],[11,"extensions_mut","","Returns a mutable reference to the associated extensions.",24,{"inputs":[{"name":"self"}],"output":{"name":"extensions"}}],[11,"body","","Returns a reference to the associated HTTP body.",24,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"body_mut","","Returns a mutable reference to the associated HTTP body.",24,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_body","","Consumes the request, returning just the body.",24,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_parts","","Consumes the request returning the head and body parts.",24,null],[11,"map","","Consumes the request returning a new request with body mapped to the return type of the passed in function.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"request"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"request"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new default instance of `Builder` to construct either a `Head` or a `Request`.",23,{"inputs":[],"output":{"name":"builder"}}],[11,"method","","Set the HTTP method for this request.",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"builder"}}],[11,"uri","","Set the URI for this request.",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"builder"}}],[11,"version","","Set the HTTP version for this request.",23,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"builder"}}],[11,"header","","Appends a header to this request builder.",23,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"builder"}}],[11,"extension","","Adds an extension to this builder",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"builder"}}],[11,"body","","\"Consumes\" this builder, using the provided `body` to return a constructed `Request`.",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["request"],"name":"result"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"builder"}}],[0,"response","http","HTTP response types.",null,null],[3,"Response","http::response","Represents an HTTP response",null,null],[3,"Parts","","Component parts of an HTTP `Response`",null,null],[12,"status","","The response's status",25,null],[12,"version","","The response's version",25,null],[12,"headers","","The response's headers",25,null],[12,"extensions","","The response's extensions",25,null],[3,"Builder","","An HTTP response builder",null,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"builder","","Creates a new builder-style object to manufacture a `Response`",27,{"inputs":[],"output":{"name":"builder"}}],[11,"new","","Creates a new blank `Response` with the body",27,{"inputs":[{"name":"t"}],"output":{"name":"response"}}],[11,"from_parts","","Creates a new `Response` with the given head and body",27,{"inputs":[{"name":"parts"},{"name":"t"}],"output":{"name":"response"}}],[11,"status","","Returns the `StatusCode`.",27,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"status_mut","","Returns a mutable reference to the associated `StatusCode`.",27,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"version","","Returns a reference to the associated version.",27,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"version_mut","","Returns a mutable reference to the associated version.",27,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"headers","","Returns a reference to the associated header field map.",27,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"headers_mut","","Returns a mutable reference to the associated header field map.",27,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"extensions","","Returns a reference to the associated extensions.",27,{"inputs":[{"name":"self"}],"output":{"name":"extensions"}}],[11,"extensions_mut","","Returns a mutable reference to the associated extensions.",27,{"inputs":[{"name":"self"}],"output":{"name":"extensions"}}],[11,"body","","Returns a reference to the associated HTTP body.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"body_mut","","Returns a mutable reference to the associated HTTP body.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_body","","Consumes the response, returning just the body.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_parts","","Consumes the response returning the head and body parts.",27,null],[11,"map","","Consumes the response returning a new response with body mapped to the return type of the passed in function.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"response"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"response"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new default instance of `Builder` to construct either a `Head` or a `Response`.",26,{"inputs":[],"output":{"name":"builder"}}],[11,"status","","Set the HTTP status for this response.",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"builder"}}],[11,"version","","Set the HTTP version for this response.",26,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"builder"}}],[11,"header","","Appends a header to this response builder.",26,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"builder"}}],[11,"extension","","Adds an extension to this builder",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"builder"}}],[11,"body","","\"Consumes\" this builder, using the provided `body` to return a constructed `Response`.",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["response"],"name":"result"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"builder"}}],[0,"status","http","HTTP status codes",null,null],[3,"StatusCode","http::status","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[3,"InvalidStatusCode","","A possible error value when converting a `StatusCode` from a `u16` or `&str`",null,null],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"cmp","","",28,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"ordering"}}],[11,"hash","","",28,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u16","","Converts a u16 to a status code.",28,{"inputs":[{"name":"u16"}],"output":{"generics":["statuscode","invalidstatuscode"],"name":"result"}}],[11,"from_bytes","","Converts a &[u8] to a status code",28,null],[11,"as_u16","","Returns the `u16` corresponding to this `StatusCode`.",28,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"is_informational","","Check if status is within 100-199.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_success","","Check if status is within 200-299.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_redirection","","Check if status is within 300-399.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_client_error","","Check if status is within 400-499.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_server_error","","Check if status is within 500-599.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"statuscode"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"from_str","","",28,{"inputs":[{"name":"str"}],"output":{"generics":["statuscode","invalidstatuscode"],"name":"result"}}],[11,"try_from","","",28,null],[11,"try_from","","",28,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"try_from","","",28,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[18,"CONTINUE","","100 Continue [RFC7231, Section 6.2.1]",28,null],[18,"SWITCHING_PROTOCOLS","","101 Switching Protocols [RFC7231, Section 6.2.2]",28,null],[18,"PROCESSING","","102 Processing [RFC2518]",28,null],[18,"OK","","200 OK [RFC7231, Section 6.3.1]",28,null],[18,"CREATED","","201 Created [RFC7231, Section 6.3.2]",28,null],[18,"ACCEPTED","","202 Accepted [RFC7231, Section 6.3.3]",28,null],[18,"NON_AUTHORITATIVE_INFORMATION","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",28,null],[18,"NO_CONTENT","","204 No Content [RFC7231, Section 6.3.5]",28,null],[18,"RESET_CONTENT","","205 Reset Content [RFC7231, Section 6.3.6]",28,null],[18,"PARTIAL_CONTENT","","206 Partial Content [RFC7233, Section 4.1]",28,null],[18,"MULTI_STATUS","","207 Multi-Status [RFC4918]",28,null],[18,"ALREADY_REPORTED","","208 Already Reported [RFC5842]",28,null],[18,"IM_USED","","226 IM Used [RFC3229]",28,null],[18,"MULTIPLE_CHOICES","","300 Multiple Choices [RFC7231, Section 6.4.1]",28,null],[18,"MOVED_PERMANENTLY","","301 Moved Permanently [RFC7231, Section 6.4.2]",28,null],[18,"FOUND","","302 Found [RFC7231, Section 6.4.3]",28,null],[18,"SEE_OTHER","","303 See Other [RFC7231, Section 6.4.4]",28,null],[18,"NOT_MODIFIED","","304 Not Modified [RFC7232, Section 4.1]",28,null],[18,"USE_PROXY","","305 Use Proxy [RFC7231, Section 6.4.5]",28,null],[18,"TEMPORARY_REDIRECT","","307 Temporary Redirect [RFC7231, Section 6.4.7]",28,null],[18,"PERMANENT_REDIRECT","","308 Permanent Redirect [RFC7238]",28,null],[18,"BAD_REQUEST","","400 Bad Request [RFC7231, Section 6.5.1]",28,null],[18,"UNAUTHORIZED","","401 Unauthorized [RFC7235, Section 3.1]",28,null],[18,"PAYMENT_REQUIRED","","402 Payment Required [RFC7231, Section 6.5.2]",28,null],[18,"FORBIDDEN","","403 Forbidden [RFC7231, Section 6.5.3]",28,null],[18,"NOT_FOUND","","404 Not Found [RFC7231, Section 6.5.4]",28,null],[18,"METHOD_NOT_ALLOWED","","405 Method Not Allowed [RFC7231, Section 6.5.5]",28,null],[18,"NOT_ACCEPTABLE","","406 Not Acceptable [RFC7231, Section 6.5.6]",28,null],[18,"PROXY_AUTHENTICATION_REQUIRED","","407 Proxy Authentication Required [RFC7235, Section 3.2]",28,null],[18,"REQUEST_TIMEOUT","","408 Request Timeout [RFC7231, Section 6.5.7]",28,null],[18,"CONFLICT","","409 Conflict [RFC7231, Section 6.5.8]",28,null],[18,"GONE","","410 Gone [RFC7231, Section 6.5.9]",28,null],[18,"LENGTH_REQUIRED","","411 Length Required [RFC7231, Section 6.5.10]",28,null],[18,"PRECONDITION_FAILED","","412 Precondition Failed [RFC7232, Section 4.2]",28,null],[18,"PAYLOAD_TOO_LARGE","","413 Payload Too Large [RFC7231, Section 6.5.11]",28,null],[18,"URI_TOO_LONG","","414 URI Too Long [RFC7231, Section 6.5.12]",28,null],[18,"UNSUPPORTED_MEDIA_TYPE","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",28,null],[18,"RANGE_NOT_SATISFIABLE","","416 Range Not Satisfiable [RFC7233, Section 4.4]",28,null],[18,"EXPECTATION_FAILED","","417 Expectation Failed [RFC7231, Section 6.5.14]",28,null],[18,"IM_A_TEAPOT","","418 I'm a teapot [curiously not registered by IANA but RFC2324]",28,null],[18,"MISDIRECTED_REQUEST","","421 Misdirected Request RFC7540, Section 9.1.2",28,null],[18,"UNPROCESSABLE_ENTITY","","422 Unprocessable Entity [RFC4918]",28,null],[18,"LOCKED","","423 Locked [RFC4918]",28,null],[18,"FAILED_DEPENDENCY","","424 Failed Dependency [RFC4918]",28,null],[18,"UPGRADE_REQUIRED","","426 Upgrade Required [RFC7231, Section 6.5.15]",28,null],[18,"PRECONDITION_REQUIRED","","428 Precondition Required [RFC6585]",28,null],[18,"TOO_MANY_REQUESTS","","429 Too Many Requests [RFC6585]",28,null],[18,"REQUEST_HEADER_FIELDS_TOO_LARGE","","431 Request Header Fields Too Large [RFC6585]",28,null],[18,"UNAVAILABLE_FOR_LEGAL_REASONS","","451 Unavailable For Legal Reasons [RFC7725]",28,null],[18,"INTERNAL_SERVER_ERROR","","500 Internal Server Error [RFC7231, Section 6.6.1]",28,null],[18,"NOT_IMPLEMENTED","","501 Not Implemented [RFC7231, Section 6.6.2]",28,null],[18,"BAD_GATEWAY","","502 Bad Gateway [RFC7231, Section 6.6.3]",28,null],[18,"SERVICE_UNAVAILABLE","","503 Service Unavailable [RFC7231, Section 6.6.4]",28,null],[18,"GATEWAY_TIMEOUT","","504 Gateway Timeout [RFC7231, Section 6.6.5]",28,null],[18,"HTTP_VERSION_NOT_SUPPORTED","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",28,null],[18,"VARIANT_ALSO_NEGOTIATES","","506 Variant Also Negotiates [RFC2295]",28,null],[18,"INSUFFICIENT_STORAGE","","507 Insufficient Storage [RFC4918]",28,null],[18,"LOOP_DETECTED","","508 Loop Detected [RFC5842]",28,null],[18,"NOT_EXTENDED","","510 Not Extended [RFC2774]",28,null],[18,"NETWORK_AUTHENTICATION_REQUIRED","","511 Network Authentication Required [RFC6585]",28,null],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",28,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","Returns a &str representation of the `StatusCode`",28,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"version","http","HTTP version",null,null],[3,"Version","http::version","Represents a version of the HTTP spec.",null,null],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",30,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"cmp","","",30,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"ordering"}}],[11,"hash","","",30,null],[18,"HTTP_09","","`HTTP/0.9`",30,null],[18,"HTTP_10","","`HTTP/1.0`",30,null],[18,"HTTP_11","","`HTTP/1.1`",30,null],[18,"HTTP_2","","`HTTP/2.0`",30,null],[11,"default","","",30,{"inputs":[],"output":{"name":"version"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"uri","http","URI component of request and response lines",null,null],[3,"Authority","http::uri","Represents the authority component of a URI.",null,null],[3,"PathAndQuery","","Represents the path component of a URI",null,null],[3,"Scheme","","Represents the scheme component of a URI",null,null],[3,"Uri","","The URI component of a request.",null,null],[3,"Parts","","The various parts of a URI.",null,null],[12,"scheme","","The scheme component of a URI",31,null],[12,"authority","","The authority component of a URI",31,null],[12,"path_and_query","","The origin-form component of a URI",31,null],[3,"InvalidUri","","An error resulting from a failed attempt to construct a URI.",null,null],[3,"InvalidUriBytes","","An error resulting from a failed attempt to construct a URI.",null,null],[3,"InvalidUriParts","","An error resulting from a failed attempt to construct a URI.",null,null],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"authority"}}],[11,"from_shared","","Attempt to convert an `Authority` from `Bytes`.",32,{"inputs":[{"name":"bytes"}],"output":{"generics":["invaliduribytes"],"name":"result"}}],[11,"host","","Get the host of this `Authority`.",32,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"port","","Get the port of this `Authority`.",32,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"as_str","","Return a str representation of the authority",32,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_bytes","","Converts this `Authority` back to a sequence of bytes",32,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"as_ref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"authority"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"authority"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",32,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from_str","","",32,{"inputs":[{"name":"str"}],"output":{"generics":["invaliduri"],"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"pathandquery"}}],[11,"from_shared","","Attempt to convert a `PathAndQuery` from `Bytes`.",33,{"inputs":[{"name":"bytes"}],"output":{"generics":["invaliduribytes"],"name":"result"}}],[11,"from_static","","Convert a `PathAndQuery` from a static string.",33,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"path","","Returns the path component",33,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"query","","Returns the query string component",33,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"as_str","","Returns the path and query as a string component.",33,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_bytes","","Converts this `PathAndQuery` back to a sequence of bytes",33,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"from_str","","",33,{"inputs":[{"name":"str"}],"output":{"generics":["invaliduri"],"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"pathandquery"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"self"},{"name":"pathandquery"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"scheme"}}],[18,"HTTP","","HTTP protocol scheme",34,null],[18,"HTTPS","","HTTP protocol over TLS.",34,null],[11,"from_shared","","Attempt to convert a `Scheme` from `Bytes`",34,{"inputs":[{"name":"bytes"}],"output":{"generics":["invaliduribytes"],"name":"result"}}],[11,"as_str","","Return a str representation of the scheme",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_bytes","","Converts this `Scheme` back to a sequence of bytes",34,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"from_str","","",34,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"scheme"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"hash","","",34,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"uri"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"parts"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_parts","","Attempt to convert a `Uri` from `Parts`",35,{"inputs":[{"name":"parts"}],"output":{"generics":["uri","invaliduriparts"],"name":"result"}}],[11,"from_shared","","Attempt to convert a `Uri` from `Bytes`",35,{"inputs":[{"name":"bytes"}],"output":{"generics":["uri","invaliduribytes"],"name":"result"}}],[11,"path_and_query","","Returns the path & query components of the Uri",35,{"inputs":[{"name":"self"}],"output":{"generics":["pathandquery"],"name":"option"}}],[11,"path","","Get the path of this `Uri`.",35,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"scheme_part","","Get the scheme of this `Uri`.",35,{"inputs":[{"name":"self"}],"output":{"generics":["scheme"],"name":"option"}}],[11,"authority_part","","Get the authority of this `Uri`.",35,{"inputs":[{"name":"self"}],"output":{"generics":["authority"],"name":"option"}}],[11,"host","","Get the host of this `Uri`.",35,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"port","","Get the port of this `Uri`.",35,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"query","","Get the query string of this `Uri`, starting after the `?`.",35,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"try_from","","",35,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"try_from","","",35,{"inputs":[{"name":"string"}],"output":{"name":"result"}}],[11,"try_from","","",35,{"inputs":[{"name":"string"}],"output":{"name":"result"}}],[11,"try_from","","",35,{"inputs":[{"name":"bytes"}],"output":{"name":"result"}}],[11,"try_from","","",35,{"inputs":[{"name":"parts"}],"output":{"name":"result"}}],[11,"try_from","","",35,{"inputs":[{"name":"uri"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"uri"}],"output":{"name":"self"}}],[11,"from_str","","",35,{"inputs":[{"name":"str"}],"output":{"generics":["uri","invaliduri"],"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"uri"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"uri"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",37,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",38,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"hash","","",35,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"try_from","","",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_from","http::method","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_from","http::status","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_from","http::header","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_from","","",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","http","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",39,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",39,{"inputs":[{"name":"invalidstatuscode"}],"output":{"name":"error"}}],[11,"from","","",39,{"inputs":[{"name":"invalidmethod"}],"output":{"name":"error"}}],[11,"from","","",39,{"inputs":[{"name":"invaliduri"}],"output":{"name":"error"}}],[11,"from","","",39,{"inputs":[{"name":"invaliduribytes"}],"output":{"name":"error"}}],[11,"from","","",39,{"inputs":[{"name":"invaliduriparts"}],"output":{"name":"error"}}],[11,"from","","",39,{"inputs":[{"name":"invalidheadername"}],"output":{"name":"error"}}],[11,"from","","",39,{"inputs":[{"name":"invalidheadernamebytes"}],"output":{"name":"error"}}],[11,"from","","",39,{"inputs":[{"name":"invalidheadervalue"}],"output":{"name":"error"}}],[11,"from","","",39,{"inputs":[{"name":"invalidheadervaluebytes"}],"output":{"name":"error"}}],[11,"default","","",40,{"inputs":[],"output":{"name":"extensions"}}],[11,"new","","Create an empty `Extensions`.",40,{"inputs":[],"output":{"name":"extensions"}}],[11,"insert","","Insert a type into this `Extensions`.",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"get","","Get a reference to a type previously inserted on this `Extensions`.",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to a type previously inserted on this `Extensions`.",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remove","","Remove a type from this `Extensions`.",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","Clear the `Extensions` of all inserted extensions.",40,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Result","","A `Result` typedef to use with the `http::Error` type",null,null],[8,"HttpTryFrom","","Private trait for the `http` crate to have generic methods with fallible conversions.",null,null],[16,"Error","","Associated error with the conversion this implementation represents.",41,null]],"paths":[[4,"Entry"],[3,"HeaderMap"],[3,"Iter"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"GetAll"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"ValueIter"],[3,"ValueIterMut"],[3,"ValueDrain"],[3,"HeaderName"],[3,"InvalidHeaderName"],[3,"InvalidHeaderNameBytes"],[3,"HeaderValue"],[3,"InvalidHeaderValue"],[3,"InvalidHeaderValueBytes"],[3,"ToStrError"],[3,"Method"],[3,"InvalidMethod"],[3,"Parts"],[3,"Builder"],[3,"Request"],[3,"Parts"],[3,"Builder"],[3,"Response"],[3,"StatusCode"],[3,"InvalidStatusCode"],[3,"Version"],[3,"Parts"],[3,"Authority"],[3,"PathAndQuery"],[3,"Scheme"],[3,"Uri"],[3,"InvalidUri"],[3,"InvalidUriBytes"],[3,"InvalidUriParts"],[3,"Error"],[3,"Extensions"],[8,"HttpTryFrom"]]};
searchIndex["http_range"] = {"doc":"http-range","items":[[3,"HttpRange","http_range","HTTP Range header representation.",null,null],[12,"start","","",0,null],[12,"length","","",0,null],[4,"HttpRangeParseError","","Range parsing error",null,null],[13,"InvalidRange","","Returned if range is invalid.",1,null],[13,"NoOverlap","","Returned if first-byte-pos of all of the byte-range-spec values is greater than the content size. See https://github.com/golang/go/commit/aa9b3d7",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"httprange"}}],[11,"parse","","Parses Range HTTP header string as per RFC 2616.",0,{"inputs":[{"name":"str"},{"name":"u64"}],"output":{"generics":["vec","httprangeparseerror"],"name":"result"}}]],"paths":[[3,"HttpRange"],[4,"HttpRangeParseError"]]};
searchIndex["httparse"] = {"doc":"httparse","items":[[3,"InvalidChunkSize","httparse","An error in parsing a chunk size.",null,null],[3,"Request","","A parsed Request.",null,null],[12,"method","","The request method, such as `GET`.",0,null],[12,"path","","The request path, such as `/about-us`.",0,null],[12,"version","","The request version, such as `HTTP/1.1`.",0,null],[12,"headers","","The request headers.",0,null],[3,"Response","","A parsed Response.",null,null],[12,"version","","The response version, such as `HTTP/1.1`.",1,null],[12,"code","","The response code, such as `200`.",1,null],[12,"reason","","The response reason-phrase, such as `OK`.",1,null],[12,"headers","","The response headers.",1,null],[3,"Header","","Represents a parsed header.",null,null],[12,"name","","The name portion of a header.",2,null],[12,"value","","The value portion of a header.",2,null],[4,"Error","","An error in parsing.",null,null],[13,"HeaderName","","Invalid byte in header name.",3,null],[13,"HeaderValue","","Invalid byte in header value.",3,null],[13,"NewLine","","Invalid byte in new line.",3,null],[13,"Status","","Invalid byte in Response status.",3,null],[13,"Token","","Invalid byte where token is required.",3,null],[13,"TooManyHeaders","","Parsed more headers than provided buffer can contain.",3,null],[13,"Version","","Invalid byte in HTTP version.",3,null],[4,"Status","","The result of a successful parse pass.",null,null],[13,"Complete","","The completed result.",4,null],[13,"Partial","","A partial result.",4,null],[5,"parse_headers","","Parse a buffer of bytes as headers.",null,null],[5,"parse_chunk_size","","Parse a buffer of bytes as a chunk size.",null,null],[6,"Result","","A Result of any parsing action.",null,null],[17,"EMPTY_HEADER","","An empty header, useful for constructing a `Header` array to pass in for parsing.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"invalidchunksize"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_complete","","Convenience method to check if status is complete.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_partial","","Convenience method to check if status is partial.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unwrap","","Convenience method to unwrap a Complete value. Panics if the status is `Partial`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Request, using a slice of headers you allocate.",0,null],[11,"parse","","Try to parse a buffer of bytes into the Request.",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"response"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"response"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Response` using a slice of `Header`s you have allocated.",1,null],[11,"parse","","Try to parse a buffer of bytes into this `Response`.",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Request"],[3,"Response"],[3,"Header"],[4,"Error"],[4,"Status"],[3,"InvalidChunkSize"]]};
searchIndex["humansize"] = {"doc":"Humansize","items":[[0,"file_size_opts","humansize","Describes the struct that holds the options needed by the `file_size` method. The three most common formats are provided as constants to be used easily",null,null],[3,"FileSizeOpts","humansize::file_size_opts","Holds the options for the `file_size` method.",null,null],[12,"divider","","The scale (binary/decimal) to divide against.",0,null],[12,"units","","The unit set to display.",0,null],[12,"decimal_places","","The amount of decimal places to display if the decimal part is non-zero.",0,null],[12,"decimal_zeroes","","The amount of zeroes to display if the decimal part is zero.",0,null],[12,"fixed_at","","Whether to force a certain representation and if so, which one.",0,null],[12,"long_units","","Whether to use the full suffix or its abbreveation.",0,null],[12,"space","","Whether to place a space between value and units.",0,null],[12,"suffix","","An optional suffix which will be appended after the unit.",0,null],[12,"allow_negative","","Whether to allow negative numbers as input. If `False`, negative values will return an error.",0,null],[4,"Kilo","","Holds the standard to use when displying the size.",null,null],[13,"Decimal","","The decimal scale and units",1,null],[13,"Binary","","The binary scale and units",1,null],[4,"FixedAt","","Forces a certain representation of the resulting file size.",null,null],[13,"Byte","","",2,null],[13,"Kilo","","",2,null],[13,"Mega","","",2,null],[13,"Giga","","",2,null],[13,"Tera","","",2,null],[13,"Peta","","",2,null],[13,"Exa","","",2,null],[13,"Zetta","","",2,null],[13,"Yotta","","",2,null],[13,"No","","",2,null],[17,"BINARY","","Options to display sizes in the binary format.",null,null],[17,"DECIMAL","","Options to display sizes in the decimal format.",null,null],[17,"CONVENTIONAL","","Options to display sizes in the \"conventional\" format. This 1024 as the value of the `Kilo`, but displays decimal-style units (`KB`, not `KiB`).",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"kilo"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"kilo"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"fixedat"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"filesizeopts"}}],[8,"FileSize","humansize","The trait for the `file_size`method",null,null],[10,"file_size","","Formats self according to the parameters in `opts`. `opts` can either be one of the three defaults providedby the `file_size_opts` module, or be custom-defined according to your needs",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["string","string"],"name":"result"}}]],"paths":[[3,"FileSizeOpts"],[4,"Kilo"],[4,"FixedAt"],[8,"FileSize"]]};
searchIndex["humantime"] = {"doc":"Human-friendly time parser and formatter","items":[[3,"FormattedDuration","humantime","A wrapper type that allows you to Display a Duration",null,null],[3,"Duration","","A wrapper for duration that has `FromStr` implementation",null,null],[3,"Timestamp","","A wrapper for SystemTime that has `FromStr` implementation",null,null],[3,"Rfc3339Timestamp","","A wrapper type that allows you to Display a SystemTime",null,null],[4,"DurationError","","Error parsing human-friendly duration",null,null],[13,"InvalidCharacter","","Invalid character during parsing",0,null],[13,"NumberExpected","","Non-numeric value where number is expected",0,null],[13,"UnknownUnit","","Unit in the number is not one of allowed units",0,null],[13,"NumberOverflow","","The numeric value is too large",0,null],[13,"Empty","","The value was an empty string (or consists only whitespace)",0,null],[4,"TimestampError","","Error parsing datetime (timestamp)",null,null],[13,"OutOfRange","","Numeric component is out of range",1,null],[13,"InvalidDigit","","Bad character where digit is expected",1,null],[13,"InvalidFormat","","Other formatting errors",1,null],[5,"parse_duration","","Parse duration object `1hour 12min 5s`",null,{"inputs":[{"name":"str"}],"output":{"generics":["duration","error"],"name":"result"}}],[5,"format_duration","","Formats duration into a human-readable string",null,{"inputs":[{"name":"duration"}],"output":{"name":"formattedduration"}}],[5,"parse_rfc3339","","Parse RFC3339 timestamp `2018-02-14T00:28:07Z`",null,{"inputs":[{"name":"str"}],"output":{"generics":["systemtime","error"],"name":"result"}}],[5,"parse_rfc3339_weak","","Parse RFC3339-like timestamp `2018-02-14 00:28:07`",null,{"inputs":[{"name":"str"}],"output":{"generics":["systemtime","error"],"name":"result"}}],[5,"format_rfc3339","","Format an RFC3339 timestamp `2018-02-14T00:28:07Z`",null,{"inputs":[{"name":"systemtime"}],"output":{"name":"rfc3339timestamp"}}],[5,"format_rfc3339_seconds","","Format an RFC3339 timestamp `2018-02-14T00:28:07Z`",null,{"inputs":[{"name":"systemtime"}],"output":{"name":"rfc3339timestamp"}}],[5,"format_rfc3339_nanos","","Format an RFC3339 timestamp `2018-02-14T00:28:07.000000000Z`",null,{"inputs":[{"name":"systemtime"}],"output":{"name":"rfc3339timestamp"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"timestamp"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"timestamp"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"timestamp"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"stdduration"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"stdduration"}}],[11,"into","","",3,{"inputs":[{"name":"self"}],"output":{"name":"stdduration"}}],[11,"from","","",3,{"inputs":[{"name":"stdduration"}],"output":{"name":"duration"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"generics":["duration"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"systemtime"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"systemtime"}}],[11,"into","","",4,{"inputs":[{"name":"self"}],"output":{"name":"systemtime"}}],[11,"from","","",4,{"inputs":[{"name":"systemtime"}],"output":{"name":"timestamp"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["timestamp"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"DurationError"],[4,"TimestampError"],[3,"FormattedDuration"],[3,"Duration"],[3,"Timestamp"],[3,"Rfc3339Timestamp"]]};
searchIndex["idna"] = {"doc":"This Rust crate implements IDNA per the WHATWG URL Standard.","items":[[5,"domain_to_ascii","idna","The domain to ASCII algorithm.",null,{"inputs":[{"name":"str"}],"output":{"generics":["string","errors"],"name":"result"}}],[5,"domain_to_unicode","","The domain to Unicode algorithm.",null,null],[0,"punycode","","Punycode (RFC 3492) implementation.",null,null],[5,"decode_to_string","idna::punycode","Convert Punycode to an Unicode `String`.",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"decode","","Convert Punycode to Unicode.",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec"],"name":"option"}}],[5,"encode_str","","Convert an Unicode `str` to Punycode.",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"encode","","Convert Unicode to Punycode.",null,null],[0,"uts46","idna","Unicode IDNA Compatibility Processing (Unicode Technical Standard #46)",null,null],[3,"Flags","idna::uts46","",null,null],[12,"use_std3_ascii_rules","","",0,null],[12,"transitional_processing","","",0,null],[12,"verify_dns_length","","",0,null],[3,"Errors","","Errors recorded during UTS #46 processing.",null,null],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",null,{"inputs":[{"name":"str"},{"name":"flags"}],"output":{"generics":["string","errors"],"name":"result"}}],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",null,null],[7,"PUNYCODE_PREFIX","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Flags"],[3,"Errors"]]};
searchIndex["image"] = {"doc":"This crate provides native rust implementations of image encoders and decoders and basic image manipulation functions.","items":[[3,"Luma","image","Grayscale colors",null,null],[12,"data","","",0,null],[3,"LumaA","","Grayscale colors + alpha channel",null,null],[12,"data","","",1,null],[3,"Rgb","","RGB colors",null,null],[12,"data","","",2,null],[3,"Rgba","","RGB colors + alpha channel",null,null],[12,"data","","",3,null],[3,"SubImage","","A View into another image",null,null],[3,"Pixels","","Immutable pixel iterator",null,null],[3,"MutPixels","","Mutable pixel iterator",null,null],[3,"ImageBuffer","","Generic image buffer",null,null],[3,"Frame","","A single animation frame",null,null],[3,"Frames","","Holds the frames of the animated image",null,null],[4,"ColorType","","An enumeration over supported color types and their bit depths",null,null],[13,"Gray","","Pixel is grayscale",4,null],[13,"RGB","","Pixel contains R, G and B channels",4,null],[13,"Palette","","Pixel is an index into a color palette",4,null],[13,"GrayA","","Pixel is grayscale with an alpha channel",4,null],[13,"RGBA","","Pixel is RGB with an alpha channel",4,null],[4,"ImageError","","An enumeration of Image errors",null,null],[13,"FormatError","","The Image is not formatted properly",5,null],[13,"DimensionError","","The Image's dimensions are either too small or too large",5,null],[13,"UnsupportedError","","The Decoder does not support this image format",5,null],[13,"UnsupportedColor","","The Decoder does not support this color type",5,null],[13,"NotEnoughData","","Not enough data was provided to the Decoder to decode the image",5,null],[13,"IoError","","An I/O Error occurred while decoding the image",5,null],[13,"ImageEnd","","The end of the image has been reached",5,null],[4,"DecodingResult","","Result of a decoding process",null,null],[13,"U8","","A vector of unsigned bytes",6,null],[13,"U16","","A vector of unsigned words",6,null],[4,"FilterType","","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",7,null],[13,"Triangle","","Linear Filter",7,null],[13,"CatmullRom","","Cubic Filter",7,null],[13,"Gaussian","","Gaussian Filter",7,null],[13,"Lanczos3","","Lanczos with window 3",7,null],[4,"ImageFormat","","An enumeration of supported image formats. Not all formats support both encoding and decoding.",null,null],[13,"PNG","","An Image in PNG Format",8,null],[13,"JPEG","","An Image in JPEG Format",8,null],[13,"GIF","","An Image in GIF Format",8,null],[13,"WEBP","","An Image in WEBP Format",8,null],[13,"PNM","","An Image in general PNM Format",8,null],[13,"TIFF","","An Image in TIFF Format",8,null],[13,"TGA","","An Image in TGA Format",8,null],[13,"BMP","","An Image in BMP Format",8,null],[13,"ICO","","An Image in ICO Format",8,null],[13,"HDR","","An Image in Radiance HDR Format",8,null],[4,"ImageOutputFormat","","An enumeration of supported image formats for encoding.",null,null],[13,"PNG","","An Image in PNG Format",9,null],[13,"JPEG","","An Image in JPEG Format with specified quality",9,null],[13,"PNM","","An Image in one of the PNM Formats",9,null],[13,"GIF","","An Image in GIF Format",9,null],[13,"ICO","","An Image in ICO Format",9,null],[13,"BMP","","An Image in BMP Format",9,null],[13,"Unsupported","","A value for signalling an error: An unsupported format was requested",9,null],[4,"DynamicImage","","A Dynamic Image",null,null],[13,"ImageLuma8","","Each pixel in this image is 8-bit Luma",10,null],[13,"ImageLumaA8","","Each pixel in this image is 8-bit Luma with alpha",10,null],[13,"ImageRgb8","","Each pixel in this image is 8-bit Rgb",10,null],[13,"ImageRgba8","","Each pixel in this image is 8-bit Rgb with alpha",10,null],[5,"open","","Open the image located at the path specified. The image's format is determined from the path's file extension.",null,{"inputs":[{"name":"p"}],"output":{"generics":["dynamicimage"],"name":"imageresult"}}],[5,"load","","Create a new image from a Reader",null,{"inputs":[{"name":"r"},{"name":"imageformat"}],"output":{"generics":["dynamicimage"],"name":"imageresult"}}],[5,"load_from_memory","","Create a new image from a byte slice",null,null],[5,"load_from_memory_with_format","","Create a new image from a byte slice",null,null],[5,"guess_format","","Guess image format from memory block",null,null],[5,"save_buffer","","Saves the supplied buffer to a file at the path specified.",null,null],[0,"math","","Mathematical helper functions and types.",null,null],[0,"utils","image::math","Shared mathematical utility functions.",null,null],[5,"clamp","image::math::utils","Cut value to be inside given range",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[0,"nq","image::math","NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See \"Kohonen neural networks for optimal colour quantization\" in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of the algorithm. See also http://www.acm.org/~dekker/NEUQUANT.HTML",null,null],[3,"NeuQuant","image::math::nq","Neural network color quantizer",null,null],[11,"new","","Creates a new neural network and trains it with the supplied data",11,null],[11,"init","","Initializes the neural network and trains it with the supplied data",11,null],[11,"map_pixel","","Maps the pixel in-place to the best-matching color in the color map",11,null],[11,"index_of","","Finds the best-matching index in the color map for `pixel`",11,null],[0,"imageops","image","Image Processing Functions",null,null],[4,"FilterType","image::imageops","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",7,null],[13,"Triangle","","Linear Filter",7,null],[13,"CatmullRom","","Cubic Filter",7,null],[13,"Gaussian","","Gaussian Filter",7,null],[13,"Lanczos3","","Lanczos with window 3",7,null],[5,"rotate90","","Rotate an image 90 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"rotate180","","Rotate an image 180 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"rotate270","","Rotate an image 270 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"flip_horizontal","","Flip an image horizontally",null,{"inputs":[{"name":"i"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"flip_vertical","","Flip an image vertically",null,{"inputs":[{"name":"i"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"filter3x3","","Perform a 3x3 box filter on the supplied image. `kernel` is an array of the filter weights of length 9.",null,null],[5,"resize","","Resize the supplied image to the specified dimensions. `nwidth` and `nheight` are the new dimensions. `filter` is the sampling filter to use.",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"thumbnail","","Resize the supplied image down to the specific dimensions.",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"blur","","Performs a Gaussian blur on the supplied image. `sigma` is a measure of how much to blur by.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"unsharpen","","Performs an unsharpen mask on the supplied image. `sigma` is the amount to blur the image by. `threshold` is the threshold for the difference between",null,{"inputs":[{"name":"i"},{"name":"f32"},{"name":"i32"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"crop","","Return a mutable view into an image",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[5,"overlay","","Overlay an image at a given coordinate (x, y)",null,{"inputs":[{"name":"i"},{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":null}],[5,"replace","","Replace the contents of an image at a given coordinate (x, y)",null,{"inputs":[{"name":"i"},{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":null}],[0,"colorops","","Functions for altering and converting the color of pixelbufs",null,null],[3,"BiLevel","image::imageops::colorops","A bi-level color map",null,null],[5,"grayscale","","Convert the supplied image to grayscale",null,{"inputs":[{"name":"i"}],"output":{"generics":["luma","vec"],"name":"imagebuffer"}}],[5,"invert","","Invert each pixel within the supplied image. This function operates in place.",null,{"inputs":[{"name":"i"}],"output":null}],[5,"contrast","","Adjust the contrast of the supplied image. `contrast` is the amount to adjust the contrast by. Negative values decrease the contrast and positive values increase the contrast.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"brighten","","Brighten the supplied image. `value` is the amount to brighten each pixel by. Negative values decrease the brightness and positive values increase it.",null,{"inputs":[{"name":"i"},{"name":"i32"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"huerotate","","Hue rotate the supplied image. `value` is the degrees to rotate each pixel by. 0 and 360 do nothing, the rest rotates by the given degree value. just like the css webkit filter hue-rotate(180)",null,{"inputs":[{"name":"i"},{"name":"i32"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"dither","","Reduces the colors of the image using the supplied `color_map` while applying Floyd-Steinberg dithering to improve the visual conception",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":null}],[5,"index_colors","","Reduces the colors using the supplied `color_map` and returns an image of the indices",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":{"generics":["luma","vec"],"name":"imagebuffer"}}],[8,"ColorMap","","A color map",null,null],[16,"Color","","The color type on which the map operates on",12,null],[10,"index_of","","Returns the index of the closed match of `color` in the color map.",12,null],[10,"map_color","","Maps `color` to the closest color in the color map.",12,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bilevel"}}],[11,"index_of","","",13,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"usize"}}],[11,"map_color","","",13,{"inputs":[{"name":"self"},{"name":"luma"}],"output":null}],[11,"index_of","image::math::nq","",11,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"usize"}}],[11,"map_color","","",11,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[11,"clone","image","",7,{"inputs":[{"name":"self"}],"output":{"name":"filtertype"}}],[0,"webp","","Decoding of Webp Images",null,null],[3,"WebpDecoder","image::webp","A Representation of a Webp Image format decoder.",null,null],[11,"new","","Create a new WebpDecoder from the Reader `r`. This function takes ownership of the Reader.",14,{"inputs":[{"name":"r"}],"output":{"name":"webpdecoder"}}],[11,"dimensions","","",14,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",14,null],[11,"read_image","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[0,"vp8","","An implementation of the VP8 Video Codec",null,null],[3,"Frame","image::webp::vp8","A Representation of the last decoded video frame",null,null],[12,"width","","The width of the luma plane",15,null],[12,"height","","The height of the luma plane",15,null],[12,"ybuf","","The luma plane of the frame",15,null],[12,"keyframe","","Indicates whether this frame is a keyframe",15,null],[12,"for_display","","Indicates whether this frame is intended for display",15,null],[12,"pixel_type","","The pixel type of the frame as defined by Section 9.2 of the VP8 Specification",15,null],[3,"VP8Decoder","","VP8 Decoder",null,null],[11,"default","","",15,{"inputs":[],"output":{"name":"frame"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"new","","Create a new decoder. The reader must present a raw vp8 bitstream to the decoder",16,{"inputs":[{"name":"r"}],"output":{"name":"vp8decoder"}}],[11,"decode_frame","","Decodes the current frame and returns a reference to it",16,{"inputs":[{"name":"self"}],"output":{"generics":["frame"],"name":"result"}}],[0,"pnm","image","Decoding of netpbm image formats (pbm, pgm, ppm and pam).",null,null],[3,"PNMDecoder","image::pnm","PNM decoder",null,null],[3,"PNMEncoder","","Encodes images to any of the `pnm` image formats.",null,null],[3,"PNMHeader","","Stores the complete header data of a file.",null,null],[3,"ArbitraryHeader","","Header produced by a `pam` file (\"Portable Arbitrary Map\")",null,null],[12,"height","","Height of the image file",17,null],[12,"width","","Width of the image file",17,null],[12,"depth","","Number of color channels",17,null],[12,"maxval","","Maximum sample value within the image",17,null],[12,"tupltype","","Color interpretation of image pixels",17,null],[3,"BitmapHeader","","Header produced by a `pbm` file (\"Portable Bit Map\")",null,null],[12,"encoding","","Binary or Ascii encoded file",18,null],[12,"height","","Height of the image file",18,null],[12,"width","","Width of the image file",18,null],[3,"GraymapHeader","","Header produced by a `pgm` file (\"Portable Gray Map\")",null,null],[12,"encoding","","Binary or Ascii encoded file",19,null],[12,"height","","Height of the image file",19,null],[12,"width","","Width of the image file",19,null],[12,"maxwhite","","Maximum sample value within the image",19,null],[3,"PixmapHeader","","Header produced by a `ppm` file (\"Portable Pixel Map\")",null,null],[12,"encoding","","Binary or Ascii encoded file",20,null],[12,"height","","Height of the image file",20,null],[12,"width","","Width of the image file",20,null],[12,"maxval","","Maximum sample value within the image",20,null],[4,"PNMSubtype","","Denotes the category of the magic number",null,null],[13,"Bitmap","","Magic numbers P1 and P4",21,null],[13,"Graymap","","Magic numbers P2 and P5",21,null],[13,"Pixmap","","Magic numbers P3 and P6",21,null],[13,"ArbitraryMap","","Magic number P7",21,null],[4,"SampleEncoding","","The kind of encoding used to store sample values",null,null],[13,"Binary","","Samples are unsigned binary integers in big endian",22,null],[13,"Ascii","","Samples are encoded as decimal ascii strings separated by whitespace",22,null],[4,"ArbitraryTuplType","","Standardized tuple type specifiers in the header of a `pam`.",null,null],[13,"BlackAndWhite","","Pixels are either black (0) or white (1)",23,null],[13,"BlackAndWhiteAlpha","","Pixels are either black (0) or white (1) and a second alpha channel",23,null],[13,"Grayscale","","Pixels represent the amount of white",23,null],[13,"GrayscaleAlpha","","Grayscale with an additional alpha channel",23,null],[13,"RGB","","Three channels: Red, Green, Blue",23,null],[13,"RGBAlpha","","Four channels: Red, Green, Blue, Alpha",23,null],[13,"Custom","","An image format which is not standardized",23,null],[11,"new","","Create a new decoder that decodes from the stream `read`",24,{"inputs":[{"name":"r"}],"output":{"generics":["pnmdecoder"],"name":"imageresult"}}],[11,"into_inner","","Extract the reader and header after an image has been read.",24,null],[11,"dimensions","","",24,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",24,null],[11,"read_image","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"subtype","","Get the pnm subtype, depending on the magic constant contained in the header",24,{"inputs":[{"name":"self"}],"output":{"name":"pnmsubtype"}}],[11,"new","","Create new PNMEncoder from the `writer`.",25,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_subtype","","Encode a specific pnm subtype image.",25,{"inputs":[{"name":"self"},{"name":"pnmsubtype"}],"output":{"name":"self"}}],[11,"with_header","","Enforce the use of a chosen header.",25,{"inputs":[{"name":"self"},{"name":"pnmheader"}],"output":{"name":"self"}}],[11,"with_dynamic_header","","Create the header dynamically for each image.",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"encode","","Encode an image whose samples are represented as `u8`.",25,{"inputs":[{"name":"self"},{"name":"s"},{"name":"u32"},{"name":"u32"},{"name":"colortype"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sampleencoding"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"sampleencoding"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"pnmsubtype"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"pnmsubtype"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"pnmsubtype"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bitmapheader"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"graymapheader"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"pixmapheader"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"arbitraryheader"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"arbitrarytupltype"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"magic_constant","","Get the two magic constant bytes corresponding to this format subtype.",21,null],[11,"sample_encoding","","Whether samples are stored as binary or as decimal ascii",21,{"inputs":[{"name":"self"}],"output":{"name":"sampleencoding"}}],[11,"subtype","","Retrieve the format subtype from which the header was created.",26,{"inputs":[{"name":"self"}],"output":{"name":"pnmsubtype"}}],[11,"width","","The width of the image this header is for.",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","The height of the image this header is for.",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"maximal_sample","","The biggest value a sample can have. In other words, the colour resolution.",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_bitmap","","Retrieve the underlying bitmap header if any",26,{"inputs":[{"name":"self"}],"output":{"generics":["bitmapheader"],"name":"option"}}],[11,"as_graymap","","Retrieve the underlying graymap header if any",26,{"inputs":[{"name":"self"}],"output":{"generics":["graymapheader"],"name":"option"}}],[11,"as_pixmap","","Retrieve the underlying pixmap header if any",26,{"inputs":[{"name":"self"}],"output":{"generics":["pixmapheader"],"name":"option"}}],[11,"as_arbitrary","","Retrieve the underlying arbitrary header if any",26,{"inputs":[{"name":"self"}],"output":{"generics":["arbitraryheader"],"name":"option"}}],[11,"write","","Write the header back into a binary stream",26,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"result"}}],[11,"from","","",26,{"inputs":[{"name":"bitmapheader"}],"output":{"name":"self"}}],[11,"from","","",26,{"inputs":[{"name":"graymapheader"}],"output":{"name":"self"}}],[11,"from","","",26,{"inputs":[{"name":"pixmapheader"}],"output":{"name":"self"}}],[11,"from","","",26,{"inputs":[{"name":"arbitraryheader"}],"output":{"name":"self"}}],[0,"png","image","Decoding and Encoding of PNG Images",null,null],[3,"PNGDecoder","image::png","PNG decoder",null,null],[3,"PNGEncoder","","PNG encoder",null,null],[11,"new","","Creates a new decoder that decodes from the stream `r`",27,{"inputs":[{"name":"r"}],"output":{"name":"pngdecoder"}}],[11,"dimensions","","",27,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",27,null],[11,"read_image","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"new","","Create a new encoder that writes its output to `w`",28,{"inputs":[{"name":"w"}],"output":{"name":"pngencoder"}}],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`",28,null],[11,"from","image","",4,null],[11,"from","","",5,{"inputs":[{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[0,"ico","","Decoding and Encoding of ICO files",null,null],[3,"ICODecoder","image::ico","An ico decoder",null,null],[3,"ICOEncoder","","ICO encoder",null,null],[11,"new","","Create a new decoder that decodes from the stream `r`",29,{"inputs":[{"name":"r"}],"output":{"generics":["icodecoder"],"name":"imageresult"}}],[11,"dimensions","","",29,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",29,null],[11,"read_image","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"new","","Create a new encoder that writes its output to `w`.",30,{"inputs":[{"name":"w"}],"output":{"name":"icoencoder"}}],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.  The dimensions of the image must be between 1 and 256 (inclusive) or an error will be returned.",30,null],[0,"jpeg","image","Decoding and Encoding of JPEG Images",null,null],[3,"JPEGDecoder","image::jpeg","JPEG decoder",null,null],[3,"JPEGEncoder","","The representation of a JPEG encoder",null,null],[11,"new","","Create a new encoder that writes its output to `w`",31,{"inputs":[{"name":"w"}],"output":{"name":"jpegencoder"}}],[11,"new_with_quality","","Create a new encoder that writes its output to `w`, and has the quality parameter `quality` with a value in the range 1-100 where 1 is the worst and 100 is the best.",31,{"inputs":[{"name":"w"},{"name":"u8"}],"output":{"name":"jpegencoder"}}],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`",31,null],[11,"new","","Create a new decoder that decodes from the stream `r`",32,{"inputs":[{"name":"r"}],"output":{"name":"jpegdecoder"}}],[11,"dimensions","","",32,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",32,null],[11,"read_image","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"from","image","",4,{"inputs":[{"name":"pixelformat"}],"output":{"name":"colortype"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"imageerror"}}],[0,"gif","","Decoding of GIF Images",null,null],[3,"Frame","image::gif","A GIF frame",null,null],[12,"delay","","Frame delay in units of 10 ms.",33,null],[12,"dispose","","Disposal method.",33,null],[12,"transparent","","Transparent index (if available).",33,null],[12,"needs_user_input","","True if the frame needs user input to be displayed.",33,null],[12,"top","","Offset from the top border of the canvas.",33,null],[12,"left","","Offset from the left border of the canvas.",33,null],[12,"width","","Width of the frame.",33,null],[12,"height","","Height of the frame.",33,null],[12,"interlaced","","True if the image is interlaced.",33,null],[12,"palette","","Frame local color palette if available.",33,null],[12,"buffer","","Buffer containing the image data. Only indices unless configured differently.",33,null],[4,"DisposalMethod","","Disposal method",null,null],[13,"Any","","StreamingDecoder is not required to take any action.",34,null],[13,"Keep","","Do not dispose.",34,null],[13,"Background","","Restore to background color.",34,null],[13,"Previous","","Restore to previous.",34,null],[3,"Decoder","","GIF decoder",null,null],[3,"Encoder","","GIF encoder.",null,null],[11,"new","","Creates a new decoder that decodes the input steam `r`",35,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"dimensions","","",35,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",35,null],[11,"read_image","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"is_animated","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"imageresult"}}],[11,"into_frames","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["image_frames"],"name":"imageresult"}}],[11,"new","","Creates a new GIF encoder.",36,{"inputs":[{"name":"w"}],"output":{"name":"encoder"}}],[11,"encode","","Encodes a frame.",36,{"inputs":[{"name":"self"},{"name":"frame"}],"output":{"name":"imageresult"}}],[11,"from","image","",5,{"inputs":[{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[0,"tiff","","Decoding and Encoding of TIFF Images",null,null],[3,"TIFFDecoder","image::tiff","The representation of a TIFF decoder",null,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new decoder that decodes from the stream `r`",37,{"inputs":[{"name":"r"}],"output":{"generics":["tiffdecoder"],"name":"imageresult"}}],[11,"init","","Initializes the decoder.",37,{"inputs":[{"name":"self"}],"output":{"generics":["tiffdecoder"],"name":"imageresult"}}],[11,"next_image","","Reads in the next image. If there is no further image in the TIFF file a format error is returned. To determine whether there are more images call `TIFFDecoder::more_images` instead.",37,{"inputs":[{"name":"self"}],"output":{"generics":["tiffdecoder"],"name":"imageresult"}}],[11,"more_images","","Returns `true` if there is at least one more image available.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"byte_order","","Returns the byte_order",37,{"inputs":[{"name":"self"}],"output":{"name":"byteorder"}}],[11,"read_short","","Reads a TIFF short value",37,{"inputs":[{"name":"self"}],"output":{"generics":["u16","error"],"name":"result"}}],[11,"read_long","","Reads a TIFF long value",37,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"read_offset","","Reads a TIFF IFA offset/value field",37,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"goto_offset","","Moves the cursor to the specified offset",37,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"dimensions","","",37,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",37,null],[11,"read_image","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[0,"tga","image","Decoding of TGA Images",null,null],[3,"TGADecoder","image::tga","The representation of a TGA decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream `r`",38,{"inputs":[{"name":"r"}],"output":{"name":"tgadecoder"}}],[11,"dimensions","","",38,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",38,null],[11,"read_image","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[0,"bmp","image","Decoding and Encoding of BMP Images",null,null],[3,"BMPEncoder","image::bmp","The representation of a BMP encoder.",null,null],[3,"BMPDecoder","","A bmp decoder",null,null],[11,"new","","Create a new encoder that writes its output to `w`.",39,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.",39,null],[11,"new","","Create a new decoder that decodes from the stream `r`",40,{"inputs":[{"name":"r"}],"output":{"name":"bmpdecoder"}}],[11,"dimensions","","",40,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",40,null],[11,"read_image","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[0,"hdr","image","Decoding of Radiance HDR Images",null,null],[3,"HDRAdapter","image::hdr","Adapter to conform to `ImageDecoder` trait",null,null],[3,"HDRDecoder","","An Radiance HDR decoder",null,null],[3,"RGBE8Pixel","","Refer to wikipedia",null,null],[12,"c","","Color components",41,null],[12,"e","","Exponent",41,null],[3,"HDRImageDecoderIterator","","Scanline buffered pixel by pixel iterator",null,null],[3,"HDRMetadata","","Metadata for Radiance HDR image",null,null],[12,"width","","Width of decoded image. It could be either scanline length, or scanline count, depending on image orientation.",42,null],[12,"height","","Height of decoded image. It depends on orientation too.",42,null],[12,"orientation","","Orientation matrix. For standard orientation it is ((1,0),(0,1)) - left to right, top to bottom. First pair tells how resulting pixel coordinates change along a scanline. Second pair tells how they change from one scanline to the next.",42,null],[12,"exposure","","Divide color values by exposure to get to get physical radiance in watts/steradian/m2",42,null],[12,"color_correction","","Divide color values by corresponding tuple member (r, g, b) to get to get physical radiance in watts/steradian/m2",42,null],[12,"pixel_aspect_ratio","","Pixel height divided by pixel width",42,null],[12,"custom_attributes","","All lines contained in image header are put here. Ordering of lines is preserved. Lines in the form \"key=value\" are represented as (\"key\", \"value\"). All other lines are (\"\", \"line\")",42,null],[3,"HDREncoder","","Radiance HDR encoder",null,null],[5,"rgbe8","","Creates `RGBE8Pixel` from components",null,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"rgbe8pixel"}}],[5,"read_raw_file","","Helper function for reading raw 3-channel f32 images",null,{"inputs":[{"name":"p"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_rgbe8","","Converts `Rgb<f32>` into `RGBE8Pixel`",null,{"inputs":[{"generics":["f32"],"name":"rgb"}],"output":{"name":"rgbe8pixel"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates adapter",43,{"inputs":[{"name":"r"}],"output":{"generics":["hdradapter"],"name":"imageresult"}}],[11,"new_nonstrict","","Allows reading old Radiance HDR images",43,{"inputs":[{"name":"r"}],"output":{"generics":["hdradapter"],"name":"imageresult"}}],[11,"dimensions","","",43,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",43,null],[11,"read_image","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"rgbe8pixel"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"rgbe8pixel"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"rgbe8pixel"}],"output":{"name":"bool"}}],[11,"to_hdr","","Converts `RGBE8Pixel` into `Rgb<f32>` linearly",41,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"rgb"}}],[11,"to_ldr","","Converts `RGBE8Pixel` into `Rgb<T>` with scale=1 and gamma=2.2",41,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_ldr_scale_gamma","","Converts RGBE8Pixel into Rgb using provided scale and gamma",41,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":{"name":"rgb"}}],[11,"new","","Reads Radiance HDR image header from stream `r` if the header is valid, creates HDRDecoder strict mode is enabled",44,{"inputs":[{"name":"r"}],"output":{"generics":["hdrdecoder"],"name":"imageresult"}}],[11,"with_strictness","","Reads Radiance HDR image header from stream `reader`, if the header is valid, creates `HDRDecoder`.",44,{"inputs":[{"name":"r"},{"name":"bool"}],"output":{"generics":["hdrdecoder"],"name":"imageresult"}}],[11,"metadata","","Returns file metadata. Refer to `HDRMetadata` for details.",44,{"inputs":[{"name":"self"}],"output":{"name":"hdrmetadata"}}],[11,"read_image_native","","Consumes decoder and returns a vector of RGBE8 pixels",44,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"imageresult"}}],[11,"read_image_transform","","Consumes decoder and returns a vector of transformed pixels",44,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["vec"],"name":"imageresult"}}],[11,"read_image_ldr","","Consumes decoder and returns a vector of Rgb pixels. scale = 1, gamma = 2.2",44,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"imageresult"}}],[11,"read_image_hdr","","Consumes decoder and returns a vector of Rgb pixels.",44,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"imageresult"}}],[11,"into_iter","","",44,null],[11,"next","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"hdrmetadata"}}],[11,"new","","Creates encoder",46,{"inputs":[{"name":"w"}],"output":{"name":"hdrencoder"}}],[11,"encode","","Encodes the image `data` that has dimensions `width` and `height`",46,null],[17,"SIGNATURE","","Radiance HDR file signature",null,null],[0,"dxt","image","Decoding of DXT (S3TC) compression",null,null],[3,"DXTDecoder","image::dxt","DXT decoder",null,null],[3,"DXTEncoder","","DXT encoder",null,null],[4,"DXTVariant","","What version of DXT compression are we using? Note that DXT2 and DXT4 are left away as they're just DXT3 and DXT5 with premultiplied alpha",null,null],[13,"DXT1","","The DXT1 format. 48 bytes of RGB data in a 4x4 pixel square is compressed into an 8 byte block of DXT1 data",47,null],[13,"DXT3","","The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel square is compressed into a 16 byte block of DXT3 data",47,null],[13,"DXT5","","The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel square is compressed into a 16 byte block of DXT5 data",47,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"dxtvariant"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"dxtvariant"}],"output":{"name":"bool"}}],[11,"colortype","","Returns the colortype that is stored in this DXT variant",47,{"inputs":[{"name":"self"}],"output":{"name":"colortype"}}],[11,"new","","Create a new DXT decoder that decodes from the stream `r`. As DXT is often stored as raw buffers with the width/height somewhere else the width and height of the image need to be passed in `width` and `height`, as well as the DXT variant in `variant`. width and height are required to be powers of 2 and at least 4. otherwise an error will be returned",48,{"inputs":[{"name":"r"},{"name":"u32"},{"name":"u32"},{"name":"dxtvariant"}],"output":{"generics":["dxtdecoder","imageerror"],"name":"result"}}],[11,"dimensions","","",48,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",48,null],[11,"read_image","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"new","","Create a new encoder that writes its output to `w`",49,{"inputs":[{"name":"w"}],"output":{"name":"dxtencoder"}}],[11,"encode","","Encodes the image data `data` that has dimensions `width` and `height` in `DXTVariant` `variant` data is assumed to be in variant.colortype()",49,null],[11,"fmt","image","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"imageerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"imageformat"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"imageoutputformat"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"imageoutputformat"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"imageoutputformat"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"imageformat"}],"output":{"name":"self"}}],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new subimage",52,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"inner_mut","","Returns a mutable reference to the wrapped image.",52,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"change_bounds","","Change the coordinates of this subimage.",52,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"to_image","","Convert this subimage to an ImageBuffer",52,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[11,"dimensions","","",52,null],[11,"bounds","","",52,null],[11,"get_pixel","","",52,null],[11,"put_pixel","","",52,null],[11,"blend_pixel","","DEPRECATED: This method will be removed. Blend the pixel directly instead.",52,null],[11,"get_pixel_mut","","",52,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"new_luma8","","Creates a dynamic image backed by a buffer of grey pixels.",10,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_luma_a8","","Creates a dynamic image backed by a buffer of grey pixels with transparency.",10,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgb8","","Creates a dynamic image backed by a buffer of RGB pixels.",10,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgba8","","Creates a dynamic image backed by a buffer of RGBA pixels.",10,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"to_rgb","","Returns a copy of this image as an RGB image.",10,{"inputs":[{"name":"self"}],"output":{"name":"rgbimage"}}],[11,"to_rgba","","Returns a copy of this image as an RGBA image.",10,{"inputs":[{"name":"self"}],"output":{"name":"rgbaimage"}}],[11,"to_luma","","Returns a copy of this image as a Luma image.",10,{"inputs":[{"name":"self"}],"output":{"name":"grayimage"}}],[11,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",10,{"inputs":[{"name":"self"}],"output":{"name":"grayalphaimage"}}],[11,"crop","","Return a cut out of this image delimited by the bounding rectangle.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"as_rgb8","","Return a reference to an 8bit RGB image",10,{"inputs":[{"name":"self"}],"output":{"generics":["rgbimage"],"name":"option"}}],[11,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",10,{"inputs":[{"name":"self"}],"output":{"generics":["rgbimage"],"name":"option"}}],[11,"as_rgba8","","Return a reference to an 8bit RGBA image",10,{"inputs":[{"name":"self"}],"output":{"generics":["rgbaimage"],"name":"option"}}],[11,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",10,{"inputs":[{"name":"self"}],"output":{"generics":["rgbaimage"],"name":"option"}}],[11,"as_luma8","","Return a reference to an 8bit Grayscale image",10,{"inputs":[{"name":"self"}],"output":{"generics":["grayimage"],"name":"option"}}],[11,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",10,{"inputs":[{"name":"self"}],"output":{"generics":["grayimage"],"name":"option"}}],[11,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",10,{"inputs":[{"name":"self"}],"output":{"generics":["grayalphaimage"],"name":"option"}}],[11,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",10,{"inputs":[{"name":"self"}],"output":{"generics":["grayalphaimage"],"name":"option"}}],[11,"raw_pixels","","Return this image's pixels as a byte vector.",10,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"color","","Return this image's color type.",10,{"inputs":[{"name":"self"}],"output":{"name":"colortype"}}],[11,"grayscale","","Return a grayscale version of this image.",10,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"invert","","Invert the colors of this image. This method operates inplace.",10,{"inputs":[{"name":"self"}],"output":null}],[11,"resize","","Resize this image using the specified filter algorithm. Returns a new image. The image's aspect ratio is preserved. The image is scaled to the maximum possible size that fits within the bounds specified by `nwidth` and `nheight`.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"resize_exact","","Resize this image using the specified filter algorithm. Returns a new image. Does not preserve aspect ratio. `nwidth` and `nheight` are the new image's dimensions",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"thumbnail","","Scale this image down to fit within a specific size. Returns a new image. The image's aspect ratio is preserved. The image is scaled to the maximum possible size that fits within the bounds specified by `nwidth` and `nheight`.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"thumbnail_exact","","Scale this image down to a specific size. Returns a new image. Does not preserve aspect ratio. `nwidth` and `nheight` are the new image's dimensions. This method uses a fast integer algorithm where each source pixel contributes to exactly one target pixel. May give aliasing artifacts if new size is close to old size.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"resize_to_fill","","Resize this image using the specified filter algorithm. Returns a new image. The image's aspect ratio is preserved. The image is scaled to the maximum possible size that fits within the larger (relative to aspect ratio) of the bounds specified by `nwidth` and `nheight`, then cropped to fit within the other bound.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"blur","","Performs a Gaussian blur on this image. `sigma` is a measure of how much to blur by.",10,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"unsharpen","","Performs an unsharpen mask on this image. `sigma` is the amount to blur the image by. `threshold` is a control of how much to sharpen.",10,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"filter3x3","","Filters this image with the specified 3x3 kernel.",10,null],[11,"adjust_contrast","","Adjust the contrast of this image. `contrast` is the amount to adjust the contrast by. Negative values decrease the contrast and positive values increase the contrast.",10,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"brighten","","Brighten the pixels of this image. `value` is the amount to brighten each pixel by. Negative values decrease the brightness and positive values increase it.",10,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"huerotate","","Hue rotate the supplied image. `value` is the degrees to rotate each pixel by. 0 and 360 do nothing, the rest rotates by the given degree value. just like the css webkit filter hue-rotate(180)",10,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"flipv","","Flip this image vertically",10,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"fliph","","Flip this image horizontally",10,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"rotate90","","Rotate this image 90 degrees clockwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"rotate180","","Rotate this image 180 degrees clockwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"rotate270","","Rotate this image 270 degrees clockwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"write_to","","Encode this image and write it to `w`",10,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f"}],"output":{"name":"imageresult"}}],[11,"save","","Saves the buffer to a file at the path specified.",10,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"result"}}],[11,"dimensions","","",10,null],[11,"bounds","","",10,null],[11,"get_pixel","","",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["u8"],"name":"rgba"}}],[11,"put_pixel","","",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"generics":["u8"],"name":"rgba"}],"output":null}],[11,"blend_pixel","","DEPRECATED: Use iterator `pixels_mut` to blend the pixels directly.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"generics":["u8"],"name":"rgba"}],"output":null}],[11,"get_pixel_mut","","DEPRECATED: Do not use is function: It is unimplemented!",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"colortype"}}],[11,"hash","","",4,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"channel_count","","",2,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",2,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",2,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",2,null],[11,"channels_mut","","",2,null],[11,"channels4","","",2,null],[11,"from_channels","","",2,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"from_slice","","",2,null],[11,"from_slice_mut","","",2,null],[11,"to_rgb","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_luma","","",2,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",2,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"map","","",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply","","",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",2,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"rgb"}}],[11,"apply_with_alpha","","",2,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",2,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply2","","",2,{"inputs":[{"name":"self"},{"name":"rgb"},{"name":"f"}],"output":null}],[11,"invert","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"blend","","",2,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":null}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"channel_count","","",0,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",0,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",0,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",0,null],[11,"channels_mut","","",0,null],[11,"channels4","","",0,null],[11,"from_channels","","",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"luma"}}],[11,"from_slice","","",0,null],[11,"from_slice_mut","","",0,null],[11,"to_rgb","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_luma","","",0,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",0,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"map","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"luma"}}],[11,"apply_with_alpha","","",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",0,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply2","","",0,{"inputs":[{"name":"self"},{"name":"luma"},{"name":"f"}],"output":null}],[11,"invert","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"blend","","",0,{"inputs":[{"name":"self"},{"name":"luma"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"channel_count","","",3,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",3,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",3,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",3,null],[11,"channels_mut","","",3,null],[11,"channels4","","",3,null],[11,"from_channels","","",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgba"}}],[11,"from_slice","","",3,null],[11,"from_slice_mut","","",3,null],[11,"to_rgb","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_luma","","",3,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",3,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"map","","",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply","","",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",3,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"rgba"}}],[11,"apply_with_alpha","","",3,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",3,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply2","","",3,{"inputs":[{"name":"self"},{"name":"rgba"},{"name":"f"}],"output":null}],[11,"invert","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"blend","","",3,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"channel_count","","",1,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",1,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",1,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",1,null],[11,"channels_mut","","",1,null],[11,"channels4","","",1,null],[11,"from_channels","","",1,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"lumaa"}}],[11,"from_slice","","",1,null],[11,"from_slice_mut","","",1,null],[11,"to_rgb","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_luma","","",1,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",1,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"map","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",1,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"lumaa"}}],[11,"apply_with_alpha","","",1,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",1,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply2","","",1,{"inputs":[{"name":"self"},{"name":"lumaa"},{"name":"f"}],"output":null}],[11,"invert","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"blend","","",1,{"inputs":[{"name":"self"},{"name":"lumaa"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw","","Contructs a buffer from a generic container (for example a `Vec` or a slice)",53,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"container"}],"output":{"generics":["imagebuffer"],"name":"option"}}],[11,"into_raw","","Returns the underlying raw buffer",53,{"inputs":[{"name":"self"}],"output":{"name":"container"}}],[11,"dimensions","","The width and height of this image.",53,null],[11,"width","","The width of this image.",53,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",53,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"pixels","","Returns an iterator over the pixels of this image.",53,{"inputs":[{"name":"self"}],"output":{"name":"pixels"}}],[11,"enumerate_pixels","","Enumerates over the pixels of the image. The iterator yields the coordinates of each pixel along with a reference to them.",53,{"inputs":[{"name":"self"}],"output":{"name":"enumeratepixels"}}],[11,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",53,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"pixels_mut","","Returns an iterator over the mutable pixels of this image.",53,{"inputs":[{"name":"self"}],"output":{"name":"pixelsmut"}}],[11,"enumerate_pixels_mut","","Enumerates over the pixels of the image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",53,{"inputs":[{"name":"self"}],"output":{"name":"enumeratepixelsmut"}}],[11,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",53,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","Puts a pixel at location `(x, y)`",53,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"save","","Saves the buffer to a file at the path specified.",53,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"result"}}],[11,"deref","","",53,null],[11,"deref_mut","","",53,null],[11,"index","","",53,null],[11,"index_mut","","",53,null],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",53,null],[11,"bounds","","",53,null],[11,"get_pixel","","",53,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"get_pixel_mut","","",53,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y), ignoring bounds checking.",53,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","",53,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y), ignoring bounds checking.",53,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",53,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"new","","Creates a new image buffer based on a `Vec<P::Subpixel>`.",53,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[11,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",53,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[11,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function. The arguments to the function are the pixel's x and y coordinates.",53,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[11,"from_vec","","Creates an image buffer out of an existing buffer. Returns None if the buffer is not big enough.",53,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":{"generics":["imagebuffer"],"name":"option"}}],[11,"into_vec","","Consumes the image buffer and returns the underlying data as an owned buffer",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"convert","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[11,"new","","Contructs a new frame iterator",54,{"inputs":[{"generics":["frame"],"name":"vec"}],"output":{"name":"frames"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"new","","Contructs a new frame",55,{"inputs":[{"name":"rgbaimage"}],"output":{"name":"frame"}}],[11,"from_parts","","Contructs a new frame",55,{"inputs":[{"name":"rgbaimage"},{"name":"u32"},{"name":"u32"},{"generics":["u16"],"name":"ratio"}],"output":{"name":"frame"}}],[11,"delay","","Delay of this frame",55,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"ratio"}}],[11,"buffer","","Returns the image buffer",55,{"inputs":[{"name":"self"}],"output":{"name":"rgbaimage"}}],[11,"into_buffer","","Returns the image buffer",55,{"inputs":[{"name":"self"}],"output":{"name":"rgbaimage"}}],[11,"left","","Returns the x offset",55,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"top","","Returns the y offset",55,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["frame"],"name":"option"}}],[6,"ImageResult","","Result of an image decoding/encoding process",null,null],[6,"RgbImage","","Sendable Rgb image buffer",null,null],[6,"RgbaImage","","Sendable Rgb + alpha channel image buffer",null,null],[6,"GrayImage","","Sendable grayscale image buffer",null,null],[6,"GrayAlphaImage","","Sendable grayscale + alpha channel image buffer",null,null],[8,"ImageDecoder","","The trait that all decoders implement",null,null],[10,"dimensions","","Returns a tuple containing the width and height of the image",56,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[10,"colortype","","Returns the color type of the image e.g. RGB(8) (8bit RGB)",56,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[10,"row_len","","Returns the length in bytes of one decoded row of the image",56,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[10,"read_scanline","","Reads one row from the image into `buf` and returns the row index",56,null],[10,"read_image","","Decodes the entire image and return it as a Vector",56,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"is_animated","","Returns true if the image is animated",56,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"imageresult"}}],[11,"into_frames","","Returns the frames of the image",56,{"inputs":[{"name":"self"}],"output":{"generics":["frames"],"name":"imageresult"}}],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle starting from `x` and `y` and having `length` and `width`",56,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["vec"],"name":"imageresult"}}],[8,"GenericImage","","A trait for manipulating images.",null,null],[16,"Pixel","","The type of pixel.",57,null],[10,"dimensions","","The width and height of this image.",57,null],[11,"width","","The width of this image.",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"bounds","","The bounding rectangle of this image.",57,null],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",57,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"get_pixel","","Returns the pixel located at (x, y)",57,null],[10,"get_pixel_mut","","Puts a pixel at location (x, y)",57,null],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",57,null],[10,"put_pixel","","Put a pixel at location (x, y)",57,null],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",57,null],[10,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",57,null],[11,"pixels","","Returns an Iterator over the pixels of this image. The iterator yields the coordinates of each pixel along with their value",57,{"inputs":[{"name":"self"}],"output":{"name":"pixels"}}],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",57,{"inputs":[{"name":"self"}],"output":{"name":"mutpixels"}}],[11,"copy_from","","Copies all of the pixels from another image into this image.",57,{"inputs":[{"name":"self"},{"name":"o"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"sub_image","","Returns a subimage that is a view into this image.",57,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[8,"Pixel","","A generalized pixel.",null,null],[16,"Subpixel","","The underlying subpixel type.",58,null],[10,"channel_count","","Returns the number of channels of this pixel type.",58,{"inputs":[],"output":{"name":"u8"}}],[10,"channels","","Returns the components as a slice.",58,null],[10,"channels_mut","","Returns the components as a mutable slice",58,null],[10,"color_model","","Returns a string that can help to interpret the meaning each channel See gimp babl.",58,{"inputs":[],"output":{"name":"str"}}],[10,"color_type","","Returns the ColorType for this pixel format",58,{"inputs":[],"output":{"name":"colortype"}}],[10,"channels4","","Returns the channels of this pixel as a 4 tuple. If the pixel has less than 4 channels the remainder is filled with the maximum value",58,null],[10,"from_channels","","Construct a pixel from the 4 channels a, b, c and d. If the pixel does not contain 4 channels the extra are ignored.",58,null],[10,"from_slice","","Returns a view into a slice.",58,null],[10,"from_slice_mut","","Returns mutable view into a mutable slice.",58,null],[10,"to_rgb","","Convert this pixel to RGB",58,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[10,"to_rgba","","Convert this pixel to RGB with an alpha channel",58,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[10,"to_luma","","Convert this pixel to luma",58,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[10,"to_luma_alpha","","Convert this pixel to luma with an alpha channel",58,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[10,"map","","Apply the function `f` to each channel of this pixel.",58,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"apply","","Apply the function `f` to each channel of this pixel.",58,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"map_with_alpha","","Apply the function `f` to each channel except the alpha channel. Apply the function `g` to the alpha channel.",58,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"self"}}],[10,"apply_with_alpha","","Apply the function `f` to each channel except the alpha channel. Apply the function `g` to the alpha channel. Works in-place.",58,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[10,"map2","","Apply the function `f` to each channel of this pixel and `other` pairwise.",58,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"apply2","","Apply the function `f` to each channel of this pixel and `other` pairwise. Works in-place.",58,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":null}],[10,"invert","","Invert this pixel",58,{"inputs":[{"name":"self"}],"output":null}],[10,"blend","","Blend the color of a given pixel into ourself, taking into account alpha channels",58,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[8,"ConvertBuffer","","Provides color conversions for whole image buffers.",null,null],[10,"convert","","Converts `self` to a buffer of type T",59,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Primitive","","Primitive trait from old stdlib",null,null],[11,"from_rgba","image::gif","Creates a frame from pixels in RGBA format.",33,null],[11,"from_palette_pixels","","Creates a frame from a palette and indexed pixels",33,null],[11,"from_indexed_pixels","","Creates a frame from indexed pixels in the global palette",33,null],[11,"from_rgb","","Creates a frame from pixels in RGB format.",33,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"disposalmethod"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"disposalmethod"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"frame"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",34,{"inputs":[{"name":"u8"}],"output":{"generics":["disposalmethod"],"name":"option"}}],[11,"is_animated","image","Returns true if the image is animated",56,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"imageresult"}}],[11,"into_frames","","Returns the frames of the image",56,{"inputs":[{"name":"self"}],"output":{"generics":["frames"],"name":"imageresult"}}],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle starting from `x` and `y` and having `length` and `width`",56,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["vec"],"name":"imageresult"}}],[11,"width","","The width of this image.",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",57,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",57,null],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",57,null],[11,"pixels","","Returns an Iterator over the pixels of this image. The iterator yields the coordinates of each pixel along with their value",57,{"inputs":[{"name":"self"}],"output":{"name":"pixels"}}],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",57,{"inputs":[{"name":"self"}],"output":{"name":"mutpixels"}}],[11,"copy_from","","Copies all of the pixels from another image into this image.",57,{"inputs":[{"name":"self"},{"name":"o"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"sub_image","","Returns a subimage that is a view into this image.",57,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"expand_palette","","Expands a color palette by re-using the existing buffer. Assumes 8 bit per pixel. Uses an optionally transparent index to adjust it's alpha value accordingly.",60,null]],"paths":[[3,"Luma"],[3,"LumaA"],[3,"Rgb"],[3,"Rgba"],[4,"ColorType"],[4,"ImageError"],[4,"DecodingResult"],[4,"FilterType"],[4,"ImageFormat"],[4,"ImageOutputFormat"],[4,"DynamicImage"],[3,"NeuQuant"],[8,"ColorMap"],[3,"BiLevel"],[3,"WebpDecoder"],[3,"Frame"],[3,"VP8Decoder"],[3,"ArbitraryHeader"],[3,"BitmapHeader"],[3,"GraymapHeader"],[3,"PixmapHeader"],[4,"PNMSubtype"],[4,"SampleEncoding"],[4,"ArbitraryTuplType"],[3,"PNMDecoder"],[3,"PNMEncoder"],[3,"PNMHeader"],[3,"PNGDecoder"],[3,"PNGEncoder"],[3,"ICODecoder"],[3,"ICOEncoder"],[3,"JPEGEncoder"],[3,"JPEGDecoder"],[3,"Frame"],[4,"DisposalMethod"],[3,"Decoder"],[3,"Encoder"],[3,"TIFFDecoder"],[3,"TGADecoder"],[3,"BMPEncoder"],[3,"BMPDecoder"],[3,"RGBE8Pixel"],[3,"HDRMetadata"],[3,"HDRAdapter"],[3,"HDRDecoder"],[3,"HDRImageDecoderIterator"],[3,"HDREncoder"],[4,"DXTVariant"],[3,"DXTDecoder"],[3,"DXTEncoder"],[3,"Pixels"],[3,"MutPixels"],[3,"SubImage"],[3,"ImageBuffer"],[3,"Frames"],[3,"Frame"],[8,"ImageDecoder"],[8,"GenericImage"],[8,"Pixel"],[8,"ConvertBuffer"],[6,"GrayImage"]]};
searchIndex["indexmap"] = {"doc":"[`IndexMap`] is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.","items":[[0,"set","indexmap","A hash set implemented using `IndexMap`",null,null],[3,"IndexSet","indexmap::set","A hash set where the iteration order of the values is independent of their hash values.",null,null],[3,"IntoIter","","",null,null],[3,"Iter","","",null,null],[3,"Drain","","",null,null],[3,"Difference","","",null,null],[3,"Intersection","","",null,null],[3,"SymmetricDifference","","",null,null],[3,"Union","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"indexset"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new set. (Does not allocate.)",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new set with capacity for `n` elements. (Does not allocate if `n` is zero.)",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_capacity_and_hasher","","Create a new set with capacity for `n` elements. (Does not allocate if `n` is zero.)",0,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"len","","Return the number of elements in the set.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"with_hasher","","Create a new set with `hash_builder`",0,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"hasher","","Return a reference to the set's `BuildHasher`.",0,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"capacity","","Computes in O(1) time.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Remove all elements in the set, while preserving its capacity.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"reserve","","FIXME Not implemented fully yet",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"insert","","Insert the value into the set.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"iter","","Return an iterator over the values of the set, in their order",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"difference","","Return an iterator over the values that are in `self` but not `other`.",0,{"inputs":[{"name":"self"},{"name":"indexset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Return an iterator over the values that are in `self` or `other`, but not in both.",0,{"inputs":[{"name":"self"},{"name":"indexset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Return an iterator over the values that are in both `self` and `other`.",0,{"inputs":[{"name":"self"},{"name":"indexset"}],"output":{"name":"intersection"}}],[11,"union","","Return an iterator over all values that are in `self` or `other`.",0,{"inputs":[{"name":"self"},{"name":"indexset"}],"output":{"name":"union"}}],[11,"contains","","Return `true` if an equivalent to `value` exists in the set.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Return a reference to the value stored in the set, if it is present, else `None`.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_full","","Return item index and value",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","FIXME Same as .swap_remove",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"swap_remove","","Remove the value from the set, and return `true` if it was present.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","FIXME Same as .swap_take",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"swap_take","","Removes and returns the value in the set, if any, that is equal to the given one.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"swap_remove_full","","Remove the value from the set return it and the index it had.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"pop","","Remove the last value",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"retain","","Scan through each value in the set and keep those where the closure `keep` returns `true`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"sort","","Sort the set’s values by their default ordering.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"sort_by","","Sort the set’s values in place using the comparison function `compare`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"sorted_by","","Sort the values of the set and return a by value iterator of the values with the result.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"intoiter"}}],[11,"drain","","Clears the `IndexSet`, returning all values as a drain iterator. Keeps the allocated memory for reuse.",0,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"drain"}}],[11,"get_index","","Get a value by index",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_index","","Remove the key-value pair by index",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"count","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect","","",1,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"count","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect","","",2,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"count","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect","","",3,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",0,null],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"default","","Return an empty `IndexSet`",0,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"indexset"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`.",0,{"inputs":[{"name":"self"},{"name":"indexset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if all elements of `self` are contained in `other`.",0,{"inputs":[{"name":"self"},{"name":"indexset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if all elements of `other` are contained in `self`.",0,{"inputs":[{"name":"self"},{"name":"indexset"}],"output":{"name":"bool"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"fold","","",6,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"fold","","",7,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"map","indexmap","`IndexMap` is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.",null,null],[3,"IndexMap","indexmap::map","A hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.",null,null],[3,"OccupiedEntry","","",null,null],[3,"VacantEntry","","",null,null],[3,"Keys","","",null,null],[3,"Values","","",null,null],[3,"ValuesMut","","",null,null],[3,"Iter","","",null,null],[3,"IterMut","","",null,null],[3,"IntoIter","","",null,null],[3,"Drain","","",null,null],[4,"Entry","","Entry for an existing key-value pair or a vacant location to insert one.",null,null],[13,"Occupied","","Existing slot with equivalent key.",8,null],[13,"Vacant","","Vacant slot (no equivalent key in the map).",8,null],[8,"MutableKeys","","Opt-in mutable access to keys.",null,null],[16,"Key","","",9,null],[16,"Value","","",9,null],[10,"get_full_mut2","","Return item index, mutable reference to key and value",9,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[10,"retain2","","Scan through each key-value pair in the map and keep those where the closure `keep` returns `true`.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"__private_marker","","This method is not useful in itself – it is there to “seal” the trait for external implementation, so that we can add methods without causing breaking changes.",9,{"inputs":[{"name":"self"}],"output":{"name":"privatemarker"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"indexmap"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new map. (Does not allocate.)",10,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new map with capacity for `n` key-value pairs. (Does not allocate if `n` is zero.)",10,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_capacity_and_hasher","","Create a new map with capacity for `n` key-value pairs. (Does not allocate if `n` is zero.)",10,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"len","","Return the number of key-value pairs in the map.",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"with_hasher","","Create a new map with `hash_builder`",10,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"hasher","","Return a reference to the map's `BuildHasher`.",10,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"capacity","","Computes in O(1) time.",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"or_insert","","Computes in O(1) time (amortized average).",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Computes in O(1) time (amortized average).",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","",8,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"index","","Return the index where the key-value pair exists or will be inserted.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"key","","",11,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"get","","",11,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","",11,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"index","","Return the index of the key-value pair",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_mut","","",11,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry to `value`, and returns the entry's old value.",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","",11,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"remove_entry","","Remove and return the key, value pair stored in the map for this entry",11,null],[11,"key","","",12,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"into_key","","",12,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"index","","Return the index where the key-value pair will be inserted.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"insert","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"clear","","Remove all key-value pairs in the map, while preserving its capacity.",10,{"inputs":[{"name":"self"}],"output":null}],[11,"reserve","","Reserve capacity for `additional` more key-value pairs.",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"insert","","Insert a key-value pair in the map.",10,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"entry","","Get the given key’s corresponding entry in the map for insertion and/or in-place manipulation.",10,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"iter","","Return an iterator over the key-value pairs of the map, in their order",10,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Return an iterator over the key-value pairs of the map, in their order",10,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Return an iterator over the keys of the map, in their order",10,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Return an iterator over the values of the map, in their order",10,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Return an iterator over mutable references to the the values of the map, in their order",10,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"contains_key","","Return `true` if an equivalent to `key` exists in the map.",10,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Return a reference to the value stored for `key`, if it is present, else `None`.",10,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_full","","Return item index, key and value",10,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_mut","","",10,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_full_mut","","",10,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove","","NOTE: Same as .swap_remove",10,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"swap_remove","","Remove the key-value pair equivalent to `key` and return its value.",10,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"swap_remove_full","","Remove the key-value pair equivalent to `key` and return it and the index it had.",10,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"pop","","Remove the last key-value pair",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"retain","","Scan through each key-value pair in the map and keep those where the closure `keep` returns `true`.",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"sort_keys","","Sort the map’s key-value pairs by the default ordering of the keys.",10,{"inputs":[{"name":"self"}],"output":null}],[11,"sort_by","","Sort the map’s key-value pairs in place using the comparison function `compare`.",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"sorted_by","","Sort the key-value pairs of the map and return a by value iterator of the key-value pairs with the result.",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"intoiter"}}],[11,"drain","","Clears the `IndexMap`, returning all key-value pairs as a drain iterator. Keeps the allocated memory for reuse.",10,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"drain"}}],[11,"get_index","","Get a key-value pair by index",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_index_mut","","Get a key-value pair by index",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_index","","Remove the key-value pair by index",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"count","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect","","",13,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"count","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect","","",14,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"count","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect","","",15,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"count","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect","","",16,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"count","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect","","",17,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"count","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect","","",18,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"count","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect","","",19,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",10,null],[11,"index","","Panics if `key` is not present in the map.",10,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index_mut","","Panics if `key` is not present in the map.",10,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"from_iter","","Create an `IndexMap` from the sequence of key-value pairs in the iterable.",10,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","Extend the map with all key-value pairs in the iterable.",10,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","Extend the map with all key-value pairs in the iterable.",10,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"default","","Return an empty `IndexMap`",10,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"indexmap"}],"output":{"name":"bool"}}],[8,"Equivalent","indexmap","Key equivalence trait.",null,null],[10,"equivalent","","Compare self to `key` and return `true` if they are equal.",20,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"bool"}}],[14,"indexmap","","Create an `IndexMap` from a list of key-value pairs",null,null],[14,"indexset","","Create an `IndexSet` from a list of values",null,null],[11,"get_full_mut2","indexmap::map","",10,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"retain2","","",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"__private_marker","","",10,{"inputs":[{"name":"self"}],"output":{"name":"privatemarker"}}]],"paths":[[3,"IndexSet"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"Difference"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"Union"],[4,"Entry"],[8,"MutableKeys"],[3,"IndexMap"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[8,"Equivalent"]]};
searchIndex["inflate"] = {"doc":"A DEFLATE decoder written in rust.","items":[[3,"InflateWriter","inflate","A DEFLATE decoder.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder/decompressor.",null,null],[3,"DeflateDecoderBuf","","A DEFLATE decoder/decompressor.",null,null],[3,"InflateStream","","",null,null],[5,"inflate_bytes","","Decompress the given slice of DEFLATE compressed data.",null,null],[5,"inflate_bytes_zlib","","Decompress the given slice of DEFLATE compressed (with zlib headers and trailers) data.",null,null],[5,"inflate_bytes_zlib_no_checksum","","Decompress the given slice of DEFLATE compressed (with zlib headers and trailers) data, without calculating and validating the checksum.",null,null],[11,"new","","",0,{"inputs":[{"name":"w"}],"output":{"name":"inflatewriter"}}],[11,"from_zlib","","",0,{"inputs":[{"name":"w"}],"output":{"name":"inflatewriter"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a new `Deflatedecoderbuf` to read from a raw deflate stream.",1,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoderbuf"}}],[11,"from_zlib","","Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.",1,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoderbuf"}}],[11,"from_zlib_no_checksum","","Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream. without calculating and validating the checksum.",1,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoderbuf"}}],[11,"reset","","Resets the decompressor, and replaces the current inner `BufRead` instance by `r`. without doing any extra reallocations.",1,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"reset_data","","Resets the decoder, but continue to read from the same reader.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"get_ref","","Returns a reference to the underlying `BufRead` instance.",1,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Returns a mutable reference to the underlying `BufRead` instance.",1,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Drops the decoder and return the inner `BufRead` instance.",1,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the total bytes read from the underlying `BufRead` instance.",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of bytes output from this decoder.",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"current_checksum","","Returns the calculated checksum value of the currently decoded data.",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read","","",1,null],[11,"new","","Create a new `Deflatedecoderbuf` to read from a raw deflate stream.",2,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoder"}}],[11,"from_zlib","","Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.",2,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoder"}}],[11,"from_zlib_no_checksum","","Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream. without calculating and validating the checksum.",2,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoder"}}],[11,"reset","","Resets the decompressor, and replaces the current inner `BufRead` instance by `r`. without doing any extra reallocations.",2,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Returns a reference to the underlying reader.",2,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Returns a mutable reference to the underlying reader.",2,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Returns the total number of bytes output from this decoder.",2,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"reset_data","","Resets the decoder, but continue to read from the same reader.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"total_in","","Returns the total bytes read from the underlying reader.",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of bytes output from this decoder.",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"current_checksum","","Returns the calculated checksum value of the currently decoded data.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read","","",2,null],[11,"new","","Create a new stream for decoding raw deflate encoded data.",3,{"inputs":[],"output":{"name":"inflatestream"}}],[11,"from_zlib","","Create a new stream for decoding deflate encoded data with a zlib header and footer",3,{"inputs":[],"output":{"name":"inflatestream"}}],[11,"from_zlib_no_checksum","","Create a new stream for decoding deflate encoded data with a zlib header and footer",3,{"inputs":[],"output":{"name":"inflatestream"}}],[11,"reset","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_to_zlib","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"update","","Try to uncompress/decode the data in `data`.",3,null],[11,"current_checksum","","Returns the calculated checksum value of the currently decoded data.",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}]],"paths":[[3,"InflateWriter"],[3,"DeflateDecoderBuf"],[3,"DeflateDecoder"],[3,"InflateStream"]]};
searchIndex["inotify"] = {"doc":"Binding and wrapper for inotify.","items":[[0,"ffi","inotify","Bindings for inotify",null,null],[5,"close","inotify::ffi","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"read","","",null,null],[3,"inotify_event","","Describes an event.",null,null],[12,"wd","","Identifies the watch for which this event occurs.",0,null],[12,"mask","","Contains bits that describe the event that occurred.",0,null],[12,"cookie","","A unique integer that connects related events.",0,null],[12,"len","","The length of `name`.",0,null],[5,"inotify_init","","Creates an inotify instance.",null,null],[5,"inotify_init1","","Creates an inotify instance.",null,null],[5,"inotify_add_watch","","Manipulates the \"watch list\" associated with an inotify instance.",null,null],[5,"inotify_rm_watch","","Removes an item from an inotify watch list.",null,null],[17,"IN_CLOEXEC","","Flag: Set the FD_CLOEXEC flag",null,null],[17,"IN_NONBLOCK","","Flag: Set the O_NONBLOCK file status flag",null,null],[17,"IN_ACCESS","","Event: File was accessed.",null,null],[17,"IN_MODIFY","","Event: File was modified.",null,null],[17,"IN_ATTRIB","","Event: Metadata has changed.",null,null],[17,"IN_CLOSE_WRITE","","Event: File opened for writing was closed.",null,null],[17,"IN_CLOSE_NOWRITE","","Event: File not opened for writing was closed.",null,null],[17,"IN_OPEN","","Event: File was opened.",null,null],[17,"IN_MOVED_FROM","","Event: File or directory was moved away.",null,null],[17,"IN_MOVED_TO","","Event: File or directory was moved in.",null,null],[17,"IN_CREATE","","Event: File or directory was created.",null,null],[17,"IN_DELETE","","Event: File or directory was deleted.",null,null],[17,"IN_DELETE_SELF","","Event: Watched file or directory was deleted.",null,null],[17,"IN_MOVE_SELF","","Event: Watched file or directory was moved.",null,null],[17,"IN_MOVE","","Event: File or directory was moved away or in.",null,null],[17,"IN_CLOSE","","Event: File opened was closed.",null,null],[17,"IN_ALL_EVENTS","","Event: Any event occured.",null,null],[17,"IN_ONLYDIR","","Option: Don't watch children (if self is a directory).",null,null],[17,"IN_DONT_FOLLOW","","Option: Don't dereference (if self is a symlink).",null,null],[17,"IN_EXCL_UNLINK","","Option: Don't watch unlinked children.",null,null],[17,"IN_MASK_ADD","","Option: Add events to an existing watch instead of replacing it.",null,null],[17,"IN_ONESHOT","","Option: Listen for one event, then remove the watch.",null,null],[17,"IN_ISDIR","","Info: Subject of this event is a directory.",null,null],[17,"IN_UNMOUNT","","Info: Filesystem containing self was unmounted.",null,null],[17,"IN_Q_OVERFLOW","","Info: Event queue overflowed.",null,null],[17,"IN_IGNORED","","Info: Watch was removed.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"inotify_event"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"wrapper","inotify","Idiomatic wrapper for inotify",null,null],[3,"INotify","inotify::wrapper","",null,null],[12,"fd","","",1,null],[3,"Event","","",null,null],[12,"wd","","",2,null],[12,"mask","","",2,null],[12,"cookie","","",2,null],[12,"name","","",2,null],[6,"Watch","","",null,null],[11,"init","","",1,{"inputs":[],"output":{"generics":["inotify"],"name":"result"}}],[11,"init_with_flags","","",1,{"inputs":[{"name":"c_int"}],"output":{"generics":["inotify"],"name":"result"}}],[11,"add_watch","","",1,{"inputs":[{"name":"self"},{"name":"path"},{"name":"u32"}],"output":{"generics":["watch"],"name":"result"}}],[11,"rm_watch","","",1,{"inputs":[{"name":"self"},{"name":"watch"}],"output":{"name":"result"}}],[11,"wait_for_events","","Wait until events are available, then return them. This function will block until events are available. If you want it to return immediately, use `available_events`.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"available_events","","Returns available inotify events. If no events are available, this method will simply return a slice with zero events. If you want to wait for events to become available, call `wait_for_events`.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"close","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_access","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_modify","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_attrib","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_close_write","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_close_nowrite","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_open","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_moved_from","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_moved_to","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_create","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_delete","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_delete_self","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_move_self","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_move","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_close","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_dir","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unmount","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_queue_overflow","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ignored","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"inotify_event"],[3,"INotify"],[3,"Event"]]};
searchIndex["iovec"] = {"doc":"A specialized byte slice type for performing vectored I/O operations.","items":[[3,"IoVec","iovec","A specialized byte slice type for performing vectored I/O operations.",null,null],[0,"unix","","IoVec extensions for Unix platforms.",null,null],[5,"as_os_slice","iovec::unix","Convert a slice of `IoVec` refs to a slice of `libc::iovec`.",null,null],[5,"as_os_slice_mut","","Convert a mutable slice of `IoVec` refs to a mutable slice of `libc::iovec`.",null,null],[17,"MAX_LENGTH","iovec","Max length of an `IoVec` slice.",null,null],[11,"from_bytes","","",0,null],[11,"from_bytes_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null]],"paths":[[3,"IoVec"]]};
searchIndex["ipnetwork"] = {"doc":"The `ipnetwork` crate provides a set of APIs to work with IP CIDRs in Rust. Implementation for IPv4 is more or less stable, IPv6 implementation is still WIP.","items":[[3,"Ipv4Network","ipnetwork","Represents a network range where the IP addresses are of v4",null,null],[3,"Ipv6Network","","Represents a network range where the IP addresses are of v6",null,null],[4,"IpNetworkError","","Represents a bunch of errors that can occur while working with a `IpNetwork`",null,null],[13,"InvalidAddr","","",0,null],[13,"InvalidPrefix","","",0,null],[13,"InvalidCidrFormat","","",0,null],[4,"IpNetwork","","Represents a generic network range. This type can have two variants: the v4 and the v6 case.",null,null],[13,"V4","","",1,null],[13,"V6","","",1,null],[5,"ipv4_mask_to_prefix","","Converts a `Ipv4Addr` network mask into a prefix. If the mask is invalid this will return an `IpNetworkError::InvalidPrefix`.",null,{"inputs":[{"name":"ipv4addr"}],"output":{"generics":["u8","ipnetworkerror"],"name":"result"}}],[5,"ipv6_mask_to_prefix","","Converts a `Ipv6Addr` network mask into a prefix. If the mask is invalid this will return an `IpNetworkError::InvalidPrefix`.",null,{"inputs":[{"name":"ipv6addr"}],"output":{"generics":["u8","ipnetworkerror"],"name":"result"}}],[5,"ip_mask_to_prefix","","Converts a `IpAddr` network mask into a prefix. If the mask is invalid this will return an `IpNetworkError::InvalidPrefix`.",null,{"inputs":[{"name":"ipaddr"}],"output":{"generics":["u8","ipnetworkerror"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ipv4network"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"ipv4network"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"ipv4network"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"ipv4network"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"ipv4network"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"ipv4network"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"ipv4network"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"ipv4network"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"ipv4network"}],"output":{"name":"ordering"}}],[11,"new","","Constructs a new `Ipv4Network` from any `Ipv4Addr` and a prefix denoting the network size. If the prefix is larger than 32 this will return an `IpNetworkError::InvalidPrefix`.",2,{"inputs":[{"name":"ipv4addr"},{"name":"u8"}],"output":{"generics":["ipv4network","ipnetworkerror"],"name":"result"}}],[11,"iter","","Returns an iterator over `Ipv4Network`. Each call to `next` will return the next `Ipv4Addr` in the given network. `None` will be returned when there are no more addresses.",2,{"inputs":[{"name":"self"}],"output":{"name":"ipv4networkiterator"}}],[11,"ip","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"prefix","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"mask","","Returns the mask for this `Ipv4Network`. That means the `prefix` most significant bits will be 1 and the rest 0",2,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"network","","Returns the address of the network denoted by this `Ipv4Network`. This means the lowest possible IPv4 address inside of the network.",2,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"broadcast","","Returns the broadcasting address of this `Ipv4Network`. This means the highest possible IPv4 address inside of the network.",2,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"contains","","Checks if a given `Ipv4Addr` is in this `Ipv4Network`",2,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"size","","Returns number of possible host addresses in this `Ipv4Network`.",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"nth","","Returns the `n`:th address within this network. The adresses are indexed from 0 and `n` must be smaller than the size of the network.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["ipv4addr"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["ipv4network","ipnetworkerror"],"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4network"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ipv6network"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"ipv6network"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"ipv6network"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"ipv6network"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"ipv6network"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"ipv6network"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"ipv6network"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"ipv6network"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"ipv6network"}],"output":{"name":"ordering"}}],[11,"new","","Constructs a new `Ipv6Network` from any `Ipv6Addr` and a prefix denoting the network size. If the prefix is larger than 128 this will return an `IpNetworkError::InvalidPrefix`.",3,{"inputs":[{"name":"ipv6addr"},{"name":"u8"}],"output":{"generics":["ipv6network","ipnetworkerror"],"name":"result"}}],[11,"ip","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"prefix","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"mask","","Returns the mask for this `Ipv6Network`. That means the `prefix` most significant bits will be 1 and the rest 0",3,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"contains","","Checks if a given `Ipv6Addr` is in this `Ipv6Network`",3,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"generics":["ipv6network","ipnetworkerror"],"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6network"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ipnetworkerror"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"ipnetworkerror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"ipnetworkerror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"ipnetwork"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"ipnetwork"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"ipnetwork"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"ipnetwork"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"ipnetwork"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"ipnetwork"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"ipnetwork"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"ipnetwork"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"ipnetwork"}],"output":{"name":"ordering"}}],[11,"new","","Constructs a new `IpNetwork` from a given `IpAddr` and a prefix denoting the network size. If the prefix is larger than 32 (for IPv4) or 128 (for IPv6), this will raise an `IpNetworkError::InvalidPrefix` error. Support for IPv6 is not complete yet.",1,{"inputs":[{"name":"ipaddr"},{"name":"u8"}],"output":{"generics":["ipnetwork","ipnetworkerror"],"name":"result"}}],[11,"ip","","Returns the IP part of a given `IpNetwork`",1,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"prefix","","Returns the prefix of the given `IpNetwork`",1,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"mask","","Returns the mask for this `IpNetwork`.  That means the `prefix` most significant bits will be 1 and the rest 0",1,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"is_ipv4","","Returns true if the IP in this `IpNetwork` is a valid IPv4 address,  false if it's a valid IPv6 address.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv6","","Returns true if the IP in this `IpNetwork` is a valid IPv6 address,  false if it's a valid IPv4 address.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","Checks if a given `IpAddr` is in this `IpNetwork`",1,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["ipnetwork","ipnetworkerror"],"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"ipv4network"}],"output":{"name":"ipnetwork"}}],[11,"from","","",1,{"inputs":[{"name":"ipv6network"}],"output":{"name":"ipnetwork"}}],[11,"from","","",1,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipnetwork"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"IpNetworkError"],[4,"IpNetwork"],[3,"Ipv4Network"],[3,"Ipv6Network"]]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","Write integer to an `io::Write`.",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"generics":["usize"],"name":"result"}}],[5,"fmt","","Write integer to an `fmt::Write`.",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Integer","","An integer that can be formatted by `itoa::write` and `itoa::fmt`.",null,null]],"paths":[]};
searchIndex["jpeg_decoder"] = {"doc":"This crate contains a JPEG decoder.","items":[[3,"Decoder","jpeg_decoder","JPEG decoder",null,null],[3,"ImageInfo","","Represents metadata of an image.",null,null],[12,"width","","The width of the image, in pixels.",0,null],[12,"height","","The height of the image, in pixels.",0,null],[12,"pixel_format","","The pixel format of the image.",0,null],[4,"PixelFormat","","An enumeration over combinations of color spaces and bit depths a pixel can have.",null,null],[13,"L8","","Luminance (grayscale), 8 bits",1,null],[13,"RGB24","","RGB, 8 bits per channel",1,null],[13,"CMYK32","","CMYK, 8 bits per channel",1,null],[4,"Error","","Errors that can occur while decoding a JPEG image.",null,null],[13,"Format","","The image is not formatted properly. The string contains detailed information about the error.",2,null],[13,"Unsupported","","The image makes use of a JPEG feature not (currently) supported by this library.",2,null],[13,"Io","","An I/O error occurred while decoding the image.",2,null],[13,"Internal","","An internal error occurred while decoding the image.",2,null],[4,"UnsupportedFeature","","An enumeration over JPEG features (currently) unsupported by this library.",null,null],[13,"Hierarchical","","Hierarchical JPEG.",3,null],[13,"Lossless","","Lossless JPEG.",3,null],[13,"ArithmeticEntropyCoding","","JPEG using arithmetic entropy coding instead of Huffman coding.",3,null],[13,"SamplePrecision","","Sample precision in bits. 8 bit sample precision is what is currently supported.",3,null],[13,"ComponentCount","","Number of components in an image. 1, 3 and 4 components are currently supported.",3,null],[13,"DNL","","An image can specify a zero height in the frame header and use the DNL (Define Number of Lines) marker at the end of the first scan to define the number of lines in the frame.",3,null],[13,"SubsamplingRatio","","Subsampling ratio.",3,null],[13,"NonIntegerSubsamplingRatio","","A subsampling ratio not representable as an integer.",3,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"pixelformat"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"imageinfo"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Decoder` using the reader `reader`.",4,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"info","","Returns metadata about the image.",4,{"inputs":[{"name":"self"}],"output":{"generics":["imageinfo"],"name":"option"}}],[11,"read_info","","Tries to read metadata from the image without decoding it.",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"decode","","Decodes the image and returns the decoded pixels if successful.",4,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"ioerror"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"recverror"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"senderror"}],"output":{"name":"error"}}]],"paths":[[3,"ImageInfo"],[4,"PixelFormat"],[4,"Error"],[4,"UnsupportedFeature"],[3,"Decoder"]]};
searchIndex["jsonwebtoken"] = {"doc":"Create and parses JWT (JSON Web Tokens)","items":[[3,"Header","jsonwebtoken","A basic JWT header, the alg defaults to HS256 and typ is automatically set to `JWT`. All the other fields are optional.",null,null],[12,"typ","","The type of JWS: it can only be \"JWT\" here",0,null],[12,"alg","","The algorithm used",0,null],[12,"cty","","Content type",0,null],[12,"jku","","JSON Key URL",0,null],[12,"kid","","Key ID",0,null],[12,"x5u","","X.509 URL",0,null],[12,"x5t","","X.509 certificate thumbprint",0,null],[3,"Validation","","Contains the various validations that are applied after decoding a token.",null,null],[12,"leeway","","Add some leeway (in seconds) to the `exp`, `iat` and `nbf` validation to account for clock skew.",1,null],[12,"validate_exp","","Whether to validate the `exp` field.",1,null],[12,"validate_iat","","Whether to validate the `iat` field.",1,null],[12,"validate_nbf","","Whether to validate the `nbf` field.",1,null],[12,"aud","","If it contains a value, the validation will check that the `aud` field is the same as the one provided and will error otherwise. Since `aud` can be either a String or a Vec in the JWT spec, you will need to use the set_audience method to set it.",1,null],[12,"iss","","If it contains a value, the validation will check that the `iss` field is the same as the one provided and will error otherwise.",1,null],[12,"sub","","If it contains a value, the validation will check that the `sub` field is the same as the one provided and will error otherwise.",1,null],[12,"algorithms","","If it contains a value, the validation will check that the `alg` of the header is contained in the ones provided and will error otherwise.",1,null],[3,"TokenData","","The return type of a successful call to decode",null,null],[12,"header","","The decoded JWT header",2,null],[12,"claims","","The decoded JWT claims",2,null],[4,"Algorithm","","The algorithms supported for signing/verifying",null,null],[13,"HS256","","HMAC using SHA-256",3,null],[13,"HS384","","HMAC using SHA-384",3,null],[13,"HS512","","HMAC using SHA-512",3,null],[13,"RS256","","RSASSA-PKCS1-v1_5 using SHA-256",3,null],[13,"RS384","","RSASSA-PKCS1-v1_5 using SHA-384",3,null],[13,"RS512","","RSASSA-PKCS1-v1_5 using SHA-512",3,null],[5,"sign","","Take the payload of a JWT, sign it using the algorithm given and return the base64 url safe encoded of the result.",null,null],[5,"verify","","Compares the signature given with a re-computed signature for HMAC or using the public key for RSA.",null,null],[5,"encode","","Encode the header and claims given and sign the payload using the algorithm from the header and the key",null,null],[5,"decode","","Decode a token into a struct containing 2 fields: `claims` and `header`.",null,null],[5,"dangerous_unsafe_decode","","Decode a token without any signature validation into a struct containing 2 fields: `claims` and `header`.",null,{"inputs":[{"name":"str"}],"output":{"generics":["tokendata"],"name":"result"}}],[5,"decode_header","","Decode a token and return the Header. This is not doing any kind of validation: it is meant to be used when you don't know which `alg` the token is using and want to find out.",null,{"inputs":[{"name":"str"}],"output":{"generics":["header"],"name":"result"}}],[0,"errors","","All the errors, generated using error-chain",null,null],[3,"Error","jsonwebtoken::errors","The Error type.",null,null],[12,"0","","The kind of the error.",4,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",5,null],[13,"Unspecified","","An error happened while signing/verifying a token with RSA",5,null],[13,"Base64","","An error happened while decoding some base64 text",5,null],[13,"Json","","An error happened while serializing/deserializing JSON",5,null],[13,"Utf8","","An error happened while trying to convert the result of base64 decoding to a String",5,null],[13,"InvalidToken","","When a token doesn't have a valid JWT shape",5,null],[13,"InvalidSignature","","When the signature doesn't match",5,null],[13,"InvalidKey","","When the secret given is not a valid RSA key",5,null],[13,"ExpiredSignature","","When a token’s `exp` claim indicates that it has expired",5,null],[13,"InvalidIssuer","","When a token’s `iss` claim does not match the expected issuer",5,null],[13,"InvalidAudience","","When a token’s `aud` claim does not match one of the expected audience values",5,null],[13,"InvalidSubject","","When a token’s `aud` claim does not match one of the expected audience values",5,null],[13,"InvalidIssuedAt","","When a token’s `iat` claim is in the future",5,null],[13,"ImmatureSignature","","When a token’s nbf claim represents a time in the future",5,null],[13,"InvalidAlgorithm","","When the algorithm in the header doesn't match the one passed to `decode`",5,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",4,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",4,null],[11,"with_chain","","",4,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[11,"kind","","",4,null],[11,"iter","","",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"chain_err","","",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"backtrace","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"extract_backtrace","","",4,{"inputs":[{"name":"error"}],"output":{"generics":["arc"],"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",4,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",4,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",4,{"inputs":[{"generics":["error"],"name":"box"},{"name":"k"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",4,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",4,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"unspecified"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"decodeerror"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",4,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","jsonwebtoken","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"new","","Returns a JWT header with the algorithm given",0,{"inputs":[{"name":"algorithm"}],"output":{"name":"header"}}],[11,"default","","Returns a JWT header using the default Algorithm, HS256",0,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"algorithm"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"algorithm"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"validation"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"validation"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"validation"}],"output":{"name":"bool"}}],[11,"new","","Create a default validation setup allowing the given alg",1,{"inputs":[{"name":"algorithm"}],"output":{"name":"validation"}}],[11,"set_audience","","Since `aud` can be either a String or an array of String in the JWT spec, this method will take care of serializing the value.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"default","","",1,{"inputs":[],"output":{"name":"validation"}}]],"paths":[[3,"Header"],[3,"Validation"],[3,"TokenData"],[4,"Algorithm"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["language_tags"] = {"doc":"Language tags can be used identify human languages, scripts e.g. Latin script, countries and other regions.","items":[[3,"LanguageTag","language_tags","A language tag as described in BCP47.",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",0,null],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",0,null],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",0,null],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",0,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",0,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",0,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",0,null],[4,"Error","","Defines an Error type for langtags.",null,null],[13,"DuplicateExtension","","The same extension subtag is only allowed once in a tag before the private use part.",1,null],[13,"EmptyExtension","","If an extension subtag is present, it must not be empty.",1,null],[13,"EmptyPrivateUse","","If the `x` subtag is present, it must not be empty.",1,null],[13,"ForbiddenChar","","The langtag contains a char that is not A-Z, a-z, 0-9 or the dash.",1,null],[13,"InvalidSubtag","","A subtag fails to parse, it does not match any other subtags.",1,null],[13,"InvalidLanguage","","The given language subtag is invalid.",1,null],[13,"SubtagTooLong","","A subtag may be eight characters in length at maximum.",1,null],[13,"TooManyExtlangs","","At maximum three extlangs are allowed, but zero to one extlangs are preferred.",1,null],[6,"Result","","Result type used for this library.",null,null],[17,"GRANDFATHERED","","Contains all grandfathered tags.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"languagetag"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",0,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",0,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"langtag","","Utility for creating simple language tags.",null,null]],"paths":[[3,"LanguageTag"],[4,"Error"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"__lazy_static_create","","",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["lazycell"] = {"doc":"This crate provides a `LazyCell` struct which acts as a lazily filled `Cell`, but with frozen contents.","items":[[3,"LazyCell","lazycell","A lazily filled `Cell`, with frozen contents.",null,null],[3,"AtomicLazyCell","","A lazily filled `Cell`, with frozen contents.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"lazycell"}}],[11,"new","","Creates a new, empty, `LazyCell`.",0,{"inputs":[],"output":{"name":"lazycell"}}],[11,"fill","","Put a value into this cell.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"filled","","Test whether this cell has been previously filled.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrow_mut","","Borrows the contents of this lazy cell mutably for the duration of the cell itself.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrow_with","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"try_borrow_with","","Same as `borrow_with`, but allows the initializing function to fail.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","Returns a copy of the contents of the lazy cell.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"atomiclazycell"}}],[11,"new","","Creates a new, empty, `AtomicLazyCell`.",1,{"inputs":[],"output":{"name":"atomiclazycell"}}],[11,"fill","","Put a value into this cell.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"filled","","Test whether this cell has been previously filled.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","Returns a copy of the contents of the lazy cell.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"LazyCell"],[3,"AtomicLazyCell"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",28,null],[12,"tm_min","","",28,null],[12,"tm_hour","","",28,null],[12,"tm_mday","","",28,null],[12,"tm_mon","","",28,null],[12,"tm_year","","",28,null],[12,"tm_wday","","",28,null],[12,"tm_yday","","",28,null],[12,"tm_isdst","","",28,null],[12,"tm_gmtoff","","",28,null],[12,"tm_zone","","",28,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",29,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",30,null],[12,"dli_fbase","","",30,null],[12,"dli_sname","","",30,null],[12,"dli_saddr","","",30,null],[3,"epoll_event","","",null,null],[12,"events","","",31,null],[12,"u64","","",31,null],[3,"utsname","","",null,null],[12,"sysname","","",32,null],[12,"nodename","","",32,null],[12,"release","","",32,null],[12,"version","","",32,null],[12,"machine","","",32,null],[12,"domainname","","",32,null],[3,"lconv","","",null,null],[12,"decimal_point","","",33,null],[12,"thousands_sep","","",33,null],[12,"grouping","","",33,null],[12,"int_curr_symbol","","",33,null],[12,"currency_symbol","","",33,null],[12,"mon_decimal_point","","",33,null],[12,"mon_thousands_sep","","",33,null],[12,"mon_grouping","","",33,null],[12,"positive_sign","","",33,null],[12,"negative_sign","","",33,null],[12,"int_frac_digits","","",33,null],[12,"frac_digits","","",33,null],[12,"p_cs_precedes","","",33,null],[12,"p_sep_by_space","","",33,null],[12,"n_cs_precedes","","",33,null],[12,"n_sep_by_space","","",33,null],[12,"p_sign_posn","","",33,null],[12,"n_sign_posn","","",33,null],[12,"int_p_cs_precedes","","",33,null],[12,"int_p_sep_by_space","","",33,null],[12,"int_n_cs_precedes","","",33,null],[12,"int_n_sep_by_space","","",33,null],[12,"int_p_sign_posn","","",33,null],[12,"int_n_sign_posn","","",33,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",34,null],[12,"sigev_signo","","",34,null],[12,"sigev_notify","","",34,null],[12,"sigev_notify_thread_id","","",34,null],[3,"dirent","","",null,null],[12,"d_ino","","",35,null],[12,"d_off","","",35,null],[12,"d_reclen","","",35,null],[12,"d_type","","",35,null],[12,"d_name","","",35,null],[3,"dirent64","","",null,null],[12,"d_ino","","",36,null],[12,"d_off","","",36,null],[12,"d_reclen","","",36,null],[12,"d_type","","",36,null],[12,"d_name","","",36,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",37,null],[12,"rlim_max","","",37,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",38,null],[12,"gl_pathv","","",38,null],[12,"gl_offs","","",38,null],[12,"gl_flags","","",38,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",39,null],[12,"ifa_name","","",39,null],[12,"ifa_flags","","",39,null],[12,"ifa_addr","","",39,null],[12,"ifa_netmask","","",39,null],[12,"ifa_ifu","","",39,null],[12,"ifa_data","","",39,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",40,null],[12,"pw_passwd","","",40,null],[12,"pw_uid","","",40,null],[12,"pw_gid","","",40,null],[12,"pw_gecos","","",40,null],[12,"pw_dir","","",40,null],[12,"pw_shell","","",40,null],[3,"spwd","","",null,null],[12,"sp_namp","","",41,null],[12,"sp_pwdp","","",41,null],[12,"sp_lstchg","","",41,null],[12,"sp_min","","",41,null],[12,"sp_max","","",41,null],[12,"sp_warn","","",41,null],[12,"sp_inact","","",41,null],[12,"sp_expire","","",41,null],[12,"sp_flag","","",41,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",42,null],[12,"f_frsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_favail","","",42,null],[12,"f_fsid","","",42,null],[12,"f_flag","","",42,null],[12,"f_namemax","","",42,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",43,null],[12,"dqb_bsoftlimit","","",43,null],[12,"dqb_curspace","","",43,null],[12,"dqb_ihardlimit","","",43,null],[12,"dqb_isoftlimit","","",43,null],[12,"dqb_curinodes","","",43,null],[12,"dqb_btime","","",43,null],[12,"dqb_itime","","",43,null],[12,"dqb_valid","","",43,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",44,null],[12,"ssi_errno","","",44,null],[12,"ssi_code","","",44,null],[12,"ssi_pid","","",44,null],[12,"ssi_uid","","",44,null],[12,"ssi_fd","","",44,null],[12,"ssi_tid","","",44,null],[12,"ssi_band","","",44,null],[12,"ssi_overrun","","",44,null],[12,"ssi_trapno","","",44,null],[12,"ssi_status","","",44,null],[12,"ssi_int","","",44,null],[12,"ssi_ptr","","",44,null],[12,"ssi_utime","","",44,null],[12,"ssi_stime","","",44,null],[12,"ssi_addr","","",44,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",45,null],[12,"it_value","","",45,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",46,null],[12,"mq_maxmsg","","",46,null],[12,"mq_msgsize","","",46,null],[12,"mq_curmsgs","","",46,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",47,null],[12,"if_name","","",47,null],[3,"msginfo","","",null,null],[12,"msgpool","","",48,null],[12,"msgmap","","",48,null],[12,"msgmax","","",48,null],[12,"msgmnb","","",48,null],[12,"msgmni","","",48,null],[12,"msgssz","","",48,null],[12,"msgtql","","",48,null],[12,"msgseg","","",48,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",49,null],[12,"msg_len","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",65,null],[12,"dlpi_name","","",65,null],[12,"dlpi_phdr","","",65,null],[12,"dlpi_phnum","","",65,null],[12,"dlpi_adds","","",65,null],[12,"dlpi_subs","","",65,null],[12,"dlpi_tls_modid","","",65,null],[12,"dlpi_tls_data","","",65,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",66,null],[12,"p_offset","","",66,null],[12,"p_vaddr","","",66,null],[12,"p_paddr","","",66,null],[12,"p_filesz","","",66,null],[12,"p_memsz","","",66,null],[12,"p_flags","","",66,null],[12,"p_align","","",66,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",67,null],[12,"p_flags","","",67,null],[12,"p_offset","","",67,null],[12,"p_vaddr","","",67,null],[12,"p_paddr","","",67,null],[12,"p_filesz","","",67,null],[12,"p_memsz","","",67,null],[12,"p_align","","",67,null],[3,"ucred","","",null,null],[12,"pid","","",68,null],[12,"uid","","",68,null],[12,"gid","","",68,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",69,null],[12,"mnt_dir","","",69,null],[12,"mnt_type","","",69,null],[12,"mnt_opts","","",69,null],[12,"mnt_freq","","",69,null],[12,"mnt_passno","","",69,null],[3,"posix_spawn_file_actions_t","","",null,null],[3,"posix_spawnattr_t","","",null,null],[3,"genlmsghdr","","",null,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",70,null],[12,"aio_lio_opcode","","",70,null],[12,"aio_reqprio","","",70,null],[12,"aio_buf","","",70,null],[12,"aio_nbytes","","",70,null],[12,"aio_sigevent","","",70,null],[12,"aio_offset","","",70,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",71,null],[12,"e_exit","","",71,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",72,null],[12,"tv_usec","","",72,null],[3,"utmpx","","",null,null],[12,"ut_type","","",73,null],[12,"ut_pid","","",73,null],[12,"ut_line","","",73,null],[12,"ut_id","","",73,null],[12,"ut_user","","",73,null],[12,"ut_host","","",73,null],[12,"ut_exit","","",73,null],[12,"ut_session","","",73,null],[12,"ut_tv","","",73,null],[12,"ut_addr_v6","","",73,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",74,null],[12,"sa_mask","","",74,null],[12,"sa_flags","","",74,null],[12,"sa_restorer","","",74,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",75,null],[12,"ss_flags","","",75,null],[12,"ss_size","","",75,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",76,null],[12,"si_errno","","",76,null],[12,"si_code","","",76,null],[12,"_pad","","",76,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",77,null],[12,"gl_pathv","","",77,null],[12,"gl_offs","","",77,null],[12,"gl_flags","","",77,null],[3,"statfs","","",null,null],[12,"f_type","","",78,null],[12,"f_bsize","","",78,null],[12,"f_blocks","","",78,null],[12,"f_bfree","","",78,null],[12,"f_bavail","","",78,null],[12,"f_files","","",78,null],[12,"f_ffree","","",78,null],[12,"f_fsid","","",78,null],[12,"f_namelen","","",78,null],[12,"f_frsize","","",78,null],[3,"msghdr","","",null,null],[12,"msg_name","","",79,null],[12,"msg_namelen","","",79,null],[12,"msg_iov","","",79,null],[12,"msg_iovlen","","",79,null],[12,"msg_control","","",79,null],[12,"msg_controllen","","",79,null],[12,"msg_flags","","",79,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",80,null],[12,"cmsg_level","","",80,null],[12,"cmsg_type","","",80,null],[3,"termios","","",null,null],[12,"c_iflag","","",81,null],[12,"c_oflag","","",81,null],[12,"c_cflag","","",81,null],[12,"c_lflag","","",81,null],[12,"c_line","","",81,null],[12,"c_cc","","",81,null],[12,"c_ispeed","","",81,null],[12,"c_ospeed","","",81,null],[3,"flock","","",null,null],[12,"l_type","","",82,null],[12,"l_whence","","",82,null],[12,"l_start","","",82,null],[12,"l_len","","",82,null],[12,"l_pid","","",82,null],[3,"sem_t","","",null,null],[3,"mallinfo","","",null,null],[12,"arena","","",83,null],[12,"ordblks","","",83,null],[12,"smblks","","",83,null],[12,"hblks","","",83,null],[12,"hblkhd","","",83,null],[12,"usmblks","","",83,null],[12,"fsmblks","","",83,null],[12,"uordblks","","",83,null],[12,"fordblks","","",83,null],[12,"keepcost","","",83,null],[3,"nlmsghdr","","",null,null],[3,"nlmsgerr","","",null,null],[3,"nl_pktinfo","","",null,null],[3,"nl_mmap_req","","",null,null],[3,"nl_mmap_hdr","","",null,null],[3,"nlattr","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",84,null],[12,"loads","","",84,null],[12,"totalram","","",84,null],[12,"freeram","","",84,null],[12,"sharedram","","",84,null],[12,"bufferram","","",84,null],[12,"totalswap","","",84,null],[12,"freeswap","","",84,null],[12,"procs","","",84,null],[12,"pad","","",84,null],[12,"totalhigh","","",84,null],[12,"freehigh","","",84,null],[12,"mem_unit","","",84,null],[12,"_f","","",84,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",85,null],[12,"msg_stime","","",85,null],[12,"msg_rtime","","",85,null],[12,"msg_ctime","","",85,null],[12,"msg_qnum","","",85,null],[12,"msg_qbytes","","",85,null],[12,"msg_lspid","","",85,null],[12,"msg_lrpid","","",85,null],[3,"stat","","",null,null],[12,"st_dev","","",86,null],[12,"st_ino","","",86,null],[12,"st_nlink","","",86,null],[12,"st_mode","","",86,null],[12,"st_uid","","",86,null],[12,"st_gid","","",86,null],[12,"st_rdev","","",86,null],[12,"st_size","","",86,null],[12,"st_blksize","","",86,null],[12,"st_blocks","","",86,null],[12,"st_atime","","",86,null],[12,"st_atime_nsec","","",86,null],[12,"st_mtime","","",86,null],[12,"st_mtime_nsec","","",86,null],[12,"st_ctime","","",86,null],[12,"st_ctime_nsec","","",86,null],[3,"stat64","","",null,null],[12,"st_dev","","",87,null],[12,"st_ino","","",87,null],[12,"st_nlink","","",87,null],[12,"st_mode","","",87,null],[12,"st_uid","","",87,null],[12,"st_gid","","",87,null],[12,"st_rdev","","",87,null],[12,"st_size","","",87,null],[12,"st_blksize","","",87,null],[12,"st_blocks","","",87,null],[12,"st_atime","","",87,null],[12,"st_atime_nsec","","",87,null],[12,"st_mtime","","",87,null],[12,"st_mtime_nsec","","",87,null],[12,"st_ctime","","",87,null],[12,"st_ctime_nsec","","",87,null],[3,"statfs64","","",null,null],[12,"f_type","","",88,null],[12,"f_bsize","","",88,null],[12,"f_blocks","","",88,null],[12,"f_bfree","","",88,null],[12,"f_bavail","","",88,null],[12,"f_files","","",88,null],[12,"f_ffree","","",88,null],[12,"f_fsid","","",88,null],[12,"f_namelen","","",88,null],[12,"f_frsize","","",88,null],[12,"f_flags","","",88,null],[12,"f_spare","","",88,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",89,null],[12,"f_frsize","","",89,null],[12,"f_blocks","","",89,null],[12,"f_bfree","","",89,null],[12,"f_bavail","","",89,null],[12,"f_files","","",89,null],[12,"f_ffree","","",89,null],[12,"f_favail","","",89,null],[12,"f_fsid","","",89,null],[12,"f_flag","","",89,null],[12,"f_namemax","","",89,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",90,null],[12,"exponent","","",90,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",91,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",92,null],[12,"swd","","",92,null],[12,"ftw","","",92,null],[12,"fop","","",92,null],[12,"rip","","",92,null],[12,"rdp","","",92,null],[12,"mxcsr","","",92,null],[12,"mxcr_mask","","",92,null],[12,"_st","","",92,null],[12,"_xmm","","",92,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",93,null],[12,"swd","","",93,null],[12,"ftw","","",93,null],[12,"fop","","",93,null],[12,"rip","","",93,null],[12,"rdp","","",93,null],[12,"mxcsr","","",93,null],[12,"mxcr_mask","","",93,null],[12,"st_space","","",93,null],[12,"xmm_space","","",93,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",94,null],[12,"r14","","",94,null],[12,"r13","","",94,null],[12,"r12","","",94,null],[12,"rbp","","",94,null],[12,"rbx","","",94,null],[12,"r11","","",94,null],[12,"r10","","",94,null],[12,"r9","","",94,null],[12,"r8","","",94,null],[12,"rax","","",94,null],[12,"rcx","","",94,null],[12,"rdx","","",94,null],[12,"rsi","","",94,null],[12,"rdi","","",94,null],[12,"orig_rax","","",94,null],[12,"rip","","",94,null],[12,"cs","","",94,null],[12,"eflags","","",94,null],[12,"rsp","","",94,null],[12,"ss","","",94,null],[12,"fs_base","","",94,null],[12,"gs_base","","",94,null],[12,"ds","","",94,null],[12,"es","","",94,null],[12,"fs","","",94,null],[12,"gs","","",94,null],[3,"user","","",null,null],[12,"regs","","",95,null],[12,"u_fpvalid","","",95,null],[12,"i387","","",95,null],[12,"u_tsize","","",95,null],[12,"u_dsize","","",95,null],[12,"u_ssize","","",95,null],[12,"start_code","","",95,null],[12,"start_stack","","",95,null],[12,"signal","","",95,null],[12,"u_ar0","","",95,null],[12,"u_fpstate","","",95,null],[12,"magic","","",95,null],[12,"u_comm","","",95,null],[12,"u_debugreg","","",95,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",96,null],[12,"fpregs","","",96,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",97,null],[12,"uc_link","","",97,null],[12,"uc_stack","","",97,null],[12,"uc_mcontext","","",97,null],[12,"uc_sigmask","","",97,null],[3,"ipc_perm","","",null,null],[12,"__key","","",98,null],[12,"uid","","",98,null],[12,"gid","","",98,null],[12,"cuid","","",98,null],[12,"cgid","","",98,null],[12,"mode","","",98,null],[12,"__seq","","",98,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",99,null],[12,"shm_segsz","","",99,null],[12,"shm_atime","","",99,null],[12,"shm_dtime","","",99,null],[12,"shm_ctime","","",99,null],[12,"shm_cpid","","",99,null],[12,"shm_lpid","","",99,null],[12,"shm_nattch","","",99,null],[3,"termios2","","",null,null],[12,"c_iflag","","",100,null],[12,"c_oflag","","",100,null],[12,"c_cflag","","",100,null],[12,"c_lflag","","",100,null],[12,"c_line","","",100,null],[12,"c_cc","","",100,null],[12,"c_ispeed","","",100,null],[12,"c_ospeed","","",100,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"NLA_ALIGN","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"killpg","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setgrent","","",null,null],[5,"endgrent","","",null,null],[5,"getgrent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"remap_file_pages","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"posix_spawn","","",null,null],[5,"posix_spawnp","","",null,null],[5,"posix_spawnattr_init","","",null,null],[5,"posix_spawnattr_destroy","","",null,null],[5,"posix_spawnattr_getsigdefault","","",null,null],[5,"posix_spawnattr_setsigdefault","","",null,null],[5,"posix_spawnattr_getsigmask","","",null,null],[5,"posix_spawnattr_setsigmask","","",null,null],[5,"posix_spawnattr_getflags","","",null,null],[5,"posix_spawnattr_setflags","","",null,null],[5,"posix_spawnattr_getpgroup","","",null,null],[5,"posix_spawnattr_setpgroup","","",null,null],[5,"posix_spawnattr_getschedpolicy","","",null,null],[5,"posix_spawnattr_setschedpolicy","","",null,null],[5,"posix_spawnattr_getschedparam","","",null,null],[5,"posix_spawnattr_setschedparam","","",null,null],[5,"posix_spawn_file_actions_init","","",null,null],[5,"posix_spawn_file_actions_destroy","","",null,null],[5,"posix_spawn_file_actions_addopen","","",null,null],[5,"posix_spawn_file_actions_addclose","","",null,null],[5,"posix_spawn_file_actions_adddup2","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"mallinfo","","",null,null],[5,"malloc_usable_size","","",null,null],[5,"getauxval","","",null,null],[5,"getpwent_r","","",null,null],[5,"getgrent_r","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"statfs64"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"statvfs64"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"user_fpregs_struct"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"user_regs_struct"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"termios2"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"mallinfo"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"nlmsghdr"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"nlmsgerr"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"nl_pktinfo"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"nl_mmap_req"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"nl_mmap_hdr"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"nlattr"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"itimerspec"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sembuf"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"input_absinfo"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"input_keymap_entry"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"input_mask"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"ff_replay"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ff_trigger"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ff_envelope"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ff_constant_effect"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"ff_ramp_effect"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"ff_condition_effect"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"ff_periodic_effect"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"ff_rumble_effect"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"ff_effect"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"dl_phdr_info"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"elf32_phdr"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"elf64_phdr"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"mntent"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"posix_spawn_file_actions_t"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"posix_spawnattr_t"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"genlmsghdr"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"INT_MIN","","",null,null],[17,"INT_MAX","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_UNKNOWN","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_UNICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_IF","","",null,null],[17,"IPV6_MULTICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"POSIX_SPAWN_RESETIDS","","",null,null],[17,"POSIX_SPAWN_SETPGROUP","","",null,null],[17,"POSIX_SPAWN_SETSIGDEF","","",null,null],[17,"POSIX_SPAWN_SETSIGMASK","","",null,null],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",null,null],[17,"POSIX_SPAWN_SETSCHEDULER","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"GENL_NAMSIZ","","",null,null],[17,"GENL_MIN_ID","","",null,null],[17,"GENL_MAX_ID","","",null,null],[17,"GENL_ADMIN_PERM","","",null,null],[17,"GENL_CMD_CAP_DO","","",null,null],[17,"GENL_CMD_CAP_DUMP","","",null,null],[17,"GENL_CMD_CAP_HASPOL","","",null,null],[17,"GENL_ID_CTRL","","",null,null],[17,"CTRL_CMD_UNSPEC","","",null,null],[17,"CTRL_CMD_NEWFAMILY","","",null,null],[17,"CTRL_CMD_DELFAMILY","","",null,null],[17,"CTRL_CMD_GETFAMILY","","",null,null],[17,"CTRL_CMD_NEWOPS","","",null,null],[17,"CTRL_CMD_DELOPS","","",null,null],[17,"CTRL_CMD_GETOPS","","",null,null],[17,"CTRL_CMD_NEWMCAST_GRP","","",null,null],[17,"CTRL_CMD_DELMCAST_GRP","","",null,null],[17,"CTRL_CMD_GETMCAST_GRP","","",null,null],[17,"CTRL_ATTR_UNSPEC","","",null,null],[17,"CTRL_ATTR_FAMILY_ID","","",null,null],[17,"CTRL_ATTR_FAMILY_NAME","","",null,null],[17,"CTRL_ATTR_VERSION","","",null,null],[17,"CTRL_ATTR_HDRSIZE","","",null,null],[17,"CTRL_ATTR_MAXATTR","","",null,null],[17,"CTRL_ATTR_OPS","","",null,null],[17,"CTRL_ATTR_MCAST_GROUPS","","",null,null],[17,"CTRL_ATTR_OP_UNSPEC","","",null,null],[17,"CTRL_ATTR_OP_ID","","",null,null],[17,"CTRL_ATTR_OP_FLAGS","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_ID","","",null,null],[17,"NF_DROP","","",null,null],[17,"NF_ACCEPT","","",null,null],[17,"NF_STOLEN","","",null,null],[17,"NF_QUEUE","","",null,null],[17,"NF_REPEAT","","",null,null],[17,"NF_STOP","","",null,null],[17,"NF_MAX_VERDICT","","",null,null],[17,"NF_VERDICT_MASK","","",null,null],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",null,null],[17,"NF_VERDICT_QMASK","","",null,null],[17,"NF_VERDICT_QBITS","","",null,null],[17,"NF_VERDICT_BITS","","",null,null],[17,"NF_INET_PRE_ROUTING","","",null,null],[17,"NF_INET_LOCAL_IN","","",null,null],[17,"NF_INET_FORWARD","","",null,null],[17,"NF_INET_LOCAL_OUT","","",null,null],[17,"NF_INET_POST_ROUTING","","",null,null],[17,"NF_INET_NUMHOOKS","","",null,null],[17,"NFPROTO_UNSPEC","","",null,null],[17,"NFPROTO_IPV4","","",null,null],[17,"NFPROTO_ARP","","",null,null],[17,"NFPROTO_BRIDGE","","",null,null],[17,"NFPROTO_IPV6","","",null,null],[17,"NFPROTO_DECNET","","",null,null],[17,"NFPROTO_NUMPROTO","","",null,null],[17,"NF_IP_PRE_ROUTING","","",null,null],[17,"NF_IP_LOCAL_IN","","",null,null],[17,"NF_IP_FORWARD","","",null,null],[17,"NF_IP_LOCAL_OUT","","",null,null],[17,"NF_IP_POST_ROUTING","","",null,null],[17,"NF_IP_NUMHOOKS","","",null,null],[17,"NF_IP_PRI_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP_PRI_RAW","","",null,null],[17,"NF_IP_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK","","",null,null],[17,"NF_IP_PRI_MANGLE","","",null,null],[17,"NF_IP_PRI_NAT_DST","","",null,null],[17,"NF_IP_PRI_FILTER","","",null,null],[17,"NF_IP_PRI_SECURITY","","",null,null],[17,"NF_IP_PRI_NAT_SRC","","",null,null],[17,"NF_IP_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",null,null],[17,"NF_IP_PRI_LAST","","",null,null],[17,"NF_IP6_PRE_ROUTING","","",null,null],[17,"NF_IP6_LOCAL_IN","","",null,null],[17,"NF_IP6_FORWARD","","",null,null],[17,"NF_IP6_LOCAL_OUT","","",null,null],[17,"NF_IP6_POST_ROUTING","","",null,null],[17,"NF_IP6_NUMHOOKS","","",null,null],[17,"NF_IP6_PRI_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP6_PRI_RAW","","",null,null],[17,"NF_IP6_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK","","",null,null],[17,"NF_IP6_PRI_MANGLE","","",null,null],[17,"NF_IP6_PRI_NAT_DST","","",null,null],[17,"NF_IP6_PRI_FILTER","","",null,null],[17,"NF_IP6_PRI_SECURITY","","",null,null],[17,"NF_IP6_PRI_NAT_SRC","","",null,null],[17,"NF_IP6_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP6_PRI_LAST","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"NLA_ALIGNTO","","",null,null],[17,"GENL_UNS_ADMIN_PERM","","",null,null],[17,"GENL_ID_VFS_DQUOT","","",null,null],[17,"GENL_ID_PMCRAID","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"NF_NETDEV_INGRESS","","",null,null],[17,"NF_NETDEV_NUMHOOKS","","",null,null],[17,"NFPROTO_INET","","",null,null],[17,"NFPROTO_NETDEV","","",null,null],[17,"NFT_TABLE_MAXNAMELEN","","",null,null],[17,"NFT_CHAIN_MAXNAMELEN","","",null,null],[17,"NFT_SET_MAXNAMELEN","","",null,null],[17,"NFT_OBJ_MAXNAMELEN","","",null,null],[17,"NFT_USERDATA_MAXLEN","","",null,null],[17,"NFT_REG_VERDICT","","",null,null],[17,"NFT_REG_1","","",null,null],[17,"NFT_REG_2","","",null,null],[17,"NFT_REG_3","","",null,null],[17,"NFT_REG_4","","",null,null],[17,"__NFT_REG_MAX","","",null,null],[17,"NFT_REG32_00","","",null,null],[17,"NFT_REG32_01","","",null,null],[17,"NFT_REG32_02","","",null,null],[17,"NFT_REG32_03","","",null,null],[17,"NFT_REG32_04","","",null,null],[17,"NFT_REG32_05","","",null,null],[17,"NFT_REG32_06","","",null,null],[17,"NFT_REG32_07","","",null,null],[17,"NFT_REG32_08","","",null,null],[17,"NFT_REG32_09","","",null,null],[17,"NFT_REG32_10","","",null,null],[17,"NFT_REG32_11","","",null,null],[17,"NFT_REG32_12","","",null,null],[17,"NFT_REG32_13","","",null,null],[17,"NFT_REG32_14","","",null,null],[17,"NFT_REG32_15","","",null,null],[17,"NFT_REG_SIZE","","",null,null],[17,"NFT_REG32_SIZE","","",null,null],[17,"NFT_CONTINUE","","",null,null],[17,"NFT_BREAK","","",null,null],[17,"NFT_JUMP","","",null,null],[17,"NFT_GOTO","","",null,null],[17,"NFT_RETURN","","",null,null],[17,"NFT_MSG_NEWTABLE","","",null,null],[17,"NFT_MSG_GETTABLE","","",null,null],[17,"NFT_MSG_DELTABLE","","",null,null],[17,"NFT_MSG_NEWCHAIN","","",null,null],[17,"NFT_MSG_GETCHAIN","","",null,null],[17,"NFT_MSG_DELCHAIN","","",null,null],[17,"NFT_MSG_NEWRULE","","",null,null],[17,"NFT_MSG_GETRULE","","",null,null],[17,"NFT_MSG_DELRULE","","",null,null],[17,"NFT_MSG_NEWSET","","",null,null],[17,"NFT_MSG_GETSET","","",null,null],[17,"NFT_MSG_DELSET","","",null,null],[17,"NFT_MSG_NEWSETELEM","","",null,null],[17,"NFT_MSG_GETSETELEM","","",null,null],[17,"NFT_MSG_DELSETELEM","","",null,null],[17,"NFT_MSG_NEWGEN","","",null,null],[17,"NFT_MSG_GETGEN","","",null,null],[17,"NFT_MSG_TRACE","","",null,null],[17,"NFT_MSG_NEWOBJ","","",null,null],[17,"NFT_MSG_GETOBJ","","",null,null],[17,"NFT_MSG_DELOBJ","","",null,null],[17,"NFT_MSG_GETOBJ_RESET","","",null,null],[17,"NFT_MSG_MAX","","",null,null],[17,"NFT_SET_ANONYMOUS","","",null,null],[17,"NFT_SET_CONSTANT","","",null,null],[17,"NFT_SET_INTERVAL","","",null,null],[17,"NFT_SET_MAP","","",null,null],[17,"NFT_SET_TIMEOUT","","",null,null],[17,"NFT_SET_EVAL","","",null,null],[17,"NFT_SET_POL_PERFORMANCE","","",null,null],[17,"NFT_SET_POL_MEMORY","","",null,null],[17,"NFT_SET_ELEM_INTERVAL_END","","",null,null],[17,"NFT_DATA_VALUE","","",null,null],[17,"NFT_DATA_VERDICT","","",null,null],[17,"NFT_DATA_RESERVED_MASK","","",null,null],[17,"NFT_DATA_VALUE_MAXLEN","","",null,null],[17,"NFT_BYTEORDER_NTOH","","",null,null],[17,"NFT_BYTEORDER_HTON","","",null,null],[17,"NFT_CMP_EQ","","",null,null],[17,"NFT_CMP_NEQ","","",null,null],[17,"NFT_CMP_LT","","",null,null],[17,"NFT_CMP_LTE","","",null,null],[17,"NFT_CMP_GT","","",null,null],[17,"NFT_CMP_GTE","","",null,null],[17,"NFT_RANGE_EQ","","",null,null],[17,"NFT_RANGE_NEQ","","",null,null],[17,"NFT_LOOKUP_F_INV","","",null,null],[17,"NFT_DYNSET_OP_ADD","","",null,null],[17,"NFT_DYNSET_OP_UPDATE","","",null,null],[17,"NFT_DYNSET_F_INV","","",null,null],[17,"NFT_PAYLOAD_LL_HEADER","","",null,null],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",null,null],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",null,null],[17,"NFT_PAYLOAD_CSUM_NONE","","",null,null],[17,"NFT_PAYLOAD_CSUM_INET","","",null,null],[17,"NFT_META_LEN","","",null,null],[17,"NFT_META_PROTOCOL","","",null,null],[17,"NFT_META_PRIORITY","","",null,null],[17,"NFT_META_MARK","","",null,null],[17,"NFT_META_IIF","","",null,null],[17,"NFT_META_OIF","","",null,null],[17,"NFT_META_IIFNAME","","",null,null],[17,"NFT_META_OIFNAME","","",null,null],[17,"NFT_META_IIFTYPE","","",null,null],[17,"NFT_META_OIFTYPE","","",null,null],[17,"NFT_META_SKUID","","",null,null],[17,"NFT_META_SKGID","","",null,null],[17,"NFT_META_NFTRACE","","",null,null],[17,"NFT_META_RTCLASSID","","",null,null],[17,"NFT_META_SECMARK","","",null,null],[17,"NFT_META_NFPROTO","","",null,null],[17,"NFT_META_L4PROTO","","",null,null],[17,"NFT_META_BRI_IIFNAME","","",null,null],[17,"NFT_META_BRI_OIFNAME","","",null,null],[17,"NFT_META_PKTTYPE","","",null,null],[17,"NFT_META_CPU","","",null,null],[17,"NFT_META_IIFGROUP","","",null,null],[17,"NFT_META_OIFGROUP","","",null,null],[17,"NFT_META_CGROUP","","",null,null],[17,"NFT_META_PRANDOM","","",null,null],[17,"NFT_CT_STATE","","",null,null],[17,"NFT_CT_DIRECTION","","",null,null],[17,"NFT_CT_STATUS","","",null,null],[17,"NFT_CT_MARK","","",null,null],[17,"NFT_CT_SECMARK","","",null,null],[17,"NFT_CT_EXPIRATION","","",null,null],[17,"NFT_CT_HELPER","","",null,null],[17,"NFT_CT_L3PROTOCOL","","",null,null],[17,"NFT_CT_SRC","","",null,null],[17,"NFT_CT_DST","","",null,null],[17,"NFT_CT_PROTOCOL","","",null,null],[17,"NFT_CT_PROTO_SRC","","",null,null],[17,"NFT_CT_PROTO_DST","","",null,null],[17,"NFT_CT_LABELS","","",null,null],[17,"NFT_CT_PKTS","","",null,null],[17,"NFT_CT_BYTES","","",null,null],[17,"NFT_LIMIT_PKTS","","",null,null],[17,"NFT_LIMIT_PKT_BYTES","","",null,null],[17,"NFT_LIMIT_F_INV","","",null,null],[17,"NFT_QUEUE_FLAG_BYPASS","","",null,null],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",null,null],[17,"NFT_QUEUE_FLAG_MASK","","",null,null],[17,"NFT_QUOTA_F_INV","","",null,null],[17,"NFT_REJECT_ICMP_UNREACH","","",null,null],[17,"NFT_REJECT_TCP_RST","","",null,null],[17,"NFT_REJECT_ICMPX_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",null,null],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",null,null],[17,"NFT_NAT_SNAT","","",null,null],[17,"NFT_NAT_DNAT","","",null,null],[17,"NFT_TRACETYPE_UNSPEC","","",null,null],[17,"NFT_TRACETYPE_POLICY","","",null,null],[17,"NFT_TRACETYPE_RETURN","","",null,null],[17,"NFT_TRACETYPE_RULE","","",null,null],[17,"NFT_NG_INCREMENTAL","","",null,null],[17,"NFT_NG_RANDOM","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"genlmsghdr"],[3,"fd_set"]]};
searchIndex["linked_hash_map"] = {"doc":"A `HashMap` wrapper that holds key-value pairs in insertion order.","items":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",null,null],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`'s entries, with immutable references to the values.",null,null],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`'s entries, with mutable references to the values.",null,null],[3,"IntoIter","","A consuming insertion-order iterator over a `LinkedHashMap`'s entries.",null,null],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`'s keys.",null,null],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`'s values.",null,null],[0,"serde","","An optional implementation of serialization/deserialization. Reference implementations used:",null,null],[3,"LinkedHashMapVisitor","linked_hash_map::serde","`serde::de::Visitor` for a linked hash map.",null,null],[11,"serialize","linked_hash_map","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"new","linked_hash_map::serde","Creates a new visitor for a linked hash map.",1,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_map","","",1,{"inputs":[{"name":"self"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"deserialize","linked_hash_map","",0,{"inputs":[{"name":"d"}],"output":{"generics":["linkedhashmap"],"name":"result"}}],[11,"new","","Creates a linked hash map.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty linked hash map with the given initial capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_hasher","","Creates an empty linked hash map with the given initial hash builder.",0,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"with_capacity_and_hasher","","Creates an empty linked hash map with the given initial capacity and hash builder.",0,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The map may reserve more space to avoid frequent allocations.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is returned.",0,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"contains_key","","Checks if the map contains the given key.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns the value corresponding to the key in the map.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_refresh","","Returns the value corresponding to the key in the map.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove","","Removes and returns the value corresponding to the key from the map.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"pop_front","","Removes the first entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front","","Gets the first entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_back","","Removes the last entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Gets the last entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","Returns the number of key-value pairs in the map.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the map is currently empty.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hasher","","Returns a reference to the map's hasher.",0,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"clear","","Clears the map of all key-value pairs.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a V)`",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a mut V)` # Examples ``` use linked_hash_map::LinkedHashMap;",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Returns a double-ended iterator visiting all key in order of insertion.",0,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns a double-ended iterator visiting all values in order of insertion.",0,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","Returns a string that lists the key-value pairs in insertion order.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}]],"paths":[[3,"LinkedHashMap"],[3,"LinkedHashMapVisitor"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"Keys"],[3,"Values"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"generics":["box","shutdownloggererror"],"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"generics":["shutdownloggererror"],"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["loglevel"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["loglevelfilter"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["loglevel"],"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["lru_cache"] = {"doc":"A cache that holds a limited number of key-value pairs. When the capacity of the cache is exceeded, the least-recently-used (where \"used\" means a look-up or putting the pair into the cache) pair is automatically removed.","items":[[3,"LruCache","lru_cache","An LRU cache.",null,null],[3,"IntoIter","","An iterator over a cache's key-value pairs in least- to most-recently-used order.",null,null],[3,"Iter","","An iterator over a cache's key-value pairs in least- to most-recently-used order.",null,null],[3,"IterMut","","An iterator over a cache's key-value pairs in least- to most-recently-used order with mutable references to the values.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"lrucache"}}],[11,"new","","Creates an empty cache that can hold at most `capacity` items.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_hasher","","Creates an empty cache that can hold at most `capacity` items with the given hash builder.",0,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"contains_key","","Checks if the map contains the given key.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"insert","","Inserts a key-value pair into the cache. If the key already existed, the old value is returned.",0,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the given key in the cache, if any.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove","","Removes the given key from the cache and returns its corresponding value.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"capacity","","Returns the maximum number of key-value pairs the cache can hold.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_capacity","","Sets the number of key-value pairs the cache can hold. Removes least-recently-used key-value pairs if necessary.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remove_lru","","Removes and returns the least recently used key-value pair as a tuple.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","Returns the number of key-value pairs in the cache.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the cache contains no key-value pairs.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Removes all key-value pairs from the cache.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","Returns an iterator over the cache's key-value pairs in least- to most-recently-used order.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator over the cache's key-value pairs in least- to most-recently-used order, with mutable references to the values.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[3,"LruCache"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"]]};
searchIndex["lzw"] = {"doc":"LZW decoder and encoder","items":[[3,"Decoder","lzw","Decoder for a LZW compressed stream (this algorithm is used for GIF files).",null,null],[3,"DecoderEarlyChange","","Decoder for a LZW compressed stream using an “early change” algorithm (used in TIFF files).",null,null],[3,"Encoder","","LZW encoder using the algorithm of GIF files.",null,null],[3,"LsbReader","","Reads bits from a byte stream, LSB first.",null,null],[3,"LsbWriter","","Writes bits to a byte stream, LSB first.",null,null],[3,"MsbReader","","Reads bits from a byte stream, MSB first.",null,null],[3,"MsbWriter","","Writes bits to a byte stream, MSB first.",null,null],[4,"Bits","","Containes either the consumed bytes and reconstructed bits or only the consumed bytes if the supplied buffer was not bit enough",null,null],[13,"Some","","Consumed bytes, reconstructed bits",0,null],[13,"None","","Consumed bytes",0,null],[5,"encode","","Convenience function that reads and compresses all bytes from `R`.",null,{"inputs":[{"name":"r"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new LZW decoder. ",1,{"inputs":[{"name":"r"},{"name":"u8"}],"output":{"name":"decoder"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new LZW decoder. ",2,{"inputs":[{"name":"r"},{"name":"u8"}],"output":{"name":"decoderearlychange"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",2,null],[11,"new","","Creates a new LZW encoder.",3,{"inputs":[{"name":"w"},{"name":"u8"}],"output":{"generics":["encoder"],"name":"result"}}],[11,"encode_bytes","","Compresses `bytes` and writes the result into the writer.",3,null],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",4,{"inputs":[],"output":{"name":"lsbreader"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",5,{"inputs":[],"output":{"name":"msbreader"}}],[11,"read_bits","","",4,null],[11,"read_bits","","",5,null],[11,"new","","Creates a new bit reader",6,{"inputs":[{"name":"w"}],"output":{"name":"lsbwriter"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",7,{"inputs":[{"name":"w"}],"output":{"name":"msbwriter"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_bits","","",6,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_bits","","",7,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[8,"BitReader","","A bit reader.",null,null],[10,"read_bits","","Returns the next `n` bits.",8,null],[8,"BitWriter","","A bit writer.",null,null],[10,"write_bits","","Writes the next `n` bits.",9,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}]],"paths":[[4,"Bits"],[3,"Decoder"],[3,"DecoderEarlyChange"],[3,"Encoder"],[3,"LsbReader"],[3,"MsbReader"],[3,"LsbWriter"],[3,"MsbWriter"],[8,"BitReader"],[8,"BitWriter"]]};
searchIndex["markdown"] = {"doc":"A crate for parsing Markdown in Rust","items":[[4,"Block","markdown","",null,null],[13,"Header","","",0,null],[13,"Paragraph","","",0,null],[13,"Blockquote","","",0,null],[13,"CodeBlock","","",0,null],[13,"UnorderedList","","",0,null],[13,"Raw","","",0,null],[13,"Hr","","",0,null],[4,"ListItem","","",null,null],[13,"Simple","","",1,null],[13,"Paragraph","","",1,null],[4,"Span","","",null,null],[13,"Break","","",2,null],[13,"Text","","",2,null],[13,"Code","","",2,null],[13,"Link","","",2,null],[13,"Image","","",2,null],[13,"Emphasis","","",2,null],[13,"Strong","","",2,null],[5,"to_html","","Converts a Markdown string to HTML",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"tokenize","","Converts a Markdown string to a tokenset of Markdown items",null,{"inputs":[{"name":"str"}],"output":{"generics":["block"],"name":"vec"}}],[5,"generate_markdown","","Convert tokenset of Markdown items back to String",null,{"inputs":[{"generics":["block"],"name":"vec"}],"output":{"name":"string"}}],[5,"file_to_html","","Opens a file and converts its contents to HTML",null,{"inputs":[{"name":"path"}],"output":{"generics":["string"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"listitem"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"listitem"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"listitem"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"span"}}]],"paths":[[4,"Block"],[4,"ListItem"],[4,"Span"]]};
searchIndex["matches"] = {"doc":"","items":[[14,"matches","matches","Check if an expression matches a refutable pattern.",null,null],[14,"assert_matches","","Assert that an expression matches a refutable pattern.",null,null],[14,"debug_assert_matches","","Assert that an expression matches a refutable pattern using debug assertions.",null,null]],"paths":[]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",null,null],[3,"Memchr2","","An iterator for Memchr2",null,null],[3,"Memchr3","","An iterator for Memchr3",null,null],[5,"memchr","","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,null],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,null],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"new","","Create a new Memchr2 that's initalized to zero with a haystack",2,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["memoffset"] = {"doc":"A crate used for calculating offsets of struct members and their spans.","items":[[14,"offset_of","memoffset","Calculates the offset of the specified field from the start of the struct. This macro supports arbitrary amount of subscripts and recursive member-accesses.",null,null],[14,"span_of","","Produces a range instance representing the sub-slice containing the specified member.",null,null]],"paths":[]};
searchIndex["mime"] = {"doc":"Mime","items":[[3,"Mime","mime","A parsed mime or media type.",null,null],[3,"Name","","A section of a `Mime`.",null,null],[3,"FromStrError","","An error when parsing a `Mime` from a string.",null,null],[3,"Params","","An iterator over the parameters of a MIME.",null,null],[17,"STAR","","",null,null],[17,"TEXT","","text",null,null],[17,"IMAGE","","image",null,null],[17,"AUDIO","","audio",null,null],[17,"VIDEO","","video",null,null],[17,"APPLICATION","","application",null,null],[17,"MULTIPART","","multipart",null,null],[17,"MESSAGE","","message",null,null],[17,"MODEL","","model",null,null],[17,"FONT","","font",null,null],[17,"PLAIN","","plain",null,null],[17,"HTML","","html",null,null],[17,"XML","","xml",null,null],[17,"JAVASCRIPT","","javascript",null,null],[17,"CSS","","css",null,null],[17,"CSV","","csv",null,null],[17,"EVENT_STREAM","","event-stream",null,null],[17,"JSON","","json",null,null],[17,"WWW_FORM_URLENCODED","","x-www-form-urlencoded",null,null],[17,"MSGPACK","","msgpack",null,null],[17,"OCTET_STREAM","","octet-stream",null,null],[17,"FORM_DATA","","form-data",null,null],[17,"PNG","","png",null,null],[17,"GIF","","gif",null,null],[17,"BMP","","bmp",null,null],[17,"JPEG","","jpeg",null,null],[17,"BASIC","","basic",null,null],[17,"MPEG","","mpeg",null,null],[17,"MP4","","mp4",null,null],[17,"OGG","","ogg",null,null],[17,"CHARSET","","charset",null,null],[17,"BOUNDARY","","boundary",null,null],[17,"UTF_8","","utf-8",null,null],[17,"STAR_STAR","","`*/*`",null,null],[17,"TEXT_STAR","","`text/*`",null,null],[17,"TEXT_PLAIN","","`text/plain`",null,null],[17,"TEXT_PLAIN_UTF_8","","`text/plain; charset=utf-8`",null,null],[17,"TEXT_HTML","","`text/html`",null,null],[17,"TEXT_HTML_UTF_8","","`text/html; charset=utf-8`",null,null],[17,"TEXT_CSS","","`text/css`",null,null],[17,"TEXT_JAVASCRIPT","","`text/javascript`",null,null],[17,"TEXT_XML","","`text/xml`",null,null],[17,"TEXT_EVENT_STREAM","","`text/event-stream`",null,null],[17,"TEXT_CSV","","`text/csv`",null,null],[17,"TEXT_CSV_UTF_8","","`text/csv; charset=utf-8`",null,null],[17,"TEXT_TAB_SEPARATED_VALUES","","`text/tab-separated-values`",null,null],[17,"TEXT_TAB_SEPARATED_VALUES_UTF_8","","`text/tab-separated-values; charset=utf-8`",null,null],[17,"IMAGE_STAR","","`image/*`",null,null],[17,"IMAGE_JPEG","","`image/jpeg`",null,null],[17,"IMAGE_GIF","","`image/gif`",null,null],[17,"IMAGE_PNG","","`image/png`",null,null],[17,"IMAGE_BMP","","`image/bmp`",null,null],[17,"APPLICATION_JSON","","`application/json`",null,null],[17,"APPLICATION_WWW_FORM_URLENCODED","","`application/x-www-form-urlencoded`",null,null],[17,"APPLICATION_OCTET_STREAM","","`application/octet-stream`",null,null],[17,"APPLICATION_MSGPACK","","`application/msgpack`",null,null],[17,"MULTIPART_FORM_DATA","","`multipart/form-data`",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"ordering"}}],[11,"hash","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"type_","","Get the top level media type for this `Mime`.",0,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"subtype","","Get the subtype of this `Mime`.",0,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"suffix","","Get an optional +suffix for this `Mime`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["name"],"name":"option"}}],[11,"get_param","","Look up a parameter by name.",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"generics":["name"],"name":"option"}}],[11,"params","","Returns an iterator over the parameters.",0,{"inputs":[{"name":"self"}],"output":{"name":"params"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"ordering"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["mime"],"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_str","","Get the value of this `Name` as a string.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null]],"paths":[[3,"Mime"],[3,"Name"],[3,"FromStrError"],[3,"Params"]]};
searchIndex["mime_guess"] = {"doc":"Guessing of MIME types by file extension.","items":[[3,"Mime","mime_guess","A parsed mime or media type.",null,null],[5,"guess_mime_type","","Guess the MIME type of `path` by its extension (as defined by `Path::extension()`).",null,{"inputs":[{"name":"p"}],"output":{"name":"mime"}}],[5,"guess_mime_type_opt","","Guess the MIME type of `path` by its extension (as defined by `Path::extension()`).",null,{"inputs":[{"name":"p"}],"output":{"generics":["mime"],"name":"option"}}],[5,"get_mime_type","","Get the MIME type associated with a file extension.",null,{"inputs":[{"name":"str"}],"output":{"name":"mime"}}],[5,"get_mime_type_opt","","Get the MIME type associated with a file extension.",null,{"inputs":[{"name":"str"}],"output":{"generics":["mime"],"name":"option"}}],[5,"get_mime_type_str","","Get the MIME type string associated with a file extension. Case-insensitive.",null,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[5,"get_mime_extensions","","Get a list of known extensions for a given `Mime`.",null,{"inputs":[{"name":"mime"}],"output":{"name":"option"}}],[5,"get_mime_extensions_str","","Get a list of known extensions for a MIME type string.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"get_extensions","","Get the extensions for a given top-level and sub-level of a MIME type (`{toplevel}/{sublevel}`).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[5,"octet_stream","","Get the MIME type for `application/octet-stream` (generic binary stream)",null,{"inputs":[],"output":{"name":"mime"}}],[11,"type_","","Get the top level media type for this `Mime`.",0,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"subtype","","Get the subtype of this `Mime`.",0,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"suffix","","Get an optional +suffix for this `Mime`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["name"],"name":"option"}}],[11,"get_param","","Look up a parameter by name.",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"generics":["name"],"name":"option"}}],[11,"params","","Returns an iterator over the parameters.",0,{"inputs":[{"name":"self"}],"output":{"name":"params"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["mime"],"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[3,"Mime"]]};
searchIndex["miniz_sys"] = {"doc":"","items":[[3,"mz_stream","miniz_sys","",null,null],[12,"next_in","","",0,null],[12,"avail_in","","",0,null],[12,"total_in","","",0,null],[12,"next_out","","",0,null],[12,"avail_out","","",0,null],[12,"total_out","","",0,null],[12,"msg","","",0,null],[12,"state","","",0,null],[12,"zalloc","","",0,null],[12,"zfree","","",0,null],[12,"opaque","","",0,null],[12,"data_type","","",0,null],[12,"adler","","",0,null],[12,"reserved","","",0,null],[4,"mz_internal_state","","",null,null],[5,"mz_deflateInit2","","",null,null],[5,"mz_deflate","","",null,null],[5,"mz_deflateEnd","","",null,null],[5,"mz_deflateReset","","",null,null],[5,"mz_inflateInit2","","",null,null],[5,"mz_inflate","","",null,null],[5,"mz_inflateEnd","","",null,null],[5,"mz_crc32","","",null,null],[6,"mz_alloc_func","","",null,null],[6,"mz_free_func","","",null,null],[17,"MZ_NO_FLUSH","","",null,null],[17,"MZ_PARTIAL_FLUSH","","",null,null],[17,"MZ_SYNC_FLUSH","","",null,null],[17,"MZ_FULL_FLUSH","","",null,null],[17,"MZ_FINISH","","",null,null],[17,"MZ_BLOCK","","",null,null],[17,"MZ_OK","","",null,null],[17,"MZ_STREAM_END","","",null,null],[17,"MZ_NEED_DICT","","",null,null],[17,"MZ_ERRNO","","",null,null],[17,"MZ_STREAM_ERROR","","",null,null],[17,"MZ_DATA_ERROR","","",null,null],[17,"MZ_MEM_ERROR","","",null,null],[17,"MZ_BUF_ERROR","","",null,null],[17,"MZ_VERSION_ERROR","","",null,null],[17,"MZ_PARAM_ERROR","","",null,null],[17,"MZ_DEFLATED","","",null,null],[17,"MZ_DEFAULT_WINDOW_BITS","","",null,null],[17,"MZ_DEFAULT_STRATEGY","","",null,null]],"paths":[[3,"mz_stream"]]};
searchIndex["mio"] = {"doc":"A fast, low-level IO library for Rust focusing on non-blocking APIs, event notification, and other useful utilities for building high performance IO apps.","items":[[3,"Ipv4Addr","mio","An IPv4 address.",null,null],[3,"Ipv6Addr","","An IPv6 address.",null,null],[3,"PollOpt","","",null,null],[3,"EventSet","","",null,null],[3,"IoEvent","","",null,null],[12,"kind","","",0,null],[12,"token","","",0,null],[3,"EventLoop","","Single threaded IO event loop.",null,null],[3,"EventLoopConfig","","Configure EventLoop runtime details",null,null],[3,"Sender","","Sends messages to the EventLoop from other threads.",null,null],[3,"Poll","","",null,null],[3,"Events","","",null,null],[3,"Timeout","","",null,null],[3,"TimerError","","",null,null],[3,"Token","","",null,null],[12,"0","","",1,null],[3,"Io","","",null,null],[3,"Selector","","",null,null],[4,"IpAddr","","An IP address, either a IPv4 or IPv6 address.",null,null],[13,"V4","","",2,null],[13,"V6","","",2,null],[4,"NotifyError","","",null,null],[13,"Io","","",3,null],[13,"Full","","",3,null],[13,"Closed","","",3,null],[0,"util","","Utilities for non-blocking IO programs",null,null],[3,"BoundedQueue","mio::util","",null,null],[11,"with_capacity","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"pop","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"queue"}}],[6,"Slab","","",null,null],[11,"eq","mio","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"pollopt"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"ordering"}}],[11,"edge","","",5,{"inputs":[],"output":{"name":"pollopt"}}],[11,"empty","","",5,{"inputs":[],"output":{"name":"pollopt"}}],[11,"level","","",5,{"inputs":[],"output":{"name":"pollopt"}}],[11,"oneshot","","",5,{"inputs":[],"output":{"name":"pollopt"}}],[11,"all","","",5,{"inputs":[],"output":{"name":"pollopt"}}],[11,"is_edge","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_level","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_oneshot","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bits","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contains","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"insert","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":null}],[11,"remove","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":null}],[11,"bitor","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitxor","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitand","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"not","","",5,{"inputs":[{"name":"self"}],"output":{"name":"pollopt"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"eventset"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"ordering"}}],[11,"none","","",6,{"inputs":[],"output":{"name":"eventset"}}],[11,"readable","","",6,{"inputs":[],"output":{"name":"eventset"}}],[11,"writable","","",6,{"inputs":[],"output":{"name":"eventset"}}],[11,"error","","",6,{"inputs":[],"output":{"name":"eventset"}}],[11,"hup","","",6,{"inputs":[],"output":{"name":"eventset"}}],[11,"all","","",6,{"inputs":[],"output":{"name":"eventset"}}],[11,"is_readable","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_writable","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_error","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_hup","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"insert","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":null}],[11,"remove","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":null}],[11,"bits","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contains","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"bitor","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"bitxor","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"bitand","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"not","","",6,{"inputs":[{"name":"self"}],"output":{"name":"eventset"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ioevent"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"ioevent"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"ioevent"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new IoEvent.",0,{"inputs":[{"name":"eventset"},{"name":"token"}],"output":{"name":"ioevent"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"eventloopconfig"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new configuration for the event loop with all default options specified.",7,{"inputs":[],"output":{"name":"eventloopconfig"}}],[11,"notify_capacity","","Sets the maximum number of messages that can be buffered on the event loop's notification channel before a send will fail.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"messages_per_tick","","Sets the maximum number of messages that can be processed on any tick of the event loop.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"timer_tick_ms","","",7,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"timer_wheel_size","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"timer_capacity","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"eventloopconfig"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes a new event loop using default configuration settings. The event loop will not be running yet.",8,{"inputs":[],"output":{"generics":["eventloop"],"name":"result"}}],[11,"configured","","",8,{"inputs":[{"name":"eventloopconfig"}],"output":{"generics":["eventloop"],"name":"result"}}],[11,"channel","","Returns a sender that allows sending messages to the event loop in a thread-safe way, waking up the event loop if needed.",8,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"timeout_ms","","Schedules a timeout after the requested time interval. When the duration has been reached, Handler::timeout will be invoked passing in the supplied token.",8,null],[11,"clear_timeout","","If the supplied timeout has not been triggered, cancel it such that it will not be triggered in the future.",8,{"inputs":[{"name":"self"},{"name":"timeout"}],"output":{"name":"bool"}}],[11,"shutdown","","Tells the event loop to exit after it is done handling all events in the current iteration.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"is_running","","Indicates whether the event loop is currently running. If it's not it has either stopped or is scheduled to stop on the next tick.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"register","","Registers an IO handle with the event loop.",8,{"inputs":[{"name":"self"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Re-Registers an IO handle with the event loop.",8,{"inputs":[{"name":"self"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"run","","Keep spinning the event loop indefinitely, and notify the handler whenever any of the registered handles are ready.",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"result"}}],[11,"deregister","","Deregisters an IO handle with the event loop.",8,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"run_once","","Spin the event loop once, with a timeout of one second, and notify the handler if any of the registered handles become ready during that time.",8,{"inputs":[{"name":"self"},{"name":"h"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","",9,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"generics":["notifyerror"],"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["ipaddr","addrparseerror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"new","","",10,{"inputs":[],"output":{"generics":["poll"],"name":"result"}}],[11,"register","","",10,{"inputs":[{"name":"self"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",10,{"inputs":[{"name":"self"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",10,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"poll","","",10,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["usize"],"name":"result"}}],[11,"event","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"ioevent"}}],[11,"events","","",10,{"inputs":[{"name":"self"}],"output":{"name":"events"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["ioevent"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",12,{"inputs":[],"output":{"generics":["selector"],"name":"result"}}],[11,"id","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"select","","Wait for events from the OS",12,{"inputs":[{"name":"self"},{"name":"events"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[11,"register","","Register event interests for the given IO handle with the OS",12,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Register event interests for the given IO handle with the OS",12,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","Deregister event interests for the given IO handle with the OS",12,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw_fd","","",13,{"inputs":[{"name":"rawfd"}],"output":{"name":"io"}}],[11,"from","","",13,{"inputs":[{"name":"rawfd"}],"output":{"name":"io"}}],[11,"from_raw_fd","","",13,{"inputs":[{"name":"rawfd"}],"output":{"name":"io"}}],[11,"as_raw_fd","","",13,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"register","","",13,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",13,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",13,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"result"}}],[11,"read","","",13,null],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"timeout"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"ordering"}}],[11,"hash","","",1,null],[11,"as_usize","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_usize","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"token"}}],[11,"as_usize","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"tcp","","",null,null],[4,"Shutdown","mio::tcp","Possible values which can be passed to the [`shutdown`] method of [`TcpStream`].",null,null],[13,"Read","","The reading portion of the [`TcpStream`] should be shut down.",16,null],[13,"Write","","The writing portion of the [`TcpStream`] should be shut down.",16,null],[13,"Both","","Both the reading and the writing portions of the [`TcpStream`] should be shut down.",16,null],[3,"TcpStream","","",null,null],[3,"TcpListener","","",null,null],[0,"udp","mio","",null,null],[3,"UdpSocket","mio::udp","",null,null],[0,"unix","mio","",null,null],[3,"PipeReader","mio::unix","",null,null],[3,"PipeWriter","","",null,null],[3,"UnixListener","","",null,null],[3,"UnixSocket","","",null,null],[3,"UnixStream","","",null,null],[3,"EventedFd","","",null,null],[12,"0","","",17,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[0,"prelude","mio","",null,null],[3,"EventLoop","mio::prelude","Single threaded IO event loop.",null,null],[8,"TryRead","","",null,null],[11,"try_read_buf","","",18,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["option"],"name":"result"}}],[10,"try_read","","",18,null],[8,"TryWrite","","",null,null],[11,"try_write_buf","","",19,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["option"],"name":"result"}}],[10,"try_write","","",19,null],[6,"TimerResult","mio","",null,null],[8,"Handler","","",null,null],[16,"Timeout","","",20,null],[16,"Message","","",20,null],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated on. `events` indicates the specific operations that are ready to be performed.",20,{"inputs":[{"name":"self"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"notify","","Invoked when a message has been received via the event loop's channel.",20,null],[11,"timeout","","Invoked when a timeout has completed.",20,null],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",20,{"inputs":[{"name":"self"},{"name":"eventloop"}],"output":null}],[11,"tick","","Invoked at the end of an event loop tick.",20,{"inputs":[{"name":"self"},{"name":"eventloop"}],"output":null}],[8,"TryRead","","",null,null],[11,"try_read_buf","mio::prelude","",18,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["option"],"name":"result"}}],[10,"try_read","mio","",18,null],[8,"TryWrite","","",null,null],[11,"try_write_buf","mio::prelude","",19,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["option"],"name":"result"}}],[10,"try_write","mio","",19,null],[8,"Evented","","A value that may be registered with an `EventLoop`",null,null],[8,"TryAccept","","",null,null],[16,"Output","","",21,null],[10,"accept","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",22,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"localhost","","Creates a new IPv4 address with the address pointing to localhost: 127.0.0.1.",22,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"unspecified","","Creates a new IPv4 address representing an unspecified address: 0.0.0.0",22,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",22,null],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address (0.0.0.0).",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address (127.0.0.0/8).",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_private","","Returns [`true`] if this is a private address.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns [`true`] if the address is link-local (169.254.0.0/16).",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable. See [iana-ipv4-special-registry][ipv4-sr].",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address (224.0.0.0/4).",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns [`true`] if this is a broadcast address (255.255.255.255).",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns [`true`] if this address is in a range designated for documentation.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible [IPv6 address].",22,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped [IPv6 address].",22,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"eq","mio::tcp","",16,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"eq","mio","",22,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"hash","","",22,null],[11,"hash","","",23,null],[11,"cmp","","",22,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"cmp","","",23,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"from_str","","",22,{"inputs":[{"name":"str"}],"output":{"generics":["ipv4addr","addrparseerror"],"name":"result"}}],[11,"from_str","","",23,{"inputs":[{"name":"str"}],"output":{"generics":["ipv6addr","addrparseerror"],"name":"result"}}],[11,"from","","",23,null],[11,"from","","Examples",22,null],[11,"from","","",23,{"inputs":[{"name":"u128"}],"output":{"name":"ipv6addr"}}],[11,"from","","",23,null],[11,"from","","Convert a host byte order `u32` into an `Ipv4Addr`.",22,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","mio::tcp","",16,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"clone","mio","",22,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"fmt","mio::tcp","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","mio","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",23,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"localhost","","Creates a new IPv6 address representing localhost: `::1`.",23,{"inputs":[],"output":{"name":"ipv6addr"}}],[11,"unspecified","","Creates a new IPv6 address representing the unspecified address: `::`",23,{"inputs":[],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",23,null],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address (::).",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address (::1).",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable.",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns [`true`] if this is a unique local address (fc00::/7).",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns [`true`] if the address is unicast and link-local (fe80::/10).",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns [`true`] if this is a deprecated unicast site-local address (fec0::/10).",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns [`true`] if this is an address reserved for documentation (2001:db8::/32).",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns [`true`] if the address is a globally routable unicast address.",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",23,{"inputs":[{"name":"self"}],"output":{"generics":["ipv6multicastscope"],"name":"option"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address (ff00::/8).",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an [IPv4 address]. Returns [`None`] if this address is neither IPv4-compatible or IPv4-mapped.",23,{"inputs":[{"name":"self"}],"output":{"generics":["ipv4addr"],"name":"option"}}],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",23,null],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated on. `events` indicates the specific operations that are ready to be performed.",20,{"inputs":[{"name":"self"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"notify","","Invoked when a message has been received via the event loop's channel.",20,null],[11,"timeout","","Invoked when a timeout has completed.",20,null],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",20,{"inputs":[{"name":"self"},{"name":"eventloop"}],"output":null}],[11,"tick","","Invoked at the end of an event loop tick.",20,{"inputs":[{"name":"self"},{"name":"eventloop"}],"output":null}],[11,"try_read_buf","mio::prelude","",18,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["option"],"name":"result"}}],[11,"try_write_buf","","",19,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["option"],"name":"result"}}],[11,"fmt","mio::tcp","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Create a new TCP stream an issue a non-blocking connect to the specified address.",24,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpBuilder`, connecting it to the address specified.",24,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"peer_addr","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"local_addr","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"try_clone","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"shutdown","","",24,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","",24,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",24,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[11,"take_socket_error","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",24,null],[11,"write","","",24,null],[11,"flush","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",24,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",24,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",24,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Convenience method to bind a new TCP listener to the specified address to receive new connections.",25,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"from_listener","","Creates a new `TcpListener` from an instance of a `std::net::TcpListener` type.",25,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",25,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"local_addr","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"try_clone","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"take_socket_error","","",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",25,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",25,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",25,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"as_raw_fd","","",24,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",24,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"as_raw_fd","","",25,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",25,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[11,"fmt","mio::udp","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 UDP socket",26,{"inputs":[],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 UDP socket",26,{"inputs":[],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"bound","","",26,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"bind","","",26,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"local_addr","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"try_clone","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"send_to","","",26,null],[11,"recv_from","","",26,null],[11,"set_broadcast","","",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","",26,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","",26,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_time_to_live","","",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"register","","",26,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",26,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",26,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",26,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",26,{"inputs":[{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[11,"fmt","mio::unix","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stream","","Returns a new, unbound, non-blocking Unix domain socket",27,{"inputs":[],"output":{"generics":["unixsocket"],"name":"result"}}],[11,"connect","","Connect the socket to the specified address",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"bind","","Bind the socket to the specified address",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"listen","","Listen for incoming requests",27,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["unixlistener"],"name":"result"}}],[11,"try_clone","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["unixsocket"],"name":"result"}}],[11,"register","","",27,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",27,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",27,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","",28,{"inputs":[{"name":"p"}],"output":{"generics":["unixstream"],"name":"result"}}],[11,"try_clone","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["unixstream"],"name":"result"}}],[11,"read_recv_fd","","",28,null],[11,"try_read_recv_fd","","",28,null],[11,"try_read_buf_recv_fd","","",28,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["option"],"name":"result"}}],[11,"write_send_fd","","",28,null],[11,"try_write_send_fd","","",28,null],[11,"try_write_buf_send_fd","","",28,{"inputs":[{"name":"self"},{"name":"b"},{"name":"rawfd"}],"output":{"generics":["option"],"name":"result"}}],[11,"read","","",28,null],[11,"write","","",28,null],[11,"flush","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",28,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",28,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",28,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",29,{"inputs":[{"name":"p"}],"output":{"generics":["unixlistener"],"name":"result"}}],[11,"accept","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"try_clone","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["unixlistener"],"name":"result"}}],[11,"register","","",29,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",29,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",29,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",30,null],[11,"register","","",30,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",30,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",30,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"io"}],"output":{"name":"pipereader"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",31,null],[11,"flush","","",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",31,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",31,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",31,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"io"}],"output":{"name":"pipewriter"}}],[11,"as_raw_fd","","",27,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",27,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixsocket"}}],[11,"as_raw_fd","","",28,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",28,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixstream"}}],[11,"as_raw_fd","","",29,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",29,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixlistener"}}],[11,"as_raw_fd","","",30,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",30,{"inputs":[{"name":"rawfd"}],"output":{"name":"pipereader"}}],[11,"as_raw_fd","","",31,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",31,{"inputs":[{"name":"rawfd"}],"output":{"name":"pipewriter"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"register","","",17,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",17,{"inputs":[{"name":"self"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",17,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"result"}}]],"paths":[[3,"IoEvent"],[3,"Token"],[4,"IpAddr"],[4,"NotifyError"],[3,"BoundedQueue"],[3,"PollOpt"],[3,"EventSet"],[3,"EventLoopConfig"],[3,"EventLoop"],[3,"Sender"],[3,"Poll"],[3,"Events"],[3,"Selector"],[3,"Io"],[3,"Timeout"],[3,"TimerError"],[4,"Shutdown"],[3,"EventedFd"],[8,"TryRead"],[8,"TryWrite"],[8,"Handler"],[8,"TryAccept"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"UnixSocket"],[3,"UnixStream"],[3,"UnixListener"],[3,"PipeReader"],[3,"PipeWriter"]]};
searchIndex["mio_uds"] = {"doc":"MIO bindings for Unix Domain Sockets","items":[[3,"UnixStream","mio_uds","A Unix stream socket.",null,null],[3,"UnixListener","","A structure representing a Unix domain socket server.",null,null],[3,"UnixDatagram","","A Unix datagram socket.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a Unix datagram socket bound to the given path.",0,{"inputs":[{"name":"p"}],"output":{"generics":["unixdatagram"],"name":"result"}}],[11,"from_datagram","","Consumes a standard library `UnixDatagram` and returns a wrapped `UnixDatagram` compatible with mio.",0,{"inputs":[{"name":"unixdatagram"}],"output":{"generics":["unixdatagram"],"name":"result"}}],[11,"pair","","Create an unnamed pair of connected sockets.",0,{"inputs":[],"output":{"name":"result"}}],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any address.",0,{"inputs":[],"output":{"generics":["unixdatagram"],"name":"result"}}],[11,"connect","","Connects the socket to the specified address.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["unixdatagram"],"name":"result"}}],[11,"local_addr","","Returns the address of this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"peer_addr","","Returns the address of this socket's peer.",0,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"recv_from","","Receives data from the socket.",0,null],[11,"recv","","Receives data from the socket.",0,null],[11,"send_to","","Sends data on the socket to the specified address.",0,null],[11,"send","","Sends data on the socket to the socket's peer.",0,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",0,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",0,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"register","","",0,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",0,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",0,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",0,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",0,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"unixdatagram"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `UnixListener` bound to the specified socket.",1,{"inputs":[{"name":"p"}],"output":{"generics":["unixlistener"],"name":"result"}}],[11,"from_listener","","Consumes a standard library `UnixListener` and returns a wrapped `UnixListener` compatible with mio.",1,{"inputs":[{"name":"unixlistener"}],"output":{"generics":["unixlistener"],"name":"result"}}],[11,"accept","","Accepts a new incoming connection to this listener.",1,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"accept_std","","Accepts a new incoming connection to this listener.",1,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["unixlistener"],"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",1,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",1,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"register","","",1,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",1,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",1,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",1,{"inputs":[{"name":"i32"}],"output":{"name":"unixlistener"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Connects to the socket named by `path`.",2,{"inputs":[{"name":"p"}],"output":{"generics":["unixstream"],"name":"result"}}],[11,"from_stream","","Consumes a standard library `UnixStream` and returns a wrapped `UnixStream` compatible with mio.",2,{"inputs":[{"name":"unixstream"}],"output":{"generics":["unixstream"],"name":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",2,{"inputs":[],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["unixstream"],"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this connection.",2,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",2,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",2,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",2,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"read_bufs","","Read in a list of buffers all at once.",2,null],[11,"write_bufs","","Write a list of buffers all at once.",2,null],[11,"register","","",2,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",2,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",2,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"read","","",2,null],[11,"write","","",2,null],[11,"flush","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",2,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",2,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",2,{"inputs":[{"name":"i32"}],"output":{"name":"unixstream"}}]],"paths":[[3,"UnixDatagram"],[3,"UnixListener"],[3,"UnixStream"]]};
searchIndex["miow"] = {"doc":"","items":[],"paths":[]};
searchIndex["multipart"] = {"doc":"Client- and server-side abstractions for HTTP `multipart/form-data` requests.","items":[[0,"mock","multipart","Mocked types for client-side and server-side APIs.",null,null],[3,"ClientRequest","multipart::mock","A mock implementation of `client::HttpRequest` which can spawn an `HttpBuffer`.",null,null],[3,"HttpBuffer","","A writable buffer which stores the boundary and content-length, if provided.",null,null],[12,"buf","","The buffer containing the raw bytes.",0,null],[12,"boundary","","The multipart boundary.",0,null],[12,"content_len","","The value of the content-length header, if set.",0,null],[3,"ServerRequest","","A mock implementation of `server::HttpRequest` that can be read.",null,null],[12,"data","","Slice of the source `HttpBuffer::buf`",1,null],[12,"boundary","","The multipart boundary.",1,null],[12,"content_len","","The value of the content-length header, if set.",1,null],[3,"StdoutTee","","A `Write` adapter that duplicates all data written to the inner writer as well as stdout.",null,null],[3,"PanicLogger","","Struct that logs if the thread panics before it is dropped.",null,null],[5,"log_on_panic","","Capture all logging on this thread during `PanicLogger`'s lifetime.",null,{"inputs":[],"output":{"name":"paniclogger"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"clientrequest"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_empty","","Create an empty buffer with the given boundary and optional content-length.",0,{"inputs":[{"name":"string"},{"generics":["u64"],"name":"option"}],"output":{"name":"httpbuffer"}}],[11,"with_buf","","Wrap the given buffer with the given boundary and optional content-length.",0,{"inputs":[{"generics":["u8"],"name":"vec"},{"name":"string"},{"generics":["u64"],"name":"option"}],"output":{"name":"self"}}],[11,"for_server","","Get a `ServerRequest` wrapping the data in this buffer.",0,{"inputs":[{"name":"self"}],"output":{"name":"serverrequest"}}],[11,"write","","To simulate a network connection, this will copy a random number of bytes from `buf` to the buffer.",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ServerRequest` with the given data and boundary.",1,null],[11,"read","","To simulate a network connection, this will copy a random number of bytes from the buffer to `out`.",1,null],[11,"multipart_boundary","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"body","","",1,null],[11,"new","","Constructor",3,{"inputs":[{"name":"w"},{"name":"stdout"}],"output":{"name":"self"}}],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clear","","Clear the buffered logs",4,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[0,"server","multipart","The server-side abstraction for multipart requests. Enabled with the `server` feature.",null,null],[3,"FieldHeaders","multipart::server","The headers that (may) appear before a `multipart/form-data` field.",null,null],[12,"name","","The field's name from the form.",5,null],[12,"filename","","The filename of this entry, if supplied. This is not guaranteed to match the original file or even to be a valid filename for the current platform.",5,null],[12,"content_type","","The MIME type (`Content-Type` value) of this file, if supplied by the client.",5,null],[3,"MultipartField","","A field in a multipart request with its associated headers and data.",null,null],[12,"headers","","The headers for this field, including the name, filename, and content-type, if provided.",6,null],[12,"data","","The field's data.",6,null],[3,"MultipartData","","The data of a field in a `multipart/form-data` request.",null,null],[3,"Multipart","","The server-side implementation of `multipart/form-data` requests.",null,null],[4,"ReadEntryResult","","Ternary result type returned by `ReadEntry::next_entry()`, `Multipart::into_entry()` and `MultipartField::next_entry()`.",null,null],[13,"Entry","","The next entry was found.",7,null],[13,"End","","No  more entries could be read.",7,null],[13,"Error","","An error occurred.",7,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fieldheaders"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_text","","Returns `true` if this field has no content-type or the content-type is `text/...`.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_entry","","Read the next entry in the request.",6,{"inputs":[{"name":"self"}],"output":{"name":"readentryresult"}}],[11,"next_entry_inplace","","Update `self` as the next entry.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"save","","Get a builder type which can save the field with or without a size limit.",8,{"inputs":[{"name":"self"}],"output":{"name":"savebuilder"}}],[11,"into_inner","","Take the inner `Multipart` or `&mut Multipart`",8,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[11,"set_min_buf_size","","Set the minimum buffer size that `BufRead::fill_buf(self)` will return until the end of the stream is reached. Set this as small as you can tolerate to minimize `read()` calls (`read()` won't be called again until the buffer is smaller than this).",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"read","","",8,null],[11,"fill_buf","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"into_result","","Convert `self` into `Result<Option<Entry>>` as follows:",7,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"unwrap","","Attempt to unwrap `Entry`, panicking if this is `End` or `Error`.",7,{"inputs":[{"name":"self"}],"output":{"name":"entry"}}],[11,"expect","","Attempt to unwrap `Entry`, panicking if this is `End` or `Error` with the given message. Adds the error's message in the `Error` case.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"entry"}}],[11,"expect_alt","","Attempt to unwrap `Entry`, panicking if this is `End` or `Error`. If this is `End`, panics with `end_msg`; if `Error`, panics with `err_msg` as well as the error's message.",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"entry"}}],[11,"unwrap_opt","","Attempt to unwrap as `Option<Entry>`, panicking in the `Error` case.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"expect_opt","","Attempt to unwrap as `Option<Entry>`, panicking in the `Error` case with the given message as well as the error's message.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[0,"save","","Utilities for saving request entries to the filesystem.",null,null],[3,"BufReader","multipart::server::save","A drop-in replacement for `std::io::BufReader` with more functionality.",null,null],[3,"TempDir","","A directory in the filesystem that is automatically deleted when it goes out of scope.",null,null],[3,"SaveBuilder","","A builder for saving a file or files to the local filesystem.",null,null],[3,"SavedField","","A field that has been saved (to memory or disk) from a multipart request.",null,null],[12,"headers","","The headers of the field that was saved.",9,null],[12,"data","","The data of the field which may reside in memory or on disk.",9,null],[3,"Entries","","A result of `Multipart::save()`.",null,null],[12,"fields","","The fields of the multipart request, mapped by field name -> value.",10,null],[12,"save_dir","","The directory that the entries in `fields` were saved into.",10,null],[3,"PartialSavedField","","The field that was being read when the save operation quit.",null,null],[12,"source","","The field that was being read.",11,null],[12,"dest","","The data from the saving operation, if it got that far.",11,null],[3,"PartialEntries","","The partial result type for `Multipart::save*()`.",null,null],[12,"entries","","The entries that were saved successfully.",12,null],[12,"partial","","The field that was in the process of being read. `None` if the error occurred between entries.",12,null],[4,"SavedData","","A saved field's data container (in memory or on disk)",null,null],[13,"Text","","Validated UTF-8 text data.",13,null],[13,"Bytes","","Binary data.",13,null],[13,"File","","A path to a file on the filesystem and its size as written by `multipart`.",13,null],[4,"DataReader","","A `Read` (and `BufRead`) adapter for `SavedData`",null,null],[13,"Bytes","","In-memory data source (`SavedData::Bytes | Text`)",14,null],[13,"File","","On-disk data source (`SavedData::File`)",14,null],[4,"SaveDir","","The save directory for `Entries`. May be temporary (delete-on-drop) or permanent.",null,null],[13,"Temp","","This directory is temporary and will be deleted, along with its contents, when this wrapper is dropped.",15,null],[13,"Perm","","This directory is permanent and will be left on the filesystem when this wrapper is dropped.",15,null],[4,"PartialReason","","The reason the save operation quit partway through.",null,null],[13,"CountLimit","","The count limit for files in the request was hit.",16,null],[13,"SizeLimit","","The size limit for an individual file was hit.",16,null],[13,"IoError","","An error occurred during the operation.",16,null],[13,"Utf8Error","","An error returned from validating a field as UTF-8 due to `SaveBuilder::force_text()`",16,null],[4,"SaveResult","","The ternary result type used for the `SaveBuilder<_>` API.",null,null],[13,"Full","","The operation was a total success. Contained is the complete result.",17,null],[13,"Partial","","The operation quit partway through. Included is the partial result along with the reason.",17,null],[13,"Error","","An error occurred at the start of the operation, before anything was done.",17,null],[6,"EntriesSaveResult","","Shorthand result for methods that return `Entries`",null,null],[6,"FieldSaveResult","","Shorthand result for methods that return `FieldData`s.",null,null],[11,"size_limit","","Set the maximum number of bytes to write out per file.",18,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"mod_open_opts","","Modify the `OpenOptions` used to open any files for writing.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"memory_threshold","","Set the threshold at which to switch from copying a field into memory to copying it to disk.",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"try_text","","When encountering a field that is apparently text, try to read it to a string or fall back to binary otherwise.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"force_text","","When encountering a field that is apparently text, read it to a string or return an error.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ignore_text","","Don't try to read or validate any field data as UTF-8.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"count_limit","","Set the maximum number of fields to process.",18,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"temp","","Save all fields in the request using a new temporary directory prefixed with `multipart-rs` in the OS temporary directory.",18,{"inputs":[{"name":"self"}],"output":{"name":"entriessaveresult"}}],[11,"temp_with_prefix","","Save all fields in the request using a new temporary directory with the given string as a prefix in the OS temporary directory.",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"entriessaveresult"}}],[11,"with_temp_dir","","Save all fields in the request using the given `TempDir`.",18,{"inputs":[{"name":"self"},{"name":"tempdir"}],"output":{"name":"entriessaveresult"}}],[11,"with_dir","","Save the file fields in the request to a new permanent directory with the given path.",18,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"entriessaveresult"}}],[11,"with_entries","","Commence the save operation using the existing `Entries` instance.",18,{"inputs":[{"name":"self"},{"name":"entries"}],"output":{"name":"entriessaveresult"}}],[11,"temp","","Save the field data, potentially using a file with a random name in the OS temporary directory.",18,{"inputs":[{"name":"self"}],"output":{"name":"fieldsaveresult"}}],[11,"with_filename","","Save the field data, potentially using a file with the given name in the OS temporary directory.",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"fieldsaveresult"}}],[11,"with_dir","","Save the field data, potentially using a file with a random alphanumeric name in the given directory.",18,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"fieldsaveresult"}}],[11,"with_path","","Save the field data, potentially using a file with the given path.",18,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"fieldsaveresult"}}],[11,"write_to","","Write out the field data to `dest`, truncating if a limit was set.",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["u64","u64"],"name":"saveresult"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"readable","","Get an adapter for this data which implements `Read`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["datareader"],"name":"result"}}],[11,"size","","Get the size of the data, in memory or on disk.",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_memory","","Returns `true` if the data is known to be in memory (`Text | Bytes`)",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",13,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",13,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"self"}}],[11,"read","","",14,null],[11,"fill_buf","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Entries` with the given `SaveDir`",10,{"inputs":[{"name":"savedir"}],"output":{"name":"self"}}],[11,"is_empty","","Returns `true` if `fields` is empty, `false` otherwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fields_count","","The number of actual fields contained within this `Entries`.",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"recount_fields","","Sum the number of fields in this `Entries` and then return the updated value.",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"print_debug","","Print all fields and their contents to stdout. Mostly for testing purposes.",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_debug","","Write all fields and their contents to the given output. Mostly for testing purposes.",10,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_path","","Get the path of this directory, either temporary or permanent.",15,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"is_temporary","","Returns `true` if this is a temporary directory which will be deleted on-drop.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_path","","Unwrap the `PathBuf` from `self`; if this is a temporary directory, it will be converted to a permanent one.",15,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"keep","","If this `SaveDir` is temporary, convert it to permanent. This is a no-op if it already is permanent.",15,{"inputs":[{"name":"self"}],"output":null}],[11,"delete","","Delete this directory and its contents, regardless of its permanence.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",16,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",16,{"inputs":[{"name":"utf8error"}],"output":{"name":"self"}}],[11,"unwrap_err","","Return `io::Error` in the `IoError` case or panic otherwise.",16,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"expect_err","","Return `io::Error` in the `IoError` case or panic with the given message otherwise.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"error"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",12,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"keep_partial","","If `partial` is present and contains a `SavedFile` then just add it to the `Entries` instance and return it.",12,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_entries","","Take the `Entries` from `self`, if applicable, and discarding the error, if any.",19,{"inputs":[{"name":"self"}],"output":{"generics":["entries"],"name":"option"}}],[11,"okish","","Convert `self` to `Option<S>`; there may still have been an error.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"map","","Map the `Full` or `Partial` values to a new type, retaining the reason in the `Partial` case.",17,{"inputs":[{"name":"self"},{"name":"map"}],"output":{"name":"saveresult"}}],[11,"into_opt_both","","Decompose `self` to `(Option<S>, Option<io::Error>)`",17,null],[11,"into_result","","Map `self` to an `io::Result`, discarding the error in the `Partial` case.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_result_strict","","Pessimistic version of `into_result()` which will return an error even for the `Partial` case.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"ArcStr","multipart::server","Default typedef for shared strings.",null,null],[8,"ReadEntry","","Common trait for `Multipart` and `&mut Multipart`",null,null],[11,"read_entry","","Attempt to read the next entry in the multipart stream.",20,{"inputs":[{"name":"self"}],"output":{"name":"readentryresult"}}],[11,"read_entry_mut","","Equivalent to `read_entry()` but takes `&mut self`",20,{"inputs":[{"name":"self"}],"output":{"name":"readentryresult"}}],[8,"HttpRequest","","A server-side HTTP request that may or may not be multipart.",null,null],[16,"Body","","The body of this request.",21,null],[10,"multipart_boundary","","Get the boundary string of this request if it is a POST request with the `Content-Type` header set to `multipart/form-data`.",21,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[10,"body","","Return the request body for reading.",21,null],[11,"from_request","","If the given `HttpRequest` is a multipart/form-data POST request, return the request body wrapped in the multipart reader. Otherwise, returns the original request.",22,{"inputs":[{"name":"r"}],"output":{"generics":["multipart"],"name":"result"}}],[11,"with_body","","Construct a new `Multipart` with the given body reader and boundary.",22,{"inputs":[{"name":"r"},{"name":"bnd"}],"output":{"name":"self"}}],[11,"read_entry","","Read the next entry from this multipart request, returning a struct with the field's name and data. See `MultipartField` for more info.",22,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"into_entry","","Read the next entry from this multipart request, returning a struct with the field's name and data. See `MultipartField` for more info.",22,{"inputs":[{"name":"self"}],"output":{"name":"readentryresult"}}],[11,"foreach_entry","","Call `f` for each entry in the multipart request.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"save","","Get a builder type for saving the files in this request to the filesystem.",22,{"inputs":[{"name":"self"}],"output":{"name":"savebuilder"}}],[11,"borrow","","",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[14,"chain_result","multipart","Chain a series of results together, with or without previous results.",null,null],[11,"read_entry","multipart::server","Attempt to read the next entry in the multipart stream.",20,{"inputs":[{"name":"self"}],"output":{"name":"readentryresult"}}],[11,"read_entry_mut","","Equivalent to `read_entry()` but takes `&mut self`",20,{"inputs":[{"name":"self"}],"output":{"name":"readentryresult"}}],[11,"new","multipart::server::save","Create a new `BufReader` wrapping `inner`, with a buffer of a default capacity and the default strategies.",23,{"inputs":[{"name":"r"}],"output":{"generics":["ifempty","atendlessthan1k"],"name":"bufreader"}}],[11,"with_capacity","","Create a new `BufReader` wrapping `inner` with a capacity of at least `cap` bytes and the default strategies.",23,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"generics":["ifempty","atendlessthan1k"],"name":"bufreader"}}],[11,"with_strategies","","Create a new `BufReader` wrapping `inner`, with a default buffer capacity and with the given `ReadStrategy` and `MoveStrategy`.",23,{"inputs":[{"name":"r"},{"name":"rs"},{"name":"ms"}],"output":{"name":"bufreader"}}],[11,"with_cap_and_strategies","","Create a new `BufReader` wrapping `inner`, with a buffer capacity of at least `cap` bytes and the given `ReadStrategy` and `MoveStrategy`.",23,{"inputs":[{"name":"r"},{"name":"usize"},{"name":"rs"},{"name":"ms"}],"output":{"name":"bufreader"}}],[11,"move_strategy","","Apply a new `MoveStrategy` to this `BufReader`, returning the transformed type.",23,{"inputs":[{"name":"self"},{"name":"ms_"}],"output":{"name":"bufreader"}}],[11,"read_strategy","","Apply a new `ReadStrategy` to this `BufReader`, returning the transformed type.",23,{"inputs":[{"name":"self"},{"name":"rs_"}],"output":{"name":"bufreader"}}],[11,"move_strategy_mut","","Accessor for updating the `MoveStrategy` in-place.",23,{"inputs":[{"name":"self"}],"output":{"name":"ms"}}],[11,"read_strategy_mut","","Accessor for updating the `ReadStrategy` in-place.",23,{"inputs":[{"name":"self"}],"output":{"name":"rs"}}],[11,"make_room","","Move data to the start of the buffer, making room at the end for more  reading.",23,null],[11,"grow","","Grow the internal buffer by at least `additional` bytes. May not be quite exact due to implementation details of the buffer's allocator.",23,null],[11,"get_buf","","Get the section of the buffer containing valid data; may be empty.",23,null],[11,"available","","Get the current number of bytes available in the buffer.",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Get the total buffer capacity.",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_ref","","Get an immutable reference to the underlying reader.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Get a mutable reference to the underlying reader.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consume `self` and return the inner reader only.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner_with_buf","","Consume `self` and return both the underlying reader and the buffer, with the data moved to the beginning and the length truncated to contain only valid data.",23,null],[11,"unbuffer","","Consume `self` and return an adapter which implements `Read` and will empty the buffer before reading directly from the underlying reader.",23,{"inputs":[{"name":"self"}],"output":{"name":"unbuffer"}}],[11,"read_into_buf","","Unconditionally perform a read into the buffer, calling `.make_room()` if appropriate or necessary, as determined by the implementation.",23,{"inputs":[{"name":"self"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"boxed","","Box the inner reader without losing data.",23,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"bufreader"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","",24,null],[11,"as_ref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","",23,null],[11,"fill_buf","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"consume","","",23,null],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",23,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64","error"],"name":"result"}}],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose name will have the prefix, `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",24,{"inputs":[{"name":"str"}],"output":{"generics":["tempdir","error"],"name":"result"}}],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name will have the prefix `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",24,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"generics":["tempdir","error"],"name":"result"}}],[11,"path","","Accesses the [`Path`] to the temporary directory.",24,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_path","","Unwraps the [`Path`] contained in the `TempDir` and returns it. This destroys the `TempDir` without deleting the directory represented by the returned `Path`.",24,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"close","","Closes and removes the temporary directory, returing a `Result`.",24,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[3,"HttpBuffer"],[3,"ServerRequest"],[3,"ClientRequest"],[3,"StdoutTee"],[3,"PanicLogger"],[3,"FieldHeaders"],[3,"MultipartField"],[4,"ReadEntryResult"],[3,"MultipartData"],[3,"SavedField"],[3,"Entries"],[3,"PartialSavedField"],[3,"PartialEntries"],[4,"SavedData"],[4,"DataReader"],[4,"SaveDir"],[4,"PartialReason"],[4,"SaveResult"],[3,"SaveBuilder"],[6,"EntriesSaveResult"],[8,"ReadEntry"],[8,"HttpRequest"],[3,"Multipart"],[3,"BufReader"],[3,"TempDir"]]};
searchIndex["net2"] = {"doc":"Extensions to `std::net` networking types.","items":[[3,"TcpBuilder","net2","An \"in progress\" TCP socket which has not yet been connected or listened.",null,null],[3,"UdpBuilder","","An \"in progress\" UDP socket which has not yet been connected.",null,null],[11,"new_v4","","Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,{"inputs":[],"output":{"generics":["tcpbuilder"],"name":"result"}}],[11,"new_v6","","Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,{"inputs":[],"output":{"generics":["tcpbuilder"],"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["tcpbuilder"],"name":"result"}}],[11,"listen","","Mark a socket as ready to accept incoming connection requests using accept()",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"connect","","Initiate a connection on this socket to the specified address.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"to_tcp_stream","","Converts this builder into a `TcpStream`",0,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"to_tcp_listener","","Converts this builder into a `TcpListener`",0,{"inputs":[{"name":"self"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"local_addr","","Returns the address of the local half of this TCP socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,{"inputs":[],"output":{"generics":["udpbuilder"],"name":"result"}}],[11,"new_v6","","Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,{"inputs":[],"output":{"generics":["udpbuilder"],"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"from_raw_fd","","",0,{"inputs":[{"name":"c_int"}],"output":{"name":"tcpbuilder"}}],[11,"as_raw_fd","","",0,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_raw_fd","","",1,{"inputs":[{"name":"c_int"}],"output":{"name":"udpbuilder"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[0,"unix","","Unix-specific extensions to the `std::net` types.",null,null],[8,"UnixTcpBuilderExt","net2::unix","Unix-specific extensions for the `TcpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[8,"UnixUdpBuilderExt","","Unix-specific extensions for the `UdpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",3,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"reuse_port","net2","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_port","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"reuse_port","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_port","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[8,"TcpStreamExt","","Extension methods for the standard [`TcpStream` type][link] in `std::net`.",null,null],[10,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",4,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"connect","","Executes a `connect` operation on this socket, establishing a connection to the host specified by `addr`.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[8,"TcpListenerExt","","Extension methods for the standard [`TcpListener` type][link] in `std::net`.",null,null],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_nonblocking","","Moves this TCP listener into or out of nonblocking mode.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",5,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",5,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[8,"UdpSocketExt","","Extension methods for the standard [`UdpSocket` type][link] in `std::net`.",null,null],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_multicast_hops_v6","","Sets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"multicast_hops_v6","","Gets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"set_multicast_if_v4","","Sets the value of the `IP_MULTICAST_IF` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"multicast_if_v4","","Gets the value of the `IP_MULTICAST_IF` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["ipv4addr"],"name":"result"}}],[10,"set_multicast_if_v6","","Sets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"multicast_if_v6","","Gets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_unicast_hops_v6","","Sets the value for the `IPV6_UNICAST_HOPS` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"unicast_hops_v6","","Gets the value of the `IPV6_UNICAST_HOPS` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[10,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"connect","","Connects this UDP socket to a remote address, allowing the `send` and `recv` syscalls to be used to send data and also applies filters to only receive data from the specified address.",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[10,"send","","Sends data on the socket to the remote address to which it is connected.",6,null],[10,"recv","","Receives data on the socket from the remote address to which it is connected.",6,null],[10,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}]],"paths":[[3,"TcpBuilder"],[3,"UdpBuilder"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UdpSocketExt"]]};
searchIndex["nix"] = {"doc":"Rust friendly bindings to the various *nix system functions.","items":[[6,"c_int","nix","",null,null],[4,"c_void","","",null,null],[4,"Errno","","",null,null],[13,"UnknownErrno","","",0,null],[13,"EPERM","","",0,null],[13,"ENOENT","","",0,null],[13,"ESRCH","","",0,null],[13,"EINTR","","",0,null],[13,"EIO","","",0,null],[13,"ENXIO","","",0,null],[13,"E2BIG","","",0,null],[13,"ENOEXEC","","",0,null],[13,"EBADF","","",0,null],[13,"ECHILD","","",0,null],[13,"EAGAIN","","",0,null],[13,"ENOMEM","","",0,null],[13,"EACCES","","",0,null],[13,"EFAULT","","",0,null],[13,"ENOTBLK","","",0,null],[13,"EBUSY","","",0,null],[13,"EEXIST","","",0,null],[13,"EXDEV","","",0,null],[13,"ENODEV","","",0,null],[13,"ENOTDIR","","",0,null],[13,"EISDIR","","",0,null],[13,"EINVAL","","",0,null],[13,"ENFILE","","",0,null],[13,"EMFILE","","",0,null],[13,"ENOTTY","","",0,null],[13,"ETXTBSY","","",0,null],[13,"EFBIG","","",0,null],[13,"ENOSPC","","",0,null],[13,"ESPIPE","","",0,null],[13,"EROFS","","",0,null],[13,"EMLINK","","",0,null],[13,"EPIPE","","",0,null],[13,"EDOM","","",0,null],[13,"ERANGE","","",0,null],[13,"EDEADLK","","",0,null],[13,"ENAMETOOLONG","","",0,null],[13,"ENOLCK","","",0,null],[13,"ENOSYS","","",0,null],[13,"ENOTEMPTY","","",0,null],[13,"ELOOP","","",0,null],[13,"ENOMSG","","",0,null],[13,"EIDRM","","",0,null],[13,"ECHRNG","","",0,null],[13,"EL2NSYNC","","",0,null],[13,"EL3HLT","","",0,null],[13,"EL3RST","","",0,null],[13,"ELNRNG","","",0,null],[13,"EUNATCH","","",0,null],[13,"ENOCSI","","",0,null],[13,"EL2HLT","","",0,null],[13,"EBADE","","",0,null],[13,"EBADR","","",0,null],[13,"EXFULL","","",0,null],[13,"ENOANO","","",0,null],[13,"EBADRQC","","",0,null],[13,"EBADSLT","","",0,null],[13,"EBFONT","","",0,null],[13,"ENOSTR","","",0,null],[13,"ENODATA","","",0,null],[13,"ETIME","","",0,null],[13,"ENOSR","","",0,null],[13,"ENONET","","",0,null],[13,"ENOPKG","","",0,null],[13,"EREMOTE","","",0,null],[13,"ENOLINK","","",0,null],[13,"EADV","","",0,null],[13,"ESRMNT","","",0,null],[13,"ECOMM","","",0,null],[13,"EPROTO","","",0,null],[13,"EMULTIHOP","","",0,null],[13,"EDOTDOT","","",0,null],[13,"EBADMSG","","",0,null],[13,"EOVERFLOW","","",0,null],[13,"ENOTUNIQ","","",0,null],[13,"EBADFD","","",0,null],[13,"EREMCHG","","",0,null],[13,"ELIBACC","","",0,null],[13,"ELIBBAD","","",0,null],[13,"ELIBSCN","","",0,null],[13,"ELIBMAX","","",0,null],[13,"ELIBEXEC","","",0,null],[13,"EILSEQ","","",0,null],[13,"ERESTART","","",0,null],[13,"ESTRPIPE","","",0,null],[13,"EUSERS","","",0,null],[13,"ENOTSOCK","","",0,null],[13,"EDESTADDRREQ","","",0,null],[13,"EMSGSIZE","","",0,null],[13,"EPROTOTYPE","","",0,null],[13,"ENOPROTOOPT","","",0,null],[13,"EPROTONOSUPPORT","","",0,null],[13,"ESOCKTNOSUPPORT","","",0,null],[13,"EOPNOTSUPP","","",0,null],[13,"EPFNOSUPPORT","","",0,null],[13,"EAFNOSUPPORT","","",0,null],[13,"EADDRINUSE","","",0,null],[13,"EADDRNOTAVAIL","","",0,null],[13,"ENETDOWN","","",0,null],[13,"ENETUNREACH","","",0,null],[13,"ENETRESET","","",0,null],[13,"ECONNABORTED","","",0,null],[13,"ECONNRESET","","",0,null],[13,"ENOBUFS","","",0,null],[13,"EISCONN","","",0,null],[13,"ENOTCONN","","",0,null],[13,"ESHUTDOWN","","",0,null],[13,"ETOOMANYREFS","","",0,null],[13,"ETIMEDOUT","","",0,null],[13,"ECONNREFUSED","","",0,null],[13,"EHOSTDOWN","","",0,null],[13,"EHOSTUNREACH","","",0,null],[13,"EALREADY","","",0,null],[13,"EINPROGRESS","","",0,null],[13,"ESTALE","","",0,null],[13,"EUCLEAN","","",0,null],[13,"ENOTNAM","","",0,null],[13,"ENAVAIL","","",0,null],[13,"EISNAM","","",0,null],[13,"EREMOTEIO","","",0,null],[13,"EDQUOT","","",0,null],[13,"ENOMEDIUM","","",0,null],[13,"EMEDIUMTYPE","","",0,null],[13,"ECANCELED","","",0,null],[13,"ENOKEY","","",0,null],[13,"EKEYEXPIRED","","",0,null],[13,"EKEYREVOKED","","",0,null],[13,"EKEYREJECTED","","",0,null],[13,"EOWNERDEAD","","",0,null],[13,"ENOTRECOVERABLE","","",0,null],[13,"ERFKILL","","",0,null],[13,"EHWPOISON","","",0,null],[4,"Error","","",null,null],[13,"Sys","","",1,null],[13,"InvalidPath","","",1,null],[0,"errno","","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",0,null],[13,"EPERM","","",0,null],[13,"ENOENT","","",0,null],[13,"ESRCH","","",0,null],[13,"EINTR","","",0,null],[13,"EIO","","",0,null],[13,"ENXIO","","",0,null],[13,"E2BIG","","",0,null],[13,"ENOEXEC","","",0,null],[13,"EBADF","","",0,null],[13,"ECHILD","","",0,null],[13,"EAGAIN","","",0,null],[13,"ENOMEM","","",0,null],[13,"EACCES","","",0,null],[13,"EFAULT","","",0,null],[13,"ENOTBLK","","",0,null],[13,"EBUSY","","",0,null],[13,"EEXIST","","",0,null],[13,"EXDEV","","",0,null],[13,"ENODEV","","",0,null],[13,"ENOTDIR","","",0,null],[13,"EISDIR","","",0,null],[13,"EINVAL","","",0,null],[13,"ENFILE","","",0,null],[13,"EMFILE","","",0,null],[13,"ENOTTY","","",0,null],[13,"ETXTBSY","","",0,null],[13,"EFBIG","","",0,null],[13,"ENOSPC","","",0,null],[13,"ESPIPE","","",0,null],[13,"EROFS","","",0,null],[13,"EMLINK","","",0,null],[13,"EPIPE","","",0,null],[13,"EDOM","","",0,null],[13,"ERANGE","","",0,null],[13,"EDEADLK","","",0,null],[13,"ENAMETOOLONG","","",0,null],[13,"ENOLCK","","",0,null],[13,"ENOSYS","","",0,null],[13,"ENOTEMPTY","","",0,null],[13,"ELOOP","","",0,null],[13,"ENOMSG","","",0,null],[13,"EIDRM","","",0,null],[13,"ECHRNG","","",0,null],[13,"EL2NSYNC","","",0,null],[13,"EL3HLT","","",0,null],[13,"EL3RST","","",0,null],[13,"ELNRNG","","",0,null],[13,"EUNATCH","","",0,null],[13,"ENOCSI","","",0,null],[13,"EL2HLT","","",0,null],[13,"EBADE","","",0,null],[13,"EBADR","","",0,null],[13,"EXFULL","","",0,null],[13,"ENOANO","","",0,null],[13,"EBADRQC","","",0,null],[13,"EBADSLT","","",0,null],[13,"EBFONT","","",0,null],[13,"ENOSTR","","",0,null],[13,"ENODATA","","",0,null],[13,"ETIME","","",0,null],[13,"ENOSR","","",0,null],[13,"ENONET","","",0,null],[13,"ENOPKG","","",0,null],[13,"EREMOTE","","",0,null],[13,"ENOLINK","","",0,null],[13,"EADV","","",0,null],[13,"ESRMNT","","",0,null],[13,"ECOMM","","",0,null],[13,"EPROTO","","",0,null],[13,"EMULTIHOP","","",0,null],[13,"EDOTDOT","","",0,null],[13,"EBADMSG","","",0,null],[13,"EOVERFLOW","","",0,null],[13,"ENOTUNIQ","","",0,null],[13,"EBADFD","","",0,null],[13,"EREMCHG","","",0,null],[13,"ELIBACC","","",0,null],[13,"ELIBBAD","","",0,null],[13,"ELIBSCN","","",0,null],[13,"ELIBMAX","","",0,null],[13,"ELIBEXEC","","",0,null],[13,"EILSEQ","","",0,null],[13,"ERESTART","","",0,null],[13,"ESTRPIPE","","",0,null],[13,"EUSERS","","",0,null],[13,"ENOTSOCK","","",0,null],[13,"EDESTADDRREQ","","",0,null],[13,"EMSGSIZE","","",0,null],[13,"EPROTOTYPE","","",0,null],[13,"ENOPROTOOPT","","",0,null],[13,"EPROTONOSUPPORT","","",0,null],[13,"ESOCKTNOSUPPORT","","",0,null],[13,"EOPNOTSUPP","","",0,null],[13,"EPFNOSUPPORT","","",0,null],[13,"EAFNOSUPPORT","","",0,null],[13,"EADDRINUSE","","",0,null],[13,"EADDRNOTAVAIL","","",0,null],[13,"ENETDOWN","","",0,null],[13,"ENETUNREACH","","",0,null],[13,"ENETRESET","","",0,null],[13,"ECONNABORTED","","",0,null],[13,"ECONNRESET","","",0,null],[13,"ENOBUFS","","",0,null],[13,"EISCONN","","",0,null],[13,"ENOTCONN","","",0,null],[13,"ESHUTDOWN","","",0,null],[13,"ETOOMANYREFS","","",0,null],[13,"ETIMEDOUT","","",0,null],[13,"ECONNREFUSED","","",0,null],[13,"EHOSTDOWN","","",0,null],[13,"EHOSTUNREACH","","",0,null],[13,"EALREADY","","",0,null],[13,"EINPROGRESS","","",0,null],[13,"ESTALE","","",0,null],[13,"EUCLEAN","","",0,null],[13,"ENOTNAM","","",0,null],[13,"ENAVAIL","","",0,null],[13,"EISNAM","","",0,null],[13,"EREMOTEIO","","",0,null],[13,"EDQUOT","","",0,null],[13,"ENOMEDIUM","","",0,null],[13,"EMEDIUMTYPE","","",0,null],[13,"ECANCELED","","",0,null],[13,"ENOKEY","","",0,null],[13,"EKEYEXPIRED","","",0,null],[13,"EKEYREVOKED","","",0,null],[13,"EKEYREJECTED","","",0,null],[13,"EOWNERDEAD","","",0,null],[13,"ENOTRECOVERABLE","","",0,null],[13,"ERFKILL","","",0,null],[13,"EHWPOISON","","",0,null],[5,"from_i32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[5,"errno","","Returns the platform-specific value of errno",null,{"inputs":[],"output":{"name":"i32"}}],[11,"fmt","nix","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"errno"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"errno"}],"output":{"name":"bool"}}],[17,"EWOULDBLOCK","nix::errno","",null,null],[17,"EDEADLOCK","","",null,null],[8,"ErrnoSentinel","","The sentinel value indicates that a function failed and more detailed information about the error can be found in `errno`",null,null],[10,"sentinel","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"last","nix","",0,{"inputs":[],"output":{"name":"self"}}],[11,"desc","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_i32","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[11,"clear","","",0,null],[11,"result","","Returns `Ok(value)` if it does not contain the sentinel value. This should not be used when `-1` is not the errno sentinel value.",0,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"features","","",null,null],[5,"socket_atomic_cloexec","nix::features","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"fcntl","nix","",null,null],[3,"SpliceFFlags","nix::fcntl","",null,null],[3,"OFlag","","",null,null],[3,"FdFlag","","",null,null],[3,"SealFlag","","",null,null],[3,"flock","","",null,null],[12,"l_type","","",3,null],[12,"l_whence","","",3,null],[12,"l_start","","",3,null],[12,"l_len","","",3,null],[12,"l_pid","","",3,null],[12,"l_sysid","","",3,null],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",4,null],[13,"F_DUPFD_CLOEXEC","","",4,null],[13,"F_GETFD","","",4,null],[13,"F_SETFD","","",4,null],[13,"F_GETFL","","",4,null],[13,"F_SETFL","","",4,null],[13,"F_SETLK","","",4,null],[13,"F_SETLKW","","",4,null],[13,"F_GETLK","","",4,null],[13,"F_OFD_SETLK","","",4,null],[13,"F_OFD_SETLKW","","",4,null],[13,"F_OFD_GETLK","","",4,null],[13,"F_ADD_SEALS","","",4,null],[13,"F_GET_SEALS","","",4,null],[4,"FlockArg","","",null,null],[13,"LockShared","","",5,null],[13,"LockExclusive","","",5,null],[13,"Unlock","","",5,null],[13,"LockSharedNonblock","","",5,null],[13,"LockExclusiveNonblock","","",5,null],[13,"UnlockNonblock","","",5,null],[5,"open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"fcntl","","",null,{"inputs":[{"name":"rawfd"},{"name":"fcntlarg"}],"output":{"generics":["c_int"],"name":"result"}}],[5,"flock","","",null,{"inputs":[{"name":"rawfd"},{"name":"flockarg"}],"output":{"name":"result"}}],[5,"splice","","",null,{"inputs":[{"name":"rawfd"},{"generics":["loff_t"],"name":"option"},{"name":"rawfd"},{"generics":["loff_t"],"name":"option"},{"name":"usize"},{"name":"splicefflags"}],"output":{"generics":["usize"],"name":"result"}}],[5,"tee","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"usize"},{"name":"splicefflags"}],"output":{"generics":["usize"],"name":"result"}}],[5,"vmsplice","","",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"flock"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"splicefflags"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"ordering"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",6,{"inputs":[],"output":{"name":"splicefflags"}}],[11,"all","","Returns the set containing all flags.",6,{"inputs":[],"output":{"name":"splicefflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",6,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",6,{"inputs":[{"name":"c_uint"}],"output":{"generics":["splicefflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",6,{"inputs":[{"name":"c_uint"}],"output":{"name":"splicefflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"splicefflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"splicefflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"splicefflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"splicefflags"}}],[11,"not","","Returns the complement of this set of flags.",6,{"inputs":[{"name":"self"}],"output":{"name":"splicefflags"}}],[11,"from_iter","","",6,{"inputs":[{"name":"t"}],"output":{"name":"splicefflags"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"oflag"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"ordering"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",7,{"inputs":[],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",7,{"inputs":[],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",7,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",7,{"inputs":[{"name":"c_int"}],"output":{"generics":["oflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",7,{"inputs":[{"name":"c_int"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"not","","Returns the complement of this set of flags.",7,{"inputs":[{"name":"self"}],"output":{"name":"oflag"}}],[11,"from_iter","","",7,{"inputs":[{"name":"t"}],"output":{"name":"oflag"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"fdflag"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",8,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",8,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",8,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",8,{"inputs":[{"name":"c_int"}],"output":{"generics":["fdflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",8,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",8,{"inputs":[{"name":"self"}],"output":{"name":"fdflag"}}],[11,"from_iter","","",8,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"sealflag"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"ordering"}}],[11,"hash","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",9,{"inputs":[],"output":{"name":"sealflag"}}],[11,"all","","Returns the set containing all flags.",9,{"inputs":[],"output":{"name":"sealflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",9,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",9,{"inputs":[{"name":"c_int"}],"output":{"generics":["sealflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",9,{"inputs":[{"name":"c_int"}],"output":{"name":"sealflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"not","","Returns the complement of this set of flags.",9,{"inputs":[{"name":"self"}],"output":{"name":"sealflag"}}],[11,"from_iter","","",9,{"inputs":[{"name":"t"}],"output":{"name":"sealflag"}}],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"O_NDELAY","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[0,"mount","nix","",null,null],[3,"MsFlags","nix::mount","",null,null],[3,"MntFlags","","",null,null],[5,"mount","","",null,{"inputs":[{"name":"option"},{"name":"p2"},{"name":"option"},{"name":"msflags"},{"name":"option"}],"output":{"name":"result"}}],[5,"umount","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"umount2","","",null,{"inputs":[{"name":"p"},{"name":"mntflags"}],"output":{"name":"result"}}],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_VERBOSE","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_NOSEC","","",null,null],[17,"MS_BORN","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"msflags"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"ordering"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",10,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",10,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",10,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",10,{"inputs":[{"name":"c_ulong"}],"output":{"generics":["msflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",10,{"inputs":[{"name":"c_ulong"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"not","","Returns the complement of this set of flags.",10,{"inputs":[{"name":"self"}],"output":{"name":"msflags"}}],[11,"from_iter","","",10,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"mntflags"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"ordering"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",11,{"inputs":[],"output":{"name":"mntflags"}}],[11,"all","","Returns the set containing all flags.",11,{"inputs":[],"output":{"name":"mntflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",11,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",11,{"inputs":[{"name":"c_int"}],"output":{"generics":["mntflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",11,{"inputs":[{"name":"c_int"}],"output":{"name":"mntflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"not","","Returns the complement of this set of flags.",11,{"inputs":[{"name":"self"}],"output":{"name":"mntflags"}}],[11,"from_iter","","",11,{"inputs":[{"name":"t"}],"output":{"name":"mntflags"}}],[0,"mqueue","nix","Posix Message Queue functions",null,null],[3,"MQ_OFlag","nix::mqueue","",null,null],[3,"FdFlag","","",null,null],[3,"MqAttr","","",null,null],[12,"mq_flags","","",12,null],[12,"mq_maxmsg","","",12,null],[12,"mq_msgsize","","",12,null],[12,"mq_curmsgs","","",12,null],[5,"mq_open","","",null,{"inputs":[{"name":"cstring"},{"name":"mq_oflag"},{"name":"mode"},{"generics":["mqattr"],"name":"option"}],"output":{"generics":["mqd"],"name":"result"}}],[5,"mq_unlink","","",null,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[5,"mq_close","","",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,{"inputs":[{"name":"mqd"}],"output":{"generics":["mqattr"],"name":"result"}}],[5,"mq_setattr","","Set the attributes of the message queue. Only O_NONBLOCK can be set, everything else will be ignored Returns the old attributes It is recommend to use the mq_set_nonblock() and mq_remove_nonblock() convenience functions as they are easier to use",null,{"inputs":[{"name":"mqd"},{"name":"mqattr"}],"output":{"generics":["mqattr"],"name":"result"}}],[5,"mq_set_nonblock","","Convenience function. Sets the O_NONBLOCK attribute for a given message queue descriptor Returns the old attributes",null,{"inputs":[{"name":"mqd"}],"output":{"generics":["mqattr"],"name":"result"}}],[5,"mq_remove_nonblock","","Convenience function. Removes O_NONBLOCK attribute for a given message queue descriptor Returns the old attributes",null,{"inputs":[{"name":"mqd"}],"output":{"generics":["mqattr"],"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"mq_oflag"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",13,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"all","","Returns the set containing all flags.",13,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",13,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",13,{"inputs":[{"name":"c_int"}],"output":{"generics":["mq_oflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",13,{"inputs":[{"name":"c_int"}],"output":{"name":"mq_oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"not","","Returns the complement of this set of flags.",13,{"inputs":[{"name":"self"}],"output":{"name":"mq_oflag"}}],[11,"from_iter","","",13,{"inputs":[{"name":"t"}],"output":{"name":"mq_oflag"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fdflag"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",14,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",14,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",14,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",14,{"inputs":[{"name":"c_int"}],"output":{"generics":["fdflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",14,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",14,{"inputs":[{"name":"self"}],"output":{"name":"fdflag"}}],[11,"from_iter","","",14,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[6,"MQd","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"FD_CLOEXEC","","",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"mqattr"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"mqattr"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"mqattr"}],"output":{"name":"bool"}}],[11,"new","","",12,{"inputs":[{"name":"c_long"},{"name":"c_long"},{"name":"c_long"},{"name":"c_long"}],"output":{"name":"mqattr"}}],[0,"poll","nix","",null,null],[3,"PollFd","nix::poll","",null,null],[12,"fd","","",15,null],[12,"events","","",15,null],[12,"revents","","",15,null],[3,"EventFlags","","",null,null],[5,"poll","","",null,null],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"eventflags"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"ordering"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",16,{"inputs":[],"output":{"name":"eventflags"}}],[11,"all","","Returns the set containing all flags.",16,{"inputs":[],"output":{"name":"eventflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",16,{"inputs":[{"name":"self"}],"output":{"name":"c_short"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",16,{"inputs":[{"name":"c_short"}],"output":{"generics":["eventflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",16,{"inputs":[{"name":"c_short"}],"output":{"name":"eventflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"not","","Returns the complement of this set of flags.",16,{"inputs":[{"name":"self"}],"output":{"name":"eventflags"}}],[11,"from_iter","","",16,{"inputs":[{"name":"t"}],"output":{"name":"eventflags"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"nfds_t","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[0,"net","nix","",null,null],[0,"if_","nix::net","Network interface name resolution.",null,null],[5,"if_nametoindex","nix::net::if_","Resolve an interface into a interface number.",null,{"inputs":[{"name":"p"}],"output":{"generics":["c_uint"],"name":"result"}}],[0,"sched","nix","",null,null],[3,"CloneFlags","nix::sched","",null,null],[3,"CpuSet","","",null,null],[5,"sched_setaffinity","","",null,{"inputs":[{"name":"isize"},{"name":"cpuset"}],"output":{"name":"result"}}],[5,"clone","","",null,null],[5,"unshare","","",null,{"inputs":[{"name":"cloneflags"}],"output":{"name":"result"}}],[5,"setns","","",null,{"inputs":[{"name":"rawfd"},{"name":"cloneflags"}],"output":{"name":"result"}}],[6,"CloneCb","","",null,null],[6,"CpuMask","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"cloneflags"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"ordering"}}],[11,"hash","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",17,{"inputs":[],"output":{"name":"cloneflags"}}],[11,"all","","Returns the set containing all flags.",17,{"inputs":[],"output":{"name":"cloneflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",17,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",17,{"inputs":[{"name":"c_int"}],"output":{"generics":["cloneflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",17,{"inputs":[{"name":"c_int"}],"output":{"name":"cloneflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"cloneflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"cloneflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"cloneflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"cloneflags"}}],[11,"not","","Returns the complement of this set of flags.",17,{"inputs":[{"name":"self"}],"output":{"name":"cloneflags"}}],[11,"from_iter","","",17,{"inputs":[{"name":"t"}],"output":{"name":"cloneflags"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"cpuset"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"cpuset"}}],[11,"set","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"unset","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[0,"sys","nix","",null,null],[0,"epoll","nix::sys","",null,null],[3,"EpollEventKind","nix::sys::epoll","",null,null],[3,"EpollEvent","","",null,null],[12,"events","","",19,null],[12,"data","","",19,null],[4,"EpollOp","","",null,null],[13,"EpollCtlAdd","","",20,null],[13,"EpollCtlDel","","",20,null],[13,"EpollCtlMod","","",20,null],[5,"epoll_create","","",null,{"inputs":[],"output":{"generics":["rawfd"],"name":"result"}}],[5,"epoll_ctl","","",null,{"inputs":[{"name":"rawfd"},{"name":"epollop"},{"name":"rawfd"},{"name":"epollevent"}],"output":{"name":"result"}}],[5,"epoll_wait","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"EPOLLET","","",null,null],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"epolleventkind"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"le","","",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"gt","","",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"ge","","",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"cmp","","",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"ordering"}}],[11,"hash","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",21,{"inputs":[],"output":{"name":"epolleventkind"}}],[11,"all","","Returns the set containing all flags.",21,{"inputs":[],"output":{"name":"epolleventkind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",21,{"inputs":[{"name":"u32"}],"output":{"generics":["epolleventkind"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",21,{"inputs":[{"name":"u32"}],"output":{"name":"epolleventkind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"sub","","Returns the set difference of the two sets of flags.",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"not","","Returns the complement of this set of flags.",21,{"inputs":[{"name":"self"}],"output":{"name":"epolleventkind"}}],[11,"from_iter","","",21,{"inputs":[{"name":"t"}],"output":{"name":"epolleventkind"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"epollop"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"epollevent"}}],[0,"memfd","nix::sys","",null,null],[3,"MemFdCreateFlag","nix::sys::memfd","",null,null],[5,"memfd_create","","",null,{"inputs":[{"name":"cstr"},{"name":"memfdcreateflag"}],"output":{"generics":["rawfd"],"name":"result"}}],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"memfdcreateflag"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"le","","",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"gt","","",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"ge","","",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"cmp","","",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"ordering"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",22,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"all","","Returns the set containing all flags.",22,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",22,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",22,{"inputs":[{"name":"c_uint"}],"output":{"generics":["memfdcreateflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",22,{"inputs":[{"name":"c_uint"}],"output":{"name":"memfdcreateflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"not","","Returns the complement of this set of flags.",22,{"inputs":[{"name":"self"}],"output":{"name":"memfdcreateflag"}}],[11,"from_iter","","",22,{"inputs":[{"name":"t"}],"output":{"name":"memfdcreateflag"}}],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls",null,null],[5,"ioc_dir","nix::sys::ioctl","Extracts the \"direction\" (read/write/none) from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[5,"ioc_type","","Extracts the type from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_nr","","Extracts the ioctl number from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_size","","Extracts the size from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[17,"NRBITS","","",null,null],[17,"TYPEBITS","","",null,null],[17,"NONE","","",null,null],[17,"READ","","",null,null],[17,"WRITE","","",null,null],[17,"SIZEBITS","","",null,null],[17,"DIRBITS","","",null,null],[17,"NRSHIFT","","",null,null],[17,"TYPESHIFT","","",null,null],[17,"SIZESHIFT","","",null,null],[17,"DIRSHIFT","","",null,null],[17,"NRMASK","","",null,null],[17,"TYPEMASK","","",null,null],[17,"SIZEMASK","","",null,null],[17,"DIRMASK","","",null,null],[17,"IN","","",null,null],[17,"OUT","","",null,null],[17,"INOUT","","",null,null],[17,"SIZE_MASK","","",null,null],[0,"sendfile","nix::sys","",null,null],[5,"sendfile","nix::sys::sendfile","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"generics":["off_t"],"name":"option"},{"name":"usize"}],"output":{"generics":["usize"],"name":"result"}}],[0,"signal","nix::sys","",null,null],[17,"SIGHUP","nix::sys::signal","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIGIOT","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[3,"SaFlag","","",null,null],[3,"SigFlag","","",null,null],[3,"SigSet","","",null,null],[3,"SigAction","","",null,null],[4,"SigHandler","","",null,null],[13,"SigDfl","","",23,null],[13,"SigIgn","","",23,null],[13,"Handler","","",23,null],[13,"SigAction","","",23,null],[5,"sigaction","","",null,{"inputs":[{"name":"signum"},{"name":"sigaction"}],"output":{"generics":["sigaction"],"name":"result"}}],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the calling thread.",null,{"inputs":[{"name":"sigflag"},{"generics":["sigset"],"name":"option"},{"generics":["sigset"],"name":"option"}],"output":{"name":"result"}}],[5,"kill","","",null,{"inputs":[{"name":"pid_t"},{"name":"signum"}],"output":{"name":"result"}}],[5,"raise","","",null,{"inputs":[{"name":"signum"}],"output":{"name":"result"}}],[6,"SigNum","","",null,null],[17,"SIGEMT","","",null,null],[17,"NSIG","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"SIG_SETMASK","","",null,null],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"saflag"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"le","","",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"gt","","",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"ge","","",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"cmp","","",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"ordering"}}],[11,"hash","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",24,{"inputs":[],"output":{"name":"saflag"}}],[11,"all","","Returns the set containing all flags.",24,{"inputs":[],"output":{"name":"saflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",24,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",24,{"inputs":[{"name":"c_int"}],"output":{"generics":["saflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",24,{"inputs":[{"name":"c_int"}],"output":{"name":"saflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"saflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"saflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"saflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"saflag"}}],[11,"not","","Returns the complement of this set of flags.",24,{"inputs":[{"name":"self"}],"output":{"name":"saflag"}}],[11,"from_iter","","",24,{"inputs":[{"name":"t"}],"output":{"name":"saflag"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"sigflag"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"cmp","","",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"ordering"}}],[11,"hash","","",25,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",25,{"inputs":[],"output":{"name":"sigflag"}}],[11,"all","","Returns the set containing all flags.",25,{"inputs":[],"output":{"name":"sigflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",25,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",25,{"inputs":[{"name":"c_int"}],"output":{"generics":["sigflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",25,{"inputs":[{"name":"c_int"}],"output":{"name":"sigflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"sigflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"sigflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"sigflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"sigflag"}}],[11,"not","","Returns the complement of this set of flags.",25,{"inputs":[{"name":"self"}],"output":{"name":"sigflag"}}],[11,"from_iter","","",25,{"inputs":[{"name":"t"}],"output":{"name":"sigflag"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sigset"}}],[11,"all","","",26,{"inputs":[],"output":{"name":"sigset"}}],[11,"empty","","",26,{"inputs":[],"output":{"name":"sigset"}}],[11,"add","","",26,{"inputs":[{"name":"self"},{"name":"signum"}],"output":{"name":"result"}}],[11,"remove","","",26,{"inputs":[{"name":"self"},{"name":"signum"}],"output":{"name":"result"}}],[11,"contains","","",26,{"inputs":[{"name":"self"},{"name":"signum"}],"output":{"generics":["bool"],"name":"result"}}],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",26,{"inputs":[],"output":{"generics":["sigset"],"name":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",26,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"generics":["sigset"],"name":"result"}}],[11,"wait","","Suspends execution of the calling thread until one of the signals in the signal mask becomes pending, and returns the accepted signal.",26,{"inputs":[{"name":"self"}],"output":{"generics":["signum"],"name":"result"}}],[11,"as_ref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sighandler"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"sighandler"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"sighandler"}],"output":{"name":"bool"}}],[11,"new","","This function will set or unset the flag `SA_SIGINFO` depending on the type of the `handler` argument.",27,{"inputs":[{"name":"sighandler"},{"name":"saflag"},{"name":"sigset"}],"output":{"name":"sigaction"}}],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"in_addr","nix::sys::socket","",null,null],[12,"s_addr","","",28,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",29,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",30,null],[12,"sa_data","","",30,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",31,null],[12,"sin_port","","",31,null],[12,"sin_addr","","",31,null],[12,"sin_zero","","",31,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",32,null],[12,"sin6_port","","",32,null],[12,"sin6_flowinfo","","",32,null],[12,"sin6_addr","","",32,null],[12,"sin6_scope_id","","",32,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",33,null],[12,"sun_path","","",33,null],[6,"sa_family_t","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",34,null],[3,"UnixAddr","","A wrapper around sockaddr_un. We track the length of sun_path, because it may not be null-terminated (unconnected and abstract sockets). Note that the actual sockaddr length is greater by size_of::<sa_family_t>().",null,null],[12,"0","","",35,null],[12,"1","","",35,null],[3,"Ipv4Addr","","",null,null],[12,"0","","",36,null],[3,"Ipv6Addr","","",null,null],[12,"0","","",37,null],[3,"NetlinkAddr","","",null,null],[12,"0","","",38,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",39,null],[12,"imr_interface","","",39,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",40,null],[12,"ipv6mr_interface","","",40,null],[3,"MsgFlags","","",null,null],[3,"SockFlag","","",null,null],[3,"CmsgSpace","","A structure used to make room in a cmsghdr passed to recvmsg. The size and alignment match that of a cmsghdr followed by a T, but the fields are not accessible, as the actual types will change on a call to recvmsg.",null,null],[3,"RecvMsg","","",null,null],[12,"bytes","","",41,null],[12,"address","","",41,null],[12,"flags","","",41,null],[3,"CmsgIterator","","",null,null],[3,"linger","","",null,null],[12,"l_onoff","","",42,null],[12,"l_linger","","",42,null],[3,"ucred","","",null,null],[4,"AddressFamily","","",null,null],[13,"Unix","","",43,null],[13,"Inet","","",43,null],[13,"Inet6","","",43,null],[13,"Netlink","","",43,null],[13,"Packet","","",43,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",44,null],[13,"Unix","","",44,null],[13,"Netlink","","",44,null],[4,"InetAddr","","",null,null],[13,"V4","","",45,null],[13,"V6","","",45,null],[4,"IpAddr","","",null,null],[13,"V4","","",46,null],[13,"V6","","",46,null],[4,"SockType","","",null,null],[13,"Stream","","",47,null],[13,"Datagram","","",47,null],[13,"SeqPacket","","",47,null],[13,"Raw","","",47,null],[13,"Rdm","","",47,null],[4,"ControlMessage","","A type-safe wrapper around a single control message. More types may be added to this enum; do not exhaustively pattern-match it. Further reading",null,null],[13,"ScmRights","","A message of type SCM_RIGHTS, containing an array of file descriptors passed between processes. See the description in the \"Ancillary messages\" section of the unix(7) man page.",48,null],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an argument to `getsockopt` and `setsockopt`.",null,null],[13,"Socket","","",49,null],[13,"Tcp","","",49,null],[13,"Ip","","",49,null],[13,"Ipv6","","",49,null],[13,"Udp","","",49,null],[13,"Netlink","","",49,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",50,null],[13,"Write","","Further  transmissions will be disallowed.",50,null],[13,"Both","","Further receptions and transmissions will be disallowed.",50,null],[5,"sendmsg","","Send data in scatter-gather vectors to a socket, possibly accompanied by ancillary data. Optionally direct the message at the given address, as with sendto.",null,null],[5,"recvmsg","","Receive message in scatter-gather vectors from a socket, and optionally receive ancillary data into the provided buffer. If no ancillary data is desired, use () as the type parameter.",null,null],[5,"socket","","Create an endpoint for communication",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"sockflag"},{"name":"c_int"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"socketpair","","Create a pair of connected sockets",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"c_int"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"listen","","Listen for connections on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[5,"bind","","Bind a name to a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"accept","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"accept4","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockflag"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"connect","","Initiate a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of bytes read",null,null],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns the number of bytes read and the socket address of the sender.",null,null],[5,"sendto","","",null,null],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",null,null],[5,"getsockopt","","Get the current value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"}],"output":{"name":"result"}}],[5,"setsockopt","","Sets the value for the requested socket option",null,null],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["sockaddr"],"name":"result"}}],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["sockaddr"],"name":"result"}}],[5,"sockaddr_storage_to_addr","","",null,{"inputs":[{"name":"sockaddr_storage"},{"name":"usize"}],"output":{"generics":["sockaddr"],"name":"result"}}],[5,"shutdown","","Shut down part of a full-duplex connection.",null,{"inputs":[{"name":"rawfd"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"netlinkaddr"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",38,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","",38,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"netlinkaddr"}}],[11,"pid","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"groups","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"addressfamily"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"from_std","","",45,{"inputs":[{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",45,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",45,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"port","","Gets the port number associated with this socket address",45,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"to_std","","",45,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"to_str","","",45,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"inetaddr"}],"output":{"name":"bool"}}],[11,"hash","","",45,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"inetaddr"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",46,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",46,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",36,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",36,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",36,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","",36,null],[11,"to_std","","",36,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",36,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"new","","",37,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",37,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",37,null],[11,"to_std","","",37,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new sockaddr_un representing a filesystem path.",35,{"inputs":[{"name":"p"}],"output":{"generics":["unixaddr"],"name":"result"}}],[11,"new_abstract","","Create a new sockaddr_un representing an address in the \"abstract namespace\". This is a Linux-specific extension, primarily used to allow chrooted processes to communicate with specific daemons.",35,null],[11,"path","","If this address represents a filesystem path, return that path.",35,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"unixaddr"}],"output":{"name":"bool"}}],[11,"hash","","",35,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"unixaddr"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_inet","","",44,{"inputs":[{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",44,{"inputs":[{"name":"p"}],"output":{"generics":["sockaddr"],"name":"result"}}],[11,"new_netlink","","",44,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"sockaddr"}}],[11,"family","","",44,{"inputs":[{"name":"self"}],"output":{"name":"addressfamily"}}],[11,"to_str","","",44,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"as_ffi_pair","","",44,null],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"sockaddr"}],"output":{"name":"bool"}}],[11,"hash","","",44,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"msgflags"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"le","","",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"gt","","",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"ge","","",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"cmp","","",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"ordering"}}],[11,"hash","","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",51,{"inputs":[],"output":{"name":"msgflags"}}],[11,"all","","Returns the set containing all flags.",51,{"inputs":[],"output":{"name":"msgflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",51,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",51,{"inputs":[{"name":"c_int"}],"output":{"generics":["msgflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",51,{"inputs":[{"name":"c_int"}],"output":{"name":"msgflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"not","","Returns the complement of this set of flags.",51,{"inputs":[{"name":"self"}],"output":{"name":"msgflags"}}],[11,"from_iter","","",51,{"inputs":[{"name":"t"}],"output":{"name":"msgflags"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",39,{"inputs":[{"name":"ipv4addr"},{"generics":["ipv4addr"],"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"new","","",40,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6_mreq"}}],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"Ipv6AddMembership","","",null,null],[3,"Ipv6DropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"IpMulticastLoop","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[3,"OobInline","","",null,null],[3,"SocketError","","",null,null],[3,"KeepAlive","","",null,null],[3,"PeerCredentials","","",null,null],[3,"TcpKeepIdle","","",null,null],[3,"RcvBuf","","",null,null],[3,"SndBuf","","",null,null],[3,"RcvBufForce","","",null,null],[3,"SndBufForce","","",null,null],[3,"SockType","","",null,null],[3,"AcceptConn","","",null,null],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"reuseaddr"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",52,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",52,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"reuseport"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",53,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",53,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"tcpnodelay"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",54,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",54,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",55,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"linger"}],"output":{"name":"result"}}],[11,"get","","",55,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["linger"],"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"ipaddmembership"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",56,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ipdropmembership"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",57,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addmembership"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",58,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ipv6dropmembership"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",59,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"ipmulticastttl"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",60,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"u8"}],"output":{"name":"result"}}],[11,"get","","",60,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["u8"],"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"ipmulticastloop"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",61,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",61,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"receivetimeout"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",62,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",62,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["timeval"],"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"sendtimeout"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",63,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",63,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["timeval"],"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"broadcast"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",64,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",64,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"oobinline"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",65,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",65,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"socketerror"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",66,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["i32"],"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"keepalive"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",67,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",67,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"peercredentials"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",68,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["ucred"],"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"tcpkeepidle"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",69,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get","","",69,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["u32"],"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"rcvbuf"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",70,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get","","",70,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["usize"],"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"sndbuf"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",71,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get","","",71,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["usize"],"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"rcvbufforce"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",72,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"sndbufforce"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",73,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"socktype"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",74,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["socktype"],"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"acceptconn"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",75,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[6,"IpMulticastTtl","nix::sys::socket","",null,null],[6,"InAddrT","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_PACKET","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[8,"GetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument to `getsockopt`",null,null],[16,"Val","","",76,null],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument to `setsockopt`",null,null],[16,"Val","","",77,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"socktype"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"sockflag"}}],[11,"partial_cmp","","",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"cmp","","",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"hash","","",78,null],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",78,{"inputs":[],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",78,{"inputs":[],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",78,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",78,{"inputs":[{"name":"c_int"}],"output":{"generics":["sockflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",78,{"inputs":[{"name":"c_int"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"not","","Returns the complement of this set of flags.",78,{"inputs":[{"name":"self"}],"output":{"name":"sockflag"}}],[11,"from_iter","","",78,{"inputs":[{"name":"t"}],"output":{"name":"sockflag"}}],[11,"new","","Create a CmsgSpace. The structure is used only for space, so the fields are uninitialized.",79,{"inputs":[],"output":{"name":"self"}}],[11,"cmsgs","","Iterate over the valid control messages pointed to by this msghdr.",41,{"inputs":[{"name":"self"}],"output":{"name":"cmsgiterator"}}],[11,"next","","",80,{"inputs":[{"name":"self"}],"output":{"generics":["controlmessage"],"name":"option"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"ucred"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"ucred"}],"output":{"name":"bool"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",82,null],[12,"st_ino","","",82,null],[12,"st_nlink","","",82,null],[12,"st_mode","","",82,null],[12,"st_uid","","",82,null],[12,"st_gid","","",82,null],[12,"st_rdev","","",82,null],[12,"st_size","","",82,null],[12,"st_blksize","","",82,null],[12,"st_blocks","","",82,null],[12,"st_atime","","",82,null],[12,"st_atime_nsec","","",82,null],[12,"st_mtime","","",82,null],[12,"st_mtime_nsec","","",82,null],[12,"st_ctime","","",82,null],[12,"st_ctime_nsec","","",82,null],[3,"SFlag","","",null,null],[3,"Mode","","",null,null],[5,"mknod","","",null,{"inputs":[{"name":"p"},{"name":"sflag"},{"name":"mode"},{"name":"dev_t"}],"output":{"name":"result"}}],[5,"mkdev","","",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"dev_t"}}],[5,"umask","","",null,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[5,"stat","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["filestat"],"name":"result"}}],[5,"lstat","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["filestat"],"name":"result"}}],[5,"fstat","","",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["filestat"],"name":"result"}}],[17,"S_IFREG","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IROTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"sflag"}}],[11,"partial_cmp","","",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"le","","",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"gt","","",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ge","","",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"cmp","","",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"ordering"}}],[11,"hash","","",83,null],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",83,{"inputs":[],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",83,{"inputs":[],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",83,{"inputs":[{"name":"self"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",83,{"inputs":[{"name":"mode_t"}],"output":{"generics":["sflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",83,{"inputs":[{"name":"mode_t"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"not","","Returns the complement of this set of flags.",83,{"inputs":[{"name":"self"}],"output":{"name":"sflag"}}],[11,"from_iter","","",83,{"inputs":[{"name":"t"}],"output":{"name":"sflag"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"le","","",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"gt","","",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ge","","",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"cmp","","",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"ordering"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",84,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",84,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",84,{"inputs":[{"name":"self"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",84,{"inputs":[{"name":"mode_t"}],"output":{"generics":["mode"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",84,{"inputs":[{"name":"mode_t"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"not","","Returns the complement of this set of flags.",84,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"from_iter","","",84,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[0,"syscall","nix::sys","Indirect system call",null,null],[5,"syscall","nix::sys::syscall","",null,null],[6,"Syscall","","",null,null],[7,"SYSPIVOTROOT","","",null,null],[7,"MEMFD_CREATE","","",null,null],[0,"termios","nix::sys","",null,null],[3,"Termios","nix::sys::termios","",null,null],[12,"c_iflag","","",85,null],[12,"c_oflag","","",85,null],[12,"c_cflag","","",85,null],[12,"c_lflag","","",85,null],[12,"c_line","","",85,null],[12,"c_cc","","",85,null],[12,"c_ispeed","","",85,null],[12,"c_ospeed","","",85,null],[3,"InputFlags","","",null,null],[3,"OutputFlags","","",null,null],[3,"ControlFlags","","",null,null],[3,"LocalFlags","","",null,null],[4,"SetArg","","",null,null],[13,"TCSANOW","","",86,null],[13,"TCSADRAIN","","",86,null],[13,"TCSAFLUSH","","",86,null],[4,"FlushArg","","",null,null],[13,"TCIFLUSH","","",87,null],[13,"TCOFLUSH","","",87,null],[13,"TCIOFLUSH","","",87,null],[4,"FlowArg","","",null,null],[13,"TCOOFF","","",88,null],[13,"TCOON","","",88,null],[13,"TCIOFF","","",88,null],[13,"TCION","","",88,null],[5,"cfgetispeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfgetospeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfsetispeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"cfsetospeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"tcgetattr","","",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["termios"],"name":"result"}}],[5,"tcsetattr","","",null,{"inputs":[{"name":"rawfd"},{"name":"setarg"},{"name":"termios"}],"output":{"name":"result"}}],[5,"tcdrain","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcflow","","",null,{"inputs":[{"name":"rawfd"},{"name":"flowarg"}],"output":{"name":"result"}}],[5,"tcflush","","",null,{"inputs":[{"name":"rawfd"},{"name":"flusharg"}],"output":{"name":"result"}}],[5,"tcsendbreak","","",null,{"inputs":[{"name":"rawfd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"inputflags"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"le","","",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"gt","","",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ge","","",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"cmp","","",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"ordering"}}],[11,"hash","","",89,null],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",89,{"inputs":[],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",89,{"inputs":[],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",89,{"inputs":[{"name":"self"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",89,{"inputs":[{"name":"tcflag_t"}],"output":{"generics":["inputflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",89,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"not","","Returns the complement of this set of flags.",89,{"inputs":[{"name":"self"}],"output":{"name":"inputflags"}}],[11,"from_iter","","",89,{"inputs":[{"name":"t"}],"output":{"name":"inputflags"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"outputflags"}}],[11,"partial_cmp","","",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"le","","",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"gt","","",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ge","","",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"cmp","","",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"ordering"}}],[11,"hash","","",90,null],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",90,{"inputs":[],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",90,{"inputs":[],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",90,{"inputs":[{"name":"self"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",90,{"inputs":[{"name":"tcflag_t"}],"output":{"generics":["outputflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",90,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"not","","Returns the complement of this set of flags.",90,{"inputs":[{"name":"self"}],"output":{"name":"outputflags"}}],[11,"from_iter","","",90,{"inputs":[{"name":"t"}],"output":{"name":"outputflags"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"controlflags"}}],[11,"partial_cmp","","",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"le","","",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"gt","","",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ge","","",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"cmp","","",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"ordering"}}],[11,"hash","","",91,null],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",91,{"inputs":[],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",91,{"inputs":[],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",91,{"inputs":[{"name":"self"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",91,{"inputs":[{"name":"tcflag_t"}],"output":{"generics":["controlflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",91,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"not","","Returns the complement of this set of flags.",91,{"inputs":[{"name":"self"}],"output":{"name":"controlflags"}}],[11,"from_iter","","",91,{"inputs":[{"name":"t"}],"output":{"name":"controlflags"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"localflags"}}],[11,"partial_cmp","","",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"le","","",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"gt","","",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ge","","",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"cmp","","",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"ordering"}}],[11,"hash","","",92,null],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",92,{"inputs":[],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",92,{"inputs":[],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",92,{"inputs":[{"name":"self"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",92,{"inputs":[{"name":"tcflag_t"}],"output":{"generics":["localflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",92,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"not","","Returns the complement of this set of flags.",92,{"inputs":[{"name":"self"}],"output":{"name":"localflags"}}],[11,"from_iter","","",92,{"inputs":[{"name":"t"}],"output":{"name":"localflags"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"setarg"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"flusharg"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"flowarg"}}],[6,"tcflag_t","","",null,null],[6,"cc_t","","",null,null],[6,"speed_t","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"NCCS","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[0,"utsname","nix::sys","",null,null],[3,"UtsName","nix::sys::utsname","",null,null],[5,"uname","","",null,{"inputs":[],"output":{"name":"utsname"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"sysname","","",93,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"nodename","","",93,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"release","","",93,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"version","","",93,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"machine","","",93,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[4,"WaitStatus","","",null,null],[13,"Exited","","",94,null],[13,"Signaled","","",94,null],[13,"Stopped","","",94,null],[13,"Continued","","",94,null],[13,"StillAlive","","",94,null],[5,"waitpid","","",null,{"inputs":[{"name":"pid_t"},{"generics":["waitpidflag"],"name":"option"}],"output":{"generics":["waitstatus"],"name":"result"}}],[5,"wait","","",null,{"inputs":[],"output":{"generics":["waitstatus"],"name":"result"}}],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"waitpidflag"}}],[11,"partial_cmp","","",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"le","","",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"gt","","",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ge","","",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"cmp","","",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"ordering"}}],[11,"hash","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",95,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",95,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",95,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",95,{"inputs":[{"name":"c_int"}],"output":{"generics":["waitpidflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",95,{"inputs":[{"name":"c_int"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"not","","Returns the complement of this set of flags.",95,{"inputs":[{"name":"self"}],"output":{"name":"waitpidflag"}}],[11,"from_iter","","",95,{"inputs":[{"name":"t"}],"output":{"name":"waitpidflag"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"waitstatus"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"mman","nix::sys","",null,null],[3,"MapFlags","nix::sys::mman","",null,null],[3,"MsFlags","","",null,null],[3,"ProtFlags","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically a higher-level abstraction will hide the unsafe interactions with the mmap'd region.",null,null],[5,"munmap","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"shm_unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"mapflags"}}],[11,"partial_cmp","","",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"le","","",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"gt","","",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"ge","","",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"cmp","","",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"ordering"}}],[11,"hash","","",96,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",96,{"inputs":[],"output":{"name":"mapflags"}}],[11,"all","","Returns the set containing all flags.",96,{"inputs":[],"output":{"name":"mapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",96,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",96,{"inputs":[{"name":"c_int"}],"output":{"generics":["mapflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",96,{"inputs":[{"name":"c_int"}],"output":{"name":"mapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"not","","Returns the complement of this set of flags.",96,{"inputs":[{"name":"self"}],"output":{"name":"mapflags"}}],[11,"from_iter","","",96,{"inputs":[{"name":"t"}],"output":{"name":"mapflags"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"msflags"}}],[11,"partial_cmp","","",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"le","","",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"gt","","",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ge","","",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"cmp","","",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"ordering"}}],[11,"hash","","",97,null],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",97,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",97,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",97,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",97,{"inputs":[{"name":"c_int"}],"output":{"generics":["msflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",97,{"inputs":[{"name":"c_int"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"not","","Returns the complement of this set of flags.",97,{"inputs":[{"name":"self"}],"output":{"name":"msflags"}}],[11,"from_iter","","",97,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[6,"MmapAdvise","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"protflags"}}],[11,"partial_cmp","","",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"le","","",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"gt","","",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"ge","","",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"cmp","","",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"ordering"}}],[11,"hash","","",98,null],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",98,{"inputs":[],"output":{"name":"protflags"}}],[11,"all","","Returns the set containing all flags.",98,{"inputs":[],"output":{"name":"protflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",98,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",98,{"inputs":[{"name":"c_int"}],"output":{"generics":["protflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",98,{"inputs":[{"name":"c_int"}],"output":{"name":"protflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"not","","Returns the complement of this set of flags.",98,{"inputs":[{"name":"self"}],"output":{"name":"protflags"}}],[11,"from_iter","","",98,{"inputs":[{"name":"t"}],"output":{"name":"protflags"}}],[0,"uio","nix::sys","",null,null],[3,"IoVec","nix::sys::uio","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"pwrite","","",null,null],[5,"pread","","",null,null],[11,"as_slice","","",99,null],[11,"from_slice","","",99,null],[11,"from_mut_slice","","",99,null],[0,"time","nix::sys","",null,null],[3,"TimeVal","nix::sys::time","",null,null],[12,"tv_sec","","",100,null],[12,"tv_usec","","",100,null],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",100,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",100,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"le","","",100,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"gt","","",100,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ge","","",100,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"cmp","","",100,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"ordering"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zero","","",100,{"inputs":[],"output":{"name":"timeval"}}],[11,"hours","","",100,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",100,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",100,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",100,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",100,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",100,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","",100,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","",100,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","",100,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","",100,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"neg","","",100,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"add","","",100,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"sub","","",100,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"mul","","",100,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"div","","",100,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ptrace","nix::sys","",null,null],[5,"ptrace","nix::sys::ptrace","",null,null],[5,"ptrace_setoptions","","Set options, as with ptrace(PTRACE_SETOPTIONS,...).",null,{"inputs":[{"name":"pid_t"},{"name":"ptraceoptions"}],"output":{"name":"result"}}],[0,"ptrace","","",null,null],[6,"PtraceRequest","nix::sys::ptrace::ptrace","",null,null],[6,"PtraceEvent","","",null,null],[6,"PtraceOptions","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"PTRACE_EVENT_STOP","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[0,"select","nix::sys","",null,null],[3,"FdSet","nix::sys::select","",null,null],[5,"select","","",null,{"inputs":[{"name":"c_int"},{"generics":["fdset"],"name":"option"},{"generics":["fdset"],"name":"option"},{"generics":["fdset"],"name":"option"},{"generics":["timeval"],"name":"option"}],"output":{"generics":["c_int"],"name":"result"}}],[17,"FD_SETSIZE","","",null,null],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"fdset"}}],[11,"new","","",101,{"inputs":[],"output":{"name":"fdset"}}],[11,"insert","","",101,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":null}],[11,"remove","","",101,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":null}],[11,"contains","","",101,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"bool"}}],[11,"clear","","",101,{"inputs":[{"name":"self"}],"output":null}],[0,"quota","nix::sys","",null,null],[5,"quotactl_on","nix::sys::quota","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"quotafmt"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_off","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_sync","","",null,{"inputs":[{"name":"quotatype"},{"name":"option"}],"output":{"name":"result"}}],[5,"quotactl_get","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"}],"output":{"name":"result"}}],[5,"quotactl_set","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"}],"output":{"name":"result"}}],[0,"quota","","",null,null],[3,"QuotaCmd","nix::sys::quota::quota","",null,null],[12,"0","","",102,null],[12,"1","","",102,null],[3,"QuotaValidFlags","","",null,null],[3,"Dqblk","","",null,null],[12,"bhardlimit","","",103,null],[12,"bsoftlimit","","",103,null],[12,"curspace","","",103,null],[12,"ihardlimit","","",103,null],[12,"isoftlimit","","",103,null],[12,"curinodes","","",103,null],[12,"btime","","",103,null],[12,"itime","","",103,null],[12,"valid","","",103,null],[6,"QuotaSubCmd","","",null,null],[6,"QuotaType","","",null,null],[6,"QuotaFmt","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[11,"as_int","","",102,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"quotavalidflags"}}],[11,"partial_cmp","","",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"le","","",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"gt","","",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"ge","","",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"cmp","","",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"ordering"}}],[11,"hash","","",104,null],[11,"default","","",104,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",104,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"all","","Returns the set containing all flags.",104,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",104,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",104,{"inputs":[{"name":"u32"}],"output":{"generics":["quotavalidflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",104,{"inputs":[{"name":"u32"}],"output":{"name":"quotavalidflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"not","","Returns the complement of this set of flags.",104,{"inputs":[{"name":"self"}],"output":{"name":"quotavalidflags"}}],[11,"from_iter","","",104,{"inputs":[{"name":"t"}],"output":{"name":"quotavalidflags"}}],[11,"default","","",103,{"inputs":[],"output":{"name":"dqblk"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[0,"statfs","nix::sys","",null,null],[5,"statfs","nix::sys::statfs","",null,{"inputs":[{"name":"p"},{"name":"statfs"}],"output":{"name":"result"}}],[5,"fstatfs","","",null,{"inputs":[{"name":"t"},{"name":"statfs"}],"output":{"name":"result"}}],[0,"vfs","","",null,null],[3,"Statfs","nix::sys::statfs::vfs","",null,null],[12,"f_type","","",105,null],[12,"f_bsize","","",105,null],[12,"f_blocks","","",105,null],[12,"f_bfree","","",105,null],[12,"f_bavail","","",105,null],[12,"f_files","","",105,null],[12,"f_ffree","","",105,null],[12,"f_fsid","","",105,null],[12,"f_namelen","","",105,null],[12,"f_frsize","","",105,null],[12,"f_spare","","",105,null],[0,"hwdep","","",null,null],[6,"FsType","nix::sys::statfs::vfs::hwdep","",null,null],[6,"BlockSize","","",null,null],[6,"NameLen","","",null,null],[6,"FragmentSize","","",null,null],[6,"SwordType","","",null,null],[17,"ADFS_SUPER_MAGIC","nix::sys::statfs::vfs","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"BEFS_SUPER_MAGIC","","",null,null],[17,"BFS_MAGIC","","",null,null],[17,"CIFS_MAGIC_NUMBER","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"COH_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"DEVFS_SUPER_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT_SUPER_MAGIC","","",null,null],[17,"EXT2_OLD_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HFS_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"JFS_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"NTFS_SB_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"ROMFS_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"SYSV2_SUPER_MAGIC","","",null,null],[17,"SYSV4_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"UDF_SUPER_MAGIC","","",null,null],[17,"UFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VXFS_SUPER_MAGIC","","",null,null],[17,"XENIX_SUPER_MAGIC","","",null,null],[17,"XFS_SUPER_MAGIC","","",null,null],[17,"_XIAFS_SUPER_MAGIC","","",null,null],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[0,"statvfs","nix::sys","FFI for statvfs functions",null,null],[5,"statvfs","nix::sys::statvfs","Fill an existing `Statvfs` object with information about the `path`",null,{"inputs":[{"name":"p"},{"name":"statvfs"}],"output":{"name":"result"}}],[5,"fstatvfs","","Fill an existing `Statvfs` object with information about `fd`",null,{"inputs":[{"name":"t"},{"name":"statvfs"}],"output":{"name":"result"}}],[0,"vfs","","Structs related to the `statvfs` and `fstatvfs` functions",null,null],[3,"FsFlags","nix::sys::statvfs::vfs","Mount Flags",null,null],[3,"Statvfs","","The posix statvfs struct",null,null],[12,"f_bsize","","Filesystem block size. This is the value that will lead to most efficient use of the filesystem",106,null],[12,"f_frsize","","Fragment Size -- actual minimum unit of allocation on this filesystem",106,null],[12,"f_blocks","","Total number of blocks on the filesystem",106,null],[12,"f_bfree","","Number of unused blocks on the filesystem, including those reserved for root",106,null],[12,"f_bavail","","Number of blocks available to non-root users",106,null],[12,"f_files","","Total number of inodes available on the filesystem",106,null],[12,"f_ffree","","Number of inodes available on the filesystem",106,null],[12,"f_favail","","Number of inodes available to non-root users",106,null],[12,"f_fsid","","File System ID",106,null],[12,"f_flag","","Mount Flags",106,null],[12,"f_namemax","","Maximum filename length",106,null],[17,"RDONLY","","Read Only",null,null],[17,"NOSUID","","Do not allow the set-uid bits to have an effect",null,null],[17,"NODEV","","Do not interpret character or block-special devices",null,null],[17,"NOEXEC","","Do not allow execution of binaries on the filesystem",null,null],[17,"SYNCHRONOUS","","All IO should be done synchronously",null,null],[17,"MANDLOCK","","Allow mandatory locks on the filesystem",null,null],[17,"WRITE","","",null,null],[17,"APPEND","","",null,null],[17,"IMMUTABLE","","",null,null],[17,"NOATIME","","Do not update access times on files",null,null],[17,"NODIRATIME","","Do not update access times on files",null,null],[17,"RELATIME","","Update access time relative to modify/change time",null,null],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"fsflags"}}],[11,"partial_cmp","","",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"le","","",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"gt","","",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ge","","",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"cmp","","",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"ordering"}}],[11,"hash","","",107,null],[11,"default","","",107,{"inputs":[],"output":{"name":"fsflags"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",107,{"inputs":[],"output":{"name":"fsflags"}}],[11,"all","","Returns the set containing all flags.",107,{"inputs":[],"output":{"name":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",107,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",107,{"inputs":[{"name":"c_ulong"}],"output":{"generics":["fsflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",107,{"inputs":[{"name":"c_ulong"}],"output":{"name":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"not","","Returns the complement of this set of flags.",107,{"inputs":[{"name":"self"}],"output":{"name":"fsflags"}}],[11,"from_iter","","",107,{"inputs":[{"name":"t"}],"output":{"name":"fsflags"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"for_path","","Create a new `Statvfs` object and fill it with information about the mount that contains `path`",106,{"inputs":[{"name":"p"}],"output":{"generics":["statvfs"],"name":"result"}}],[11,"update_with_path","","Replace information in this struct with information about `path`",106,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"for_fd","","Create a new `Statvfs` object and fill it with information from fd",106,{"inputs":[{"name":"t"}],"output":{"generics":["statvfs"],"name":"result"}}],[11,"update_with_fd","","Replace information in this struct with information about `fd`",106,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"default","","Create a statvfs object initialized to all zeros",106,{"inputs":[],"output":{"name":"self"}}],[0,"unistd","nix","Standard symbolic constants and types",null,null],[4,"Fork","nix::unistd","",null,null],[13,"Parent","","",108,null],[13,"Child","","",108,null],[5,"pivot_root","","",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"name":"result"}}],[5,"fork","","",null,{"inputs":[],"output":{"generics":["fork"],"name":"result"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"getppid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"setpgid","","",null,{"inputs":[{"name":"pid_t"},{"name":"pid_t"}],"output":{"name":"result"}}],[5,"dup","","",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"dup2","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"dup3","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"oflag"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"chdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chown","","",null,{"inputs":[{"name":"p"},{"generics":["uid_t"],"name":"option"},{"generics":["gid_t"],"name":"option"}],"output":{"name":"result"}}],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"daemon","","",null,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[5,"sethostname","","",null,null],[5,"gethostname","","",null,null],[5,"close","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"read","","",null,null],[5,"write","","",null,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"pipe2","","",null,{"inputs":[{"name":"oflag"}],"output":{"name":"result"}}],[5,"ftruncate","","",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"}],"output":{"name":"result"}}],[5,"isatty","","",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[5,"unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chroot","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fsync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"fdatasync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"geteuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"getgid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"getegid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"setuid","","",null,{"inputs":[{"name":"uid_t"}],"output":{"name":"result"}}],[5,"setgid","","",null,{"inputs":[{"name":"gid_t"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"fork"}}],[11,"is_child","","",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_parent","","",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[6,"Result","nix","",null,null],[8,"NixPath","","",null,null],[10,"len","","",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"with_nix_path","","",109,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_errno","","",1,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","",1,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_argument","","",1,{"inputs":[],"output":{"name":"error"}}],[11,"errno","","",1,{"inputs":[{"name":"self"}],"output":{"name":"errno"}}],[11,"from","","",1,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"ioc","","Encode an ioctl command.",null,null],[14,"io","","Encode an ioctl command that has no associated data.",null,null],[14,"ior","","Encode an ioctl command that reads.",null,null],[14,"iow","","Encode an ioctl command that writes.",null,null],[14,"iorw","","Encode an ioctl command that both reads and writes.",null,null],[14,"convert_ioctl_res","","Convert raw ioctl return value to a Nix result",null,null],[14,"ioctl","","Declare a wrapper function around an ioctl.",null,null],[11,"clone","nix::sys::socket","",32,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","nix::sys::stat","",82,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","nix::sys::socket","",31,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}]],"paths":[[4,"Errno"],[4,"Error"],[8,"ErrnoSentinel"],[3,"flock"],[4,"FcntlArg"],[4,"FlockArg"],[3,"SpliceFFlags"],[3,"OFlag"],[3,"FdFlag"],[3,"SealFlag"],[3,"MsFlags"],[3,"MntFlags"],[3,"MqAttr"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"PollFd"],[3,"EventFlags"],[3,"CloneFlags"],[3,"CpuSet"],[3,"EpollEvent"],[4,"EpollOp"],[3,"EpollEventKind"],[3,"MemFdCreateFlag"],[4,"SigHandler"],[3,"SaFlag"],[3,"SigFlag"],[3,"SigSet"],[3,"SigAction"],[3,"in_addr"],[3,"in6_addr"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"UnixAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"NetlinkAddr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"RecvMsg"],[3,"linger"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"ControlMessage"],[4,"SockLevel"],[4,"Shutdown"],[3,"MsgFlags"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"PeerCredentials"],[3,"TcpKeepIdle"],[3,"RcvBuf"],[3,"SndBuf"],[3,"RcvBufForce"],[3,"SndBufForce"],[3,"SockType"],[3,"AcceptConn"],[8,"GetSockOpt"],[8,"SetSockOpt"],[3,"SockFlag"],[3,"CmsgSpace"],[3,"CmsgIterator"],[3,"ucred"],[3,"FileStat"],[3,"SFlag"],[3,"Mode"],[3,"Termios"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[3,"UtsName"],[4,"WaitStatus"],[3,"WaitPidFlag"],[3,"MapFlags"],[3,"MsFlags"],[3,"ProtFlags"],[3,"IoVec"],[3,"TimeVal"],[3,"FdSet"],[3,"QuotaCmd"],[3,"Dqblk"],[3,"QuotaValidFlags"],[3,"Statfs"],[3,"Statvfs"],[3,"FsFlags"],[4,"Fork"],[8,"NixPath"]]};
searchIndex["nodrop"] = {"doc":"The nodrop crate has the following cargo feature flags:","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",null,null],[11,"new","","Create a new NoDrop.",0,{"inputs":[{"name":"t"}],"output":{"name":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"NoDrop"]]};
searchIndex["nom"] = {"doc":"nom, eating data byte by byte","items":[[3,"ProducerRepeat","nom","ProducerRepeat takes a single value, and generates it at each step",null,null],[3,"MemProducer","","A MemProducer generates values from an in memory byte buffer",null,null],[3,"FileProducer","","",null,null],[3,"MapConsumer","","MapConsumer takes a function S -> T and applies it on a consumer producing values of type S",null,null],[3,"ChainConsumer","","ChainConsumer takes a consumer C1 R -> S, and a consumer C2 S -> T, and makes a consumer R -> T by applying C2 on C1's result",null,null],[4,"ErrorKind","","indicates which parser returned an error",null,null],[13,"Custom","","",0,null],[13,"Tag","","",0,null],[13,"MapRes","","",0,null],[13,"MapOpt","","",0,null],[13,"Alt","","",0,null],[13,"IsNot","","",0,null],[13,"IsA","","",0,null],[13,"SeparatedList","","",0,null],[13,"SeparatedNonEmptyList","","",0,null],[13,"Many0","","",0,null],[13,"Many1","","",0,null],[13,"ManyTill","","",0,null],[13,"Count","","",0,null],[13,"TakeUntilAndConsume","","",0,null],[13,"TakeUntil","","",0,null],[13,"TakeUntilEitherAndConsume","","",0,null],[13,"TakeUntilEither","","",0,null],[13,"LengthValue","","",0,null],[13,"TagClosure","","",0,null],[13,"Alpha","","",0,null],[13,"Digit","","",0,null],[13,"HexDigit","","",0,null],[13,"OctDigit","","",0,null],[13,"AlphaNumeric","","",0,null],[13,"Space","","",0,null],[13,"MultiSpace","","",0,null],[13,"LengthValueFn","","",0,null],[13,"Eof","","",0,null],[13,"ExprOpt","","",0,null],[13,"ExprRes","","",0,null],[13,"CondReduce","","",0,null],[13,"Switch","","",0,null],[13,"TagBits","","",0,null],[13,"OneOf","","",0,null],[13,"NoneOf","","",0,null],[13,"Char","","",0,null],[13,"CrLf","","",0,null],[13,"RegexpMatch","","",0,null],[13,"RegexpMatches","","",0,null],[13,"RegexpFind","","",0,null],[13,"RegexpCapture","","",0,null],[13,"RegexpCaptures","","",0,null],[13,"TakeWhile1","","",0,null],[13,"Complete","","",0,null],[13,"Fix","","",0,null],[13,"Escaped","","",0,null],[13,"EscapedTransform","","",0,null],[13,"TagStr","","",0,null],[13,"IsNotStr","","",0,null],[13,"IsAStr","","",0,null],[13,"TakeWhile1Str","","",0,null],[13,"NonEmpty","","",0,null],[13,"ManyMN","","",0,null],[13,"TakeUntilAndConsumeStr","","",0,null],[13,"TakeUntilStr","","",0,null],[13,"Not","","",0,null],[13,"Permutation","","",0,null],[13,"Verify","","",0,null],[13,"TakeTill1","","",0,null],[4,"CompareResult","","indicates wether a comparison was successful, an error, or if more data was needed",null,null],[13,"Ok","","",1,null],[13,"Incomplete","","",1,null],[13,"Error","","",1,null],[4,"Needed","","Contains information on needed data if a parser returned `Incomplete`",null,null],[13,"Unknown","","needs more data, but we do not know how much",2,null],[13,"Size","","contains the required data size",2,null],[4,"IResult","","Holds the result of parsing functions",null,null],[13,"Done","","indicates a correct parsing, the first field containing the rest of the unparsed data, the second field contains the parsed data",3,null],[13,"Error","","contains a Err, an enum that can indicate an error code, a position in the input, and a pointer to another error, making a list of errors in the parsing tree",3,null],[13,"Incomplete","","Incomplete contains a Needed, an enum than can represent a known quantity of input data, or unknown",3,null],[4,"IError","","This is the same as IResult, but without Done",null,null],[13,"Error","","",4,null],[13,"Incomplete","","",4,null],[4,"Endianness","","Configurable endianness",null,null],[13,"Big","","",5,null],[13,"Little","","",5,null],[4,"Input","","",null,null],[13,"Element","","",6,null],[13,"Empty","","",6,null],[13,"Eof","","",6,null],[4,"ConsumerState","","Stores a consumer's current computation state",null,null],[13,"Done","","A value of type O has been produced",7,null],[13,"Error","","An error of type E has been encountered",7,null],[13,"Continue","","Continue applying, and pass a message of type M to the data source",7,null],[4,"Move","","",null,null],[13,"Consume","","indcates how much data was consumed",8,null],[13,"Seek","","indicates where in the input the consumer must seek",8,null],[13,"Await","","indicates more data is needed",8,null],[4,"FileProducerState","","",null,null],[13,"Normal","","",9,null],[13,"Error","","",9,null],[13,"Eof","","",9,null],[5,"slice_to_offsets","","",null,null],[5,"code_from_offset","","",null,null],[5,"reset_color","","",null,{"inputs":[{"name":"vec"}],"output":null}],[5,"write_color","","",null,{"inputs":[{"name":"vec"},{"name":"u8"}],"output":null}],[5,"print_codes","","",null,{"inputs":[{"generics":["u32","u8"],"name":"hashmap"},{"generics":["u32","str"],"name":"hashmap"}],"output":{"name":"string"}}],[5,"error_to_u32","","",null,{"inputs":[{"name":"errorkind"}],"output":{"name":"u32"}}],[5,"tag_cl","","",null,null],[5,"print","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"begin","","",null,null],[5,"crlf","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"not_line_ending","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"line_ending","","Recognizes an end of line (both '\\n' and '\\r\\n')",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"eol","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"is_alphabetic","","Tests if byte is ASCII alphabetic: A-Z, a-z",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_digit","","Tests if byte is ASCII digit: 0-9",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_hex_digit","","Tests if byte is ASCII hex digit: 0-9, A-F, a-f",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_oct_digit","","Tests if byte is ASCII octal digit: 0-7",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_alphanumeric","","Tests if byte is ASCII alphanumeric: A-Z, a-z, 0-9",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_space","","Tests if byte is ASCII space or tab",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"alpha","","Recognizes one or more lowercase and uppercase alphabetic characters: a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"digit","","Recognizes one or more numerical characters: 0-9",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"hex_digit","","Recognizes one or more hexadecimal numerical characters: 0-9, A-F, a-f",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"oct_digit","","Recognizes one or more octal characters: 0-7",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"alphanumeric","","Recognizes one or more numerical and alphabetic characters: 0-9a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"space","","Recognizes one or more spaces and tabs",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"multispace","","Recognizes one or more spaces, tabs, carriage returns and line feeds",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"sized_buffer","","",null,null],[5,"be_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",null,null],[5,"be_u16","","Recognizes big endian unsigned 2 bytes integer",null,null],[5,"be_u24","","Recognizes big endian unsigned 3 byte integer",null,null],[5,"be_u32","","Recognizes big endian unsigned 4 bytes integer",null,null],[5,"be_u64","","Recognizes big endian unsigned 8 bytes integer",null,null],[5,"be_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",null,null],[5,"be_i16","","Recognizes big endian signed 2 bytes integer",null,null],[5,"be_i24","","Recognizes big endian signed 3 bytes integer",null,null],[5,"be_i32","","Recognizes big endian signed 4 bytes integer",null,null],[5,"be_i64","","Recognizes big endian signed 8 bytes integer",null,null],[5,"le_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",null,null],[5,"le_u16","","Recognizes little endian unsigned 2 bytes integer",null,null],[5,"le_u24","","Recognizes little endian unsigned 3 byte integer",null,null],[5,"le_u32","","Recognizes little endian unsigned 4 bytes integer",null,null],[5,"le_u64","","Recognizes little endian unsigned 8 bytes integer",null,null],[5,"le_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",null,null],[5,"le_i16","","Recognizes little endian signed 2 bytes integer",null,null],[5,"le_i24","","Recognizes little endian signed 3 bytes integer",null,null],[5,"le_i32","","Recognizes little endian signed 4 bytes integer",null,null],[5,"le_i64","","Recognizes little endian signed 8 bytes integer",null,null],[5,"be_f32","","Recognizes big endian 4 bytes floating point number",null,null],[5,"be_f64","","Recognizes big endian 8 bytes floating point number",null,null],[5,"le_f32","","Recognizes little endian 4 bytes floating point number",null,null],[5,"le_f64","","Recognizes little endian 8 bytes floating point number",null,null],[5,"hex_u32","","Recognizes a hex-encoded integer",null,null],[5,"non_empty","","Recognizes non empty buffers",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"rest","","Return the remaining input.",null,null],[5,"rest_s","","Return the remaining input, for strings.",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","str"],"name":"iresult"}}],[5,"float","","Recognizes floating point number in a byte string and returns a f32",null,null],[5,"float_s","","Recognizes floating point number in a string and returns a f32",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","f32"],"name":"iresult"}}],[5,"double","","Recognizes floating point number in a byte string and returns a f64",null,null],[5,"double_s","","Recognizes floating point number in a string and returns a f64",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","f64"],"name":"iresult"}}],[5,"newline","","Matches a newline character '\\n'",null,null],[5,"tab","","Matches a tab character '\\t'",null,null],[5,"anychar","","",null,{"inputs":[{"name":"t"}],"output":{"generics":["char"],"name":"iresult"}}],[5,"shift","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_error_kind","","Convert Err into an ErrorKind.",0,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"compareresult"}],"output":{"name":"bool"}}],[0,"simple_errors","","Error management",null,null],[6,"Err","nom::simple_errors","",null,null],[11,"map_err","nom","Maps a `IResult<I, O, E>` to `IResult<I, O, N>` by appling a function to a contained `Error` value, leaving `Done` and `Incomplete` value untouched.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"unwrap_err","","Unwrap the contained `Error(E)` value, or panic if the `IResult` is not `Error`.",3,{"inputs":[{"name":"self"}],"output":{"name":"err"}}],[11,"to_full_result","","Convert the IResult to a std::result::Result",3,{"inputs":[{"name":"self"}],"output":{"generics":["ierror"],"name":"result"}}],[11,"to_result","","Convert the IResult to a std::result::Result, or panic if the `IResult` is `Incomplete`",3,{"inputs":[{"name":"self"}],"output":{"generics":["err"],"name":"result"}}],[11,"description","nom::simple_errors","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","nom","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"needed"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"needed"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"needed"}}],[11,"is_known","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"map","","Maps a `Needed` to `Needed` by appling a function to a contained `Size` value.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"needed"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"ierror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"ierror"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"ierror"}}],[11,"is_done","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_err","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_incomplete","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"or","","",3,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"iresult"}}],[11,"map","","Maps a `IResult<I, O, E>` to `IResult<I, N, E>` by appling a function to a contained `Done` value, leaving `Error` and `Incomplete` value untouched.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_inc","","Maps a `IResult<I, O, E>` to `IResult<I, O, E>` by appling a function to a contained `Incomplete` value, leaving `Done` and `Error` value untouched.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"unwrap","","Unwrap the contained `Done(I, O)` value, or panic if the `IResult` is not `Done`.",3,null],[11,"unwrap_or","","Unwrap the contained `Done(I, O)` value or a default if the `IResult` is not `Done`.",3,null],[11,"unwrap_inc","","Unwrap the contained `Incomplete(n)` value, or panic if the `IResult` is not `Incomplete`.",3,{"inputs":[{"name":"self"}],"output":{"name":"needed"}}],[11,"remaining_input","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remaining_input","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remaining_input","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"output","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"output","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"output","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[0,"methods","","Method macro combinators",null,null],[0,"bits","","Bit level parsers and combinators",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"endianness"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"endianness"}}],[0,"whitespace","","Support for whitespace delimited formats",null,null],[5,"sp","nom::whitespace","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[11,"fmt","nom","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"input"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"consumerstate"}}],[11,"map","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"consumerstate"}}],[11,"flat_map","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"consumerstate"}}],[11,"apply","","",11,{"inputs":[{"name":"self"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"new","","",12,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"move"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"move"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"move"}],"output":{"name":"bool"}}],[11,"apply","","",12,{"inputs":[{"name":"self"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"fileproducerstate"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"fileproducerstate"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",13,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"generics":["fileproducer"],"name":"result"}}],[11,"state","","",13,{"inputs":[{"name":"self"}],"output":{"name":"fileproducerstate"}}],[11,"refill","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"resize","","Resize the internal buffer, copy the data to the new one and returned how much data was copied",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"apply","","",13,{"inputs":[{"name":"self"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"new","","",14,{"inputs":[{"name":"c"},{"name":"f"}],"output":{"name":"mapconsumer"}}],[11,"handle","","",14,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"consumerstate"}}],[11,"state","","",14,{"inputs":[{"name":"self"}],"output":{"name":"consumerstate"}}],[11,"new","","",15,{"inputs":[{"name":"c1"},{"name":"c2"}],"output":{"name":"chainconsumer"}}],[11,"handle","","",15,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"consumerstate"}}],[11,"state","","",15,{"inputs":[{"name":"self"}],"output":{"name":"consumerstate"}}],[8,"Offset","","useful functions to calculate the offset between slices and show a hexdump of a slice",null,null],[10,"offset","","offset between the first byte of self and the first byte of the argument",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[8,"HexDisplay","","",null,null],[10,"to_hex","","Converts the value of `self` to a hex dump, returning the owned string.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[10,"to_hex_from","","Converts the value of `self` to a hex dump beginning at `from` address, returning the owned string.",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"string"}}],[8,"AsBytes","","",null,null],[10,"as_bytes","","",18,null],[8,"InputLength","","abstract method to calculate the input length",null,null],[10,"input_len","","calculates the input length, as indicated by its name, and the name of the trait itself",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"AsChar","","transforms common types to a char for basic token parsing",null,null],[10,"as_char","","makes a char from self",20,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[10,"is_alpha","","tests that self is an alphabetic character",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_alphanum","","tests that self is an alphabetic character or a decimal digit",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_dec_digit","","tests that self is a decimal digit",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_hex_digit","","tests that self is an hex digit",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_oct_digit","","tests that self is an octal digit",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"len","","gets the len in bytes for self",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"InputIter","","abstracts common iteration operations on the input type",null,null],[16,"Item","","",21,null],[16,"RawItem","","",21,null],[16,"Iter","","",21,null],[16,"IterElem","","",21,null],[10,"iter_indices","","returns an iterator over the elements and their byte offsets",21,null],[10,"iter_elements","","returns an iterator over the elements",21,null],[10,"position","","finds the byte position of the element",21,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[10,"slice_index","","get the byte offset from the element's position in the stream",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[8,"InputTake","","abstracts slicing operations",null,null],[10,"take","","returns a slice of `count` bytes",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[10,"take_split","","split the stream at the `count` byte offset",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Compare","","abstracts comparison operations",null,null],[10,"compare","","compares self to another value for equality",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"compareresult"}}],[10,"compare_no_case","","compares self to another value for equality independently of the case.",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"compareresult"}}],[8,"FindToken","","look for self in the given input stream",null,null],[10,"find_token","","",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[8,"FindSubstring","","look for a substring in self",null,null],[10,"find_substring","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["usize"],"name":"option"}}],[8,"ParseTo","","used to integrate str's parse() method",null,null],[10,"parse_to","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Slice","","slicing operations using ranges",null,null],[10,"slice","","",27,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"self"}}],[8,"GetInput","","",null,null],[10,"remaining_input","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"GetOutput","","",null,null],[10,"output","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Consumer","","The Consumer trait wraps a computation and its state",null,null],[10,"handle","","implement handle for the current computation, returning the new state of the consumer",30,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"consumerstate"}}],[10,"state","","returns the current state",30,{"inputs":[{"name":"self"}],"output":{"name":"consumerstate"}}],[8,"Producer","","The producer wraps a data source, like file or network, and applies a consumer on it",null,null],[10,"apply","","Applies a consumer once on the produced data, and return the consumer's state",31,{"inputs":[{"name":"self"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"run","","Applies a consumer once on the produced data, and returns the generated value if there is one",31,{"inputs":[{"name":"self"},{"name":"consumer"}],"output":{"name":"option"}}],[14,"compiler_error","","",null,null],[14,"dbg","","Prints a message if the parser fails",null,null],[14,"dbg_dmp","","Prints a message and the input if the parser fails",null,null],[14,"fix_error","","translate parser result from IResult<I,O,u32> to IResult<I,O,E> with a custom type",null,null],[14,"flat_map","","`flat_map!(R -> IResult<R,S>, S -> IResult<S,T>) => R -> IResult<R, T>`",null,null],[14,"error_code","","creates a parse error from a `nom::ErrorKind`",null,null],[14,"error_node","","creates a parse error from a `nom::ErrorKind` and the next error in the parsing tree. if \"verbose-errors\" is not activated, it default to only the error code",null,null],[14,"error_position","","creates a parse error from a `nom::ErrorKind` and the position in the input if \"verbose-errors\" is not activated, it default to only the error code",null,null],[14,"error_node_position","","creates a parse error from a `nom::ErrorKind`, the position in the input and the next error in the parsing tree. if \"verbose-errors\" is not activated, it default to only the error code",null,null],[14,"closure","","Wraps a parser in a closure",null,null],[14,"named","","Makes a function from a parser combination",null,null],[14,"named_args","","Makes a function from a parser combination with arguments.",null,null],[14,"named_attr","","Makes a function from a parser combination, with attributes",null,null],[14,"call","","Used to wrap common expressions and function as macros",null,null],[14,"apply","","emulate function currying: `apply!(my_function, arg1, arg2, ...)` becomes `my_function(input, arg1, arg2, ...)`",null,null],[14,"return_error","","Prevents backtracking if the child parser fails",null,null],[14,"add_return_error","","Add an error if the child parser fails",null,null],[14,"complete","","replaces a `Incomplete` returned by the child parser with an `Error`",null,null],[14,"try_parse","","A bit like `std::try!`, this macro will return the remaining input and parsed value if the child parser returned `Done`, and will do an early return for `Error` and `Incomplete` this can provide more flexibility than `do_parse!` if needed",null,null],[14,"map","","`map!(I -> IResult<I,O>, O -> P) => I -> IResult<I, P>` maps a function on the result of a parser",null,null],[14,"map_res","","`map_res!(I -> IResult<I,O>, O -> Result<P>) => I -> IResult<I, P>` maps a function returning a Result on the output of a parser",null,null],[14,"map_opt","","`map_opt!(I -> IResult<I,O>, O -> Option<P>) => I -> IResult<I, P>` maps a function returning an Option on the output of a parser",null,null],[14,"parse_to","","`parse_to!(O) => I -> IResult<I, O>` uses the `parse` method from `std::str::FromStr` to convert the current input to the specified type",null,null],[14,"verify","","`verify!(I -> IResult<I,O>, O -> bool) => I -> IResult<I, O>` returns the result of the child parser if it satisfies a verification function",null,null],[14,"value","","`value!(T, R -> IResult<R, S> ) => R -> IResult<R, T>`",null,null],[14,"expr_res","","`expr_res!(Result<E,O>) => I -> IResult<I, O>` evaluate an expression that returns a Result<T,E> and returns a IResult::Done(I,T) if Ok",null,null],[14,"expr_opt","","`expr_opt!(Option<O>) => I -> IResult<I, O>` evaluate an expression that returns a Option and returns a IResult::Done(I,T) if Some",null,null],[14,"opt","","`opt!(I -> IResult<I,O>) => I -> IResult<I, Option<O>>` make the underlying parser optional",null,null],[14,"opt_res","","`opt_res!(I -> IResult<I,O>) => I -> IResult<I, Result<nom::Err,O>>` make the underlying parser optional",null,null],[14,"cond_with_error","","`cond_with_error!(bool, I -> IResult<I,O>) => I -> IResult<I, Option<O>>` Conditional combinator",null,null],[14,"cond","","`cond!(bool, I -> IResult<I,O>) => I -> IResult<I, Option<O>>` Conditional combinator",null,null],[14,"cond_reduce","","`cond_reduce!(bool, I -> IResult<I,O>) => I -> IResult<I, O>` Conditional combinator with error",null,null],[14,"peek","","`peek!(I -> IResult<I,O>) => I -> IResult<I, O>` returns a result without consuming the input",null,null],[14,"not","","`not!(I -> IResult<I,O>) => I -> IResult<I, O>` returns a result only if the embedded parser returns Error or Incomplete does not consume the input",null,null],[14,"tap","","`tap!(name: I -> IResult<I,O> => { block }) => I -> IResult<I, O>` allows access to the parser's result without affecting it",null,null],[14,"eof","","`eof!()` returns its input if it is at the end of input data",null,null],[14,"recognize","","`recognize!(I -> IResult<I, O> ) => I -> IResult<I, I>` if the child parser was successful, return the consumed input as produced value",null,null],[14,"alt","","Try a list of parsers and return the result of the first successful one",null,null],[14,"alt_complete","","Is equivalent to the `alt!` combinator, except that it will not return `Incomplete` when one of the constituting parsers returns `Incomplete`. Instead, it will try the next alternative in the chain.",null,null],[14,"switch","","`switch!(I -> IResult<I,P>, P => I -> IResult<I,O> | ... | P => I -> IResult<I,O> ) => I -> IResult<I, O>` choose the next parser depending on the result of the first one, if successful, and returns the result of the second parser",null,null],[14,"permutation","","`permutation!(I -> IResult<I,A>, I -> IResult<I,B>, ... I -> IResult<I,X> ) => I -> IResult<I, (A,B,...X)>` applies its sub parsers in a sequence, but independent from their order this parser will only succeed if all of its sub parsers succeed",null,null],[14,"tuple","","`tuple!(I->IResult<I,A>, I->IResult<I,B>, ... I->IResult<I,X>) => I -> IResult<I, (A, B, ..., X)>` chains parsers and assemble the sub results in a tuple.",null,null],[14,"pair","","`pair!(I -> IResult<I,O>, I -> IResult<I,P>) => I -> IResult<I, (O,P)>` pair(X,Y), returns (x,y)",null,null],[14,"separated_pair","","`separated_pair!(I -> IResult<I,O>, I -> IResult<I, T>, I -> IResult<I,P>) => I -> IResult<I, (O,P)>` separated_pair(X,sep,Y) returns (x,y)",null,null],[14,"preceded","","`preceded!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, O>` preceded(opening, X) returns X",null,null],[14,"terminated","","`terminated!(I -> IResult<I,O>, I -> IResult<I,T>) => I -> IResult<I, O>` terminated(X, closing) returns X",null,null],[14,"delimited","","`delimited!(I -> IResult<I,T>, I -> IResult<I,O>, I -> IResult<I,U>) => I -> IResult<I, O>` delimited(opening, X, closing) returns X",null,null],[14,"do_parse","","`do_parse!(I->IResult<I,A> >> I->IResult<I,B> >> ... I->IResult<I,X> , ( O ) ) => I -> IResult<I, O>` do_parse applies sub parsers in a sequence. it can store intermediary results and make them available for later parsers",null,null],[14,"separated_list","","`separated_list!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` separated_list(sep, X) returns Vec will return Incomplete if there may be more elements",null,null],[14,"separated_nonempty_list","","`separated_nonempty_list!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` separated_nonempty_list(sep, X) returns Vec will return Incomplete if there may be more elements",null,null],[14,"separated_list_complete","","`separated_list_complete!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` This is equivalent to the `separated_list!` combinator, except that it will return `Error` when either the separator or element subparser returns `Incomplete`.",null,null],[14,"separated_nonempty_list_complete","","`separated_nonempty_list_complete!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` This is equivalent to the `separated_nonempty_list!` combinator, except that it will return `Error` when either the separator or element subparser returns `Incomplete`.",null,null],[14,"many0","","`many0!(I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser 0 or more times and returns the list of results in a Vec",null,null],[14,"many1","","`many1!(I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser 1 or more times and returns the list of results in a Vec",null,null],[14,"many_till","","`many_till!(I -> IResult<I,O>, I -> IResult<I,P>) => I -> IResult<I, (Vec<O>, P)>` Applies the first parser until the second applies. Returns a tuple containing the list of results from the first in a Vec and the result of the second.",null,null],[14,"many_m_n","","`many_m_n!(usize, usize, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser between m and n times (n included) and returns the list of results in a Vec",null,null],[14,"count","","`count!(I -> IResult<I,O>, nb) => I -> IResult<I, Vec<O>>` Applies the child parser a specified number of times",null,null],[14,"count_fixed","","`count_fixed!(O, I -> IResult<I,O>, nb) => I -> IResult<I, [O; nb]>` Applies the child parser a fixed number of times and returns a fixed size array The type must be specified and it must be `Copy`",null,null],[14,"length_count","","`length_count!(I -> IResult<I, nb>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` gets a number from the first parser, then applies the second parser that many times",null,null],[14,"length_data","","`length_data!(I -> IResult<I, nb>) => O`",null,null],[14,"length_value","","`length_value!(I -> IResult<I, nb>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` gets a number from the first parser, takes a subslice of the input of that size, then applies the second parser on that subslice. If the second parser returns `Incomplete`, `length_value` will return an error",null,null],[14,"fold_many0","","`fold_many0!(I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser 0 or more times and folds the list of return values",null,null],[14,"fold_many1","","`fold_many1!(I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser 1 or more times and folds the list of return values",null,null],[14,"fold_many_m_n","","`fold_many_m_n!(usize, usize, I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser between m and n times (n included) and folds the list of return value",null,null],[14,"method","","Makes a method from a parser combination",null,null],[14,"call_m","","Used to called methods then move self back into self",null,null],[14,"apply_m","","emulate function currying for method calls on structs `apply_m!(self.my_function, arg1, arg2, ...)` becomes `self.my_function(input, arg1, arg2, ...)`",null,null],[14,"tag","","`tag!(&[T]: nom::AsBytes) => &[T] -> IResult<&[T], &[T]>` declares a byte array as a suite to recognize",null,null],[14,"tag_no_case","","`tag_no_case!(&[T]) => &[T] -> IResult<&[T], &[T]>` declares a case insensitive ascii string as a suite to recognize",null,null],[14,"is_not","","`is_not!(&[T:AsBytes]) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes that do not appear in the provided array",null,null],[14,"is_a","","`is_a!(&[T]) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes that appear in the provided array",null,null],[14,"escaped","","`escaped!(&[T] -> IResult<&[T], &[T]>, T, &[T] -> IResult<&[T], &[T]>) => &[T] -> IResult<&[T], &[T]>` matches a byte string with escaped characters.",null,null],[14,"escaped_transform","","`escaped_transform!(&[T] -> IResult<&[T], &[T]>, T, &[T] -> IResult<&[T], &[T]>) => &[T] -> IResult<&[T], Vec<T>>` matches a byte string with escaped characters.",null,null],[14,"take_while","","`take_while!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes until the provided function fails.",null,null],[14,"take_while1","","`take_while1!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest (non empty) list of bytes until the provided function fails.",null,null],[14,"take_till","","`take_till!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes until the provided function succeeds",null,null],[14,"take_till1","","`take_till1!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest non empty list of bytes until the provided function succeeds",null,null],[14,"take","","`take!(nb) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming the specified number of bytes",null,null],[14,"take_str","","`take_str!(nb) => &[T] -> IResult<&[T], &str>` same as take! but returning a &str",null,null],[14,"take_until_and_consume","","`take_until_and_consume!(tag) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming bytes until the specified byte sequence is found, and consumes it",null,null],[14,"take_until_and_consume1","","`take_until_and_consume1!(tag) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming bytes (at least 1) until the specified byte sequence is found, and consumes it",null,null],[14,"take_until","","`take_until!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds the specified tag",null,null],[14,"take_until1","","`take_until1!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds the specified tag",null,null],[14,"take_until_either_and_consume","","`take_until_either_and_consume!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds any of the specified characters, and consume it",null,null],[14,"take_until_either","","`take_until_either!(tag) => &[T] -> IResult<&[T], &[T]>`",null,null],[14,"length_bytes","","`length_bytes!(&[T] -> IResult<&[T], nb>) => &[T] -> IResult<&[T], &[T]>` Gets a number from the first parser, then extracts that many bytes from the remaining stream",null,null],[14,"bits","","`bits!( parser ) => ( &[u8], (&[u8], usize) -> IResult<(&[u8], usize), T> ) -> IResult<&[u8], T>` transforms its byte slice input into a bit stream for the underlying parsers",null,null],[14,"bytes","","Counterpart to bits, `bytes!( parser ) => ( (&[u8], usize), &[u8] -> IResult<&[u8], T> ) -> IResult<(&[u8], usize), T>`, transforms its bits stream input into a byte slice for the underlying parsers. If we start in the middle of a byte throws away the bits until the end of the byte.",null,null],[14,"take_bits","","`take_bits!(type, nb) => ( (&[T], usize), U, usize) -> IResult<(&[T], usize), U>` generates a parser consuming the specified number of bits.",null,null],[14,"tag_bits","","matches an integer pattern to a bitstream. The number of bits of the input to compare must be specified",null,null],[14,"u16","","if the parameter is nom::Endianness::Big, parse a big endian u16 integer, otherwise a little endian u16 integer",null,null],[14,"u32","","if the parameter is nom::Endianness::Big, parse a big endian u32 integer, otherwise a little endian u32 integer",null,null],[14,"u64","","if the parameter is nom::Endianness::Big, parse a big endian u64 integer, otherwise a little endian u64 integer",null,null],[14,"i16","","if the parameter is nom::Endianness::Big, parse a big endian i16 integer, otherwise a little endian i16 integer",null,null],[14,"i32","","if the parameter is nom::Endianness::Big, parse a big endian i32 integer, otherwise a little endian i32 integer",null,null],[14,"i64","","if the parameter is nom::Endianness::Big, parse a big endian i64 integer, otherwise a little endian i64 integer",null,null],[14,"one_of","","matches one of the provided characters",null,null],[14,"none_of","","matches anything but the provided characters",null,null],[14,"char","","matches one character: `char!(char) => &[u8] -> IResult<&[u8], char>",null,null],[14,"wrap_sep","","",null,null],[14,"eat_separator","","helper macros to build a separator parser",null,null],[14,"sep","","sep is the parser rewriting macro for whitespace separated formats",null,null],[14,"ws","","`ws!(I -> IResult<I,O>) => I -> IResult<I, O>`",null,null],[14,"consumer_from_parser","","",null,null],[14,"tag_s","","`tag_s!(&str) => &str -> IResult<&str, &str>` declares a string as a suite to recognize",null,null],[14,"tag_no_case_s","","`tag_no_case_s!(&str) => &str -> IResult<&str, &str>` declares a case-insensitive string as a suite to recognize",null,null],[14,"take_s","","`take_s!(nb) => &str -> IResult<&str, &str>` generates a parser consuming the specified number of characters",null,null],[14,"is_not_s","","`is_not_s!(&str) => &str -> IResult<&str, &str>` returns the longest list of characters that do not appear in the provided array",null,null],[14,"is_a_s","","`is_a_s!(&str) => &str -> IResult<&str, &str>` returns the longest list of characters that appear in the provided array",null,null],[14,"take_while_s","","`take_while_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest list of characters until the provided function fails.",null,null],[14,"take_while1_s","","`take_while1_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest (non empty) list of characters until the provided function fails.",null,null],[14,"take_till_s","","`take_till_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest list of characters until the provided function succeeds",null,null],[14,"take_till1_s","","`take_till1_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest non empty list of characters until the provided function succeeds",null,null],[14,"take_until_and_consume_s","","`take_until_and_consume_s!(&str) => &str -> IResult<&str, &str>` generates a parser consuming all chars until the specified string is found and consumes it",null,null],[14,"take_until_s","","`take_until_s!(&str) => &str -> IResult<&str, &str>` generates a parser consuming all chars until the specified string is found and leaves it in the remaining input",null,null],[11,"run","","Applies a consumer once on the produced data, and returns the generated value if there is one",31,{"inputs":[{"name":"self"},{"name":"consumer"}],"output":{"name":"option"}}]],"paths":[[4,"ErrorKind"],[4,"CompareResult"],[4,"Needed"],[4,"IResult"],[4,"IError"],[4,"Endianness"],[4,"Input"],[4,"ConsumerState"],[4,"Move"],[4,"FileProducerState"],[6,"Err"],[3,"ProducerRepeat"],[3,"MemProducer"],[3,"FileProducer"],[3,"MapConsumer"],[3,"ChainConsumer"],[8,"Offset"],[8,"HexDisplay"],[8,"AsBytes"],[8,"InputLength"],[8,"AsChar"],[8,"InputIter"],[8,"InputTake"],[8,"Compare"],[8,"FindToken"],[8,"FindSubstring"],[8,"ParseTo"],[8,"Slice"],[8,"GetInput"],[8,"GetOutput"],[8,"Consumer"],[8,"Producer"]]};
searchIndex["notify"] = {"doc":"Cross-platform file system notification library","items":[[3,"RawEvent","notify","Event delivered when action occurs on a watched path in raw mode",null,null],[12,"path","","Path where the event originated.",0,null],[12,"op","","Operation detected on that path.",0,null],[12,"cookie","","Unique cookie associating related events (for `RENAME` events).",0,null],[4,"DebouncedEvent","","Event delivered when action occurs on a watched path in debounced mode",null,null],[13,"NoticeWrite","","`NoticeWrite` is emitted immediately after the first write event for the path.",1,null],[13,"NoticeRemove","","`NoticeRemove` is emitted immediately after a remove or rename event for the path.",1,null],[13,"Create","","`Create` is emitted when a file or directory has been created and no events were detected for the path within the specified time frame.",1,null],[13,"Write","","`Write` is emitted when a file has been written to and no events were detected for the path within the specified time frame.",1,null],[13,"Chmod","","`Chmod` is emitted when attributes have been changed and no events were detected for the path within the specified time frame.",1,null],[13,"Remove","","`Remove` is emitted when a file or directory has been removed and no events were detected for the path within the specified time frame.",1,null],[13,"Rename","","`Rename` is emitted when a file or directory has been moved within a watched directory and no events were detected for the new path within the specified time frame.",1,null],[13,"Rescan","","`Rescan` is emitted immediately after a problem has been detected that makes it necessary to re-scan the watched directories.",1,null],[13,"Error","","`Error` is emitted immediately after a error has been detected.",1,null],[4,"Error","","Errors generated from the `notify` crate",null,null],[13,"Generic","","Generic error",2,null],[13,"Io","","I/O errors",2,null],[13,"PathNotFound","","The provided path does not exist",2,null],[13,"WatchNotFound","","Attempted to remove a watch that does not exist",2,null],[4,"RecursiveMode","","Indicates whether only the provided directory or its sub-directories as well should be watched",null,null],[13,"Recursive","","Watch all sub-directories as well, including directories created after installing the watch",3,null],[13,"NonRecursive","","Watch only the provided directory",3,null],[5,"raw_watcher","","Convenience method for creating the `RecommendedWatcher` for the current platform in raw mode.",null,{"inputs":[{"generics":["rawevent"],"name":"sender"}],"output":{"generics":["recommendedwatcher"],"name":"result"}}],[5,"watcher","","Convenience method for creating the `RecommendedWatcher` for the current platform in default (debounced) mode.",null,{"inputs":[{"generics":["debouncedevent"],"name":"sender"},{"name":"duration"}],"output":{"generics":["recommendedwatcher"],"name":"result"}}],[0,"inotify","","Watcher implementation for the inotify Linux API",null,null],[3,"INotifyWatcher","notify::inotify","Watcher implementation based on inotify",null,null],[11,"new_raw","","",4,{"inputs":[{"generics":["rawevent"],"name":"sender"}],"output":{"generics":["inotifywatcher"],"name":"result"}}],[11,"new","","",4,{"inputs":[{"generics":["debouncedevent"],"name":"sender"},{"name":"duration"}],"output":{"generics":["inotifywatcher"],"name":"result"}}],[11,"watch","","",4,{"inputs":[{"name":"self"},{"name":"p"},{"name":"recursivemode"}],"output":{"name":"result"}}],[11,"unwatch","","",4,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[0,"null","notify","Stub Watcher implementation",null,null],[3,"NullWatcher","notify::null","Stub `Watcher` implementation",null,null],[11,"new_raw","","",5,{"inputs":[{"generics":["rawevent"],"name":"sender"}],"output":{"generics":["nullwatcher"],"name":"result"}}],[11,"new","","",5,{"inputs":[{"generics":["debouncedevent"],"name":"sender"},{"name":"duration"}],"output":{"generics":["nullwatcher"],"name":"result"}}],[11,"watch","","",5,{"inputs":[{"name":"self"},{"name":"p"},{"name":"recursivemode"}],"output":{"name":"result"}}],[11,"unwatch","","",5,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[0,"poll","notify","Generic Watcher implementation based on polling",null,null],[3,"PollWatcher","notify::poll","Polling based `Watcher` implementation",null,null],[11,"with_delay_ms","","Create a PollWatcher which polls every `delay` milliseconds",6,{"inputs":[{"generics":["rawevent"],"name":"sender"},{"name":"u32"}],"output":{"generics":["pollwatcher"],"name":"result"}}],[11,"new_raw","","",6,{"inputs":[{"generics":["rawevent"],"name":"sender"}],"output":{"generics":["pollwatcher"],"name":"result"}}],[11,"new","","",6,{"inputs":[{"generics":["debouncedevent"],"name":"sender"},{"name":"duration"}],"output":{"generics":["pollwatcher"],"name":"result"}}],[11,"watch","","",6,{"inputs":[{"name":"self"},{"name":"p"},{"name":"recursivemode"}],"output":{"name":"result"}}],[11,"unwatch","","",6,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[0,"op","notify","Contains the `Op` type which describes the actions for an event.",null,null],[3,"Op","notify::op","Holds a set of bit flags representing the actions for the event.",null,null],[17,"CHMOD","","Attributes changed",null,null],[17,"CREATE","","Created",null,null],[17,"REMOVE","","Removed",null,null],[17,"RENAME","","Renamed",null,null],[17,"WRITE","","Written",null,null],[17,"CLOSE_WRITE","","File opened for writing was closed",null,null],[17,"RESCAN","","Directories need to be rescanned",null,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"op"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"ordering"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",7,{"inputs":[],"output":{"name":"op"}}],[11,"all","","Returns the set containing all flags.",7,{"inputs":[],"output":{"name":"op"}}],[11,"bits","","Returns the raw value of the flags currently stored.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",7,{"inputs":[{"name":"u32"}],"output":{"generics":["op"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",7,{"inputs":[{"name":"u32"}],"output":{"name":"op"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"op"}}],[11,"bitor_assign","","Adds the set of flags.",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"op"}}],[11,"bitxor_assign","","Toggles the set of flags.",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"op"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"op"}}],[11,"sub_assign","","Disables all flags enabled in the set.",7,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",7,{"inputs":[{"name":"self"}],"output":{"name":"op"}}],[11,"extend","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",7,{"inputs":[{"name":"t"}],"output":{"name":"op"}}],[6,"Result","notify","Type alias to use this library's `Error` type in a Result",null,null],[6,"RecommendedWatcher","","The recommended `Watcher` implementation for the current platform",null,null],[8,"Watcher","","Type that can deliver file activity notifications",null,null],[10,"new_raw","","Create a new watcher in raw mode.",8,{"inputs":[{"generics":["rawevent"],"name":"sender"}],"output":{"name":"result"}}],[10,"new","","Create a new debounced watcher with a `delay`.",8,{"inputs":[{"generics":["debouncedevent"],"name":"sender"},{"name":"duration"}],"output":{"name":"result"}}],[10,"watch","","Begin watching a new path.",8,{"inputs":[{"name":"self"},{"name":"p"},{"name":"recursivemode"}],"output":{"name":"result"}}],[10,"unwatch","","Stop watching a path.",8,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"debouncedevent"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"RawEvent"],[4,"DebouncedEvent"],[4,"Error"],[4,"RecursiveMode"],[3,"INotifyWatcher"],[3,"NullWatcher"],[3,"PollWatcher"],[3,"Op"],[8,"Watcher"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",1,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",1,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",5,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",5,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",12,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",12,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",12,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",12,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"pow","num","",null,null],[8,"Pow","num::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",17,null],[10,"pow","","Returns `self` to the power `rhs`.",17,null],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"bigint","","",null,null],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null],[11,"new","","Creates and initializes a BigInt.",18,{"inputs":[{"name":"sign"},{"generics":["u32"],"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",18,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",18,null],[11,"assign_from_slice","","Reinitializes a `BigInt`.",18,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",18,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",18,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",18,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",18,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",18,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",18,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",18,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",18,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",18,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",18,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",18,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",18,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",18,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_add","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",18,{"inputs":[{"name":"self"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"one","","",18,{"inputs":[],"output":{"name":"bigint"}}],[11,"one","","",19,{"inputs":[],"output":{"name":"biguint"}}],[11,"bitxor","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",19,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",18,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"div_assign","","",19,null],[11,"div_assign","","",19,null],[11,"div_assign","","",19,null],[11,"div_assign","","",19,null],[11,"div_assign","","",19,null],[11,"div_assign","","",19,null],[11,"div_assign","","",19,null],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"checked_div","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_div","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"bitxor_assign","","",19,null],[11,"bitxor_assign","","",19,null],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"checked_add","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_add","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"bitor_assign","","",19,null],[11,"bitor_assign","","",19,null],[11,"to_i64","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"to_i64","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"shl_assign","","",19,null],[11,"cmp","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"bitand","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"neg","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"neg","","",19,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"checked_mul","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_mul","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"shr","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"hash","","",18,null],[11,"hash","","",19,null],[11,"abs","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem_assign","","",19,null],[11,"rem_assign","","",19,null],[11,"rem_assign","","",19,null],[11,"rem_assign","","",19,null],[11,"rem_assign","","",19,null],[11,"rem_assign","","",19,null],[11,"rem_assign","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_i64","","",18,{"inputs":[{"name":"i64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_u64","","",18,{"inputs":[{"name":"u64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_f64","","",18,{"inputs":[{"name":"f64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_i64","","",19,{"inputs":[{"name":"i64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_u64","","",19,{"inputs":[{"name":"u64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_f64","","",19,{"inputs":[{"name":"f64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"to_biguint","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"to_biguint","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"zero","","",19,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"zero","","",18,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"shl","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shl","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add_assign","","",19,null],[11,"add_assign","","",19,null],[11,"add_assign","","",19,null],[11,"add_assign","","",19,null],[11,"add_assign","","",19,null],[11,"add_assign","","",19,null],[11,"add_assign","","",19,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"mul_assign","","",19,null],[11,"mul_assign","","",19,null],[11,"mul_assign","","",19,null],[11,"mul_assign","","",19,null],[11,"mul_assign","","",19,null],[11,"mul_assign","","",19,null],[11,"mul_assign","","",19,null],[11,"checked_sub","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_sub","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"sub_assign","","",19,null],[11,"sub_assign","","",19,null],[11,"sub_assign","","",19,null],[11,"sub_assign","","",19,null],[11,"sub_assign","","",19,null],[11,"sub_assign","","",19,null],[11,"sub_assign","","",19,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div_rem","","",18,null],[11,"div_floor","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",18,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"div_rem","","",19,null],[11,"div_floor","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",19,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"bigint"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"biguint"}}],[11,"bitand_assign","","",19,null],[11,"bitand_assign","","",19,null],[11,"shr_assign","","",19,null],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"bitor","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"generics":["biguint"],"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"generics":["bigint"],"name":"result"}}],[11,"to_bigint","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"to_bigint","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from","","",19,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",19,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from","","",19,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",19,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"from","","",19,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"new","","Creates and initializes a `BigUint`.",19,{"inputs":[{"generics":["u32"],"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",19,null],[11,"assign_from_slice","","Assign a value to a `BigUint`.",19,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",19,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",19,null],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",19,null],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",19,null],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",19,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",19,{"inputs":[{"name":"self"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}]],"paths":[[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"Pow"],[3,"BigInt"],[3,"BigUint"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",0,null],[13,"Other","","",0,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",1,null],[13,"NoSign","","",1,null],[13,"Plus","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"generics":["biguint"],"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shl_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"zero","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"neg","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"checked_add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"div_rem","","",2,null],[11,"div_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",2,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_i64","","",2,{"inputs":[{"name":"i64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_u64","","",2,{"inputs":[{"name":"u64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_f64","","",2,{"inputs":[{"name":"f64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",2,{"inputs":[{"generics":["bigdigit"],"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",2,null],[11,"assign_from_slice","","Assign a value to a `BigUint`.",2,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,null],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",2,null],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,null],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",2,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"generics":["sign"],"name":"result"}}],[11,"neg","","Negate Sign value.",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"generics":["bigint"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"neg","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"div_rem","","",3,null],[11,"div_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",3,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_i64","","",3,{"inputs":[{"name":"i64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_u64","","",3,{"inputs":[{"name":"u64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_f64","","",3,{"inputs":[{"name":"f64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"to_bigint","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"to_biguint","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"sign"},{"generics":["bigdigit"],"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",3,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",3,null],[11,"assign_from_slice","","Reinitializes a `BigInt`.",3,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",3,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",3,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",3,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",3,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",3,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",3,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",3,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",3,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",3,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",3,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",3,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[6,"BigDigit","","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",6,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",0,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[11,"add","num_bigint::big_digit","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}]],"paths":[[4,"ParseBigIntError"],[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[6,"BigDigit"],[6,"DoubleBigDigit"]]};
searchIndex["num_cpus"] = {"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current system.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["num_derive"] = {"doc":"Procedural macros to derive numeric traits in Rust.","items":[[5,"from_primitive","num_derive","Derives [`num_traits::FromPrimitive`][from] for simple enums.",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"to_primitive","","Derives [`num_traits::ToPrimitive`][to] for simple enums.",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",1,{"inputs":[{"name":"t"}],"output":{"name":"iterbinomial"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"from","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"checked_mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"generics":["ratio"],"name":"option"}}],[11,"checked_div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"generics":["ratio"],"name":"option"}}],[11,"checked_add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"generics":["ratio"],"name":"option"}}],[11,"checked_sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"generics":["ratio"],"name":"option"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["ratio","parseratioerror"],"name":"result"}}],[11,"abs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"is_positive","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"generics":["ratio","parseratioerror"],"name":"result"}}],[11,"into","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"approximate_float","","",0,{"inputs":[{"name":"f"}],"output":{"generics":["ratio"],"name":"option"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[8,"Bounded","num_traits","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",0,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",0,{"inputs":[],"output":{"name":"self"}}],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",1,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",1,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",2,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",21,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",21,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",22,null],[13,"Invalid","","",22,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",23,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[0,"sign","num_traits","",null,null],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",0,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",0,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",1,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",1,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",2,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",null,null],[10,"min_value","","Returns the smallest finite value that this type can represent.",24,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",24,{"inputs":[],"output":{"name":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",24,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",24,{"inputs":[],"output":{"name":"self"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",24,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",24,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a real number power.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_degrees","","Converts radians to degrees.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_radians","","Converts degrees to radians.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",24,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[8,"AsPrimitive","num_traits::cast","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[11,"fmt","num_traits","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingSub"],[8,"Saturating"],[8,"Signed"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Real"]]};
searchIndex["number_prefix"] = {"doc":"This is a library for formatting numbers with numeric prefixes, such as turning “3000 metres” into “3 kilometres”, or “8705 bytes” into “8.5 KiB”.","items":[[4,"Prefix","number_prefix","A numeric prefix, either binary or decimal.",null,null],[13,"Kilo","","",0,null],[13,"Mega","","",0,null],[13,"Giga","","",0,null],[13,"Tera","","",0,null],[13,"Peta","","",0,null],[13,"Exa","","",0,null],[13,"Zetta","","",0,null],[13,"Yotta","","",0,null],[13,"Kibi","","",0,null],[13,"Mibi","","",0,null],[13,"Gibi","","",0,null],[13,"Tebi","","",0,null],[13,"Pebi","","",0,null],[13,"Exbi","","",0,null],[13,"Zebi","","",0,null],[13,"Yobi","","",0,null],[4,"Result","","The result of trying to apply a prefix to a floating-point value.",null,null],[13,"Standalone","","A standalone value is returned when the number is too small to have any prefixes applied to it. This is commonly a special case, so is handled separately.",1,null],[13,"Prefixed","","A prefixed value is large enough for prefixes. This holds the prefix, as well as the resulting value.",1,null],[5,"decimal_prefix","","Formats the given floating-point number using decimal prefixes, returning a result.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"binary_prefix","","Formats the given floating-point number using binary prefixes, returning a result.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[8,"PrefixNames","","Formatting methods for prefix, for when you want to output things other than just the short-hand symbols.",null,null],[10,"upper","","Returns the name in uppercase, such as “KILO”.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"caps","","Returns the name with the first letter capitalised, such as “Mega”.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"lower","","Returns the name in lowercase, such as “giga”.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"symbol","","Returns the short-hand symbol, such as “T” (for “tera”).",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[8,"Amounts","","Constructors for floating-point values for both the possible multipliers.",null,null],[10,"get_1000","","",3,{"inputs":[],"output":{"name":"self"}}],[10,"get_1024","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"upper","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"caps","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"lower","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"symbol","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Prefix"],[4,"Result"],[8,"PrefixNames"],[8,"Amounts"]]};
searchIndex["owning_ref"] = {"doc":"An owning reference.","items":[[8,"StableAddress","owning_ref","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableAddress","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null],[3,"OwningRef","","An owning reference.",null,null],[3,"OwningRefMut","","An mutable owning reference.",null,null],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows consumers to pass around an owned object and a dependent reference, `OwningHandle` contains an owned object and a dependent object.",null,null],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",null,null],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",null,null],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",null,null],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",null,null],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the owner.",null,null],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"BoxRefMut","","Typedef of a mutable owning reference that uses a `Box` as the owner.",null,null],[6,"VecRefMut","","Typedef of a mutable owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRefMut","","Typedef of a mutable owning reference that uses a `String` as the owner.",null,null],[6,"RefMutRefMut","","Typedef of a mutable owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRefMut","","Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockWriteGuardRefMut","","Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",null,null],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as the owner.",null,null],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as the owner.",null,null],[6,"ErasedBoxRefMut","","Typedef of a mutable owning reference that uses an erased `Box` as the owner.",null,null],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to. This is used in form of a trait object for keeping something around to (virtually) call the destructor.",null,null],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner derferences to, for example `Box<T> -> Box<Erased>`. This would be unneeded with higher kinded types support in the language.",null,null],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",0,null],[10,"into_erased","","Perform the type erasure.",0,null],[8,"ToHandle","","Trait to implement the conversion of owner to handle for common types.",null,null],[16,"Handle","","The type of handle to be encapsulated by the OwningHandle.",1,null],[10,"to_handle","","Given an appropriately-long-lived pointer to ourselves, create a handle to be encapsulated by the `OwningHandle`.",1,null],[8,"ToHandleMut","","Trait to implement the conversion of owner to mutable handle for common types.",null,null],[16,"HandleMut","","The type of handle to be encapsulated by the OwningHandle.",2,null],[10,"to_handle_mut","","Given an appropriately-long-lived pointer to ourselves, create a mutable handle to be encapsulated by the `OwningHandle`.",2,null],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new owning reference that points at something reachable from the previous one.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"try_map","","Tries to convert `self` into a new owning reference that points at something reachable from the previous one.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["owningref"],"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",3,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"owningref"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",3,{"inputs":[{"name":"self"}],"output":{"name":"owningref"}}],[11,"owner","","A getter for the underlying owner.",3,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",3,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new shared owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_mut","","Converts `self` into a new mutable owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningrefmut"}}],[11,"try_map","","Tries to convert `self` into a new shared owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["owningref"],"name":"result"}}],[11,"try_map_mut","","Tries to convert `self` into a new mutable owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["owningrefmut"],"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningrefmut"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"owningrefmut"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",4,{"inputs":[{"name":"self"}],"output":{"name":"owningrefmut"}}],[11,"owner","","A getter for the underlying owner.",4,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",4,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"new","","Create a new `OwningHandle` for a type that implements `ToHandle`. For types that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts a callback to perform the conversion.",5,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_mut","","Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.",5,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_with_fn","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"self"}}],[11,"try_new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"result"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"owningrefmut"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}]],"paths":[[8,"IntoErased"],[8,"ToHandle"],[8,"ToHandleMut"],[3,"OwningRef"],[3,"OwningRefMut"],[3,"OwningHandle"],[8,"Erased"]]};
searchIndex["parking_lot"] = {"doc":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and `Once` that are smaller, faster and more flexible than those in the Rust standard library. It also provides a `ReentrantMutex` type.","items":[[3,"Once","parking_lot","A synchronization primitive which can be used to run a one-time initialization. Useful for one-time initialization for globals, FFI or related functionality.",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",null,null],[3,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"Condvar","","A Condition Variable",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",null,null],[4,"OnceState","","Current state of a `Once`.",null,null],[13,"New","","A closure has not been executed yet",0,null],[13,"Poisoned","","A closure was executed but panicked.",0,null],[13,"InProgress","","A thread is currently executing a closure.",0,null],[13,"Done","","A closure has completed sucessfully.",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"waittimeoutresult"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and notified.",2,{"inputs":[],"output":{"name":"condvar"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"notify_all","","Wakes up all blocked threads on this condvar.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"wait","","Blocks the current thread until this condition variable receives a notification.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"}],"output":null}],[11,"wait_until","","Waits on this condition variable for a notification, timing out after the specified time instant.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"instant"}],"output":{"name":"waittimeoutresult"}}],[11,"wait_for","","Waits on this condition variable for a notification, timing out after a specified duration.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"waittimeoutresult"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"condvar"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",3,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",3,{"inputs":[{"name":"self"}],"output":{"name":"mutexguard"}}],[11,"try_lock","","Attempts to acquire this lock.",3,{"inputs":[{"name":"self"}],"output":{"generics":["mutexguard"],"name":"option"}}],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["mutexguard"],"name":"option"}}],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",3,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["mutexguard"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock","","Releases the mutex.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_fair","","Releases the mutex using a fair unlock protocol.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_lock","","Acquires a mutex, blocking the current thread until it is able to do so.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_lock","","Attempts to acquire this lock.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new reentrant mutex in an unlocked state ready for use.",5,{"inputs":[{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"into_inner","","Consumes this reentrant mutex, returning the underlying data.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","Acquires a reentrant mutex, blocking the current thread until it is able to do so.",5,{"inputs":[{"name":"self"}],"output":{"name":"reentrantmutexguard"}}],[11,"try_lock","","Attempts to acquire this lock.",5,{"inputs":[{"name":"self"}],"output":{"generics":["reentrantmutexguard"],"name":"option"}}],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",5,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["reentrantmutexguard"],"name":"option"}}],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",5,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["reentrantmutexguard"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock","","Releases the mutex.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_fair","","Releases the mutex using a fair unlock protocol.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_lock","","Acquires a mutex, blocking the current thread until it is able to do so.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_lock","","Attempts to acquire this lock.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"reentrantmutex"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",7,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockreadguard"],"name":"option"}}],[11,"try_read_for","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["rwlockreadguard"],"name":"option"}}],[11,"try_read_until","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["rwlockreadguard"],"name":"option"}}],[11,"read_recursive","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read_recursive","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockreadguard"],"name":"option"}}],[11,"try_read_recursive_for","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["rwlockreadguard"],"name":"option"}}],[11,"try_read_recursive_until","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["rwlockreadguard"],"name":"option"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockwriteguard"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",7,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockwriteguard"],"name":"option"}}],[11,"try_write_for","","Attempts to acquire this rwlock with exclusive write access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["rwlockwriteguard"],"name":"option"}}],[11,"try_write_until","","Attempts to acquire this rwlock with exclusive write access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["rwlockwriteguard"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock_read","","Releases shared read access of the rwlock.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_write","","Releases exclusive write access of the rwlock.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_read_fair","","Releases shared read access of the rwlock using a fair unlock protocol.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_write_fair","","Releases exclusive write access of the rwlock using a fair unlock protocol.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_read","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_read_recursive","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_read_recursive","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_write","","Attempts to lock this rwlock with exclusive write access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"rwlock"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",9,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"oncestate"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"oncestate"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"done","","Returns whether the associated `Once` has successfullly executed a closure.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Once` value.",10,{"inputs":[],"output":{"name":"once"}}],[11,"state","","Returns the current state of this `Once`.",10,{"inputs":[{"name":"self"}],"output":{"name":"oncestate"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure will be executed if this is the first time `call_once` has been called, and otherwise the routine will not be invoked.",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"default","","",10,{"inputs":[],"output":{"name":"once"}}],[6,"MutexGuardRef","","Typedef of an owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"ReentrantMutexGuardRef","","Typedef of an owning reference that uses a `ReentrantMutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of an owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of an owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null]],"paths":[[4,"OnceState"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"Mutex"],[3,"MutexGuard"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Once"]]};
searchIndex["parking_lot_core"] = {"doc":"This library exposes a low-level API for creating your own efficient synchronization primitives.","items":[[3,"ParkToken","parking_lot_core","A value associated with a parked thread which can be used by `unpark_filter`.",null,null],[12,"0","","",0,null],[3,"UnparkResult","","Result of an unpark operation.",null,null],[12,"unparked_threads","","The number of threads that were unparked.",1,null],[12,"have_more_threads","","Whether there are any threads remaining in the queue. This only returns true if a thread was unparked.",1,null],[12,"be_fair","","This is set to true on average once every 0.5ms for any given key. It should be used to switch to a fair unlocking mechanism for a particular unlock.",1,null],[3,"UnparkToken","","A value which is passed from an unparker to a parked thread.",null,null],[12,"0","","",2,null],[3,"SpinWait","","A counter used to perform exponential backoff in spin loops.",null,null],[4,"FilterOp","","Operation that `unpark_filter` should perform for each thread.",null,null],[13,"Unpark","","Unpark the thread and continue scanning the list of parked threads.",3,null],[13,"Skip","","Don't unpark the thread and continue scanning the list of parked threads.",3,null],[13,"Stop","","Don't unpark the thread and stop scanning the list of parked threads.",3,null],[4,"ParkResult","","Result of a park operation.",null,null],[13,"Unparked","","We were unparked by another thread with the given token.",4,null],[13,"Invalid","","The validation callback returned false.",4,null],[13,"TimedOut","","The timeout expired.",4,null],[4,"RequeueOp","","Operation that `unpark_requeue` should perform.",null,null],[13,"Abort","","Abort the operation without doing anything.",5,null],[13,"UnparkOneRequeueRest","","Unpark one thread and requeue the rest onto the target queue.",5,null],[13,"RequeueAll","","Requeue all threads onto the target queue.",5,null],[5,"park","","Parks the current thread in the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"v"},{"name":"b"},{"name":"t"},{"name":"parktoken"},{"generics":["instant"],"name":"option"}],"output":{"name":"parkresult"}}],[5,"unpark_all","","Unparks all threads in the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"unparktoken"}],"output":{"name":"usize"}}],[5,"unpark_filter","","Unparks a number of threads from the front of the queue associated with `key` depending on the results of a filter function which inspects the `ParkToken` associated with each thread.",null,{"inputs":[{"name":"usize"},{"name":"f"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_one","","Unparks one thread from the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_requeue","","Removes all threads from the queue associated with `key_from`, optionally unparks the first one and requeues the rest onto the queue associated with `key_to`.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"v"},{"name":"c"}],"output":{"name":"unparkresult"}}],[11,"new","","Creates a new `SpinWait`.",6,{"inputs":[],"output":{"name":"spinwait"}}],[11,"reset","","Resets a `SpinWait` to its initial state.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"spin","","Spins until the sleep threshold has been reached.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spin_no_yield","","Spins without yielding the thread to the OS.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",6,{"inputs":[],"output":{"name":"spinwait"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"parkresult"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"parkresult"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"parkresult"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_unparked","","Returns true if we were unparked by another thread.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unparkresult"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"unparkresult"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"unparkresult"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"requeueop"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"requeueop"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"filterop"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"filterop"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"unparktoken"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"unparktoken"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"unparktoken"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"parktoken"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parktoken"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parktoken"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"deadlock","","[Experimental] Deadlock detection",null,null],[5,"acquire_resource","parking_lot_core::deadlock","Acquire a resource identified by key in the deadlock detector Noop if deadlock_detection feature isn't enabled. Note: Call after the resource is acquired",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"release_resource","","Release a resource identified by key in the deadlock detector. Noop if deadlock_detection feature isn't enabled. Note: Call before the resource is released # Panics Panics if the resource was already released or wasn't acquired in this thread.",null,{"inputs":[{"name":"usize"}],"output":null}],[17,"DEFAULT_PARK_TOKEN","parking_lot_core","A default park token to use.",null,null],[17,"DEFAULT_UNPARK_TOKEN","","A default unpark token to use.",null,null]],"paths":[[3,"ParkToken"],[3,"UnparkResult"],[3,"UnparkToken"],[4,"FilterOp"],[4,"ParkResult"],[4,"RequeueOp"],[3,"SpinWait"]]};
searchIndex["percent_encoding"] = {"doc":"URLs use special chacters to indicate the parts of the request.  For example, a forward slash indicates a path.  In order for that charcter to exist outside of a path separator, that charcter would need to be encoded.","items":[[3,"SIMPLE_ENCODE_SET","percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",null,null],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",null,null],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",null,null],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",null,null],[3,"PercentDecode","","The return type of `percent_decode()`.",null,null],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",null,{"inputs":[{"name":"u8"}],"output":{"name":"str"}}],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",null,null],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"inputs":[{"name":"str"},{"name":"e"}],"output":{"name":"percentencode"}}],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",null,null],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"simple_encode_set"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"query_encode_set"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"default_encode_set"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"path_segment_encode_set"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",4,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"userinfo_encode_set"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"percentencode"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"percentdecode"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",7,null],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",7,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",7,{"inputs":[{"name":"self"}],"output":{"generics":["cow","utf8error"],"name":"result"}}],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",7,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"cow"}}],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null]],"paths":[[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[3,"PercentDecode"]]};
searchIndex["pest"] = {"doc":"pest. The Elegant Parser","items":[[3,"ParserState","pest","A `struct` which contains the complete state of a `Parser`.",null,null],[12,"atomicity","","Specifies current atomicity",0,null],[12,"stack","","Stack of `Span`s",0,null],[3,"Position","","A `struct` containing a position that is tied to a `&str` which provides useful methods to manually parse it. This leads to an API largely based on the standard `Result`.",null,null],[3,"Span","","A `struct` of a span over a `&str`. It is created from either two `Position`s or from a `Pair`.",null,null],[4,"Error","","An `enum` which defines possible errors.",null,null],[13,"ParsingError","","Generated parsing error with expected and unexpected `Rule`s and a position",1,null],[12,"positives","pest::Error","Positive attempts",1,null],[12,"negatives","","Negative attempts",1,null],[12,"pos","","Deepest position of attempts",1,null],[13,"CustomErrorPos","pest","Custom error with a message and a position",1,null],[12,"message","pest::Error","Short explanation",1,null],[12,"pos","","Error `Position` for formatting",1,null],[13,"CustomErrorSpan","pest","Custom error with a message and a span defined by a start and end position",1,null],[12,"message","pest::Error","Short explanation",1,null],[12,"span","","Error `Span` for formatting",1,null],[4,"Atomicity","pest","An `enum` specifying the current atomicity of a `ParserState`.",null,null],[13,"Atomic","","",2,null],[13,"CompoundAtomic","","",2,null],[13,"NonAtomic","","",2,null],[4,"Lookahead","","An `enum` specifying the current lookahead status of a `ParserState`.",null,null],[13,"Positive","","",3,null],[13,"Negative","","",3,null],[13,"None","","",3,null],[4,"Token","","An `enum` representing tokens generated by a `Parser`.",null,null],[13,"Start","","The starting bit of the `Token`",4,null],[12,"rule","pest::Token","",4,null],[12,"pos","","",4,null],[13,"End","pest","The ending bit of the `Token`",4,null],[12,"rule","pest::Token","",4,null],[12,"pos","","",4,null],[5,"state","pest","Creates a `ParserState` from a `&str`, supplying it to a closure `f`.",null,{"inputs":[{"name":"str"},{"name":"f"}],"output":{"generics":["pairs","error"],"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"renamed_rules","","Renames all `Rule`s from a `ParsingError` variant returning a `CustomErrorPos`. It does nothing when called on `CustomErrorPos` and `CustomErrorSpan` variants.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"iterators","","A `mod` containing iterators and constructs to aid in parser output manipulation.",null,null],[3,"FlatPairs","pest::iterators","A `struct` containing `Pairs`. It is created by `Pairs::flatten`.",null,null],[3,"Pair","","A `struct` containing a matching pair of `Token`s and everything between them.",null,null],[3,"Pairs","","A `struct` containing `Pairs`. It is created by `pest::state` and `Pair::into_inner`.",null,null],[3,"Tokens","","A `struct` containing `Token`s. It is returned by either `Pair::into_iter` or `Pairs::into_iter`",null,null],[11,"tokens","","Converts the `FlatPairs` into a `TokenIterator`.",5,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"flatpairs"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"pair"}}],[11,"as_rule","","Returns the `Rule` of the `Pair`.",6,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"as_str","","Captures a slice from the `&str` defined by the token `Pair`.",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_span","","Returns the `Span` defined by the `Pair`, consuming it.",6,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"into_inner","","Returns the inner `Pairs` between the `Pair`, consuming it.",6,{"inputs":[{"name":"self"}],"output":{"name":"pairs"}}],[11,"tokens","","Converts the `Pair` into a `TokenIterator`.",6,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"pair"}],"output":{"name":"bool"}}],[11,"hash","","",6,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"pairs"}}],[11,"flatten","","Flattens the `Pairs`.",7,{"inputs":[{"name":"self"}],"output":{"name":"flatpairs"}}],[11,"tokens","","Converts the `Pairs` into a `TokenIterator`.",7,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"pairs"}],"output":{"name":"bool"}}],[11,"hash","","",7,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","pest","",3,{"inputs":[{"name":"self"}],"output":{"name":"lookahead"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"lookahead"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"atomicity"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"atomicity"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rule","","Wrapper needed to generate tokens.",0,{"inputs":[{"name":"self"},{"name":"r"},{"name":"position"},{"name":"f"}],"output":{"generics":["position","position"],"name":"result"}}],[11,"sequence","","Wrapper which removes `Tokens` in case of a sequence's failure.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["position","position"],"name":"result"}}],[11,"lookahead","","Wrapper which stops `Token`s from being generated.",0,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"f"}],"output":{"generics":["position","position"],"name":"result"}}],[11,"atomic","","Wrapper which stops `Token`s from being generated according to `is_atomic`.",0,{"inputs":[{"name":"self"},{"name":"atomicity"},{"name":"f"}],"output":{"generics":["position","position"],"name":"result"}}],[11,"from_start","","Creates starting `Position` from an `&str`.",9,{"inputs":[{"name":"str"}],"output":{"name":"position"}}],[11,"pos","","Returns the current byte position as a `usize`.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"span","","Creates a `Span` from two `Position`s.",9,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"span"}}],[11,"line_col","","Returns the line - and column number pair of the current `Position`.",9,null],[11,"line_of","","Returns the actual line of the current `Position`.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"at_start","","Returns `Ok` with the current `Position` if it is at the start of its `&str` or `Err` of the same `Position` otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["position","position"],"name":"result"}}],[11,"at_end","","Returns `Ok` with the current `Position` if it is at the end of its `&str` or `Err` of the same `Position` otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["position","position"],"name":"result"}}],[11,"skip","","Skips `n` `char`s from the `Position` and returns `Ok` with the new `Position` if the skip was possible or `Err` with the current `Position` otherwise.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["position","position"],"name":"result"}}],[11,"match_string","","Matches `string` from the `Position` and returns `Ok` with the new `Position` if a match was made or `Err` with the current `Position` otherwise.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["position","position"],"name":"result"}}],[11,"match_insensitive","","Case-insensitively matches `string` from the `Position` and returns `Ok` with the new `Position` if a match was made or `Err` with the current `Position` otherwise.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["position","position"],"name":"result"}}],[11,"match_range","","Matches `char` `range` from the `Position` and returns `Ok` with the new `Position` if a match was made or `Err` with the current `Position` otherwise.",9,{"inputs":[{"name":"self"},{"generics":["char"],"name":"range"}],"output":{"generics":["position","position"],"name":"result"}}],[11,"sequence","","Starts a sequence of transformations provided by `f` from the `Position`. It returns the same `Result` returned by `f` in the case of an `Ok` or `Err` with the current `Position` otherwise.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["position","position"],"name":"result"}}],[11,"lookahead","","Starts a lookahead transformation provided by `f` from the `Position`. It returns `Ok` with the current position if `f` also returns an `Ok` or `Err` with the current `Position` otherwise.",9,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"f"}],"output":{"generics":["position","position"],"name":"result"}}],[11,"optional","","Optionally applies the transformation provided by `f` from the `Position`. It returns `Ok` with the `Position` returned by `f` regardless of the `Result`.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["position","position"],"name":"result"}}],[11,"repeat","","Repeatedly applies the transformation provided by `f` from the `Position`. It returns `Ok` with the first `Position` returned by `f` which is wrapped up in an `Err`.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["position","position"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"ordering"}}],[11,"hash","","",9,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"prec_climber","","A `mod` containing constructs useful in infix operator parsing with the precedence climbing method.",null,null],[3,"Operator","pest::prec_climber","A `struct` defining an infix operator used in `PrecClimber`.",null,null],[3,"PrecClimber","","A `struct` useful in order to perform [precedence climbing][1] on infix expressions contained in a `Pairs`. The token pairs contained in the `Pairs` should start with a primary pair and then alternate between an operator and a primary.",null,null],[4,"Assoc","","An `enum` describing an `Operator`'s associativity.",null,null],[13,"Left","","Left `Operator` associativity",10,null],[13,"Right","","Right `Operator` associativity",10,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"assoc"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"assoc"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Operator` from a `Rule` and `Assoc`.",11,{"inputs":[{"name":"r"},{"name":"assoc"}],"output":{"name":"operator"}}],[11,"bitor","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `PrecClimber` from the `Operator`s contained in `ops`. Every entry in the `Vec` has precedence index + 1. In order to have operators with same precedence, they need to be chained with `|` between them.",12,{"inputs":[{"generics":["operator"],"name":"vec"}],"output":{"name":"precclimber"}}],[11,"climb","","Performs the precedence climbing algorithm on the `pairs` in a similar manner to map-reduce. Primary pairs are mapped with `primary` and then reduced to one single result with `infix`.",12,{"inputs":[{"name":"self"},{"name":"p"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"start","pest","Returns the `Span`'s start byte position as a `usize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the `Span`'s end byte position as a `usize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"start_pos","","Returns the `Span`'s start `Position`.",13,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"end_pos","","Returns the `Span`'s end `Position`.",13,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"split","","Splits the `Span` into a pair of `Position`s.",13,null],[11,"as_str","","Captures a slice from the `&str` defined by the `Span`.",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"ordering"}}],[11,"hash","","",13,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[8,"RuleType","","A `trait` which parser rules must implement.",null,null],[8,"Parser","","A `trait` that defines a `Parser`.",null,null],[10,"parse","","Parses an `&str` starting from `rule`.",14,{"inputs":[{"name":"r"},{"name":"str"}],"output":{"generics":["pairs","error"],"name":"result"}}],[14,"parses_to","","A `macro` which facilitates grammar testing and debugging by comparing produced tokens.",null,null],[14,"fails_with","","A `macro` which facilitates grammar testing and debugging by comparing produced errors.",null,null]],"paths":[[3,"ParserState"],[4,"Error"],[4,"Atomicity"],[4,"Lookahead"],[4,"Token"],[3,"FlatPairs"],[3,"Pair"],[3,"Pairs"],[3,"Tokens"],[3,"Position"],[4,"Assoc"],[3,"Operator"],[3,"PrecClimber"],[3,"Span"],[8,"Parser"]]};
searchIndex["pest_derive"] = {"doc":"pest. The Elegant Parser","items":[[5,"derive_parser","pest_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["phf"] = {"doc":"Compile time optimized maps and sets.","items":[[8,"PhfHash","phf","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,null],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null],[3,"Map","","An immutable map constructed at compile time.",null,null],[3,"Set","","An immutable set constructed at compile time.",null,null],[3,"OrderedMap","","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedSet","","An order-preserving immutable set constructed at compile time.",null,null],[0,"map","","An immutable map constructed at compile time.",null,null],[3,"Map","phf::map","An immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the key/value pairs in a `Map`.",null,null],[3,"Keys","","An iterator over the keys in a `Map`.",null,null],[3,"Values","","An iterator over the values in a `Map`.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"v"}}],[11,"is_empty","","Returns true if the `Map` is empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of entries in the `Map`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contains_key","","Determines if `key` is in the `Map`.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value that `key` maps to.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_key","","Returns a reference to the map's internal static instance of the given key.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_entry","","Like `get`, but returns both the key and the value.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"entries","","Returns an iterator over the key/value pairs in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"keys","","Returns an iterator over the keys in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator over the values in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"set","phf","An immutable set constructed at compile time.",null,null],[3,"Set","phf::set","An immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `Set`.",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in the `Set`.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Set` contains no elements.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_key","","Returns a reference to the set's internal static instance of the given key.",5,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"contains","","Returns true if `value` is in the `Set`.",5,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the values in the set.",5,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",5,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns true if `other` contains all values in `self`.",5,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns true if `self` contains all values in `other`.",5,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ordered_map","phf","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedMap","phf::ordered_map","An order-preserving immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the entries in a `OrderedMap`.",null,null],[3,"Keys","","An iterator over the keys in a `OrderedMap`.",null,null],[3,"Values","","An iterator over the values in a `OrderedMap`.",null,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"v"}}],[11,"len","","Returns the number of entries in the `Map`.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Map` is empty.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value that `key` maps to.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_key","","Returns a reference to the map's internal static instance of the given key.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"contains_key","","Determines if `key` is in the `Map`.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_index","","Returns the index of the key within the list used to initialize the ordered map.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["usize"],"name":"option"}}],[11,"index","","Returns references to both the key and values at an index within the list used to initialize the ordered map. See `.get_index(key)`.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_entry","","Like `get`, but returns both the key and the value.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"entries","","Returns an iterator over the key/value pairs in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"keys","","Returns an iterator over the keys in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator over the values in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ordered_set","phf","An order-preserving immutable set constructed at compile time.",null,null],[3,"OrderedSet","phf::ordered_set","An order-preserving immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `OrderedSet`.",null,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in the `OrderedSet`.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `OrderedSet` contains no elements.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_key","","Returns a reference to the set's internal static instance of the given key.",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"get_index","","Returns the index of the key within the list used to initialize the ordered set.",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"generics":["usize"],"name":"option"}}],[11,"index","","Returns a reference to the key at an index within the list used to initialize the ordered set. See `.get_index(key)`.",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains","","Returns true if `value` is in the `Set`.",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the values in the set.",11,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",11,{"inputs":[{"name":"self"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns true if `other` contains all values in `self`.",11,{"inputs":[{"name":"self"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns true if `self` contains all values in `other`.",11,{"inputs":[{"name":"self"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"PhfHash"],[3,"Map"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"Set"],[3,"Iter"],[3,"OrderedMap"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OrderedSet"],[3,"Iter"]]};
searchIndex["phf_shared"] = {"doc":"","items":[[5,"displace","phf_shared","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"split","","",null,null],[5,"hash","","`key` is from `phf_generator::HashState::key`.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"get_index","","Return an index into `phf_generator::HashState::map`.",null,null],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null]],"paths":[[8,"PhfHash"]]};
searchIndex["pipeline"] = {"doc":"pipe_macros A small macro library that allows you to pipe functions similar to the pipe operator in Elixir and F# (|>)","items":[[14,"pipe_fun","pipeline","",null,null],[14,"pipe","","",null,null],[14,"pipe_res","","",null,null],[14,"pipe_opt","","",null,null]],"paths":[]};
searchIndex["png"] = {"doc":"PNG encoder and decoder This crate contains a PNG encoder and decoder. It supports reading of single lines or whole frames. ## The decoder The most important types for decoding purposes are `Decoder` and `Reader`. They both wrap a `std::io::Read`. `Decoder` serves as a builder for `Reader`. Calling `Decoder::read_info` reads from the `Read` until the image data is reached. ### Using the decoder     use std::fs::File;","items":[[3,"PixelDimensions","png","Pixel dimensions information",null,null],[12,"xppu","","Pixels per unit, X axis",0,null],[12,"yppu","","Pixels per unit, Y axis",0,null],[12,"unit","","Either Meter or Unspecified",0,null],[3,"FrameControl","","Frame control information",null,null],[12,"sequence_number","","Sequence number of the animation chunk, starting from 0",1,null],[12,"width","","Width of the following frame",1,null],[12,"height","","Height of the following frame",1,null],[12,"x_offset","","X position at which to render the following frame",1,null],[12,"y_offset","","Y position at which to render the following frame",1,null],[12,"delay_num","","Frame delay fraction numerator",1,null],[12,"delay_den","","Frame delay fraction denominator",1,null],[12,"dispose_op","","Type of frame area disposal to be done after rendering this frame",1,null],[12,"blend_op","","Type of frame area rendering for this frame",1,null],[3,"AnimationControl","","Animation control information",null,null],[12,"num_frames","","Number of frames",2,null],[12,"num_plays","","Number of times to loop this APNG.  0 indicates infinite looping.",2,null],[3,"Info","","PNG info struct",null,null],[12,"width","","",3,null],[12,"height","","",3,null],[12,"bit_depth","","",3,null],[12,"color_type","","",3,null],[12,"interlaced","","",3,null],[12,"trns","","",3,null],[12,"pixel_dims","","",3,null],[12,"palette","","",3,null],[12,"frame_control","","",3,null],[12,"animation_control","","",3,null],[3,"Transformations","","Output transformations",null,null],[3,"Decoder","","PNG Decoder",null,null],[3,"Reader","","PNG reader (mostly high-level interface)",null,null],[3,"OutputInfo","","Output info",null,null],[12,"width","","",4,null],[12,"height","","",4,null],[12,"color_type","","",4,null],[12,"bit_depth","","",4,null],[12,"line_size","","",4,null],[3,"StreamingDecoder","","PNG StreamingDecoder (low-level interface)",null,null],[3,"Encoder","","PNG Encoder",null,null],[3,"Writer","","PNG writer",null,null],[4,"ColorType","","",null,null],[13,"Grayscale","","",5,null],[13,"RGB","","",5,null],[13,"Indexed","","",5,null],[13,"GrayscaleAlpha","","",5,null],[13,"RGBA","","",5,null],[4,"BitDepth","","Bit depth of the png file",null,null],[13,"One","","",6,null],[13,"Two","","",6,null],[13,"Four","","",6,null],[13,"Eight","","",6,null],[13,"Sixteen","","",6,null],[4,"Unit","","Physical unit of the pixel dimensions",null,null],[13,"Unspecified","","",7,null],[13,"Meter","","",7,null],[4,"Decoded","","Result of the decoding process",null,null],[13,"Nothing","","Nothing decoded yet",8,null],[13,"Header","","",8,null],[13,"ChunkBegin","","",8,null],[13,"ChunkComplete","","",8,null],[13,"PixelDimensions","","",8,null],[13,"AnimationControl","","",8,null],[13,"FrameControl","","",8,null],[13,"ImageData","","Decoded raw image data.",8,null],[13,"PartialChunk","","",8,null],[13,"ImageEnd","","",8,null],[4,"DecodingError","","",null,null],[13,"IoError","","",9,null],[13,"Format","","",9,null],[13,"InvalidSignature","","",9,null],[13,"CrcMismatch","","",9,null],[12,"recover","png::DecodingError","bytes to skip to try to recover from this error",9,null],[12,"crc_val","","Stored CRC32 value",9,null],[12,"crc_sum","","Calculated CRC32 sum",9,null],[12,"chunk","","",9,null],[13,"Other","png","",9,null],[13,"CorruptFlateStream","","",9,null],[4,"EncodingError","","",null,null],[13,"IoError","","",10,null],[13,"Format","","",10,null],[0,"chunk","","Chunk types and functions",null,null],[5,"is_critical","png::chunk","Returns true if the chunk is critical.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"is_private","","Returns true if the chunk is private.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"reserved_set","","Checks whether the reserved bit of the chunk name is set. If it is set the chunk name is invalid.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"safe_to_copy","","Returns true if the chunk is safe to copy if unknown.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[6,"ChunkType","","",null,null],[17,"IHDR","","Image header",null,null],[17,"PLTE","","Palette",null,null],[17,"IDAT","","Image data",null,null],[17,"IEND","","Image trailer",null,null],[17,"tRNS","","Transparency",null,null],[17,"bKGD","","Background colour",null,null],[17,"tIME","","Image last-modification time",null,null],[17,"pHYs","","Physical pixel dimensions",null,null],[17,"acTL","","Animation control",null,null],[17,"fcTL","","Frame control",null,null],[17,"fdAT","","Frame data",null,null],[11,"fmt","png","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"error"}],"output":{"name":"decodingerror"}}],[11,"from","","",9,{"inputs":[{"name":"string"}],"output":{"name":"decodingerror"}}],[11,"new","","Creates a new StreamingDecoder",11,{"inputs":[],"output":{"name":"streamingdecoder"}}],[11,"reset","","Resets the StreamingDecoder",11,{"inputs":[{"name":"self"}],"output":null}],[11,"update","","Low level StreamingDecoder interface.",11,null],[11,"set_param","","",12,{"inputs":[{"name":"self"},{"name":"decoder"}],"output":null}],[11,"buffer_size","","Returns the size needed to hold a decoded frame",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",13,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads all meta data until the first IDAT chunk",13,{"inputs":[{"name":"self"}],"output":{"generics":["decodingerror"],"name":"result"}}],[11,"info","","",14,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"next_frame","","Decodes the next frame into `buf`",14,null],[11,"next_row","","Returns the next processed row of the image",14,{"inputs":[{"name":"self"}],"output":{"generics":["option","decodingerror"],"name":"result"}}],[11,"next_interlaced_row","","Returns the next processed row of the image",14,{"inputs":[{"name":"self"}],"output":{"generics":["option","decodingerror"],"name":"result"}}],[11,"output_color_type","","Returns the color type and the number of bits per sample of the data returned by `Reader::next_row` and Reader::frames`.",14,null],[11,"output_buffer_size","","Returns the number of bytes required to hold a deinterlaced image frame that is decoded using the given input transformations.",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"output_line_size","","Returns the number of bytes required to hold a deinterlaced row.",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",10,{"inputs":[{"name":"error"}],"output":{"name":"encodingerror"}}],[11,"new","","",15,{"inputs":[{"name":"w"},{"name":"u32"},{"name":"u32"}],"output":{"name":"encoder"}}],[11,"write_header","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["writer","encodingerror"],"name":"result"}}],[11,"set_param","","",5,{"inputs":[{"name":"self"},{"name":"encoder"}],"output":null}],[11,"set_param","","",6,{"inputs":[{"name":"self"},{"name":"encoder"}],"output":null}],[11,"write_chunk","","",16,null],[11,"write_image_data","","Writes the image data.",16,null],[11,"drop","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"colortype"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"samples","","Returns the number of samples used per pixel of `ColorType`",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",5,{"inputs":[{"name":"u8"}],"output":{"generics":["colortype"],"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bitdepth"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"bitdepth"}],"output":{"name":"bool"}}],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",6,{"inputs":[{"name":"u8"}],"output":{"generics":["bitdepth"],"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"pixeldimensions"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unit"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"bool"}}],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",7,{"inputs":[{"name":"u8"}],"output":{"generics":["unit"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"animationcontrol"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"info"}}],[11,"size","","Size of the image",3,null],[11,"is_animated","","Returns true if the image is an APNG image.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"animation_control","","Returns the frame control information of the image",3,{"inputs":[{"name":"self"}],"output":{"generics":["animationcontrol"],"name":"option"}}],[11,"frame_control","","Returns the frame control information of the current frame",3,{"inputs":[{"name":"self"}],"output":{"generics":["framecontrol"],"name":"option"}}],[11,"bits_per_pixel","","Returns the bits per pixel",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes_per_pixel","","Returns the bytes per pixel",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"raw_bytes","","Returns the number of bytes needed for one deinterlaced image",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"raw_row_length","","Returns the number of bytes needed for one deinterlaced row ",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"raw_row_length_from_width","","Returns the number of bytes needed for one deinterlaced row of width `width`",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"transformations"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"ordering"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"IDENTITY","","No transformation",12,null],[18,"STRIP_16","","Strip 16-bit samples to 8 bits",12,null],[18,"STRIP_ALPHA","","Discard the alpha channel",12,null],[18,"PACKING","","Expand 1; 2 and 4-bit samples to bytes",12,null],[18,"PACKSWAP","","Change order of packed pixels to LSB first",12,null],[18,"EXPAND","","Expand paletted images to RGB; expand grayscale images of less than 8-bit depth to 8-bit depth; and expand tRNS chunks to alpha channels.",12,null],[18,"INVERT_MONO","","Invert monochrome images",12,null],[18,"SHIFT","","Normalize pixels to the sBIT depth",12,null],[18,"BGR","","Flip RGB to BGR; RGBA to BGRA",12,null],[18,"SWAP_ALPHA","","Flip RGBA to ARGB or GA to AG",12,null],[18,"SWAP_ENDIAN","","Byte-swap 16-bit samples",12,null],[18,"INVERT_ALPHA","","Change alpha from opacity to transparency",12,null],[18,"STRIP_FILLER","","",12,null],[18,"STRIP_FILLER_BEFORE","","",12,null],[18,"STRIP_FILLER_AFTER","","",12,null],[18,"GRAY_TO_RGB","","",12,null],[18,"EXPAND_16","","",12,null],[18,"SCALE_16","","",12,null],[11,"empty","","Returns an empty set of flags.",12,{"inputs":[],"output":{"name":"transformations"}}],[11,"all","","Returns the set containing all flags.",12,{"inputs":[],"output":{"name":"transformations"}}],[11,"bits","","Returns the raw value of the flags currently stored.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",12,{"inputs":[{"name":"u32"}],"output":{"generics":["transformations"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",12,{"inputs":[{"name":"u32"}],"output":{"name":"transformations"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",12,{"inputs":[{"name":"self"},{"name":"transformations"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitor_assign","","Adds the set of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitxor_assign","","Toggles the set of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"sub_assign","","Disables all flags enabled in the set.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",12,{"inputs":[{"name":"self"}],"output":{"name":"transformations"}}],[11,"extend","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",12,{"inputs":[{"name":"t"}],"output":{"name":"transformations"}}],[8,"Parameter","","Configuration parameter trait",null,null],[10,"set_param","","",17,{"inputs":[{"name":"self"},{"name":"object"}],"output":null}],[8,"HasParameters","","Object has parameters",null,null],[11,"set","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}]],"paths":[[3,"PixelDimensions"],[3,"FrameControl"],[3,"AnimationControl"],[3,"Info"],[3,"OutputInfo"],[4,"ColorType"],[4,"BitDepth"],[4,"Unit"],[4,"Decoded"],[4,"DecodingError"],[4,"EncodingError"],[3,"StreamingDecoder"],[3,"Transformations"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[3,"Writer"],[8,"Parameter"],[8,"HasParameters"]]};
searchIndex["pq_sys"] = {"doc":"","items":[[3,"__BindgenUnionField","pq_sys","",null,null],[3,"__sbuf","","",null,null],[12,"_base","","",0,null],[12,"_size","","",0,null],[3,"__sFILEX","","",null,null],[3,"__sFILE","","",null,null],[12,"_p","","",1,null],[12,"_r","","",1,null],[12,"_w","","",1,null],[12,"_flags","","",1,null],[12,"_file","","",1,null],[12,"_bf","","",1,null],[12,"_lbfsize","","",1,null],[12,"_cookie","","",1,null],[12,"_close","","",1,null],[12,"_read","","",1,null],[12,"_seek","","",1,null],[12,"_write","","",1,null],[12,"_ub","","",1,null],[12,"_extra","","",1,null],[12,"_ur","","",1,null],[12,"_ubuf","","",1,null],[12,"_nbuf","","",1,null],[12,"_lb","","",1,null],[12,"_blksize","","",1,null],[12,"_offset","","",1,null],[3,"pg_conn","","",null,null],[3,"pg_result","","",null,null],[3,"pg_cancel","","",null,null],[3,"pgNotify","","",null,null],[12,"relname","","",2,null],[12,"be_pid","","",2,null],[12,"extra","","",2,null],[12,"next","","",2,null],[3,"_PQprintOpt","","",null,null],[12,"header","","",3,null],[12,"align","","",3,null],[12,"standard","","",3,null],[12,"html3","","",3,null],[12,"expanded","","",3,null],[12,"pager","","",3,null],[12,"fieldSep","","",3,null],[12,"tableOpt","","",3,null],[12,"caption","","",3,null],[12,"fieldName","","",3,null],[3,"_PQconninfoOption","","",null,null],[12,"keyword","","",4,null],[12,"envvar","","",4,null],[12,"compiled","","",4,null],[12,"val","","",4,null],[12,"label","","",4,null],[12,"dispchar","","",4,null],[12,"dispsize","","",4,null],[3,"_bindgen_ty_8","","",null,null],[12,"len","","",5,null],[12,"isint","","",5,null],[12,"u","","",5,null],[3,"_bindgen_ty_8__bindgen_ty_1","","",null,null],[12,"ptr","","",6,null],[12,"integer","","",6,null],[12,"bindgen_union_field","","",6,null],[3,"pgresAttDesc","","",null,null],[12,"name","","",7,null],[12,"tableid","","",7,null],[12,"columnid","","",7,null],[12,"format","","",7,null],[12,"typid","","",7,null],[12,"typlen","","",7,null],[12,"atttypmod","","",7,null],[4,"_bindgen_ty_2","","",null,null],[13,"CONNECTION_OK","","",8,null],[13,"CONNECTION_BAD","","",8,null],[13,"CONNECTION_STARTED","","",8,null],[13,"CONNECTION_MADE","","",8,null],[13,"CONNECTION_AWAITING_RESPONSE","","",8,null],[13,"CONNECTION_AUTH_OK","","",8,null],[13,"CONNECTION_SETENV","","",8,null],[13,"CONNECTION_SSL_STARTUP","","",8,null],[13,"CONNECTION_NEEDED","","",8,null],[4,"_bindgen_ty_3","","",null,null],[13,"PGRES_POLLING_FAILED","","",9,null],[13,"PGRES_POLLING_READING","","",9,null],[13,"PGRES_POLLING_WRITING","","",9,null],[13,"PGRES_POLLING_OK","","",9,null],[13,"PGRES_POLLING_ACTIVE","","",9,null],[4,"_bindgen_ty_4","","",null,null],[13,"PGRES_EMPTY_QUERY","","",10,null],[13,"PGRES_COMMAND_OK","","",10,null],[13,"PGRES_TUPLES_OK","","",10,null],[13,"PGRES_COPY_OUT","","",10,null],[13,"PGRES_COPY_IN","","",10,null],[13,"PGRES_BAD_RESPONSE","","",10,null],[13,"PGRES_NONFATAL_ERROR","","",10,null],[13,"PGRES_FATAL_ERROR","","",10,null],[13,"PGRES_COPY_BOTH","","",10,null],[13,"PGRES_SINGLE_TUPLE","","",10,null],[4,"_bindgen_ty_5","","",null,null],[13,"PQTRANS_IDLE","","",11,null],[13,"PQTRANS_ACTIVE","","",11,null],[13,"PQTRANS_INTRANS","","",11,null],[13,"PQTRANS_INERROR","","",11,null],[13,"PQTRANS_UNKNOWN","","",11,null],[4,"_bindgen_ty_6","","",null,null],[13,"PQERRORS_TERSE","","",12,null],[13,"PQERRORS_DEFAULT","","",12,null],[13,"PQERRORS_VERBOSE","","",12,null],[4,"_bindgen_ty_7","","",null,null],[13,"PQPING_OK","","",13,null],[13,"PQPING_REJECT","","",13,null],[13,"PQPING_NO_RESPONSE","","",13,null],[13,"PQPING_NO_ATTEMPT","","",13,null],[5,"PQconnectStart","","",null,null],[5,"PQconnectStartParams","","",null,null],[5,"PQconnectPoll","","",null,null],[5,"PQconnectdb","","",null,null],[5,"PQconnectdbParams","","",null,null],[5,"PQsetdbLogin","","",null,null],[5,"PQfinish","","",null,null],[5,"PQconndefaults","","",null,null],[5,"PQconninfoParse","","",null,null],[5,"PQconninfo","","",null,null],[5,"PQconninfoFree","","",null,null],[5,"PQresetStart","","",null,null],[5,"PQresetPoll","","",null,null],[5,"PQreset","","",null,null],[5,"PQgetCancel","","",null,null],[5,"PQfreeCancel","","",null,null],[5,"PQcancel","","",null,null],[5,"PQrequestCancel","","",null,null],[5,"PQdb","","",null,null],[5,"PQuser","","",null,null],[5,"PQpass","","",null,null],[5,"PQhost","","",null,null],[5,"PQport","","",null,null],[5,"PQtty","","",null,null],[5,"PQoptions","","",null,null],[5,"PQstatus","","",null,null],[5,"PQtransactionStatus","","",null,null],[5,"PQparameterStatus","","",null,null],[5,"PQprotocolVersion","","",null,null],[5,"PQserverVersion","","",null,null],[5,"PQerrorMessage","","",null,null],[5,"PQsocket","","",null,null],[5,"PQbackendPID","","",null,null],[5,"PQconnectionNeedsPassword","","",null,null],[5,"PQconnectionUsedPassword","","",null,null],[5,"PQclientEncoding","","",null,null],[5,"PQsetClientEncoding","","",null,null],[5,"PQsslInUse","","",null,null],[5,"PQsslStruct","","",null,null],[5,"PQsslAttribute","","",null,null],[5,"PQsslAttributeNames","","",null,null],[5,"PQgetssl","","",null,null],[5,"PQinitSSL","","",null,null],[5,"PQinitOpenSSL","","",null,null],[5,"PQsetErrorVerbosity","","",null,null],[5,"PQtrace","","",null,null],[5,"PQuntrace","","",null,null],[5,"PQsetNoticeReceiver","","",null,null],[5,"PQsetNoticeProcessor","","",null,null],[5,"PQregisterThreadLock","","",null,null],[5,"PQexec","","",null,null],[5,"PQexecParams","","",null,null],[5,"PQprepare","","",null,null],[5,"PQexecPrepared","","",null,null],[5,"PQsendQuery","","",null,null],[5,"PQsendQueryParams","","",null,null],[5,"PQsendPrepare","","",null,null],[5,"PQsendQueryPrepared","","",null,null],[5,"PQsetSingleRowMode","","",null,null],[5,"PQgetResult","","",null,null],[5,"PQisBusy","","",null,null],[5,"PQconsumeInput","","",null,null],[5,"PQnotifies","","",null,null],[5,"PQputCopyData","","",null,null],[5,"PQputCopyEnd","","",null,null],[5,"PQgetCopyData","","",null,null],[5,"PQgetline","","",null,null],[5,"PQputline","","",null,null],[5,"PQgetlineAsync","","",null,null],[5,"PQputnbytes","","",null,null],[5,"PQendcopy","","",null,null],[5,"PQsetnonblocking","","",null,null],[5,"PQisnonblocking","","",null,null],[5,"PQisthreadsafe","","",null,null],[5,"PQping","","",null,null],[5,"PQpingParams","","",null,null],[5,"PQflush","","",null,null],[5,"PQfn","","",null,null],[5,"PQresultStatus","","",null,null],[5,"PQresStatus","","",null,null],[5,"PQresultErrorMessage","","",null,null],[5,"PQresultErrorField","","",null,null],[5,"PQntuples","","",null,null],[5,"PQnfields","","",null,null],[5,"PQbinaryTuples","","",null,null],[5,"PQfname","","",null,null],[5,"PQfnumber","","",null,null],[5,"PQftable","","",null,null],[5,"PQftablecol","","",null,null],[5,"PQfformat","","",null,null],[5,"PQftype","","",null,null],[5,"PQfsize","","",null,null],[5,"PQfmod","","",null,null],[5,"PQcmdStatus","","",null,null],[5,"PQoidStatus","","",null,null],[5,"PQoidValue","","",null,null],[5,"PQcmdTuples","","",null,null],[5,"PQgetvalue","","",null,null],[5,"PQgetlength","","",null,null],[5,"PQgetisnull","","",null,null],[5,"PQnparams","","",null,null],[5,"PQparamtype","","",null,null],[5,"PQdescribePrepared","","",null,null],[5,"PQdescribePortal","","",null,null],[5,"PQsendDescribePrepared","","",null,null],[5,"PQsendDescribePortal","","",null,null],[5,"PQclear","","",null,null],[5,"PQfreemem","","",null,null],[5,"PQmakeEmptyPGresult","","",null,null],[5,"PQcopyResult","","",null,null],[5,"PQsetResultAttrs","","",null,null],[5,"PQresultAlloc","","",null,null],[5,"PQsetvalue","","",null,null],[5,"PQescapeStringConn","","",null,null],[5,"PQescapeLiteral","","",null,null],[5,"PQescapeIdentifier","","",null,null],[5,"PQescapeByteaConn","","",null,null],[5,"PQunescapeBytea","","",null,null],[5,"PQescapeString","","",null,null],[5,"PQescapeBytea","","",null,null],[5,"PQprint","","",null,null],[5,"PQdisplayTuples","","",null,null],[5,"PQprintTuples","","",null,null],[5,"PQlibVersion","","",null,null],[5,"PQmblen","","",null,null],[5,"PQdsplen","","",null,null],[5,"PQenv2encoding","","",null,null],[5,"PQencryptPassword","","",null,null],[6,"__int64_t","","",null,null],[6,"__darwin_size_t","","",null,null],[6,"__darwin_off_t","","",null,null],[6,"fpos_t","","",null,null],[6,"FILE","","",null,null],[6,"Oid","","",null,null],[6,"PGconn","","",null,null],[6,"PGresult","","",null,null],[6,"PGcancel","","",null,null],[6,"PGnotify","","",null,null],[6,"PQnoticeReceiver","","",null,null],[6,"PQnoticeProcessor","","",null,null],[6,"pqbool","","",null,null],[6,"PQprintOpt","","",null,null],[6,"PQconninfoOption","","",null,null],[6,"PQArgBlock","","",null,null],[6,"PGresAttDesc","","",null,null],[6,"pgthreadlock_t","","",null,null],[17,"CONNECTION_OK","","",null,null],[17,"CONNECTION_BAD","","",null,null],[17,"CONNECTION_STARTED","","",null,null],[17,"CONNECTION_MADE","","",null,null],[17,"CONNECTION_AWAITING_RESPONSE","","",null,null],[17,"CONNECTION_AUTH_OK","","",null,null],[17,"CONNECTION_SETENV","","",null,null],[17,"CONNECTION_SSL_STARTUP","","",null,null],[17,"CONNECTION_NEEDED","","",null,null],[17,"PGRES_POLLING_FAILED","","",null,null],[17,"PGRES_POLLING_READING","","",null,null],[17,"PGRES_POLLING_WRITING","","",null,null],[17,"PGRES_POLLING_OK","","",null,null],[17,"PGRES_POLLING_ACTIVE","","",null,null],[17,"PGRES_EMPTY_QUERY","","",null,null],[17,"PGRES_COMMAND_OK","","",null,null],[17,"PGRES_TUPLES_OK","","",null,null],[17,"PGRES_COPY_OUT","","",null,null],[17,"PGRES_COPY_IN","","",null,null],[17,"PGRES_BAD_RESPONSE","","",null,null],[17,"PGRES_NONFATAL_ERROR","","",null,null],[17,"PGRES_FATAL_ERROR","","",null,null],[17,"PGRES_COPY_BOTH","","",null,null],[17,"PGRES_SINGLE_TUPLE","","",null,null],[17,"PQTRANS_IDLE","","",null,null],[17,"PQTRANS_ACTIVE","","",null,null],[17,"PQTRANS_INTRANS","","",null,null],[17,"PQTRANS_INERROR","","",null,null],[17,"PQTRANS_UNKNOWN","","",null,null],[17,"PQERRORS_TERSE","","",null,null],[17,"PQERRORS_DEFAULT","","",null,null],[17,"PQERRORS_VERBOSE","","",null,null],[17,"PQPING_OK","","",null,null],[17,"PQPING_REJECT","","",null,null],[17,"PQPING_NO_RESPONSE","","",null,null],[17,"PQPING_NO_ATTEMPT","","",null,null],[11,"new","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"__sfilex"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"_bindgen_ty_2"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"_bindgen_ty_2"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"_bindgen_ty_3"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"_bindgen_ty_3"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"_bindgen_ty_4"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"_bindgen_ty_4"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"_bindgen_ty_5"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"_bindgen_ty_5"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"_bindgen_ty_6"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"_bindgen_ty_6"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"_bindgen_ty_7"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"_bindgen_ty_7"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"pg_conn"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"pg_result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"pg_cancel"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}]],"paths":[[3,"__sbuf"],[3,"__sFILE"],[3,"pgNotify"],[3,"_PQprintOpt"],[3,"_PQconninfoOption"],[3,"_bindgen_ty_8"],[3,"_bindgen_ty_8__bindgen_ty_1"],[3,"pgresAttDesc"],[4,"_bindgen_ty_2"],[4,"_bindgen_ty_3"],[4,"_bindgen_ty_4"],[4,"_bindgen_ty_5"],[4,"_bindgen_ty_6"],[4,"_bindgen_ty_7"],[3,"__BindgenUnionField"],[3,"__sFILEX"],[3,"pg_conn"],[3,"pg_result"],[3,"pg_cancel"]]};
searchIndex["proc_macro2"] = {"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","",null,null],[3,"LexError","","",null,null],[3,"Span","","",null,null],[3,"Group","","",null,null],[3,"Op","","",null,null],[3,"Term","","",null,null],[3,"Literal","","",null,null],[4,"TokenTree","","",null,null],[13,"Group","","",0,null],[13,"Term","","",0,null],[13,"Op","","",0,null],[13,"Literal","","",0,null],[4,"Delimiter","","",null,null],[13,"Parenthesis","","",1,null],[13,"Brace","","",1,null],[13,"Bracket","","",1,null],[13,"None","","",1,null],[4,"Spacing","","",null,null],[13,"Alone","","",2,null],[13,"Joint","","",2,null],[0,"token_stream","","",null,null],[3,"IntoIter","proc_macro2::token_stream","",null,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["tokentree"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter","proc_macro2","",4,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"is_empty","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["tokenstream","lexerror"],"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"call_site","","",6,{"inputs":[],"output":{"name":"span"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"span","","",0,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"from","","",0,{"inputs":[{"name":"group"}],"output":{"name":"tokentree"}}],[11,"from","","",0,{"inputs":[{"name":"term"}],"output":{"name":"tokentree"}}],[11,"from","","",0,{"inputs":[{"name":"op"}],"output":{"name":"tokentree"}}],[11,"from","","",0,{"inputs":[{"name":"literal"}],"output":{"name":"tokentree"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"delimiter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"delimiter"}],"output":{"name":"bool"}}],[11,"new","","",7,{"inputs":[{"name":"delimiter"},{"name":"tokenstream"}],"output":{"name":"group"}}],[11,"delimiter","","",7,{"inputs":[{"name":"self"}],"output":{"name":"delimiter"}}],[11,"stream","","",7,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"span","","",7,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",7,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"op"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"spacing"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"spacing"}],"output":{"name":"bool"}}],[11,"new","","",8,{"inputs":[{"name":"char"},{"name":"spacing"}],"output":{"name":"op"}}],[11,"op","","",8,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"spacing","","",8,{"inputs":[{"name":"self"}],"output":{"name":"spacing"}}],[11,"span","","",8,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",8,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"term"}}],[11,"new","","",9,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"term"}}],[11,"as_str","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"span","","",9,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",9,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"u8_suffixed","","",10,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"u16_suffixed","","",10,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"u32_suffixed","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"u64_suffixed","","",10,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"usize_suffixed","","",10,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"i8_suffixed","","",10,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"i16_suffixed","","",10,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"i32_suffixed","","",10,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"i64_suffixed","","",10,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"isize_suffixed","","",10,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"u8_unsuffixed","","",10,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"u16_unsuffixed","","",10,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"u32_unsuffixed","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"u64_unsuffixed","","",10,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"usize_unsuffixed","","",10,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"i8_unsuffixed","","",10,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"i16_unsuffixed","","",10,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"i32_unsuffixed","","",10,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"i64_unsuffixed","","",10,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"isize_unsuffixed","","",10,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"f64_unsuffixed","","",10,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f64_suffixed","","",10,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f32_unsuffixed","","",10,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"f32_suffixed","","",10,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"string","","",10,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"character","","",10,{"inputs":[{"name":"char"}],"output":{"name":"literal"}}],[11,"byte_string","","",10,null],[11,"span","","",10,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",10,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Span"],[3,"Group"],[3,"Op"],[3,"Term"],[3,"Literal"]]};
searchIndex["quick_error"] = {"doc":"A macro which makes errors easy to write","items":[[3,"Context","quick_error","Generic context type",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[8,"ResultExt","","Result extension trait adding a `context` method",null,null],[10,"context","","The method is use to add context information to current operation",1,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"generics":["context"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"quick_error","","Main macro that does all the work",null,null]],"paths":[[3,"Context"],[8,"ResultExt"]]};
searchIndex["quote"] = {"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[3,"Tokens","quote","Tokens produced by a [`quote!`] invocation.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"tokens"}}],[11,"new","","Empty tokens.",0,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"u"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"i"},{"name":"u"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"i"},{"name":"u"}],"output":null}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"into_tokens","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"into_iter","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"into_tokens","","Convert `self` directly into a `Tokens` object.",1,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[14,"quote","","The whole point.",null,null],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",null,null],[11,"into_tokens","","Convert `self` directly into a `Tokens` object.",1,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}]],"paths":[[3,"Tokens"],[8,"ToTokens"]]};
searchIndex["r2d2"] = {"doc":"A generic connection pool.","items":[[3,"Builder","r2d2","A builder for a connection pool.",null,null],[3,"NopErrorHandler","","A `HandleError` implementation which does nothing.",null,null],[3,"LoggingErrorHandler","","A `HandleError` implementation which logs at the error level.",null,null],[3,"NopConnectionCustomizer","","A `CustomizeConnection` which does nothing.",null,null],[3,"Pool","","A generic connection pool.",null,null],[3,"Error","","The error type returned by methods in this crate.",null,null],[3,"State","","Information about the state of a `Pool`.",null,null],[12,"connections","","The number of connections currently being managed by the pool.",0,null],[12,"idle_connections","","The number of idle connections.",0,null],[3,"PooledConnection","","A smart pointer wrapping a connection.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"builder"}}],[11,"new","","Constructs a new `Builder`.",1,{"inputs":[],"output":{"name":"builder"}}],[11,"max_size","","Sets the maximum number of connections managed by the pool.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"min_idle","","Sets the minimum idle connection count maintained by the pool.",1,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"builder"}}],[11,"thread_pool","","Sets the thread pool used for asynchronous operations such as connection creation.",1,{"inputs":[{"name":"self"},{"generics":["scheduledthreadpool"],"name":"arc"}],"output":{"name":"builder"}}],[11,"test_on_check_out","","If true, the health of a connection will be verified via a call to `ConnectionManager::is_valid` before it is checked out of the pool.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"builder"}}],[11,"max_lifetime","","Sets the maximum lifetime of connections in the pool.",1,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"builder"}}],[11,"idle_timeout","","Sets the idle timeout used by the pool.",1,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"builder"}}],[11,"connection_timeout","","Sets the connection timeout used by the pool.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"builder"}}],[11,"error_handler","","Sets the handler for errors reported in the pool.",1,{"inputs":[{"name":"self"},{"generics":["handleerror"],"name":"box"}],"output":{"name":"builder"}}],[11,"connection_customizer","","Sets the connection customizer used by the pool.",1,{"inputs":[{"name":"self"},{"generics":["customizeconnection"],"name":"box"}],"output":{"name":"builder"}}],[11,"build","","Consumes the builder, returning a new, initialized pool.",1,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"generics":["pool","error"],"name":"result"}}],[11,"build_unchecked","","Consumes the builder, returning a new pool.",1,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"pool"}}],[8,"ManageConnection","","A trait which provides connection-specific functionality.",null,null],[16,"Connection","","The connection type this manager deals with.",2,null],[16,"Error","","The error type returned by `Connection`s.",2,null],[10,"connect","","Attempts to create a new connection.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"is_valid","","Determines if the connection is still connected to the database.",2,null],[10,"has_broken","","Quickly determines if the connection is no longer usable.",2,null],[8,"HandleError","","A trait which handles errors reported by the `ManageConnection`.",null,null],[10,"handle_error","","Handles an error.",3,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[8,"CustomizeConnection","","A trait which allows for customization of connections.",null,null],[11,"on_acquire","","Called with connections immediately after they are returned from `ManageConnection::connect`.",4,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"result"}}],[11,"on_release","","Called with connections when they are removed from the pool.",4,{"inputs":[{"name":"self"},{"name":"c"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"noperrorhandler"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"handle_error","","",5,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"loggingerrorhandler"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"handle_error","","",6,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"nopconnectioncustomizer"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"pool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new connection pool with a default configuration.",8,{"inputs":[{"name":"m"}],"output":{"generics":["pool","error"],"name":"result"}}],[11,"builder","","Returns a builder type to configure a new pool.",8,{"inputs":[],"output":{"name":"builder"}}],[11,"get","","Retrieves a connection from the pool.",8,{"inputs":[{"name":"self"}],"output":{"generics":["pooledconnection","error"],"name":"result"}}],[11,"try_get","","Attempts to retrieve a connection from the pool if there is one available.",8,{"inputs":[{"name":"self"}],"output":{"generics":["pooledconnection"],"name":"option"}}],[11,"state","","Returns information about the current state of the pool.",8,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"max_size","","Returns the configured maximum pool size.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"min_idle","","Returns the configured mimimum idle connection count.",8,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"test_on_check_out","","Returns if the pool is configured to test connections on check out.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"max_lifetime","","Returns the configured maximum connection lifetime.",8,{"inputs":[{"name":"self"}],"output":{"generics":["duration"],"name":"option"}}],[11,"idle_timeout","","Returns the configured idle connection timeout.",8,{"inputs":[{"name":"self"}],"output":{"generics":["duration"],"name":"option"}}],[11,"connection_timeout","","Returns the configured connection timeout.",8,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",10,null],[11,"deref_mut","","",10,null]],"paths":[[3,"State"],[3,"Builder"],[8,"ManageConnection"],[8,"HandleError"],[8,"CustomizeConnection"],[3,"NopErrorHandler"],[3,"LoggingErrorHandler"],[3,"NopConnectionCustomizer"],[3,"Pool"],[3,"Error"],[3,"PooledConnection"]]};
searchIndex["r2d2_diesel"] = {"doc":"","items":[[3,"ConnectionManager","r2d2_diesel","",null,null],[4,"Error","","",null,null],[13,"ConnectionError","","",0,null],[13,"QueryError","","",0,null],[11,"new","","",1,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"connect","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"is_valid","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"has_broken","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}]],"paths":[[4,"Error"],[3,"ConnectionManager"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"OsRng","rand","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[3,"IsaacRng","","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[0,"isaac","","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",0,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",1,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[0,"os","rand","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[8,"Rng","rand","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",2,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",2,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",2,null],[11,"gen","","Return a random value of a `Rand` type.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",2,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",2,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",2,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",2,null],[11,"shuffle","","Shuffle a mutable slice in place.",2,null],[8,"Rand","","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",3,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",4,null],[10,"from_seed","","Create a new RNG with the given seed.",4,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",5,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",6,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"Range","rand::distributions","Sample values uniformly between two bounds.",null,null],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",7,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",8,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",9,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[3,"RandSample","","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",12,null],[12,"item","","The actual item which is being weighted",12,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[11,"new","rand::os","Create a new `OsRng`.",13,{"inputs":[],"output":{"generics":["osrng","error"],"name":"result"}}],[11,"reseed","rand::reseeding","",14,null],[11,"fmt","rand::distributions::exponential","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::read","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::exponential","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::gamma","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::range","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::os","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::gamma","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::reseeding","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::isaac","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::chacha","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::isaac","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::normal","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::normal","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::reseeding","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::gamma","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","rand","",29,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"clone","rand::distributions::normal","",8,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"clone","rand::chacha","",24,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"clone","rand::distributions::normal","",26,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"clone","rand::distributions::exponential","",9,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"clone","rand::isaac","",25,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"clone","rand::distributions::exponential","",17,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"clone","rand::reseeding","",14,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"clone","rand::distributions::gamma","",22,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"clone","rand::distributions","",12,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"clone","rand::distributions::gamma","",19,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"clone","rand::distributions","",15,{"inputs":[{"name":"self"}],"output":{"name":"randsample"}}],[11,"clone","rand::isaac","",23,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"clone","rand","",21,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"clone","rand::distributions::gamma","",33,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"clone","rand::distributions::range","",20,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","rand::distributions::gamma","",18,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"next_u32","rand","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_u32","rand::os","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",13,null],[11,"next_u32","rand::read","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",16,null],[11,"next_u32","rand::chacha","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u32","rand::reseeding","",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",0,null],[11,"next_u32","rand::isaac","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_u32","rand","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u32","rand::isaac","",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u32","rand","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",29,null],[11,"ind_sample","rand::distributions::gamma","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","rand::distributions::normal","",26,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","rand::distributions::range","",20,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","rand::distributions::normal","",30,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","rand::distributions","",31,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","rand::distributions::exponential","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","rand::distributions::gamma","",33,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",18,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"default","rand::reseeding","",14,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"next","rand","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"rand","","",5,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"open01"}}],[11,"rand","","",21,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"rand","","",5,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"open01"}}],[11,"rand","rand::distributions::exponential","",9,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"rand","rand::distributions::normal","",8,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"rand","rand","",6,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"closed01"}}],[11,"rand","rand::isaac","",23,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"rand","rand","",6,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"closed01"}}],[11,"rand","rand::isaac","",25,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[11,"rand","rand::chacha","",24,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[11,"sample","rand::distributions::normal","",26,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions::gamma","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions","",31,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"sample","","",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"sample","rand::distributions::gamma","",33,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions::exponential","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions::range","",20,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"sample","rand::distributions::gamma","",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","","",18,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions::normal","",30,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"reseed","rand::reseeding","",0,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",0,null],[11,"reseed","rand::isaac","",25,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",25,null],[11,"reseed","rand","",28,null],[11,"from_seed","","",28,null],[11,"reseed","rand::chacha","",24,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",24,null],[11,"reseed","rand::isaac","",23,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",23,null],[11,"reseed","rand","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",21,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",21,null],[11,"new_unseeded","rand::isaac","Create an ISAAC random number generator using the default fixed seed.",23,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",25,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"new_unseeded","rand::chacha","Create an ChaCha random number generator using the default fixed key of 8 zero words.",24,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",24,null],[11,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",0,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",0,null],[11,"new","rand::read","Create a new `ReadRng` from a `Read`.",16,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"new_unseeded","rand","Creates a new XorShiftRng instance which is not seeded.",21,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",28,{"inputs":[],"output":{"generics":["stdrng","error"],"name":"result"}}],[11,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",20,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)` distribution.",18,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",19,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",22,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",33,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"new","rand::distributions::normal","Construct a new `Normal` distribution with the given mean and standard deviation.",26,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",30,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"new","rand::distributions::exponential","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",17,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"new","rand::distributions","",15,{"inputs":[],"output":{"name":"randsample"}}],[11,"new","","Create a new `WeightedChoice`.",31,null]],"paths":[[3,"ReseedingRng"],[8,"Reseeder"],[8,"Rng"],[8,"Rand"],[8,"SeedableRng"],[3,"Open01"],[3,"Closed01"],[8,"SampleRange"],[3,"StandardNormal"],[3,"Exp1"],[8,"Sample"],[8,"IndependentSample"],[3,"Weighted"],[3,"OsRng"],[3,"ReseedWithDefault"],[3,"RandSample"],[3,"ReadRng"],[3,"Exp"],[3,"Gamma"],[3,"ChiSquared"],[3,"Range"],[3,"XorShiftRng"],[3,"FisherF"],[3,"IsaacRng"],[3,"ChaChaRng"],[3,"Isaac64Rng"],[3,"Normal"],[3,"Generator"],[3,"StdRng"],[3,"ThreadRng"],[3,"LogNormal"],[3,"WeightedChoice"],[3,"AsciiGenerator"],[3,"StudentT"]]};
searchIndex["rayon"] = {"doc":"Data-parallelism library that makes it easy to convert sequential computations into parallel","items":[[5,"current_num_threads","rayon","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",null,{"inputs":[],"output":{"name":"usize"}}],[3,"ThreadPool","","Represents a user created [thread-pool].",null,null],[3,"ThreadPoolBuilder","","Used to create a new [`ThreadPool`] or to configure the global rayon thread pool. ## Creating a ThreadPool The following creates a thread pool with 22 threads.",null,null],[3,"ThreadPoolBuildError","","Error when initializing a thread pool.",null,null],[5,"join","","Takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"join_context","","Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",null,null],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",null,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"inputs":[{"name":"op"}],"output":{"name":"r"}}],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",null,null],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,null],[0,"collections","","Parallel iterator types for [standard collections][std::collections]",null,null],[0,"binary_heap","rayon::collections","This module contains the parallel iterator types for heaps (`BinaryHeap<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::binary_heap","Parallel iterator over a binary heap",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a binary heap",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",0,null],[11,"opt_len","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",0,null],[11,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",1,null],[11,"opt_len","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",1,null],[11,"len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",1,null],[0,"btree_map","rayon::collections","This module contains the parallel iterator types for B-Tree maps (`BTreeMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::btree_map","Parallel iterator over a B-Tree map",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree map",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a B-Tree map",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",2,null],[11,"opt_len","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",3,null],[11,"opt_len","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",4,null],[11,"opt_len","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"btree_set","rayon::collections","This module contains the parallel iterator types for B-Tree sets (`BTreeSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::btree_set","Parallel iterator over a B-Tree set",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree set",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",5,null],[11,"opt_len","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",6,null],[11,"opt_len","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"hash_map","rayon::collections","This module contains the parallel iterator types for hash maps (`HashMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::hash_map","Parallel iterator over a hash map",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash map",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a hash map",null,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",7,null],[11,"opt_len","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",8,null],[11,"opt_len","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",9,null],[11,"opt_len","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"hash_set","rayon::collections","This module contains the parallel iterator types for hash sets (`HashSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::hash_set","Parallel iterator over a hash set",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash set",null,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",10,null],[11,"opt_len","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",11,null],[11,"opt_len","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"linked_list","rayon::collections","This module contains the parallel iterator types for linked lists (`LinkedList<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::linked_list","Parallel iterator over a linked list",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a linked list",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a linked list",null,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",12,null],[11,"opt_len","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",13,null],[11,"opt_len","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",14,null],[11,"opt_len","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"vec_deque","rayon::collections","This module contains the parallel iterator types for double-ended queues (`VecDeque<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::vec_deque","Parallel iterator over a double-ended queue",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a double-ended queue",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a double-ended queue",null,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",15,null],[11,"opt_len","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",15,null],[11,"len","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",15,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",16,null],[11,"opt_len","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",16,null],[11,"len","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",16,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",17,null],[11,"opt_len","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",17,null],[11,"len","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",17,null],[0,"iter","rayon","Traits for writing parallel programs using an iterator-style interface",null,null],[4,"Either","rayon::iter","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",18,null],[13,"Right","","A value of type `R`.",18,null],[3,"Chain","","`Chain` is an iterator that joins `b` after `a` in one continuous iterator. This struct is created by the [`chain()`] method on [`ParallelIterator`]",null,null],[3,"Chunks","","`Chunks` is an iterator that groups elements of an underlying iterator.",null,null],[3,"Enumerate","","`Enumerate` is an iterator that returns the current count along with the element. This struct is created by the [`enumerate()`] method on [`IndexedParallelIterator`]",null,null],[3,"Filter","","`Filter` takes a predicate `filter_op` and filters out elements that match. This struct is created by the [`filter()`] method on [`ParallelIterator`]",null,null],[3,"FilterMap","","`FilterMap` creates an iterator that uses `filter_op` to both filter and map elements. This struct is created by the [`filter_map()`] method on [`ParallelIterator`].",null,null],[3,"FlatMap","","`FlatMap` maps each element to an iterator, then flattens these iterators together. This struct is created by the [`flat_map()`] method on [`ParallelIterator`]",null,null],[3,"Flatten","","`Flatten` turns each element to an iterator, then flattens these iterators together. This struct is created by the [`flatten()`] method on [`ParallelIterator`].",null,null],[3,"Fold","","`Fold` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold()`] method on [`ParallelIterator`]",null,null],[3,"FoldWith","","`FoldWith` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold_with()`] method on [`ParallelIterator`]",null,null],[3,"Skip","","`Skip` is an iterator that skips over the first `n` elements. This struct is created by the [`skip()`] method on [`IndexedParallelIterator`]",null,null],[3,"Split","","`Split` is a parallel iterator using arbitrary data and a splitting function. This struct is created by the [`split()`] function.",null,null],[3,"Take","","`Take` is an iterator that iterates over the first `n` elements. This struct is created by the [`take()`] method on [`IndexedParallelIterator`]",null,null],[3,"Map","","`Map` is an iterator that transforms the elements of an underlying iterator.",null,null],[3,"MapWith","","`MapWith` is an iterator that transforms the elements of an underlying iterator.",null,null],[3,"Zip","","`Zip` is an iterator that zips up `a` and `b` into a single iterator of pairs. This struct is created by the [`zip()`] method on [`IndexedParallelIterator`]",null,null],[3,"ZipEq","","An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal length simultaneously.",null,null],[3,"Interleave","","`Interleave` is an iterator that interleaves elements of iterators `i` and `j` in one continuous iterator. This struct is created by the [`interleave()`] method on [`IndexedParallelIterator`]",null,null],[3,"InterleaveShortest","","`InterleaveShortest` is an iterator that works similarly to `Interleave`, but this version stops returning elements once one of the iterators run out.",null,null],[3,"Intersperse","","`Intersperse` is an iterator that inserts a particular item between each item of the adapted iterator.  This struct is created by the [`intersperse()`] method on [`ParallelIterator`]",null,null],[3,"Update","","`Update` is an iterator that mutates the elements of an underlying iterator before they are yielded.",null,null],[3,"Rev","","`Rev` is an iterator that produces elements in reverse order. This struct is created by the [`rev()`] method on [`IndexedParallelIterator`]",null,null],[3,"MinLen","","`MinLen` is an iterator that imposes a minimum length on iterator splits. This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]",null,null],[3,"MaxLen","","`MaxLen` is an iterator that imposes a maximum length on iterator splits. This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]",null,null],[3,"Cloned","","`Cloned` is an iterator that clones the elements of an underlying iterator.",null,null],[3,"Inspect","","`Inspect` is an iterator that calls a function with a reference to each element before yielding it.",null,null],[3,"WhileSome","","`WhileSome` is an iterator that yields the `Some` elements of an iterator, halting as soon as any `None` is produced.",null,null],[3,"Repeat","","Iterator adaptor for the `repeat()` function.",null,null],[3,"RepeatN","","Iterator adaptor for the `repeatn()` function.",null,null],[3,"Empty","","Iterator adaptor for the `empty()` function.",null,null],[3,"Once","","Iterator adaptor for the `once()` function.",null,null],[5,"split","","The `split` function takes arbitrary data and a closure that knows how to split it, and turns this into a `ParallelIterator`.",null,{"inputs":[{"name":"d"},{"name":"s"}],"output":{"name":"split"}}],[5,"repeat","","Creates a parallel iterator that endlessly repeats `elt` (by cloning it). Note that this iterator has \"infinite\" length, so typically you would want to use `zip` or `take` or some other means to shorten it, or consider using the `repeatn()` function instead.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"repeatn","","Creates a parallel iterator that produces `n` repeats of `elt` (by cloning it).",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"repeatn"}}],[5,"empty","","Creates a parallel iterator that produces nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates a parallel iterator that produces an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"chain"}}],[11,"drive_unindexed","","",19,null],[11,"opt_len","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",19,null],[11,"len","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",19,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"drive_unindexed","","",20,null],[11,"opt_len","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",20,null],[11,"len","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",20,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"drive_unindexed","","",21,null],[11,"opt_len","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",21,null],[11,"len","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",21,null],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",22,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"filtermap"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",23,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"flatmap"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",24,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"drive_unindexed","","",25,null],[0,"plumbing","","Traits and functions used to implement parallel iteration.  These are low-level details -- users of parallel iterators should not need to interact with them directly.  See [the `plumbing` README][r] for a high-level overview.",null,null],[5,"bridge","rayon::iter::plumbing","This helper function is used to \"connect\" a parallel iterator to a consumer. It will convert the `par_iter` into a producer P and then pull items from P and feed them to `consumer`, splitting and creating parallel threads as needed.",null,null],[5,"bridge_producer_consumer","","This helper function is used to \"connect\" a producer and a consumer. You may prefer to call [`bridge`], which wraps this function. This function will draw items from `producer` and feed them to `consumer`, splitting and creating parallel tasks when needed.",null,null],[5,"bridge_unindexed","","A variant of [`bridge_producer_consumer`] where the producer is an unindexed producer.",null,null],[8,"ProducerCallback","","The `ProducerCallback` trait is a kind of generic closure, [analogous to `FnOnce`][FnOnce]. See [the corresponding section in the plumbing README][r] for more details.",null,null],[16,"Output","","The type of value returned by this callback. Analogous to [`Output` from the `FnOnce` trait][Output].",26,null],[10,"callback","","Invokes the callback with the given producer as argument. The key point of this trait is that this method is generic over `P`, and hence implementors must be defined for any producer.",26,null],[8,"Producer","","A `Producer` is effectively a \"splittable `IntoIterator`\". That is, a producer is a value which can be converted into an iterator at any time: at that point, it simply produces items on demand, like any iterator. But what makes a `Producer` special is that, before we convert to an iterator, we can also split it at a particular point using the `split_at` method. This will yield up two producers, one producing the items before that point, and one producing the items after that point (these two producers can then independently be split further, or be converted into iterators). In Rayon, this splitting is used to divide between threads. See [the `plumbing` README][r] for further details.",null,null],[16,"Item","","The type of item that will be produced by this producer once it is converted into an iterator.",27,null],[16,"IntoIter","","The type of iterator we will become.",27,null],[10,"into_iter","","Convert `self` into an iterator; at this point, no more parallel splits are possible.",27,null],[11,"min_len","","The minimum number of items that we will process sequentially. Defaults to 1, which means that we will split all the way down to a single item. This can be raised higher using the [`with_min_len`] method, which will force us to create sequential tasks at a larger granularity. Note that Rayon automatically normally attempts to adjust the size of parallel splits to reduce overhead, so this should not be needed.",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_len","","The maximum number of items that we will process sequentially. Defaults to MAX, which means that we can choose not to split at all. This can be lowered using the [`with_max_len`] method, which will force us to create more parallel tasks. Note that Rayon automatically normally attempts to adjust the size of parallel splits to reduce overhead, so this should not be needed.",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"split_at","","Split into two producers; one produces items `0..index`, the other `index..N`. Index must be less than or equal to `N`.",27,null],[11,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[8,"Consumer","","A consumer is effectively a [generalized \"fold\" operation][fold], and in fact each consumer will eventually be converted into a [`Folder`]. What makes a consumer special is that, like a [`Producer`], it can be split into multiple consumers using the `split_at` method. When a consumer is split, it produces two consumers, as well as a reducer. The two consumers can be fed items independently, and when they are done the reducer is used to combine their two results into one. See [the `plumbing` README][r] for further details.",null,null],[16,"Folder","","The type of folder that this consumer can be converted into.",28,null],[16,"Reducer","","The type of reducer that is produced if this consumer is split.",28,null],[16,"Result","","The type of result that this consumer will ultimately produce.",28,null],[10,"split_at","","Divide the consumer into two consumers, one processing items `0..index` and one processing items from `index..`. Also produces a reducer that can be used to reduce the results at the end.",28,null],[10,"into_folder","","Convert the consumer into a folder that can consume items sequentially, eventually producing a final result.",28,null],[10,"full","","Hint whether this `Consumer` would like to stop processing further items, e.g. if a search has been completed.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Folder","","The `Folder` trait encapsulates [the standard fold operation][fold].  It can be fed many items using the `consume` method. At the end, once all items have been consumed, it can then be converted (using `complete`) into a final value.",null,null],[16,"Result","","The type of result that will ultimately be produced by the folder.",29,null],[10,"consume","","Consume next item and return new sequential state.",29,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"self"}}],[11,"consume_iter","","Consume items from the iterator until full, and return new sequential state.",29,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[10,"complete","","Finish consuming items, produce final result.",29,null],[10,"full","","Hint whether this `Folder` would like to stop processing further items, e.g. if a search has been completed.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Reducer","","The reducer is the final step of a `Consumer` -- after a consumer has been split into two parts, and each of those parts has been fully processed, we are left with two results. The reducer is then used to combine those two results into one. See [the `plumbing` README][r] for further details.",null,null],[10,"reduce","","Reduce two final results into one; this is executed after a split.",30,{"inputs":[{"name":"self"},{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[8,"UnindexedConsumer","","A stateless consumer can be freely copied. These consumers can be used like regular consumers, but they also support a `split_off_left` method that does not take an index to split, but simply splits at some arbitrary point (`for_each`, for example, produces an unindexed consumer).",null,null],[10,"split_off_left","","Splits off a \"left\" consumer and returns it. The `self` consumer should then be used to consume the \"right\" portion of the data. (The ordering matters for methods like find_first -- values produced by the returned value are given precedence over values produced by `self`.) Once the left and right halves have been fully consumed, you should reduce the results with the result of `to_reducer`.",31,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_reducer","","Creates a reducer that can be used to combine the results from a split consumer.",31,null],[8,"UnindexedProducer","","A variant on `Producer` which does not know its exact length or cannot represent it in a `usize`. These producers act like ordinary producers except that they cannot be told to split at a particular point. Instead, you just ask them to split 'somewhere'.",null,null],[16,"Item","","The type of item returned by this producer.",32,null],[10,"split","","Split midway into a new producer if possible, otherwise return `None`.",32,null],[10,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[11,"clone","rayon::iter","",33,{"inputs":[{"name":"self"}],"output":{"name":"fold"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",33,null],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"foldwith"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",34,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"skip"}}],[11,"drive_unindexed","","",35,null],[11,"opt_len","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"len","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",35,null],[11,"with_producer","","",35,null],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",36,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"take"}}],[11,"drive_unindexed","","",37,null],[11,"opt_len","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"len","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",37,null],[11,"with_producer","","",37,null],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",38,null],[11,"opt_len","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",38,null],[11,"len","","",38,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",38,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"mapwith"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",39,null],[11,"opt_len","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",39,null],[11,"len","","",39,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",39,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"drive_unindexed","","",40,null],[11,"opt_len","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",40,null],[11,"len","","",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",40,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"zipeq"}}],[11,"drive_unindexed","","",41,null],[11,"opt_len","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",41,null],[11,"len","","",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",41,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"interleave"}}],[11,"drive_unindexed","","",42,null],[11,"opt_len","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",42,null],[11,"len","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",42,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"interleaveshortest"}}],[11,"drive_unindexed","","",43,null],[11,"opt_len","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",43,null],[11,"len","","",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",43,null],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"intersperse"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",44,null],[11,"opt_len","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",44,null],[11,"len","","",44,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",44,null],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"update"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",45,null],[11,"opt_len","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",45,null],[11,"len","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",45,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"drive_unindexed","","",46,null],[11,"opt_len","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",46,null],[11,"len","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",46,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"minlen"}}],[11,"drive_unindexed","","",47,null],[11,"opt_len","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",47,null],[11,"len","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",47,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"maxlen"}}],[11,"drive_unindexed","","",48,null],[11,"opt_len","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",48,null],[11,"len","","",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",48,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"inspect"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",50,null],[11,"opt_len","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",50,null],[11,"len","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",50,null],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"drive_unindexed","","",51,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"repeat"}}],[11,"take","","Take only `n` repeats of the element, similar to the general `take()`.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"repeatn"}}],[11,"zip","","Iterate tuples repeating the element with items from another iterator, similar to the general `zip()`.",52,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"generics":["repeatn"],"name":"zip"}}],[11,"drive_unindexed","","",52,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"repeatn"}}],[11,"drive_unindexed","","",53,null],[11,"opt_len","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",53,null],[11,"with_producer","","",53,null],[11,"len","","",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",54,null],[11,"opt_len","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",54,null],[11,"len","","",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",54,null],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"once"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[8,"IntoParallelIterator","","`IntoParallelIterator` implements the conversion to a [`ParallelIterator`].",null,null],[16,"Iter","","The parallel iterator type that will be created.",56,null],[16,"Item","","The type of item that the parallel iterator will produce.",56,null],[10,"into_par_iter","","Converts `self` into a parallel iterator.",56,null],[8,"IntoParallelRefIterator","","`IntoParallelRefIterator` implements the conversion to a [`ParallelIterator`], providing shared references to the data.",null,null],[16,"Iter","","The type of the parallel iterator that will be returned.",57,null],[16,"Item","","The type of item that the parallel iterator will produce. This will typically be an `&'data T` reference type.",57,null],[10,"par_iter","","Converts `self` into a parallel iterator.",57,null],[8,"IntoParallelRefMutIterator","","`IntoParallelRefMutIterator` implements the conversion to a [`ParallelIterator`], providing mutable references to the data.",null,null],[16,"Iter","","The type of iterator that will be created.",58,null],[16,"Item","","The type of item that will be produced; this is typically an `&'data mut T` reference.",58,null],[10,"par_iter_mut","","Creates the parallel iterator from `self`.",58,null],[8,"ParallelIterator","","Parallel version of the standard iterator trait.",null,null],[16,"Item","","The type of item that this parallel iterator produces. For example, if you use the [`for_each`] method, this is the type of item that your closure will be invoked with.",59,null],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",59,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"for_each_with","","Executes `OP` on the given `init` value with each item produced by the iterator, in parallel.",59,{"inputs":[{"name":"self"},{"name":"t"},{"name":"op"}],"output":null}],[11,"count","","Counts the number of items in this parallel iterator.",59,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"map","","Applies `map_op` to each item of this iterator, producing a new iterator with the results.",59,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_with","","Applies `map_op` to the given `init` value with each item of this iterator, producing a new iterator with the results.",59,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"mapwith"}}],[11,"cloned","","Creates an iterator which clones all of its elements.  This may be useful when you have an iterator over `&T`, but you need `T`.",59,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"inspect","","Applies `inspect_op` to a reference to each item of this iterator, producing a new iterator passing through the original items.  This is often useful for debugging to see what's happening in iterator stages.",59,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"inspect"}}],[11,"update","","Mutates each item of this iterator before yielding it.",59,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"update"}}],[11,"filter","","Applies `filter_op` to each item of this iterator, producing a new iterator with only the items that gave `true` results.",59,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Applies `filter_op` to each item of this iterator to get an `Option`, producing a new iterator with only the items from `Some` results.",59,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filtermap"}}],[11,"flat_map","","Applies `map_op` to each item of this iterator to get nested iterators, producing a new iterator that flattens these back into one.",59,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"flatten","","An adaptor that flattens iterable `Item`s into one large iterator",59,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"reduce","","Reduces the items in the iterator into one item using `op`. The argument `identity` should be a closure that can produce \"identity\" value which may be inserted into the sequence as needed to create opportunities for parallel execution. So, for example, if you are doing a summation, then `identity()` ought to produce something that represents the zero for your type (but consider just calling `sum()` in that case).",59,null],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`. If the iterator is empty, `None` is returned; otherwise, `Some` is returned.",59,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"option"}}],[11,"fold","","Parallel fold is similar to sequential fold except that the sequence of items may be subdivided before it is folded. Consider a list of numbers like `22 3 77 89 46`. If you used sequential fold to add them (`fold(0, |a,b| a+b)`, you would wind up first adding 0 + 22, then 22 + 3, then 25 + 77, and so forth. The parallel fold works similarly except that it first breaks up your list into sublists, and hence instead of yielding up a single sum at the end, it yields up multiple sums. The number of results is nondeterministic, as is the point where the breaks occur.",59,{"inputs":[{"name":"self"},{"name":"id"},{"name":"f"}],"output":{"name":"fold"}}],[11,"fold_with","","Applies `fold_op` to the given `init` value with each item of this iterator, finally producing the value for further use.",59,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"foldwith"}}],[11,"sum","","Sums up the items in the iterator.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Multiplies all the items in the iterator.",59,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"min","","Computes the minimum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_by","","Computes the minimum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",59,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Computes the item that yields the minimum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",59,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max","","Computes the maximum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(max)` is returned.",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by","","Computes the maximum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",59,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by_key","","Computes the item that yields the maximum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",59,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both.",59,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"chain"}}],[11,"find_any","","Searches for some item in the parallel iterator that matches the given predicate and returns it. This operation is similar to [`find` on sequential iterators][find] but the item returned may not be the first one in the parallel sequence which matches, since we search the entire sequence in parallel.",59,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate and returns it.",59,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate and returns it.",59,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"any","","Searches for some item in the parallel iterator that matches the given predicate, and if so returns true.  Once a match is found, we'll attempt to stop process the rest of the items.  Proving that there's no match, returning false, does require visiting every item.",59,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"all","","Tests that every item in the parallel iterator matches the given predicate, and if so returns true.  If a counter-example is found, we'll attempt to stop processing more items, then return false.",59,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"while_some","","Creates an iterator over the `Some` items of this iterator, halting as soon as any `None` is found.",59,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"collect","","Create a fresh collection containing all the element produced by this parallel iterator.",59,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"unzip","","Unzips the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.",59,null],[11,"partition","","Partitions the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  Items for which the `predicate` returns true go into the first container, and the rest go into the second.",59,null],[11,"partition_map","","Partitions and maps the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  `Either::Left` items go into the first container, and `Either::Right` items go into the second.",59,null],[11,"intersperse","","Intersperses clones of an element between items of this iterator.",59,null],[10,"drive_unindexed","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",59,null],[11,"opt_len","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",59,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"IndexedParallelIterator","","An iterator that supports \"random access\" to its data, meaning that you can split it at arbitrary indices and draw data from those points.",null,null],[11,"collect_into_vec","","Collects the results of the iterator into the specified vector. The vector is always truncated before execution begins. If possible, reusing the vector across calls can lead to better performance since it reuses the same backing buffer.",60,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"unzip_into_vecs","","Unzips the results of the iterator into the specified vectors. The vectors are always truncated before execution begins. If possible, reusing the vectors across calls can lead to better performance since they reuse the same backing buffer.",60,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"zip","","Iterate over tuples `(A, B)`, where the items `A` are from this iterator and `B` are from the iterator given as argument. Like the `zip` method on ordinary iterators, if the two iterators are of unequal length, you only get the items they have in common.",60,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"name":"zip"}}],[11,"zip_eq","","The same as `Zip`, but requires that both iterators have the same length.",60,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"name":"zipeq"}}],[11,"interleave","","Interleave elements of this iterator and the other given iterator. Alternately yields elements from this iterator and the given iterator, until both are exhausted. If one iterator is exhausted before the other, the last elements are provided from the other.",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Interleave elements of this iterator and the other given iterator, until one is exhausted.",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"interleaveshortest"}}],[11,"chunks","","Split an iterator up into fixed-size chunks.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","Determines if the elements of this `ParallelIterator` are equal to those of another",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `ParallelIterator` are unequal to those of another",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `ParallelIterator` are lexicographically less than those of another.",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `ParallelIterator` are lexicographically greater than those of another.",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"enumerate","","Yields an index along with each item.",60,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields the first `n` elements.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"position_any","","Searches for some item in the parallel iterator that matches the given predicate, and returns its index.  Like `ParallelIterator::find_any`, the parallel search will not necessarily find the first match, and once a match is found we'll attempt to stop processing any more.",60,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"position_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate, and returns its index.",60,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"position_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate, and returns its index.",60,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rev","","Produces a new iterator with the elements of this iterator in reverse order.",60,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"with_min_len","","Sets the minimum length of iterators desired to process in each thread.  Rayon will not split any smaller than this length, but of course an iterator could already be smaller to begin with.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"minlen"}}],[11,"with_max_len","","Sets the maximum length of iterators desired to process in each thread.  Rayon will try to split at least below this length, unless that would put it below the length from `with_min_len()`. For example, given min=10 and max=15, a length of 16 will not be split any further.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"maxlen"}}],[10,"len","","Produces an exact count of how many items this iterator will produce, presuming no panic occurs.",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"drive","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",60,null],[10,"with_producer","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",60,null],[8,"FromParallelIterator","","`FromParallelIterator` implements the creation of a collection from a [`ParallelIterator`]. By implementing `FromParallelIterator` for a given type, you define how it will be created from an iterator.",null,null],[10,"from_par_iter","","Creates an instance of the collection from the parallel iterator `par_iter`.",61,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"ParallelExtend","","`ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].",null,null],[10,"par_extend","","Extends an instance of the collection with the elements drawn from the parallel iterator `par_iter`.",62,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[0,"option","rayon","Parallel iterator types for [options][std::option]",null,null],[3,"IntoIter","rayon::option","A parallel iterator over the value in [`Some`] variant of an [`Option`].",null,null],[3,"Iter","","A parallel iterator over a reference to the [`Some`] variant of an [`Option`].",null,null],[3,"IterMut","","A parallel iterator over a mutable reference to the [`Some`] variant of an [`Option`].",null,null],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",63,null],[11,"opt_len","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",63,null],[11,"len","","",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",63,null],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",64,null],[11,"opt_len","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",64,null],[11,"len","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",64,null],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",65,null],[11,"opt_len","","",65,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",65,null],[11,"len","","",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",65,null],[0,"prelude","rayon","The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.",null,null],[0,"range","","Parallel iterator types for [ranges][std::range], the type for values created by `a..b` expressions",null,null],[3,"Iter","rayon::range","Parallel iterator over a range, implemented for all integer types.",null,null],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"drive_unindexed","","",66,null],[0,"result","rayon","Parallel iterator types for [results][std::result]",null,null],[3,"IntoIter","rayon::result","Parallel iterator over a result",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a result",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a result",null,null],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",67,null],[11,"opt_len","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",67,null],[11,"len","","",67,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",67,null],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",68,null],[11,"opt_len","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",68,null],[11,"len","","",68,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",68,null],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",69,null],[11,"opt_len","","",69,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",69,null],[11,"len","","",69,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",69,null],[0,"slice","rayon","Parallel iterator types for [slices][std::slice]",null,null],[3,"Iter","rayon::slice","Parallel iterator over immutable items in a slice",null,null],[3,"Chunks","","Parallel iterator over immutable non-overlapping chunks of a slice",null,null],[3,"Windows","","Parallel iterator over immutable overlapping windows of a slice",null,null],[3,"IterMut","","Parallel iterator over mutable items in a slice",null,null],[3,"ChunksMut","","Parallel iterator over mutable non-overlapping chunks of a slice",null,null],[3,"Split","","Parallel iterator over slices separated by a predicate",null,null],[3,"SplitMut","","Parallel iterator over mutable slices separated by a predicate",null,null],[8,"ParallelSlice","","Parallel extensions for slices.",null,null],[10,"as_parallel_slice","","Returns a plain slice, which is used to implement the rest of the parallel methods.",70,null],[11,"par_split","","Returns a parallel iterator over subslices separated by elements that match the separator.",70,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"par_windows","","Returns a parallel iterator over all contiguous windows of length `size`. The windows overlap.",70,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"windows"}}],[11,"par_chunks","","Returns a parallel iterator over at most `size` elements of `self` at a time. The chunks do not overlap.",70,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[8,"ParallelSliceMut","","Parallel extensions for mutable slices.",null,null],[10,"as_parallel_slice_mut","","Returns a plain mutable slice, which is used to implement the rest of the parallel methods.",71,null],[11,"par_split_mut","","Returns a parallel iterator over mutable subslices separated by elements that match the separator.",71,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitmut"}}],[11,"par_chunks_mut","","Returns a parallel iterator over at most `size` elements of `self` at a time. The chunks are mutable and do not overlap.",71,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[11,"par_sort","","Sorts the slice in parallel.",71,{"inputs":[{"name":"self"}],"output":null}],[11,"par_sort_by","","Sorts the slice in parallel with a comparator function.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_by_key","","Sorts the slice in parallel with a key extraction function.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_unstable","","Sorts the slice in parallel, but may not preserve the order of equal elements.",71,{"inputs":[{"name":"self"}],"output":null}],[11,"par_sort_unstable_by","","Sorts the slice in parallel with a comparator function, but may not preserve the order of equal elements.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_unstable_by_key","","Sorts the slice in parallel with a key extraction function, but may not preserve the order of equal elements.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",72,null],[11,"opt_len","","",72,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",72,null],[11,"len","","",72,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",72,null],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",73,null],[11,"opt_len","","",73,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",73,null],[11,"len","","",73,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",73,null],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",74,null],[11,"opt_len","","",74,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",74,null],[11,"len","","",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",74,null],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",75,null],[11,"opt_len","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",75,null],[11,"len","","",75,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",75,null],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",76,null],[11,"opt_len","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",76,null],[11,"len","","",76,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",76,null],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",77,null],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",78,null],[0,"str","rayon","Parallel iterator types for [strings][std::str]",null,null],[3,"Chars","rayon::str","Parallel iterator over the characters of a string",null,null],[3,"Split","","Parallel iterator over substrings separated by a pattern",null,null],[3,"SplitTerminator","","Parallel iterator over substrings separated by a terminator pattern",null,null],[3,"Lines","","Parallel iterator over lines in a string",null,null],[3,"SplitWhitespace","","Parallel iterator over substrings separated by whitespace",null,null],[8,"ParallelString","","Parallel extensions for strings.",null,null],[10,"as_parallel_string","","Returns a plain string slice, which is used to implement the rest of the parallel methods.",79,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"par_chars","","Returns a parallel iterator over the characters of a string.",79,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"par_split","","Returns a parallel iterator over substrings separated by a given character or predicate, similar to `str::split`.",79,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"par_split_terminator","","Returns a parallel iterator over substrings terminated by a given character or predicate, similar to `str::split_terminator`. It's equivalent to `par_split`, except it doesn't produce an empty substring after a trailing terminator.",79,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitterminator"}}],[11,"par_lines","","Returns a parallel iterator over the lines of a string, ending with an optional carriage return and with a newline (`\\r\\n` or just `\\n`). The final line ending is optional, and line endings are not included in the output strings.",79,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"par_split_whitespace","","Returns a parallel iterator over the sub-slices of a string that are separated by any amount of whitespace.",79,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"drive_unindexed","","",80,null],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"drive_unindexed","","",81,null],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"splitterminator"}}],[11,"drive_unindexed","","",82,null],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"drive_unindexed","","",83,null],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"drive_unindexed","","",84,null],[0,"vec","rayon","Parallel iterator types for [vectors][std::vec] (`Vec<T>`)",null,null],[3,"IntoIter","rayon::vec","Parallel iterator that moves out of a vector.",null,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",85,null],[11,"opt_len","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",85,null],[11,"len","","",85,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",85,null],[11,"drive_unindexed","rayon::iter","",18,null],[11,"opt_len","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",18,null],[11,"len","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",18,null],[11,"par_extend","","",18,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"new","rayon","Deprecated in favor of `ThreadPoolBuilder::build`.",86,{"inputs":[{"name":"configuration"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",86,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",86,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",86,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",86,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",86,null],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",86,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",86,null],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",87,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"default","","",90,{"inputs":[],"output":{"name":"threadpoolbuilder"}}],[11,"drop","","",86,null],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"as_ref","rayon::iter","",18,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"as_mut","","",18,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"next_back","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"fold","","",18,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",18,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"into","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deref","","",18,null],[11,"from","","",18,{"inputs":[{"name":"result"}],"output":{"name":"either"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"extend","","",18,null],[11,"deref_mut","","",18,null],[11,"hash","","",18,null],[11,"new","rayon","Creates and returns a valid rayon thread pool builder, but does not initialize it.",90,{"inputs":[],"output":{"name":"threadpoolbuilder"}}],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",90,{"inputs":[{"name":"self"}],"output":{"generics":["threadpool","threadpoolbuilderror"],"name":"result"}}],[11,"build_global","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. Calling `build_global` is not recommended, except in two scenarios:",90,{"inputs":[{"name":"self"}],"output":{"generics":["threadpoolbuilderror"],"name":"result"}}],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",90,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"threadpoolbuilder"}}],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",90,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"threadpoolbuilder"}}],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",90,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"stack_size","","Set the stack size of the worker threads",90,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"threadpoolbuilder"}}],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",90,{"inputs":[{"name":"self"}],"output":{"name":"threadpoolbuilder"}}],[11,"start_handler","","Set a callback to be invoked on thread start.",90,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"exit_handler","","Set a callback to be invoked on thread exit.",90,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to the scope `self` as argument. This can be used to inject new jobs into `self`.",88,null],[11,"is_left","rayon::iter","Return true if the value is the `Left` variant.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",18,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",18,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",18,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",18,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",18,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",18,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",18,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",18,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",18,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[4,"Either"],[3,"Chain"],[3,"Chunks"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[3,"Flatten"],[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[8,"UnindexedProducer"],[3,"Fold"],[3,"FoldWith"],[3,"Skip"],[3,"Split"],[3,"Take"],[3,"Map"],[3,"MapWith"],[3,"Zip"],[3,"ZipEq"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Intersperse"],[3,"Update"],[3,"Rev"],[3,"MinLen"],[3,"MaxLen"],[3,"Cloned"],[3,"Inspect"],[3,"WhileSome"],[3,"Repeat"],[3,"RepeatN"],[3,"Empty"],[3,"Once"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ParallelIterator"],[8,"IndexedParallelIterator"],[8,"FromParallelIterator"],[8,"ParallelExtend"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"ParallelSlice"],[8,"ParallelSliceMut"],[3,"Iter"],[3,"Chunks"],[3,"Windows"],[3,"IterMut"],[3,"ChunksMut"],[3,"Split"],[3,"SplitMut"],[8,"ParallelString"],[3,"Chars"],[3,"Split"],[3,"SplitTerminator"],[3,"Lines"],[3,"SplitWhitespace"],[3,"IntoIter"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"],[3,"Scope"],[3,"FnContext"],[3,"ThreadPoolBuilder"]]};
searchIndex["rayon_core"] = {"doc":"Under construction","items":[[3,"ThreadPool","rayon_core","Represents a user created [thread-pool].",null,null],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",null,null],[3,"ThreadPoolBuildError","","Error when initializing a thread pool.",null,null],[3,"ThreadPoolBuilder","","Used to create a new [`ThreadPool`] or to configure the global rayon thread pool. ## Creating a ThreadPool The following creates a thread pool with 22 threads.",null,null],[3,"Configuration","","Contains the rayon thread pool configuration. Use [`ThreadPoolBuilder`] instead.",null,null],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",null,null],[5,"current_thread_index","","If called from a Rayon worker thread, returns the index of that thread within its current pool; if not called from a Rayon thread, returns `None`.",null,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[5,"current_thread_has_pending_tasks","","If called from a Rayon worker thread, indicates whether that thread's local deque still has pending tasks. Otherwise, returns `None`. For more information, see [the `ThreadPool::current_thread_has_pending_tasks()` method][m].",null,{"inputs":[],"output":{"generics":["bool"],"name":"option"}}],[5,"join","","Takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"join_context","","Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",null,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"inputs":[{"name":"op"}],"output":{"name":"r"}}],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"current_num_threads","","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"initialize","","Deprecated in favor of `ThreadPoolBuilder::build_global`.",null,{"inputs":[{"name":"configuration"}],"output":{"generics":["box"],"name":"result"}}],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to the scope `self` as argument. This can be used to inject new jobs into `self`.",0,{"inputs":[{"name":"self"},{"name":"body"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Deprecated in favor of `ThreadPoolBuilder::build`.",1,{"inputs":[{"name":"configuration"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",1,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",1,null],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",1,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",1,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"threadpoolbuilder"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"configuration"}}],[11,"new","","Creates and returns a valid rayon thread pool builder, but does not initialize it.",3,{"inputs":[],"output":{"name":"threadpoolbuilder"}}],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",3,{"inputs":[{"name":"self"}],"output":{"generics":["threadpool","threadpoolbuilderror"],"name":"result"}}],[11,"build_global","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. Calling `build_global` is not recommended, except in two scenarios:",3,{"inputs":[{"name":"self"}],"output":{"generics":["threadpoolbuilderror"],"name":"result"}}],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"threadpoolbuilder"}}],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"stack_size","","Set the stack size of the worker threads",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_handler","","Set a callback to be invoked on thread start.",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"exit_handler","","Set a callback to be invoked on thread exit.",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"new","","Creates and return a valid rayon thread pool configuration, but does not initialize it.",4,{"inputs":[],"output":{"name":"configuration"}}],[11,"build","","Deprecated in favor of `ThreadPoolBuilder::build`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"thread_name","","Deprecated in favor of `ThreadPoolBuilder::thread_name`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"num_threads","","Deprecated in favor of `ThreadPoolBuilder::num_threads`.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"configuration"}}],[11,"panic_handler","","Deprecated in favor of `ThreadPoolBuilder::panic_handler`.",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"stack_size","","Deprecated in favor of `ThreadPoolBuilder::stack_size`.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"breadth_first","","Deprecated in favor of `ThreadPoolBuilder::breadth_first`.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_handler","","Deprecated in favor of `ThreadPoolBuilder::start_handler`.",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"exit_handler","","Deprecated in favor of `ThreadPoolBuilder::exit_handler`.",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"Scope"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"],[3,"ThreadPoolBuilder"],[3,"Configuration"],[3,"FnContext"]]};
searchIndex["redis_async"] = {"doc":"A client for Redis using Tokio and Futures.","items":[[0,"resp","redis_async","An implementation of the RESP protocol",null,null],[3,"RespCodec","redis_async::resp","Codec to read frames",null,null],[4,"RespValue","","A single RESP value, this owns the data that is read/to-be written to Redis.",null,null],[13,"Nil","","",0,null],[13,"Array","","Zero, one or more other `RespValue`s.",0,null],[13,"BulkString","","A bulk string.  In Redis terminology a string is a byte-array, so this is stored as a vector of `u8`s to allow clients to interpret the bytes as appropriate.",0,null],[13,"Error","","An error from the Redis server",0,null],[13,"Integer","","Redis documentation defines an integer as being a signed 64-bit integer: https://redis.io/topics/protocol#resp-integers",0,null],[13,"SimpleString","","",0,null],[8,"FromResp","","A trait to be implemented for every time which can be read from a RESP value.",null,null],[11,"from_resp","","Return a `Result` containing either `Self` or `Error`.  Errors can occur due to either: a) the particular `RespValue` being incompatible with the required type, or b) a remote Redis error occuring.",1,{"inputs":[{"name":"respvalue"}],"output":{"generics":["error"],"name":"result"}}],[10,"from_resp_int","","",1,{"inputs":[{"name":"respvalue"}],"output":{"generics":["error"],"name":"result"}}],[8,"ToRespString","","A specific trait to convert into a `RespValue::BulkString`",null,null],[10,"to_resp_string","","",2,{"inputs":[{"name":"self"}],"output":{"name":"respvalue"}}],[8,"ToRespInteger","","",null,null],[10,"to_resp_integer","","",3,{"inputs":[{"name":"self"}],"output":{"name":"respvalue"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"respvalue"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"respvalue"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"respvalue"}],"output":{"name":"bool"}}],[11,"from_resp_int","","",0,{"inputs":[{"name":"respvalue"}],"output":{"generics":["respvalue","error"],"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"respvalue"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"respvalue"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"respvalue"}}],[11,"from","","",0,null],[11,"from","","",0,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"respvalue"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"respvalue"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"respvalue"},{"name":"bytesmut"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option"],"name":"result"}}],[0,"client","redis_async","The client API itself.",null,null],[0,"connect","redis_async::client","",null,null],[3,"ClientConnection","redis_async::client::connect","A low-level client connection representing a sender and a receiver.",null,null],[12,"sender","","",5,null],[12,"receiver","","",5,null],[5,"connect","","Connect to a Redis server and return paired Sink and Stream for reading and writing asynchronously.",null,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"generics":["future"],"name":"box"}}],[0,"paired","redis_async::client","",null,null],[3,"PairedConnection","redis_async::client::paired","",null,null],[5,"paired_connect","","The default starting point to use most default Redis functionality.",null,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"generics":["future"],"name":"box"}}],[6,"SendBox","","",null,null],[11,"send","","Sends a command to Redis.",6,{"inputs":[{"name":"self"},{"name":"respvalue"}],"output":{"name":"sendbox"}}],[0,"pubsub","redis_async::client","",null,null],[3,"PubsubConnection","redis_async::client::pubsub","",null,null],[5,"pubsub_connect","","Used for Redis's PUBSUB functionality.",null,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"generics":["future"],"name":"box"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"pubsubconnection"}}],[11,"subscribe","","Subscribes to a particular PUBSUB topic.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["future"],"name":"box"}}],[0,"error","redis_async","Error handling",null,null],[4,"Error","redis_async::error","",null,null],[13,"Internal","","A non-specific internal error that prevented an operation from completing",8,null],[13,"IO","","An IO error occurred",8,null],[13,"RESP","","A RESP parsing/serialising error occurred",8,null],[13,"Remote","","A remote error",8,null],[13,"Unexpected","","An unexpected error, boxed to allow type-erasure.  In this context \"unexpected\" means \"unexpected because we check ahead of time\", it used to maintain the type signature of chains of futures; but it occurring at runtime should be considered a catastrophic failure.",8,null],[5,"internal","","",null,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[5,"resp","","",null,{"inputs":[{"name":"t"},{"name":"respvalue"}],"output":{"name":"error"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",8,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",8,{"inputs":[{"name":"canceled"}],"output":{"name":"error"}}],[11,"from","","",8,{"inputs":[{"name":"senderror"}],"output":{"name":"error"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"resp_array","redis_async","Macro to create a RESP array, useful for preparing commands to send.  Elements can be any type, or a mixture of types, that satisfy `Into<RespValue>`.",null,null],[14,"faf","","Fire-and-forget, used to force the return type of a `send` command where the result is not required to satisfy the generic return type.",null,null]],"paths":[[4,"RespValue"],[8,"FromResp"],[8,"ToRespString"],[8,"ToRespInteger"],[3,"RespCodec"],[3,"ClientConnection"],[3,"PairedConnection"],[3,"PubsubConnection"],[4,"Error"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is heavily based on RE2 both in syntax and in implementation. Notably, backreferences and arbitrary lookahead/lookbehind assertions are not provided. In return, regular expression searching provided by this package has excellent worst-case performance. The specific syntax supported is documented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,null],[13,"InvalidSet","","DEPRECATED: Will be removed on next major version bump.",1,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["bool","error"],"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"fmt","regex","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",4,{"inputs":[{"name":"self"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",5,{"inputs":[{"name":"self"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",6,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",6,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",6,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",6,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",6,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",6,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",6,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",6,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",6,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",6,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",6,null],[11,"shortest_match","","Returns the end location of a match in the text given.",6,null],[11,"as_str","","Returns the original string of this regex.",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",6,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["captures"],"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"size_hint","","",11,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original byte string matched.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",12,{"inputs":[{"name":"self"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",12,{"inputs":[{"name":"self"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",12,{"inputs":[{"name":"self"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",12,null],[11,"len","","Returns the number of captured groups.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",12,null],[11,"index","","",12,null],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"replace_append","","",2,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"clone","regex","",16,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",16,{"inputs":[{"name":"i"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",17,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",17,null],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex::bytes","",20,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",20,{"inputs":[{"name":"i"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",20,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",20,null],[11,"len","","Returns the total number of regular expressions in this set.",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",21,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",21,null],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex","",24,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"from_str","","Attempts to parse a string into a regular expression",24,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",24,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",24,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["captures"],"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",24,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",24,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"size_hint","","",25,null],[11,"reg_replace","","",0,{"inputs":[{"name":"self"},{"name":"captures"}],"output":{"generics":["str"],"name":"cow"}}],[11,"no_expand","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["str"],"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`.",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"len","","Returns the number of captured groups.",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["captures"],"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match corresponding to the `caps` capture group.",34,{"inputs":[{"name":"self"},{"name":"captures"}],"output":{"generics":["str"],"name":"cow"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"CaptureNames"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a robust regular expression parser.","items":[[3,"Parser","regex_syntax","A convenience parser for regular expressions.",null,null],[3,"ParserBuilder","","A builder for a regular expression parser.",null,null],[4,"Error","","This error type encompasses any error that can be returned by this crate.",null,null],[13,"Parse","","An error that occurred while translating concrete syntax into abstract syntax (AST).",0,null],[13,"Translate","","An error that occurred while translating abstract syntax into a high level intermediate representation (HIR).",0,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"escape_into","","Escapes all meta characters in `text` and writes the result into `buf`.",null,{"inputs":[{"name":"str"},{"name":"string"}],"output":null}],[5,"is_meta_character","","Returns true if the give character has significance in a regex.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_word_character","","Returns true if and only if the given character is a Unicode word character.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_word_byte","","Returns true if and only if the given character is an ASCII word character.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[0,"ast","","Defines an abstract syntax for regular expressions.",null,null],[3,"Error","regex_syntax::ast","An error that occurred while parsing a regular expression into an abstract syntax tree.",null,null],[3,"Span","","Span represents the position information of a single AST item.",null,null],[12,"start","","The start byte offset.",1,null],[12,"end","","The end byte offset.",1,null],[3,"Position","","A single position in a regular expression.",null,null],[12,"offset","","The absolute offset of this position, starting at `0` from the beginning of the regular expression pattern string.",2,null],[12,"line","","The line number, starting at `1`.",2,null],[12,"column","","The approximate column number, starting at `1`.",2,null],[3,"WithComments","","An abstract syntax tree for a singular expression along with comments found.",null,null],[12,"ast","","The actual ast.",3,null],[12,"comments","","All comments found in the original regular expression.",3,null],[3,"Comment","","A comment from a regular expression with an associated span.",null,null],[12,"span","","The span of this comment, including the beginning `#` and ending `\\n`.",4,null],[12,"comment","","The comment text, starting with the first character following the `#` and ending with the last character preceding the `\\n`.",4,null],[3,"Alternation","","An alternation of regular expressions.",null,null],[12,"span","","The span of this alternation.",5,null],[12,"asts","","The alternate regular expressions.",5,null],[3,"Concat","","A concatenation of regular expressions.",null,null],[12,"span","","The span of this concatenation.",6,null],[12,"asts","","The concatenation regular expressions.",6,null],[3,"Literal","","A single literal expression.",null,null],[12,"span","","The span of this literal.",7,null],[12,"kind","","The kind of this literal.",7,null],[12,"c","","The Unicode scalar value corresponding to this literal.",7,null],[3,"ClassPerl","","A Perl character class.",null,null],[12,"span","","The span of this class.",8,null],[12,"kind","","The kind of Perl class.",8,null],[12,"negated","","Whether the class is negated or not. e.g., `\\d` is not negated but `\\D` is.",8,null],[3,"ClassAscii","","An ASCII character class.",null,null],[12,"span","","The span of this class.",9,null],[12,"kind","","The kind of ASCII class.",9,null],[12,"negated","","Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated but `[[:^alpha:]]` is.",9,null],[3,"ClassUnicode","","A Unicode character class.",null,null],[12,"span","","The span of this class.",10,null],[12,"negated","","Whether this class is negated or not.",10,null],[12,"kind","","The kind of Unicode class.",10,null],[3,"ClassBracketed","","A bracketed character class, e.g., `[a-z0-9]`.",null,null],[12,"span","","The span of this class.",11,null],[12,"negated","","Whether this class is negated or not. e.g., `[a]` is not negated but `[^a]` is.",11,null],[12,"kind","","The type of this set. A set is either a normal union of things, e.g., `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.",11,null],[3,"ClassSetRange","","A single character class range in a set.",null,null],[12,"span","","The span of this range.",12,null],[12,"start","","The start of this range.",12,null],[12,"end","","The end of this range.",12,null],[3,"ClassSetUnion","","A union of items inside a character class set.",null,null],[12,"span","","The span of the items in this operation. e.g., the `a-z0-9` in `[^a-z0-9]`",13,null],[12,"items","","The sequence of items that make up this union.",13,null],[3,"ClassSetBinaryOp","","A Unicode character class set operation.",null,null],[12,"span","","The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.",14,null],[12,"kind","","The type of this set operation.",14,null],[12,"lhs","","The left hand side of the operation.",14,null],[12,"rhs","","The right hand side of the operation.",14,null],[3,"Assertion","","A single zero-width assertion.",null,null],[12,"span","","The span of this assertion.",15,null],[12,"kind","","The assertion kind, e.g., `\\b` or `^`.",15,null],[3,"Repetition","","A repetition operation applied to a regular expression.",null,null],[12,"span","","The span of this operation.",16,null],[12,"op","","The actual operation.",16,null],[12,"greedy","","Whether this operation was applied greedily or not.",16,null],[12,"ast","","The regular expression under repetition.",16,null],[3,"RepetitionOp","","The repetition operator itself.",null,null],[12,"span","","The span of this operator. This includes things like `+`, `*?` and `{m,n}`.",17,null],[12,"kind","","The type of operation.",17,null],[3,"Group","","A grouped regular expression.",null,null],[12,"span","","The span of this group.",18,null],[12,"kind","","The kind of this group.",18,null],[12,"ast","","The regular expression in this group.",18,null],[3,"CaptureName","","A capture name.",null,null],[12,"span","","The span of this capture name.",19,null],[12,"name","","The capture name.",19,null],[12,"index","","The capture index.",19,null],[3,"SetFlags","","A group of flags that is not applied to a particular regular expression.",null,null],[12,"span","","The span of these flags, including the grouping parentheses.",20,null],[12,"flags","","The actual sequence of flags.",20,null],[3,"Flags","","A group of flags.",null,null],[12,"span","","The span of this group of flags.",21,null],[12,"items","","A sequence of flag items. Each item is either a flag or a negation operator.",21,null],[3,"FlagsItem","","A single item in a group of flags.",null,null],[12,"span","","The span of this item.",22,null],[12,"kind","","The kind of this item.",22,null],[4,"ErrorKind","","The type of an error that occurred while building an AST.",null,null],[13,"CaptureLimitExceeded","","The capturing group limit was exceeded.",23,null],[13,"ClassEscapeInvalid","","An invalid escape sequence was found in a character class set.",23,null],[13,"ClassRangeInvalid","","An invalid character class range was found. An invalid range is any range where the start is greater than the end.",23,null],[13,"ClassRangeLiteral","","An invalid range boundary was found in a character class. Range boundaries must be a single literal codepoint, but this error indicates that something else was found, such as a nested class.",23,null],[13,"ClassUnclosed","","An opening `[` was found with no corresponding closing `]`.",23,null],[13,"DecimalEmpty","","An empty decimal number was given where one was expected.",23,null],[13,"DecimalInvalid","","An invalid decimal number was given where one was expected.",23,null],[13,"EscapeHexEmpty","","A bracketed hex literal was empty.",23,null],[13,"EscapeHexInvalid","","A bracketed hex literal did not correspond to a Unicode scalar value.",23,null],[13,"EscapeHexInvalidDigit","","An invalid hexadecimal digit was found.",23,null],[13,"EscapeUnexpectedEof","","EOF was found before an escape sequence was completed.",23,null],[13,"EscapeUnrecognized","","An unrecognized escape sequence.",23,null],[13,"FlagDanglingNegation","","A dangling negation was used when setting flags, e.g., `i-`.",23,null],[13,"FlagDuplicate","","A flag was used twice, e.g., `i-i`.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original flag. The error position points to the duplicate flag.",23,null],[13,"FlagRepeatedNegation","regex_syntax::ast","The negation operator was used twice, e.g., `-i-s`.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original negation operator. The error position points to the duplicate negation operator.",23,null],[13,"FlagUnexpectedEof","regex_syntax::ast","Expected a flag but got EOF, e.g., `(?`.",23,null],[13,"FlagUnrecognized","","Unrecognized flag, e.g., `a`.",23,null],[13,"GroupNameDuplicate","","A duplicate capture name was found.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the initial occurrence of the capture name. The error position itself points to the duplicate occurrence.",23,null],[13,"GroupNameEmpty","regex_syntax::ast","A capture group name is empty, e.g., `(?P<>abc)`.",23,null],[13,"GroupNameInvalid","","An invalid character was seen for a capture group name. This includes errors where the first character is a digit (even though subsequent characters are allowed to be digits).",23,null],[13,"GroupNameUnexpectedEof","","A closing `>` could not be found for a capture group name.",23,null],[13,"GroupUnclosed","","An unclosed group, e.g., `(ab`.",23,null],[13,"GroupUnopened","","An unopened group, e.g., `ab)`.",23,null],[13,"NestLimitExceeded","","The nest limit was exceeded. The limit stored here is the limit configured in the parser.",23,null],[13,"RepetitionCountInvalid","","The range provided in a counted repetition operator is invalid. The range is invalid if the start is greater than the end.",23,null],[13,"RepetitionCountUnclosed","","An opening `{` was found with no corresponding closing `}`.",23,null],[13,"RepetitionMissing","","A repetition operator was applied to a missing sub-expression. This occurs, for example, in the regex consisting of just a `*` or even `(?i)*`. It is, however, possible to create a repetition operating on an empty sub-expression. For example, `()*` is still considered valid.",23,null],[13,"UnsupportedBackreference","","When octal support is disabled, this error is produced when an octal escape is used. The octal escape is assumed to be an invocation of a backreference, which is the common case.",23,null],[13,"UnsupportedLookAround","","When syntax similar to PCRE's look-around is used, this error is returned. Some example syntaxes that are rejected include, but are not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this error is used to improve the user experience.",23,null],[4,"Ast","","An abstract syntax tree for a single regular expression.",null,null],[13,"Empty","","An empty regex that matches everything.",24,null],[13,"Flags","","A set of flags, e.g., `(?is)`.",24,null],[13,"Literal","","A single character literal, which includes escape sequences.",24,null],[13,"Dot","","The \"any character\" class.",24,null],[13,"Assertion","","A single zero-width assertion.",24,null],[13,"Class","","A single character class. This includes all forms of character classes except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.",24,null],[13,"Repetition","","A repetition operator applied to an arbitrary regular expression.",24,null],[13,"Group","","A grouped regular expression.",24,null],[13,"Alternation","","An alternation of regular expressions.",24,null],[13,"Concat","","A concatenation of regular expressions.",24,null],[4,"LiteralKind","","The kind of a single literal expression.",null,null],[13,"Verbatim","","The literal is written verbatim, e.g., `a` or `☃`.",25,null],[13,"Punctuation","","The literal is written as an escape because it is punctuation, e.g., `\\*` or `\\[`.",25,null],[13,"Octal","","The literal is written as an octal escape, e.g., `\\141`.",25,null],[13,"HexFixed","","The literal is written as a hex code with a fixed number of digits depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or `\\U00000061`.",25,null],[13,"HexBrace","","The literal is written as a hex code with a bracketed number of digits. The only restriction is that the bracketed hex code must refer to a valid Unicode scalar value.",25,null],[13,"Special","","The literal is written as a specially recognized escape, e.g., `\\f` or `\\n`.",25,null],[4,"SpecialLiteralKind","","The type of a special literal.",null,null],[13,"Bell","","Bell, spelled `\\a` (`\\x07`).",26,null],[13,"FormFeed","","Form feed, spelled `\\f` (`\\x0C`).",26,null],[13,"Tab","","Tab, spelled `\\t` (`\\x09`).",26,null],[13,"LineFeed","","Line feed, spelled `\\n` (`\\x0A`).",26,null],[13,"CarriageReturn","","Carriage return, spelled `\\r` (`\\x0D`).",26,null],[13,"VerticalTab","","Vertical tab, spelled `\\v` (`\\x0B`).",26,null],[13,"Space","","Space, spelled `\\` (`\\x20`). Note that this can only appear when parsing in verbose mode.",26,null],[4,"HexLiteralKind","","The type of a Unicode hex literal.",null,null],[13,"X","","A `\\x` prefix. When used without brackets, this form is limited to two digits.",27,null],[13,"UnicodeShort","","A `\\u` prefix. When used without brackets, this form is limited to four digits.",27,null],[13,"UnicodeLong","","A `\\U` prefix. When used without brackets, this form is limited to eight digits.",27,null],[4,"Class","","A single character class expression.",null,null],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",28,null],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",28,null],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",28,null],[4,"ClassPerlKind","","The available Perl character classes.",null,null],[13,"Digit","","Decimal numbers.",29,null],[13,"Space","","Whitespace.",29,null],[13,"Word","","Word characters.",29,null],[4,"ClassAsciiKind","","The available ASCII character classes.",null,null],[13,"Alnum","","`[0-9A-Za-z]`",30,null],[13,"Alpha","","`[A-Za-z]`",30,null],[13,"Ascii","","`[\\x00-\\x7F]`",30,null],[13,"Blank","","`[ \\t]`",30,null],[13,"Cntrl","","`[\\x00-\\x1F\\x7F]`",30,null],[13,"Digit","","`[0-9]`",30,null],[13,"Graph","","`[!-~]`",30,null],[13,"Lower","","`[a-z]`",30,null],[13,"Print","","`[ -~]`",30,null],[13,"Punct","","`[!-/:-@\\[-`{-~]`",30,null],[13,"Space","","`[\\t\\n\\v\\f\\r ]`",30,null],[13,"Upper","","`[A-Z]`",30,null],[13,"Word","","`[0-9A-Za-z_]`",30,null],[13,"Xdigit","","`[0-9A-Fa-f]`",30,null],[4,"ClassUnicodeKind","","The available forms of Unicode character classes.",null,null],[13,"OneLetter","","A one letter abbreviated class, e.g., `\\pN`.",31,null],[13,"Named","","A binary property, general category or script. The string may be empty.",31,null],[13,"NamedValue","","A property name and an associated value.",31,null],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate `name` with `value`.",31,null],[12,"name","","The property name (which may be empty).",31,null],[12,"value","","The property value (which may be empty).",31,null],[4,"ClassUnicodeOpKind","regex_syntax::ast","The type of op used in a Unicode character class.",null,null],[13,"Equal","","A property set to a specific value, e.g., `\\p{scx=Katakana}`.",32,null],[13,"Colon","","A property set to a specific value using a colon, e.g., `\\p{scx:Katakana}`.",32,null],[13,"NotEqual","","A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.",32,null],[4,"ClassSet","","A character class set.",null,null],[13,"Item","","An item, which can be a single literal, range, nested character class or a union of items.",33,null],[13,"BinaryOp","","A single binary operation (i.e., &&, -- or ~~).",33,null],[4,"ClassSetItem","","A single component of a character class set.",null,null],[13,"Empty","","An empty item.",34,null],[13,"Literal","","A single literal.",34,null],[13,"Range","","A range between two literals.",34,null],[13,"Ascii","","An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.",34,null],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",34,null],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",34,null],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",34,null],[13,"Union","","A union of items.",34,null],[4,"ClassSetBinaryOpKind","","The type of a Unicode character class set operation.",null,null],[13,"Intersection","","The intersection of two sets, e.g., `\\pN&&[a-z]`.",35,null],[13,"Difference","","The difference of two sets, e.g., `\\pN--[0-9]`.",35,null],[13,"SymmetricDifference","","The symmetric difference of two sets. The symmetric difference is the set of elements belonging to one but not both sets. e.g., `[\\pL~~[:ascii:]]`.",35,null],[4,"AssertionKind","","An assertion kind.",null,null],[13,"StartLine","","`^`",36,null],[13,"EndLine","","`$`",36,null],[13,"StartText","","`\\A`",36,null],[13,"EndText","","`\\z`",36,null],[13,"WordBoundary","","`\\b`",36,null],[13,"NotWordBoundary","","`\\B`",36,null],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","`?`",37,null],[13,"ZeroOrMore","","`*`",37,null],[13,"OneOrMore","","`+`",37,null],[13,"Range","","`{m,n}`",37,null],[4,"RepetitionRange","","A range repetition operator.",null,null],[13,"Exactly","","`{m}`",38,null],[13,"AtLeast","","`{m,}`",38,null],[13,"Bounded","","`{m,n}`",38,null],[4,"GroupKind","","The kind of a group.",null,null],[13,"CaptureIndex","","`(a)`",39,null],[13,"CaptureName","","`(?P<name>a)`",39,null],[13,"NonCapturing","","`(?:a)` and `(?i:a)`",39,null],[4,"FlagsItemKind","","The kind of an item in a group of flags.",null,null],[13,"Negation","","A negation operator applied to all subsequent flags in the enclosing group.",40,null],[13,"Flag","","A single flag in a group.",40,null],[4,"Flag","","A single flag.",null,null],[13,"CaseInsensitive","","`i`",41,null],[13,"MultiLine","","`m`",41,null],[13,"DotMatchesNewLine","","`s`",41,null],[13,"SwapGreed","","`U`",41,null],[13,"Unicode","","`u`",41,null],[13,"IgnoreWhitespace","","`x`",41,null],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",null,{"inputs":[{"name":"ast"},{"name":"v"}],"output":{"name":"result"}}],[0,"parse","","This module provides a regular expression parser.",null,null],[3,"ParserBuilder","regex_syntax::ast::parse","A builder for a regular expression parser.",null,null],[3,"Parser","","A regular expression parser.",null,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"parserbuilder"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",42,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"new","","Create a new parser builder with a default configuration.",42,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"build","","Build a parser from this configuration with the given pattern.",42,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"nest_limit","","Set the nesting limit for this parser.",42,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"parserbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new parser with a default configuration.",43,{"inputs":[],"output":{"name":"parser"}}],[11,"parse","","Parse the regular expression into an abstract syntax tree.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ast","error"],"name":"result"}}],[11,"parse_with_comments","","Parse the regular expression and return an abstract syntax tree with all of the comments found in the pattern.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["withcomments","error"],"name":"result"}}],[0,"print","regex_syntax::ast","This module provides a regular expression printer for `Ast`.",null,null],[3,"Printer","regex_syntax::ast::print","A printer for a regular expression abstract syntax tree.",null,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new printer.",44,{"inputs":[],"output":{"name":"printer"}}],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",44,{"inputs":[{"name":"self"},{"name":"ast"},{"name":"w"}],"output":{"name":"result"}}],[8,"Visitor","regex_syntax::ast","A trait for visiting an abstract syntax tree (AST) in depth first order.",null,null],[16,"Output","","The result of visiting an AST.",45,null],[16,"Err","","An error that visiting an AST might return.",45,null],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the AST or an error.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start","","This method is called before beginning traversal of the AST.",45,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"kind","","Return the type of this error.",46,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"pattern","","The original pattern string in which this error occurred.",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"span","","Return the span at which this error occurred.",46,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"auxiliary_span","","Return an auxiliary span. This span exists only for some errors that benefit from being able to point to two locations in the original regular expression. For example, \"duplicate\" errors will have the main error position set to the duplicate occurrence while its auxiliary span will be set to the initial occurrence.",46,{"inputs":[{"name":"self"}],"output":{"generics":["span"],"name":"option"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"description","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"new","","Create a new span with the given positions.",1,{"inputs":[{"name":"position"},{"name":"position"}],"output":{"name":"span"}}],[11,"splat","","Create a new span using the given position as the start and end.",1,{"inputs":[{"name":"position"}],"output":{"name":"span"}}],[11,"with_start","","Create a new span by replacing the starting the position with the one given.",1,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"span"}}],[11,"with_end","","Create a new span by replacing the ending the position with the one given.",1,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"span"}}],[11,"is_one_line","","Returns true if and only if this span occurs on a single line.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if and only if this span is empty. That is, it points to a single position in the concrete syntax of a regular expression.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new position with the given information.",2,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"position"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"withcomments"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"withcomments"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"withcomments"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"comment"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"comment"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"comment"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"ast"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"bool"}}],[11,"span","","Return the span of this abstract syntax tree.",24,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"is_empty","","Return true if and only if this Ast is empty.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"alternation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"alternation"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"alternation"}],"output":{"name":"bool"}}],[11,"into_ast","","Return this alternation as an AST.",5,{"inputs":[{"name":"self"}],"output":{"name":"ast"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"concat"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"concat"}],"output":{"name":"bool"}}],[11,"into_ast","","Return this concatenation as an AST.",6,{"inputs":[{"name":"self"}],"output":{"name":"ast"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"byte","","If this literal was written as a `\\x` hex escape, then this returns the corresponding byte value. Otherwise, this returns `None`.",7,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"literalkind"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"literalkind"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"literalkind"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"specialliteralkind"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"specialliteralkind"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"hexliteralkind"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"hexliteralkind"}],"output":{"name":"bool"}}],[11,"digits","","The number of digits that must be used with this literal form when used without brackets. When used with brackets, there is no restriction on the number of digits.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"class"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"span","","Return the span of this character class.",28,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"classperl"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"classperl"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"classperl"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"classperlkind"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"classperlkind"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"classascii"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"classascii"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"classascii"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"classasciikind"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"classasciikind"}],"output":{"name":"bool"}}],[11,"from_name","","Return the corresponding ClassAsciiKind variant for the given name.",30,{"inputs":[{"name":"str"}],"output":{"generics":["classasciikind"],"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"classunicode"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"is_negated","","Returns true if this class has been negated.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"classunicodekind"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"classunicodekind"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"classunicodekind"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"classunicodeopkind"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"classunicodeopkind"}],"output":{"name":"bool"}}],[11,"is_equal","","Whether the op is an equality op or not.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"classbracketed"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"classbracketed"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"classbracketed"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"classset"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"classset"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"classset"}],"output":{"name":"bool"}}],[11,"union","","Build a set from a union.",33,{"inputs":[{"name":"classsetunion"}],"output":{"name":"classset"}}],[11,"span","","Return the span of this character class set.",33,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"classsetitem"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"bool"}}],[11,"span","","Return the span of this character class set item.",34,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"classsetrange"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"classsetrange"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"classsetrange"}],"output":{"name":"bool"}}],[11,"is_valid","","Returns true if and only if this character class range is valid.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"classsetunion"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"classsetunion"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"classsetunion"}],"output":{"name":"bool"}}],[11,"push","","Push a new item in this union.",13,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":null}],[11,"into_item","","Return this union as a character class set item.",13,{"inputs":[{"name":"self"}],"output":{"name":"classsetitem"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"classsetbinaryop"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"classsetbinaryopkind"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"classsetbinaryopkind"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"assertion"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"assertion"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"assertion"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"assertionkind"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"assertionkind"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"repetition"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"repetitionop"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"repetitionop"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"repetitionop"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"repetitionkind"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"repetitionrange"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"is_valid","","Returns true if and only if this repetition range is valid.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"flags","","If this group is non-capturing, then this returns the (possibly empty) set of flags. Otherwise, `None` is returned.",18,{"inputs":[{"name":"self"}],"output":{"generics":["flags"],"name":"option"}}],[11,"is_capturing","","Returns true if and only if this group is capturing.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capture_index","","Returns the capture index of this group, if this is a capturing group.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"groupkind"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"capturename"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"capturename"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"capturename"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"setflags"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"setflags"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"setflags"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"add_item","","Add the given item to this sequence of flags.",21,{"inputs":[{"name":"self"},{"name":"flagsitem"}],"output":{"generics":["usize"],"name":"option"}}],[11,"flag_state","","Returns the state of the given flag in this set.",21,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"generics":["bool"],"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"flagsitem"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"flagsitem"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"flagsitem"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"flagsitemkind"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"flagsitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"flagsitemkind"}],"output":{"name":"bool"}}],[11,"is_negation","","Returns true if and only if this item is a negation operator.",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"flag"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"drop","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","regex_syntax","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hir","","Defines a high-level intermediate representation for regular expressions.",null,null],[3,"Error","regex_syntax::hir","An error that can occur while translating an `Ast` to a `Hir`.",null,null],[3,"Hir","","A high-level intermediate representation (HIR) for a regular expression.",null,null],[3,"ClassUnicode","","A set of characters represented by Unicode scalar values.",null,null],[3,"ClassUnicodeIter","","An iterator over all ranges in a Unicode character class.",null,null],[3,"ClassUnicodeRange","","A single range of characters represented by Unicode scalar values.",null,null],[3,"ClassBytes","","A set of characters represented by arbitrary bytes (where one byte corresponds to one character).",null,null],[3,"ClassBytesIter","","An iterator over all ranges in a byte character class.",null,null],[3,"ClassBytesRange","","A single range of characters represented by arbitrary bytes.",null,null],[3,"Group","","The high-level intermediate representation for a group.",null,null],[12,"kind","","The kind of this group. If it is a capturing group, then the kind contains the capture group index (and the name, if it is a named group).",47,null],[12,"hir","","The expression inside the capturing group, which may be empty.",47,null],[3,"Repetition","","The high-level intermediate representation of a repetition operator.",null,null],[12,"kind","","The kind of this repetition operator.",48,null],[12,"greedy","","Whether this repetition operator is greedy or not. A greedy operator will match as much as it can. A non-greedy operator will match as little as it can.",48,null],[12,"hir","","The expression being repeated.",48,null],[4,"ErrorKind","","The type of an error that occurred while building an `Hir`.",null,null],[13,"UnicodeNotAllowed","","This error occurs when a Unicode feature is used when Unicode support is disabled. For example `(?-u:\\pL)` would trigger this error.",49,null],[13,"InvalidUtf8","","This error occurs when translating a pattern that could match a byte sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.",49,null],[13,"UnicodePropertyNotFound","","This occurs when an unrecognized Unicode property name could not be found.",49,null],[13,"UnicodePropertyValueNotFound","","This occurs when an unrecognized Unicode property value could not be found.",49,null],[13,"EmptyClassNotAllowed","","This occurs when the translator attempts to construct a character class that is empty.",49,null],[4,"HirKind","","The kind of an arbitrary `Hir` expression.",null,null],[13,"Empty","","The empty regular expression, which matches everything, including the empty string.",50,null],[13,"Literal","","A single literal character that matches exactly this character.",50,null],[13,"Class","","A single character class that matches any of the characters in the class. A class can either consist of Unicode scalar values as characters, or it can use bytes.",50,null],[13,"Anchor","","An anchor assertion. An anchor assertion match always has zero length.",50,null],[13,"WordBoundary","","A word boundary assertion, which may or may not be Unicode aware. A word boundary assertion match always has zero length.",50,null],[13,"Repetition","","A repetition operation applied to a child expression.",50,null],[13,"Group","","A possibly capturing group, which contains a child expression.",50,null],[13,"Concat","","A concatenation of expressions. A concatenation always has at least two child expressions.",50,null],[13,"Alternation","","An alternation of expressions. An alternation always has at least two child expressions.",50,null],[4,"Literal","","The high-level intermediate representation of a literal.",null,null],[13,"Unicode","","A single character represented by a Unicode scalar value.",51,null],[13,"Byte","","A single character represented by an arbitrary byte.",51,null],[4,"Class","","The high-level intermediate representation of a character class.",null,null],[13,"Unicode","","A set of characters represented by Unicode scalar values.",52,null],[13,"Bytes","","A set of characters represented by arbitrary bytes (one byte per character).",52,null],[4,"Anchor","","The high-level intermediate representation for an anchor assertion.",null,null],[13,"StartLine","","Match the beginning of a line or the beginning of text. Specifically, this matches at the starting position of the input, or at the position immediately following a `\\n` character.",53,null],[13,"EndLine","","Match the end of a line or the end of text. Specifically, this matches at the end position of the input, or at the position immediately preceding a `\\n` character.",53,null],[13,"StartText","","Match the beginning of text. Specifically, this matches at the starting position of the input.",53,null],[13,"EndText","","Match the end of text. Specifically, this matches at the ending position of the input.",53,null],[4,"WordBoundary","","The high-level intermediate representation for a word-boundary assertion.",null,null],[13,"Unicode","","Match a Unicode-aware word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,null],[13,"UnicodeNegate","","Match a Unicode-aware negation of a word boundary.",54,null],[13,"Ascii","","Match an ASCII-only word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,null],[13,"AsciiNegate","","Match an ASCII-only negation of a word boundary.",54,null],[4,"GroupKind","","The kind of group.",null,null],[13,"CaptureIndex","","A normal unnamed capturing group.",55,null],[13,"CaptureName","","A named capturing group.",55,null],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",55,null],[12,"index","","The capture index of the group.",55,null],[13,"NonCapturing","regex_syntax::hir","A non-capturing group.",55,null],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","Matches a sub-expression zero or one times.",56,null],[13,"ZeroOrMore","","Matches a sub-expression zero or more times.",56,null],[13,"OneOrMore","","Matches a sub-expression one or more times.",56,null],[13,"Range","","Matches a sub-expression within a bounded range of times.",56,null],[4,"RepetitionRange","","The kind of a counted repetition operator.",null,null],[13,"Exactly","","Matches a sub-expression exactly this many times.",57,null],[13,"AtLeast","","Matches a sub-expression at least this many times.",57,null],[13,"Bounded","","Matches a sub-expression at least `m` times and at most `n` times.",57,null],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",null,{"inputs":[{"name":"hir"},{"name":"v"}],"output":{"name":"result"}}],[0,"literal","","Provides routines for extracting literal prefixes and suffixes from an `Hir`.",null,null],[3,"Literals","regex_syntax::hir::literal","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Literal","","A single member of a set of literals extracted from a regular expression.",null,null],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"cmp","","",59,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"ordering"}}],[11,"empty","","Returns a new empty set of literals using default limits.",58,{"inputs":[],"output":{"name":"literals"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from the given `Hir`.",58,{"inputs":[{"name":"hir"}],"output":{"name":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from the given `Hir`.",58,{"inputs":[{"name":"hir"}],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",58,null],[11,"min_len","","Returns the length of the smallest literal.",58,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"all_complete","","Returns true if all members in this set are complete.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",58,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",58,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["literals"],"name":"option"}}],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",58,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",58,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"union","","Unions this set with another set.",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_product","","Extends this set with another set.",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",58,null],[11,"add","","Adds the given literal to this set.",58,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",58,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",58,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":{"name":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"reverse","","Reverses all members in place.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Clears this set of all members.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",59,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"literal"}}],[11,"empty","","Returns a new complete empty literal.",59,{"inputs":[],"output":{"name":"literal"}}],[11,"is_cut","","Returns true if this literal was \"cut.\"",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cut","","Cuts this literal.",59,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",59,null],[11,"deref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"print","regex_syntax::hir","This module provides a regular expression printer for `Hir`.",null,null],[3,"Printer","regex_syntax::hir::print","A printer for a regular expression's high-level intermediate representation.",null,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new printer.",60,{"inputs":[],"output":{"name":"printer"}}],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",60,{"inputs":[{"name":"self"},{"name":"hir"},{"name":"w"}],"output":{"name":"result"}}],[0,"translate","regex_syntax::hir","Defines a translator that converts an `Ast` to an `Hir`.",null,null],[3,"TranslatorBuilder","regex_syntax::hir::translate","A builder for constructing an AST->HIR translator.",null,null],[3,"Translator","","A translator maps abstract syntax to a high level intermediate representation.",null,null],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"translatorbuilder"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"translatorbuilder"}}],[11,"new","","Create a new translator builder with a default c onfiguration.",61,{"inputs":[],"output":{"name":"translatorbuilder"}}],[11,"build","","Build a translator using the current configuration.",61,{"inputs":[{"name":"self"}],"output":{"name":"translator"}}],[11,"allow_invalid_utf8","","When enabled, translation will permit the construction of a regular expression that may match invalid UTF-8.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"case_insensitive","","Enable or disable the case insensitive flag (`i`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"multi_line","","Enable or disable the multi-line matching flag (`m`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag (`s`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"swap_greed","","Enable or disable the \"swap greed\" flag (`U`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"translator"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new translator using the default configuration.",62,{"inputs":[],"output":{"name":"translator"}}],[11,"translate","","Translate the given abstract syntax tree (AST) into a high level intermediate representation (HIR).",62,{"inputs":[{"name":"self"},{"name":"str"},{"name":"ast"}],"output":{"generics":["hir","error"],"name":"result"}}],[8,"Visitor","regex_syntax::hir","A trait for visiting the high-level IR (HIR) in depth first order.",null,null],[16,"Output","","The result of visiting an HIR.",63,null],[16,"Err","","An error that visiting an HIR might return.",63,null],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the HIR or an error.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start","","This method is called before beginning traversal of the HIR.",63,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"kind","","Return the type of this error.",64,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"pattern","","The original pattern string in which this error occurred.",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"span","","Return the span at which this error occurred.",64,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"description","","",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"hir"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"hirkind"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"hirkind"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"hirkind"}],"output":{"name":"bool"}}],[11,"kind","","Returns a reference to the underlying HIR kind.",65,{"inputs":[{"name":"self"}],"output":{"name":"hirkind"}}],[11,"into_kind","","Consumes ownership of this HIR expression and returns its underlying `HirKind`.",65,{"inputs":[{"name":"self"}],"output":{"name":"hirkind"}}],[11,"empty","","Returns an empty HIR expression.",65,{"inputs":[],"output":{"name":"hir"}}],[11,"literal","","Creates a literal HIR expression.",65,{"inputs":[{"name":"literal"}],"output":{"name":"hir"}}],[11,"class","","Creates a class HIR expression.",65,{"inputs":[{"name":"class"}],"output":{"name":"hir"}}],[11,"anchor","","Creates an anchor assertion HIR expression.",65,{"inputs":[{"name":"anchor"}],"output":{"name":"hir"}}],[11,"word_boundary","","Creates a word boundary assertion HIR expression.",65,{"inputs":[{"name":"wordboundary"}],"output":{"name":"hir"}}],[11,"repetition","","Creates a repetition HIR expression.",65,{"inputs":[{"name":"repetition"}],"output":{"name":"hir"}}],[11,"group","","Creates a group HIR expression.",65,{"inputs":[{"name":"group"}],"output":{"name":"hir"}}],[11,"concat","","Returns the concatenation of the given expressions.",65,{"inputs":[{"generics":["hir"],"name":"vec"}],"output":{"name":"hir"}}],[11,"alternation","","Returns the alternation of the given expressions.",65,{"inputs":[{"generics":["hir"],"name":"vec"}],"output":{"name":"hir"}}],[11,"dot","","Build an HIR expression for `.`.",65,{"inputs":[{"name":"bool"}],"output":{"name":"hir"}}],[11,"any","","Build an HIR expression for `(?s).`.",65,{"inputs":[{"name":"bool"}],"output":{"name":"hir"}}],[11,"is_always_utf8","","Return true if and only if this HIR will always match valid UTF-8.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all_assertions","","Returns true if and only if this entire HIR expression is made up of zero-width assertions.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_start","","Return true if and only if this HIR is required to match from the beginning of text. This includes expressions like `^foo`, `^(foo|bar)`, `^foo|^bar` but not `^foo|bar`.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Return true if and only if this HIR is required to match at the end of text. This includes expressions like `foo$`, `(foo|bar)$`, `foo$|bar$` but not `foo$|bar`.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_any_anchored_start","","Return true if and only if this HIR contains any sub-expression that is required to match at the beginning of text. Specifically, this returns true if the `^` symbol (when multiline mode is disabled) or the `\\A` escape appear anywhere in the regex.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_any_anchored_end","","Return true if and only if this HIR contains any sub-expression that is required to match at the end of text. Specifically, this returns true if the `$` symbol (when multiline mode is disabled) or the `\\z` escape appear anywhere in the regex.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_match_empty","","Return true if and only if the empty string is part of the language matched by this regular expression.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Return true if and only if this HIR is the empty regular expression.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_subexprs","","Returns true if and only if this kind has any (including possibly empty) subexpressions.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"is_unicode","","Returns true if and only if this literal corresponds to a Unicode scalar value.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"class"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"case_fold_simple","","Apply Unicode simple case folding to this character class, in place. The character class will be expanded to include all simple case folded character variants.",52,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Negate this character class in place.",52,{"inputs":[{"name":"self"}],"output":null}],[11,"is_always_utf8","","Returns true if and only if this character class will only ever match valid UTF-8.",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"classunicode"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"new","","Create a new class from a sequence of ranges.",66,{"inputs":[{"name":"i"}],"output":{"name":"classunicode"}}],[11,"empty","","Create a new class with no ranges.",66,{"inputs":[],"output":{"name":"classunicode"}}],[11,"push","","Add a new range to this set.",66,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":null}],[11,"iter","","Return an iterator over all ranges in this class.",66,{"inputs":[{"name":"self"}],"output":{"name":"classunicodeiter"}}],[11,"ranges","","Return the underlying ranges as a slice.",66,null],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters, according to Unicode's \"simple\" mapping. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",66,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Negate this character class.",66,{"inputs":[{"name":"self"}],"output":null}],[11,"union","","Union this character class with the given character class, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"intersect","","Intersect this character class with the given character class, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"difference","","Subtract the given character class from this character class, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"symmetric_difference","","Compute the symmetric difference of the given character classes, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["classunicoderange"],"name":"option"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"classunicoderange"}}],[11,"default","","",68,{"inputs":[],"output":{"name":"classunicoderange"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"le","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"gt","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"ge","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"cmp","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"ordering"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Unicode scalar value range for a character class.",68,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"classunicoderange"}}],[11,"start","","Return the start of this range.",68,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"end","","Return the end of this range.",68,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"classbytes"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":{"name":"bool"}}],[11,"new","","Create a new class from a sequence of ranges.",69,{"inputs":[{"name":"i"}],"output":{"name":"classbytes"}}],[11,"empty","","Create a new class with no ranges.",69,{"inputs":[],"output":{"name":"classbytes"}}],[11,"push","","Add a new range to this set.",69,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":null}],[11,"iter","","Return an iterator over all ranges in this class.",69,{"inputs":[{"name":"self"}],"output":{"name":"classbytesiter"}}],[11,"ranges","","Return the underlying ranges as a slice.",69,null],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",69,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Negate this byte class.",69,{"inputs":[{"name":"self"}],"output":null}],[11,"union","","Union this byte class with the given byte class, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"intersect","","Intersect this byte class with the given byte class, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"difference","","Subtract the given byte class from this byte class, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"symmetric_difference","","Compute the symmetric difference of the given byte classes, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"is_all_ascii","","Returns true if and only if this character class will either match nothing or only ASCII bytes. Stated differently, this returns false if and only if this class contains a non-ASCII byte.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["classbytesrange"],"name":"option"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"classbytesrange"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"classbytesrange"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"le","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"gt","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"ge","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"cmp","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"ordering"}}],[11,"new","","Create a new byte range for a character class.",71,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"classbytesrange"}}],[11,"start","","Return the start of this range.",71,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"end","","Return the end of this range.",71,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"wordboundary"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"wordboundary"}],"output":{"name":"bool"}}],[11,"is_negated","","Returns true if and only if this word boundary assertion is negated.",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"groupkind"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"repetition"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"is_match_empty","","Returns true if and only if this repetition operator makes it possible to match the empty string.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"repetitionkind"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"repetitionrange"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"drop","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","regex_syntax","",72,{"inputs":[{"name":"self"}],"output":{"name":"parserbuilder"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",72,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"new","","Create a new parser builder with a default configuration.",72,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"build","","Build a parser from this configuration with the given pattern.",72,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"nest_limit","","Set the nesting limit for this parser.",72,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"parserbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"allow_invalid_utf8","","When enabled, the parser will permit the construction of a regular expression that may match invalid UTF-8.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"multi_line","","Enable or disable the multi-line matching flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"swap_greed","","Enable or disable the \"swap greed\" flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new parser with a default configuration.",73,{"inputs":[],"output":{"name":"parser"}}],[11,"parse","","Parse the regular expression into a high level intermediate representation.",73,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["hir"],"name":"result"}}],[6,"Result","","A type alias for dealing with errors returned by this crate.",null,null],[11,"start","regex_syntax::ast","This method is called before beginning traversal of the AST.",45,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"start","regex_syntax::hir","This method is called before beginning traversal of the HIR.",63,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[3,"ClassPerl"],[3,"ClassAscii"],[3,"ClassUnicode"],[3,"ClassBracketed"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[3,"Assertion"],[3,"Repetition"],[3,"RepetitionOp"],[3,"Group"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"ErrorKind"],[4,"Ast"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[4,"ClassPerlKind"],[4,"ClassAsciiKind"],[4,"ClassUnicodeKind"],[4,"ClassUnicodeOpKind"],[4,"ClassSet"],[4,"ClassSetItem"],[4,"ClassSetBinaryOpKind"],[4,"AssertionKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"GroupKind"],[4,"FlagsItemKind"],[4,"Flag"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[3,"Group"],[3,"Repetition"],[4,"ErrorKind"],[4,"HirKind"],[4,"Literal"],[4,"Class"],[4,"Anchor"],[4,"WordBoundary"],[4,"GroupKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[3,"Hir"],[3,"ClassUnicode"],[3,"ClassUnicodeIter"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesIter"],[3,"ClassBytesRange"],[3,"ParserBuilder"],[3,"Parser"]]};
searchIndex["remove_dir_all"] = {"doc":"","items":[[5,"remove_dir_all","remove_dir_all","Removes a directory at this path, after removing all its contents. Use carefully!",null,{"inputs":[{"name":"p"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[]};
searchIndex["resolv_conf"] = {"doc":"The crate simply parses `/etc/resolv.conf` file and creates a config object","items":[[3,"AddrParseError","resolv_conf","An error which can be returned when parsing an IP address.",null,null],[3,"Config","","Represent a resolver configuration, as described in `man 5 resolv.conf`. The options and defaults match those in the linux `man` page.",null,null],[12,"nameservers","","List of nameservers",0,null],[12,"sortlist","","List of preferred addresses",0,null],[12,"debug","","Enable DNS resolve debugging",0,null],[12,"ndots","","Number of dots in name to try absolute resolving first (default 1)",0,null],[12,"timeout","","Dns query timeout (default 5 [sec])",0,null],[12,"attempts","","Number of attempts to resolve name if server is inaccesible (default 2)",0,null],[12,"rotate","","Round-robin selection of servers (default false)",0,null],[12,"no_check_names","","Don't check names for validity (default false)",0,null],[12,"inet6","","Try AAAA query before A",0,null],[12,"ip6_bytestring","","Use reverse lookup of ipv6 using bit-label format described instead of nibble format",0,null],[12,"ip6_dotint","","Do ipv6 reverse lookups in ip6.int zone instead of ip6.arpa (default false)",0,null],[12,"edns0","","Enable dns extensions described in RFC 2671",0,null],[12,"single_request","","Don't make ipv4 and ipv6 requests simultaneously",0,null],[12,"single_request_reopen","","Use same socket for the A and AAAA requests",0,null],[12,"no_tld_query","","Don't resolve unqualified name as top level domain",0,null],[12,"use_vc","","Force using TCP for DNS resolution",0,null],[3,"DomainIter","","An iterator returned by `Config.get_last_search_or_domain`",null,null],[4,"ParseError","","Error while parsing resolv.conf file",null,null],[13,"InvalidUtf8","","Error that may be returned when the string to parse contains invalid UTF-8 sequences",1,null],[13,"InvalidValue","","Error returned a value for a given directive is invalid. This can also happen when the value is missing, if the directive requires a value.",1,null],[13,"InvalidOptionValue","","Error returned when a value for a given option is invalid. This can also happen when the value is missing, if the option requires a value.",1,null],[13,"InvalidOption","","Error returned when a invalid option is found.",1,null],[13,"InvalidDirective","","Error returned when a invalid directive is found.",1,null],[13,"InvalidIp","","Error returned when a value cannot be parsed an an IP address.",1,null],[13,"ExtraData","","Error returned when there is extra data at the end of a line.",1,null],[4,"Network","","A network, that is an IP address and a mask",null,null],[13,"V4","","Represent an IPv4 network address",2,null],[13,"V6","","Represent an IPv6 network address",2,null],[4,"ScopedIp","","Represent an IP address. This type is similar to `std::net::IpAddr` but it supports IPv6 scope identifiers.",null,null],[13,"V4","","Represent an IPv4 address",3,null],[13,"V6","","Represent an IPv6 and its scope identifier, if any",3,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"network"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"network"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"network"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"scopedip"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"scopedip"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"scopedip"}],"output":{"name":"bool"}}],[11,"into","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"from","","",3,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"ipaddr"}],"output":{"name":"self"}}],[11,"from_str","","Parse a string representing an IP address.",3,{"inputs":[{"name":"str"}],"output":{"generics":["scopedip","addrparseerror"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"addrparseerror"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",4,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"self"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"new","","Create a new `Config` object with default values.",0,{"inputs":[],"output":{"name":"config"}}],[11,"parse","","Parse a buffer and return the corresponding `Config` object.",0,{"inputs":[{"name":"t"}],"output":{"generics":["config","parseerror"],"name":"result"}}],[11,"get_last_search_or_domain","","Return the suffixes declared in the last \"domain\" or \"search\" directive.",0,{"inputs":[{"name":"self"}],"output":{"name":"domainiter"}}],[11,"get_domain","","Return the domain declared in the last \"domain\" directive.",0,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_search","","Return the domains declared in the last \"search\" directive.",0,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"set_domain","","Set the domain corresponding to the \"domain\" directive.",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"set_search","","Set the domains corresponding the \"search\" directive.",0,{"inputs":[{"name":"self"},{"generics":["string"],"name":"vec"}],"output":null}],[11,"glibc_normalize","","Normalize config according to glibc rulees",0,{"inputs":[{"name":"self"}],"output":null}],[11,"get_nameservers_or_local","","Get nameserver or on the local machine",0,{"inputs":[{"name":"self"}],"output":{"generics":["scopedip"],"name":"vec"}}],[11,"get_system_domain","","Get domain from config or fallback to the suffix of a hostname",0,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"domainiter"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Config"],[4,"ParseError"],[4,"Network"],[4,"ScopedIp"],[3,"AddrParseError"],[3,"DomainIter"]]};
searchIndex["ring"] = {"doc":"Safe, fast, small crypto using Rust with BoringSSL's cryptography primitives.","items":[[0,"aead","ring","Authenticated Encryption with Associated Data (AEAD).",null,null],[3,"OpeningKey","ring::aead","A key for authenticating and decrypting (“opening”) AEAD-protected data.",null,null],[3,"SealingKey","","A key for encrypting and signing (“sealing”) data.",null,null],[3,"Algorithm","","An AEAD Algorithm.",null,null],[5,"open_in_place","","Authenticates and decrypts (“opens”) data in place. When",null,null],[5,"seal_in_place","","Encrypts and signs (“seals”) data in place.",null,null],[0,"chacha20_poly1305_openssh","","The [chacha20-poly1305@openssh.com] AEAD-ish construct.",null,null],[3,"SealingKey","ring::aead::chacha20_poly1305_openssh","A key for sealing packets.",null,null],[3,"OpeningKey","","A key for opening packets.",null,null],[17,"KEY_LEN","","The length of key.",null,null],[17,"TAG_LEN","","The length of a tag.",null,null],[17,"PACKET_LENGTH_LEN","","The length in bytes of the `packet_length` field in a SSH packet.",null,null],[11,"new","","Constructs a new `SealingKey`.",0,null],[11,"seal_in_place","","Seals (encrypts and signs) a packet.",0,null],[11,"new","","Constructs a new `OpeningKey`.",1,null],[11,"decrypt_packet_length","","Returns the decrypted, but unauthenticated, packet length.",1,null],[11,"open_in_place","","Opens (authenticates and decrypts) a packet.",1,null],[7,"CHACHA20_POLY1305","ring::aead","ChaCha20-Poly1305 as described in [RFC 7539].",null,null],[7,"AES_128_GCM","","AES-128 in GCM mode with 128-bit tags and 96 bit nonces.",null,null],[7,"AES_256_GCM","","AES-256 in GCM mode with 128-bit tags and 96 bit nonces.",null,null],[17,"MAX_TAG_LEN","","The maximum length of a tag for the algorithms in this module.",null,null],[11,"new","","Create a new opening key.",2,null],[11,"algorithm","","The key's AEAD algorithm.",2,{"inputs":[{"name":"self"}],"output":{"name":"algorithm"}}],[11,"new","","C analogs: `EVP_AEAD_CTX_init_with_direction` with direction            `evp_aead_seal`, `EVP_AEAD_CTX_init`.",3,null],[11,"algorithm","","The key's AEAD algorithm.",3,{"inputs":[{"name":"self"}],"output":{"name":"algorithm"}}],[11,"key_len","","The length of the key.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"tag_len","","The length of a tag.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nonce_len","","The length of the nonces.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[0,"agreement","ring","Key Agreement: ECDH, including X25519.",null,null],[3,"Algorithm","ring::agreement","A key agreement algorithm.",null,null],[3,"EphemeralPrivateKey","","An ephemeral private key for use (only) with `agree_ephemeral`. The signature of `agree_ephemeral` ensures that an `EphemeralPrivateKey` can be used for at most one key agreement.",null,null],[5,"agree_ephemeral","","Performs a key agreement with an ephemeral private key and the given public key.",null,{"inputs":[{"name":"ephemeralprivatekey"},{"name":"algorithm"},{"name":"input"},{"name":"e"},{"name":"f"}],"output":{"name":"result"}}],[7,"ECDH_P256","","ECDH using the NSA Suite B P-256 (secp256r1) curve.",null,null],[7,"ECDH_P384","","ECDH using the NSA Suite B P-384 (secp384r1) curve.",null,null],[7,"X25519","","X25519 (ECDH using Curve25519) as described in [RFC 7748].",null,null],[17,"PUBLIC_KEY_MAX_LEN","","The maximum length, in bytes, of an encoded public key.",null,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"algorithm"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"algorithm"}],"output":{"name":"bool"}}],[11,"generate","","Generate a new ephemeral private key for the given algorithm.",6,{"inputs":[{"name":"algorithm"},{"name":"securerandom"}],"output":{"generics":["ephemeralprivatekey","unspecified"],"name":"result"}}],[11,"algorithm","","The key exchange algorithm.",6,{"inputs":[{"name":"self"}],"output":{"name":"algorithm"}}],[11,"public_key_len","","The size in bytes of the encoded public key.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"compute_public_key","","Computes the public key from the private key's value and fills `out` with the public point encoded in the standard form for the algorithm.",6,null],[0,"constant_time","ring","Constant-time operations.",null,null],[5,"verify_slices_are_equal","ring::constant_time","Returns `Ok(())` if `a == b` and `Err(error::Unspecified)` otherwise. The comparison of `a` and `b` is done in constant time with respect to the contents of each, but NOT in constant time with respect to the lengths of `a` and `b`.",null,null],[0,"digest","ring","SHA-2 and the legacy SHA-1 digest algorithm.",null,null],[3,"Context","ring::digest","A context for multi-step (Init-Update-Finish) digest calculations.",null,null],[12,"algorithm","","The context's algorithm.",7,null],[3,"Digest","","A calculated digest value.",null,null],[3,"Algorithm","","A digest algorithm.",null,null],[12,"output_len","","C analog: `EVP_MD_size`",8,null],[12,"chaining_len","","The size of the chaining value of the digest function, in bytes. For non-truncated algorithms (SHA-1, SHA-256, SHA-512), this is equal to `output_len`. For truncated algorithms (e.g. SHA-384, SHA-512/256), this is equal to the length before truncation. This is mostly helpful for determining the size of an HMAC key that is appropriate for the digest algorithm.",8,null],[12,"block_len","","C analog: `EVP_MD_block_size`",8,null],[5,"digest","","Returns the digest of `data` using the given digest algorithm.",null,null],[7,"SHA1","","SHA-1 as specified in [FIPS 180-4]. Deprecated.",null,null],[7,"SHA256","","SHA-256 as specified in [FIPS 180-4].",null,null],[7,"SHA384","","SHA-384 as specified in [FIPS 180-4].",null,null],[7,"SHA512","","SHA-512 as specified in [FIPS 180-4].",null,null],[7,"SHA512_256","","SHA-512/256 as specified in [FIPS 180-4].",null,null],[17,"MAX_BLOCK_LEN","","The maximum block length (`Algorithm::block_len`) of all the algorithms in this module.",null,null],[17,"MAX_OUTPUT_LEN","","The maximum output length (`Algorithm::output_len`) of all the algorithms in this module.",null,null],[17,"MAX_CHAINING_LEN","","The maximum chaining length (`Algorithm::chaining_len`) of all the algorithms in this module.",null,null],[17,"SHA1_OUTPUT_LEN","","The length of the output of SHA-1, in bytes.",null,null],[17,"SHA256_OUTPUT_LEN","","The length of the output of SHA-256, in bytes.",null,null],[17,"SHA384_OUTPUT_LEN","","The length of the output of SHA-384, in bytes.",null,null],[17,"SHA512_OUTPUT_LEN","","The length of the output of SHA-512, in bytes.",null,null],[17,"SHA512_256_OUTPUT_LEN","","The length of the output of SHA-512/256, in bytes.",null,null],[11,"new","","Constructs a new context.",7,{"inputs":[{"name":"algorithm"}],"output":{"name":"context"}}],[11,"update","","Updates the digest with all the data in `data`. `update` may be called zero or more times until `finish` is called. It must not be called after `finish` has been called.",7,null],[11,"finish","","Finalizes the digest calculation and returns the digest value. `finish` consumes the context so it cannot be (mis-)used after `finish` has been called.",7,{"inputs":[{"name":"self"}],"output":{"name":"digest"}}],[11,"algorithm","","The algorithm that this context is using.",7,{"inputs":[{"name":"self"}],"output":{"name":"algorithm"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"digest"}}],[11,"algorithm","","The algorithm that was used to calculate the digest value.",9,{"inputs":[{"name":"self"}],"output":{"name":"algorithm"}}],[11,"as_ref","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"error","ring","Error reporting.",null,null],[3,"Unspecified","ring::error","An error with absolutely no details.",null,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"unspecified"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"unspecified"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",10,{"inputs":[{"name":"endofinput"}],"output":{"name":"self"}}],[0,"hkdf","ring","HMAC-based Extract-and-Expand Key Derivation Function.",null,null],[5,"extract_and_expand","ring::hkdf","Fills `out` with the output of the HKDF Extract-and-Expand operation for the given inputs.",null,null],[5,"extract","","The HKDF-Extract operation.",null,null],[5,"expand","","Fills `out` with the output of the HKDF-Expand operation for the given inputs.",null,null],[0,"hmac","ring","HMAC is specified in [RFC 2104].",null,null],[3,"Signature","ring::hmac","An HMAC signature.",null,null],[3,"SigningKey","","A key to use for HMAC signing.",null,null],[3,"SigningContext","","A context for multi-step (Init-Update-Finish) HMAC signing.",null,null],[3,"VerificationKey","","A key to use for HMAC authentication.",null,null],[5,"sign","","Calculates the HMAC of `data` using the key `key` in one step.",null,null],[5,"verify","","Calculates the HMAC of `data` using the key `key`, and verifies whether the resultant value equals `signature`, in one step.",null,null],[5,"verify_with_own_key","","Calculates the HMAC of `data` using the signing key `key`, and verifies whether the resultant value equals `signature`, in one step.",null,null],[5,"recommended_key_len","","Returns the recommended key length for HMAC using the given digest algorithm.",null,{"inputs":[{"name":"algorithm"}],"output":{"name":"usize"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",11,null],[11,"generate","","Generate an HMAC signing key using the given digest algorithm with a random value generated from `rng`.",12,{"inputs":[{"name":"algorithm"},{"name":"securerandom"}],"output":{"generics":["signingkey","unspecified"],"name":"result"}}],[11,"generate_serializable","","Generate an HMAC signing key using the given digest algorithm with a random value generated from `rng`, and puts the raw key value in `key_bytes`.",12,null],[11,"new","","Construct an HMAC signing key using the given digest algorithm and key value.",12,null],[11,"digest_algorithm","","The digest algorithm for the key.",12,{"inputs":[{"name":"self"}],"output":{"name":"algorithm"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"signingcontext"}}],[11,"with_key","","Constructs a new HMAC signing context using the given digest algorithm and key.",13,{"inputs":[{"name":"signingkey"}],"output":{"name":"signingcontext"}}],[11,"update","","Updates the HMAC with all the data in `data`. `update` may be called zero or more times until `finish` is called.",13,null],[11,"sign","","Finalizes the HMAC calculation and returns the HMAC value. `sign` consumes the context so it cannot be (mis-)used after `sign` has been called.",13,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"new","","Construct an HMAC verification key using the given digest algorithm and key value.",14,null],[0,"pbkdf2","ring","PBKDF2 derivation and verification.",null,null],[5,"derive","ring::pbkdf2","Fills `out` with the key derived using PBKDF2 with the given inputs.",null,null],[5,"verify","","Verifies that a previously-derived (e.g., using `derive`) PBKDF2 value matches the PBKDF2 value derived from the other inputs.",null,null],[0,"rand","ring","Cryptographic pseudo-random number generation.",null,null],[3,"SystemRandom","ring::rand","A secure random number generator where the random values come directly from the operating system.",null,null],[8,"SecureRandom","","A secure random number generator.",null,null],[10,"fill","","Fills `dest` with random bytes.",15,null],[11,"new","","Constructs a new `SystemRandom`.",16,{"inputs":[],"output":{"name":"systemrandom"}}],[11,"fill","","",16,null],[0,"signature","ring","Public key signatures: signing and verification.",null,null],[3,"ECDSAVerificationAlgorithm","ring::signature","An ECDSA verification algorithm.",null,null],[3,"EdDSAParameters","","Parameters for EdDSA signing and verification.",null,null],[3,"Ed25519KeyPair","","An Ed25519 key pair, for signing.",null,null],[3,"PKCS8Document","","A generated PKCS#8 document.",null,null],[3,"RSAKeyPair","","An RSA key pair, used for signing. Feature: `rsa_signing`.",null,null],[3,"RSASigningState","","State used for RSA Signing. Feature: `rsa_signing`.",null,null],[3,"RSAParameters","","Parameters for RSA verification.",null,null],[3,"Signature","","A public key signature returned from a signing operation.",null,null],[5,"verify","","Verify the signature `signature` of message `msg` with the public key `public_key` using the algorithm `alg`.",null,{"inputs":[{"name":"verificationalgorithm"},{"name":"input"},{"name":"input"},{"name":"input"}],"output":{"generics":["unspecified"],"name":"result"}}],[0,"primitive","","Lower-level verification primitives. Usage of `ring::signature::verify()` is preferred when the public key and signature are encoded in standard formats, as it also handles the parsing.",null,null],[5,"verify_rsa","ring::signature::primitive","Lower-level API for the verification of RSA signatures.",null,null],[7,"ECDSA_P256_SHA256_ASN1","ring::signature","Verification of ASN.1 DER-encoded ECDSA signatures using the P-256 curve and SHA-256.",null,null],[7,"ECDSA_P256_SHA256_FIXED","","Verification of fixed-length (PKCS#11 style) ECDSA signatures using the P-256 curve and SHA-256.",null,null],[7,"ECDSA_P256_SHA384_ASN1","","Not recommended. Verification of ASN.1 DER-encoded ECDSA signatures using the P-256 curve and SHA-384.",null,null],[7,"ECDSA_P384_SHA256_ASN1","","Not recommended. Verification of ASN.1 DER-encoded ECDSA signatures using the P-384 curve and SHA-256.",null,null],[7,"ECDSA_P384_SHA384_ASN1","","Verification of ASN.1 DER-encoded ECDSA signatures using the P-384 curve and SHA-384.",null,null],[7,"ECDSA_P384_SHA384_FIXED","","Verification of fixed-length (PKCS#11 style) ECDSA signatures using the P-384 curve and SHA-384.",null,null],[7,"ED25519","","Verification of [Ed25519] signatures.",null,null],[7,"RSA_PKCS1_SHA256","","PKCS#1 1.5 padding using SHA-256 for RSA signatures.",null,null],[7,"RSA_PKCS1_SHA384","","PKCS#1 1.5 padding using SHA-384 for RSA signatures.",null,null],[7,"RSA_PKCS1_SHA512","","PKCS#1 1.5 padding using SHA-512 for RSA signatures.",null,null],[7,"RSA_PSS_SHA256","","RSA PSS padding using SHA-256 for RSA signatures.",null,null],[7,"RSA_PSS_SHA384","","RSA PSS padding using SHA-384 for RSA signatures.",null,null],[7,"RSA_PSS_SHA512","","RSA PSS padding using SHA-512 for RSA signatures.",null,null],[7,"RSA_PKCS1_2048_8192_SHA1","","Verification of signatures using RSA keys of 2048-8192 bits,              PKCS#1.5 padding, and SHA-1.",null,null],[7,"RSA_PKCS1_2048_8192_SHA256","","Verification of signatures using RSA keys of 2048-8192 bits,              PKCS#1.5 padding, and SHA-256.",null,null],[7,"RSA_PKCS1_2048_8192_SHA384","","Verification of signatures using RSA keys of 2048-8192 bits,              PKCS#1.5 padding, and SHA-384.",null,null],[7,"RSA_PKCS1_2048_8192_SHA512","","Verification of signatures using RSA keys of 2048-8192 bits,              PKCS#1.5 padding, and SHA-512.",null,null],[7,"RSA_PKCS1_3072_8192_SHA384","","Verification of signatures using RSA keys of 3072-8192 bits,              PKCS#1.5 padding, and SHA-384.",null,null],[7,"RSA_PSS_2048_8192_SHA256","","Verification of signatures using RSA keys of 2048-8192 bits,              PSS padding, and SHA-256.",null,null],[7,"RSA_PSS_2048_8192_SHA384","","Verification of signatures using RSA keys of 2048-8192 bits,              PSS padding, and SHA-384.",null,null],[7,"RSA_PSS_2048_8192_SHA512","","Verification of signatures using RSA keys of 2048-8192 bits,              PSS padding, and SHA-512.",null,null],[17,"ED25519_PKCS8_V2_LEN","","The length of a Ed25519 PKCS#8 (v2) private key generated by `Ed25519KeyPair::generate_pkcs8()`. Ed25519 PKCS#8 files generated by other software may have different lengths, and `Ed25519KeyPair::generate_pkcs8()` may generate files of a different length in the future.",null,null],[17,"ED25519_PUBLIC_KEY_LEN","","The length of an Ed25519 public key.",null,null],[8,"RSAEncoding","","An RSA signature encoding as described in [RFC 3447 Section 8].",null,null],[8,"VerificationAlgorithm","","A signature verification algorithm.",null,null],[10,"verify","","Verify the signature `signature` of message `msg` with the public key `public_key`.",17,{"inputs":[{"name":"self"},{"name":"input"},{"name":"input"},{"name":"input"}],"output":{"generics":["unspecified"],"name":"result"}}],[11,"as_ref","","",18,null],[0,"test","ring","Testing framework.",null,null],[3,"TestCase","ring::test","A test case. A test case consists of a set of named attributes. Every attribute in the test case must be consumed exactly once; this helps catch typos and omissions.",null,null],[5,"ring_src_path","","Returns the path for ring source code root.",null,{"inputs":[],"output":{"name":"pathbuf"}}],[5,"from_file","","Reads test cases out of the file with the path given by `test_data_relative_file_path`, calling `f` on each vector until `f` fails or until all the test vectors have been read. `f` can indicate failure either by returning `Err()` or by panicking.",null,{"inputs":[{"name":"str"},{"name":"f"}],"output":null}],[5,"from_hex","","Decode an string of hex digits into a sequence of bytes. The input must have an even number of digits.",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec","string"],"name":"result"}}],[0,"rand","","Deterministic implementations of `ring::rand::SecureRandom`.",null,null],[3,"FixedByteRandom","ring::test::rand","An implementation of `SecureRandom` that always fills the output slice with the given byte.",null,null],[12,"byte","","",19,null],[3,"FixedSliceRandom","","An implementation of `SecureRandom` that always fills the output slice with the slice in `bytes`. The length of the slice given to `slice` must match exactly.",null,null],[12,"bytes","","",20,null],[3,"FixedSliceSequenceRandom","","An implementation of `SecureRandom` where each slice in `bytes` is a test vector for one call to `fill()`. Not thread-safe.",null,null],[12,"bytes","","The value.",21,null],[12,"current","","",21,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fill","","",19,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fill","","",20,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fill","","",21,null],[11,"drop","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","ring::test","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"consume_digest_alg","","Maps the strings \"SHA1\", \"SHA256\", \"SHA384\", and \"SHA512\" to digest algorithms, maps \"SHA224\" to `None`, and panics on other (erroneous) inputs. \"SHA224\" is mapped to None because ring intentionally does not support SHA224, but we need to consume test vectors from NIST that have SHA224 vectors in them.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["algorithm"],"name":"option"}}],[11,"consume_bytes","","Returns the value of an attribute that is encoded as a sequence of an even number of hex digits, or as a double-quoted UTF-8 string. The empty (zero-length) value is represented as \"\".",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"consume_usize","","Returns the value of an attribute that is an integer, in decimal notation.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"usize"}}],[11,"consume_usize_bits","","Returns the value of an attribute that is an integer, in decimal notation, as a bit length.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bitlength"}}],[11,"consume_string","","Returns the raw value of an attribute, without any unquoting or other interpretation.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"consume_optional_string","","Like `consume_string()` except it returns `None` if the test case doesn't have the attribute.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[11,"fmt","ring::signature","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"generate_pkcs8","","Generates a new key pair and returns the key pair serialized as a PKCS#8 document.",24,{"inputs":[{"name":"securerandom"}],"output":{"generics":["unspecified"],"name":"result"}}],[11,"from_pkcs8","","Constructs an Ed25519 key pair by parsing an unencrypted PKCS#8 v2 Ed25519 private key.",24,{"inputs":[{"name":"input"}],"output":{"generics":["ed25519keypair","unspecified"],"name":"result"}}],[11,"from_pkcs8_maybe_unchecked","","Constructs an Ed25519 key pair by parsing an unencrypted PKCS#8 v1 or v2 Ed25519 private key.",24,{"inputs":[{"name":"input"}],"output":{"generics":["ed25519keypair","unspecified"],"name":"result"}}],[11,"from_seed_and_public_key","","Constructs an Ed25519 key pair from the private key seed `seed` and its public key `public_key`.",24,{"inputs":[{"name":"input"},{"name":"input"}],"output":{"generics":["ed25519keypair","unspecified"],"name":"result"}}],[11,"from_seed_unchecked","","Constructs a Ed25519 key pair from the private key seed `seed`.",24,{"inputs":[{"name":"input"}],"output":{"generics":["ed25519keypair","unspecified"],"name":"result"}}],[11,"public_key_bytes","","Returns a reference to the little-endian-encoded public key bytes.",24,null],[11,"sign","","Returns the signature of the message `msg`.",24,null],[11,"verify","","",23,{"inputs":[{"name":"self"},{"name":"input"},{"name":"input"},{"name":"input"}],"output":{"generics":["unspecified"],"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"verify","","",25,{"inputs":[{"name":"self"},{"name":"input"},{"name":"input"},{"name":"input"}],"output":{"generics":["unspecified"],"name":"result"}}],[11,"as_ref","","",26,null],[11,"verify","","",27,{"inputs":[{"name":"self"},{"name":"input"},{"name":"input"},{"name":"input"}],"output":{"generics":["unspecified"],"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_pkcs8","","Parses an unencrypted PKCS#8-encoded RSA private key.",28,{"inputs":[{"name":"input"}],"output":{"generics":["rsakeypair","unspecified"],"name":"result"}}],[11,"from_der","","Parses an RSA private key that is not inside a PKCS#8 wrapper.",28,{"inputs":[{"name":"input"}],"output":{"generics":["rsakeypair","unspecified"],"name":"result"}}],[11,"public_modulus_len","","Returns the length in bytes of the key pair's public modulus.",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Construct an `RSASigningState` for the given `RSAKeyPair`.",29,{"inputs":[{"generics":["rsakeypair"],"name":"arc"}],"output":{"generics":["unspecified"],"name":"result"}}],[11,"key_pair","","The `RSAKeyPair`. This can be used, for example, to access the key pair's public key through the `RSASigningState`.",29,{"inputs":[{"name":"self"}],"output":{"name":"rsakeypair"}}],[11,"sign","","Sign `msg`. `msg` is digested using the digest algorithm from `padding_alg` and the digest is then padded using the padding algorithm from `padding_alg`. The signature it written into `signature`; `signature`'s length must be exactly the length returned by `public_modulus_len()`. `rng` is used for blinding the message during signing, to mitigate some side-channel (e.g. timing) attacks.",29,null]],"paths":[[3,"SealingKey"],[3,"OpeningKey"],[3,"OpeningKey"],[3,"SealingKey"],[3,"Algorithm"],[3,"Algorithm"],[3,"EphemeralPrivateKey"],[3,"Context"],[3,"Algorithm"],[3,"Digest"],[3,"Unspecified"],[3,"Signature"],[3,"SigningKey"],[3,"SigningContext"],[3,"VerificationKey"],[8,"SecureRandom"],[3,"SystemRandom"],[8,"VerificationAlgorithm"],[3,"Signature"],[3,"FixedByteRandom"],[3,"FixedSliceRandom"],[3,"FixedSliceSequenceRandom"],[3,"TestCase"],[3,"EdDSAParameters"],[3,"Ed25519KeyPair"],[3,"ECDSAVerificationAlgorithm"],[3,"PKCS8Document"],[3,"RSAParameters"],[3,"RSAKeyPair"],[3,"RSASigningState"]]};
searchIndex["ripalt"] = {"doc":"Ripalt is a Anti-Leech-Torrent Tracker CMS based on actix-web","items":[[0,"api","ripalt","API Handlers",null,null],[0,"chat","ripalt::api","Chat API",null,null],[3,"PublishMessage","ripalt::api::chat","Publish Message Payload",null,null],[12,"chat","","In which chatroom should the message be posted",0,null],[12,"message","","The actual chat message",0,null],[5,"messages","","Fetch chat messages",null,{"inputs":[{"generics":["state"],"name":"httprequest"}],"output":{"generics":["httpresponse"],"name":"futureresponse"}}],[5,"publish","","Publish a new chat message",null,{"inputs":[{"generics":["state"],"name":"httprequest"},{"generics":["publishmessage"],"name":"json"}],"output":{"generics":["httpresponse"],"name":"futureresponse"}}],[0,"identity","ripalt::api","Request identity service for Actix applications.",null,null],[3,"IdentityService","ripalt::api::identity","Request identity middleware",null,null],[3,"ApiIdentityPolicy","","The API identity policy",null,null],[3,"ApiIdentity","","Identity that uses the Session or a JWT as identity storage.",null,null],[3,"Claims","","The claims for the JWT",null,null],[8,"IdentityPolicy","","Identity policy definition.",null,null],[16,"Identity","","",1,null],[16,"Future","","",1,null],[10,"from_request","","Parse the session from request and load data from a service identity.",1,null],[8,"Identity","","An identity",null,null],[10,"identity","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[10,"forget","","",2,{"inputs":[{"name":"self"}],"output":null}],[10,"credentials","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"user_id","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"group_id","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["uuid"],"name":"option"}}],[8,"RequestIdentity","","The helper trait to obtain your identity from a request.",null,null],[10,"identity","","Return the claimed identity of the user associated request or `None` if no identity can be found associated with the request.",3,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[10,"forget","","This method is used to 'forget' the current identity on subsequent requests.",3,{"inputs":[{"name":"self"}],"output":null}],[10,"credentials","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"user_id","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"group_id","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"new","","Create new identity service with specified backend.",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"start","","",4,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"generics":["started"],"name":"awresult"}}],[11,"response","","",4,{"inputs":[{"name":"self"},{"name":"httprequest"},{"name":"httpresponse"}],"output":{"generics":["response"],"name":"awresult"}}],[11,"new","","Construct a new `ApiIdentityPolicy` instance.",5,null],[11,"from_request","","",5,null],[11,"new","","Construct a new `ApiIdentity` instance.",6,{"inputs":[{"name":"option"}],"output":{"name":"apiidentity"}}],[11,"identity","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"forget","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"credentials","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"message","ripalt::api","Message API",null,null],[3,"NewMessage","ripalt::api::message","New message payload",null,null],[12,"receiver","","Receivers user name",7,null],[12,"subject","","",7,null],[12,"body","","",7,null],[12,"reply_to","","Some Message ID if it's a reply",7,null],[3,"MessageListMsg","","Message list payload",null,null],[12,"messages","","A list of Message IDs",8,null],[5,"messages","","Fetch messages",null,{"inputs":[{"generics":["state"],"name":"httprequest"}],"output":{"generics":["httpresponse"],"name":"futureresponse"}}],[5,"unread","","Fetch only unread messages.",null,{"inputs":[{"generics":["state"],"name":"httprequest"}],"output":{"generics":["httpresponse"],"name":"futureresponse"}}],[5,"message","","Fetch a single message",null,{"inputs":[{"generics":["state"],"name":"httprequest"}],"output":{"generics":["httpresponse"],"name":"futureresponse"}}],[5,"send","","Send a new message to a user",null,{"inputs":[{"generics":["state"],"name":"httprequest"},{"generics":["newmessage"],"name":"json"}],"output":{"generics":["httpresponse"],"name":"futureresponse"}}],[5,"delete","","Delete one or more messages",null,{"inputs":[{"generics":["state"],"name":"httprequest"},{"generics":["messagelistmsg"],"name":"json"}],"output":{"generics":["httpresponse"],"name":"futureresponse"}}],[5,"mark_read","","Mark one or more messages as read",null,{"inputs":[{"generics":["state"],"name":"httprequest"},{"generics":["messagelistmsg"],"name":"json"}],"output":{"generics":["httpresponse"],"name":"futureresponse"}}],[0,"user","ripalt::api","User API",null,null],[5,"stats","ripalt::api::user","Fetch the user stats",null,{"inputs":[{"generics":["state"],"name":"httprequest"}],"output":{"generics":["httpresponse"],"name":"futureresponse"}}],[0,"app","ripalt","Application Handlers",null,null],[5,"build","ripalt::app","",null,{"inputs":[{"generics":["syn","dbexecutor"],"name":"addr"},{"name":"templatecontainer"},{"generics":["rwlock"],"name":"arc"}],"output":{"generics":["state"],"name":"app"}}],[5,"not_found","","",null,{"inputs":[{"generics":["state"],"name":"httprequest"}],"output":{"name":"httpresponse"}}],[5,"server_error","","",null,{"inputs":[{"name":"httprequest"},{"name":"httpresponse"}],"output":{"generics":["response"],"name":"result"}}],[0,"db","ripalt","",null,null],[3,"DbConn","ripalt::db","Connection request guard type: a wrapper around an r2d2 pooled connection.",null,null],[12,"0","","",9,null],[3,"DbExecutor","","Database Executor",null,null],[12,"0","","",10,null],[5,"init_pool","","Initializes a database pool.",null,{"inputs":[],"output":{"name":"pool"}}],[6,"Pool","","An alias to the type for a pool of Diesel Postgres connections.",null,null],[11,"deref","","",9,null],[11,"new","","Create a new Database Executor",10,{"inputs":[{"name":"pool"}],"output":{"name":"self"}}],[11,"conn","","",10,{"inputs":[{"name":"self"}],"output":{"name":"dbconn"}}],[0,"handlers","ripalt","",null,null],[3,"UserSubjectMsg","ripalt::handlers","",null,null],[0,"chat","","Chat Handlers",null,null],[3,"LoadChatMessagesMsg","ripalt::handlers::chat","Loads chat messages from the database backend",null,null],[3,"PublishChatMessagesMsg","","Publishes a new chat message.",null,null],[11,"new","","Construct a new `LoadChatMessagesMsg` instance",11,{"inputs":[{"name":"chatroom"},{"generics":["datetime"],"name":"option"},{"name":"i64"},{"name":"usersubjectmsg"}],"output":{"name":"self"}}],[11,"try_from","","",11,{"inputs":[{"name":"httprequest"}],"output":{"generics":["error"],"name":"result"}}],[11,"handle","ripalt::db","",10,null],[11,"new","ripalt::handlers::chat","Construct a new `PublishChatMessagesMsg` instance",12,{"inputs":[{"name":"t"},{"name":"string"},{"name":"usersubjectmsg"}],"output":{"name":"self"}}],[11,"handle","ripalt::db","",10,null],[0,"message","ripalt::handlers","Message Handlers",null,null],[3,"MessageResponse","ripalt::handlers::message","Response for all handlers which return a message",null,null],[12,"id","","",13,null],[12,"folder_id","","",13,null],[12,"sender_id","","",13,null],[12,"receiver_id","","",13,null],[12,"subject","","",13,null],[12,"body","","",13,null],[12,"is_read","","",13,null],[12,"created_at","","",13,null],[12,"sender_name","","",13,null],[12,"receiver_name","","",13,null],[12,"folder_name","","",13,null],[3,"LoadMessagesMsg","","Load messages from the database backend.",null,null],[3,"LoadMessageMsg","","Load a single message from the database backend.",null,null],[3,"NewMessageMsg","","Publish a new message to the database backend.",null,null],[3,"DeleteMessagesMsg","","Delete messages from the database backend.",null,null],[3,"MarkMessagesMsg","","Mark messages as read/unread.",null,null],[11,"from","","",13,{"inputs":[{"name":"message"}],"output":{"name":"self"}}],[11,"new","","Construct a new `LoadMessagesMsg` instance.",14,{"inputs":[{"name":"string"},{"name":"bool"},{"name":"uuid"}],"output":{"name":"self"}}],[11,"handle","ripalt::db","",10,null],[11,"new","ripalt::handlers::message","Construct a new `LoadMessageMsg` instance.",15,{"inputs":[{"name":"uuid"},{"name":"uuid"}],"output":{"name":"self"}}],[11,"mark_as_read","","Set the `mark_as_read` flag. If it's `true` the message will be marked as read.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"handle","ripalt::db","",10,null],[11,"new","ripalt::handlers::message","Construct a new `NewMessageMsg` instance.",16,{"inputs":[{"name":"newmessage"},{"name":"uuid"}],"output":{"name":"self"}}],[11,"from","","",16,{"inputs":[{"name":"newmessage"}],"output":{"name":"self"}}],[11,"handle","ripalt::db","",10,null],[11,"new","ripalt::handlers::message","Construct a new `DeleteMessagesMsg` instance.",17,{"inputs":[{"generics":["uuid"],"name":"vec"},{"name":"uuid"}],"output":{"name":"self"}}],[11,"handle","ripalt::db","",10,null],[11,"new","ripalt::handlers::message","Construct a new `MarkMessagesMsg` instance",18,{"inputs":[{"generics":["uuid"],"name":"vec"},{"name":"uuid"},{"name":"bool"}],"output":{"name":"self"}}],[11,"handle","ripalt::db","",10,null],[0,"static_content","ripalt::handlers","",null,null],[3,"LoadStaticContentMsg","ripalt::handlers::static_content","",null,null],[3,"UpdateStaticContentMsg","","",null,null],[11,"new","","",19,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"handle","ripalt::db","",10,null],[11,"default","ripalt::handlers::static_content","",20,{"inputs":[],"output":{"name":"updatestaticcontentmsg"}}],[11,"new","","",20,{"inputs":[{"name":"string"},{"name":"string"},{"name":"string"},{"name":"string"}],"output":{"name":"self"}}],[11,"set_acl","","",20,{"inputs":[{"name":"self"},{"name":"usersubjectmsg"}],"output":null}],[11,"handle","ripalt::db","",10,null],[0,"torrent","ripalt::handlers","",null,null],[3,"NewTorrentMsg","ripalt::handlers::torrent","",null,null],[12,"name","","",21,null],[12,"description","","",21,null],[12,"meta_file","","",21,null],[12,"nfo_file","","",21,null],[12,"image_files","","",21,null],[12,"category","","",21,null],[12,"user","","",21,null],[12,"info_hash","","",21,null],[12,"size","","",21,null],[12,"files","","",21,null],[3,"UpdateTorrentMsg","","",null,null],[12,"id","","",22,null],[12,"name","","",22,null],[12,"description","","",22,null],[12,"nfo_file","","",22,null],[12,"category","","",22,null],[12,"user","","",22,null],[12,"image_files","","",22,null],[12,"replace_images","","",22,null],[3,"NewTorrentBuilder","","",null,null],[3,"LoadCategoriesMsg","","",null,null],[3,"NewFile","","",null,null],[3,"LoadTorrentMsg","","",null,null],[3,"LoadTorrentMetaMsg","","",null,null],[12,"id","","",23,null],[12,"uid","","",23,null],[3,"LoadTorrentNfoMsg","","",null,null],[12,"id","","",24,null],[3,"LoadTorrentListMsg","","",null,null],[12,"name","","",25,null],[12,"category","","",25,null],[12,"user_id","","",25,null],[12,"visible","","",25,null],[12,"page","","",25,null],[12,"per_page","","",25,null],[12,"current_user_id","","",25,null],[3,"TorrentListMsg","","",null,null],[12,"torrents","","",26,null],[12,"count","","",26,null],[12,"request","","",26,null],[12,"timezone","","",26,null],[3,"DeleteTorrentMsg","","",null,null],[12,"id","","",27,null],[12,"reason","","",27,null],[12,"user","","",27,null],[4,"Visible","","",null,null],[13,"Visible","","",28,null],[13,"Invisible","","",28,null],[13,"All","","",28,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"handle","ripalt::db","",10,null],[11,"fmt","ripalt::handlers::torrent","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",22,{"inputs":[{"name":"uuid"},{"name":"usersubjectmsg"}],"output":{"name":"self"}}],[11,"handle","ripalt::db","",10,null],[11,"fmt","ripalt::handlers::torrent","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"newtorrentbuilder"}}],[11,"new","","",29,{"inputs":[],"output":{"name":"self"}}],[11,"name","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"description","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"category","","",29,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"self"}}],[11,"user","","",29,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"self"}}],[11,"raw_meta","","",29,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"self"}}],[11,"nfo","","",29,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"self"}}],[11,"add_image","","",29,{"inputs":[{"name":"self"},{"name":"t"},{"name":"temppath"}],"output":{"name":"self"}}],[11,"nfo_as_description","","",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"finish","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["newtorrentmsg","error"],"name":"result"}}],[11,"handle","ripalt::db","",10,null],[11,"fmt","ripalt::handlers::torrent","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",31,{"inputs":[{"name":"uuid"},{"name":"uuid"}],"output":{"name":"loadtorrentmsg"}}],[11,"handle","ripalt::db","",10,null],[11,"handle","","",10,null],[11,"handle","","",10,null],[11,"fmt","ripalt::handlers::torrent","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"self"}}],[11,"to_string","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"loadtorrentlistmsg"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",25,{"inputs":[{"name":"uuid"}],"output":{"name":"self"}}],[11,"name","","",25,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"self"}}],[11,"category","","",25,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"self"}}],[11,"user","","",25,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"self"}}],[11,"visible","","",25,{"inputs":[{"name":"self"},{"name":"visible"}],"output":{"name":"self"}}],[11,"page","","",25,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"}],"output":{"name":"self"}}],[11,"query","","",25,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"torrentlistmsg"}}],[11,"handle","ripalt::db","",10,null],[11,"handle","","",10,null],[0,"user","ripalt::handlers","",null,null],[3,"RequireUserMsg","ripalt::handlers::user","",null,null],[12,"0","","",32,null],[12,"1","","",32,null],[3,"LoginForm","","",null,null],[12,"username","","",33,null],[12,"password","","",33,null],[3,"SignupForm","","",null,null],[12,"username","","",34,null],[12,"email","","",34,null],[12,"password","","",34,null],[12,"password_confirmation","","",34,null],[12,"terms","","",34,null],[3,"ConfirmMsg","","",null,null],[12,"id","","",35,null],[12,"ip_address","","",35,null],[3,"LoadUserStatsMsg","","",null,null],[12,"0","","",36,null],[3,"LoadUserProfileMsg","","",null,null],[12,"0","","",37,null],[12,"1","","",37,null],[12,"2","","",37,null],[3,"ActiveUsers","","",null,null],[12,"group_order","","",38,null],[12,"groups","","",38,null],[12,"user_list","","",38,null],[3,"ActiveUsersMsg","","",null,null],[12,"0","","",39,null],[11,"handle","ripalt::db","",10,null],[11,"fmt","ripalt::handlers::user","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"loginform"}}],[11,"handle","ripalt::db","",10,null],[11,"clone","ripalt::handlers::user","",34,{"inputs":[{"name":"self"}],"output":{"name":"signupform"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_valid","","",34,{"inputs":[{"name":"self"},{"name":"dbconn"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"handle","ripalt::db","",10,null],[11,"clone","ripalt::handlers::user","",35,{"inputs":[{"name":"self"}],"output":{"name":"confirmmsg"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"handle","ripalt::db","",10,null],[11,"handle","","",10,null],[11,"handle","","",10,null],[11,"fmt","ripalt::handlers::user","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"handle","ripalt::db","",10,null],[11,"fmt","ripalt::handlers","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"usersubjectmsg"}}],[11,"new","","",40,{"inputs":[{"name":"uuid"},{"name":"uuid"},{"name":"aclcontainer"}],"output":{"name":"self"}}],[11,"try_from","","",40,{"inputs":[{"name":"httprequest"}],"output":{"generics":["error"],"name":"result"}}],[0,"models","ripalt","Data models",null,null],[0,"acl","ripalt::models","ACL (Access Control List) Models and functions",null,null],[3,"PermissionMapping","ripalt::models::acl","",null,null],[3,"Acl","","The ACL Structure",null,null],[3,"UserSubject","","",null,null],[4,"Permission","","ACL permissions",null,null],[13,"None","","",41,null],[13,"Read","","",41,null],[13,"Write","","",41,null],[13,"Create","","",41,null],[13,"Delete","","",41,null],[11,"build_from_row","","",41,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"build","","",41,null],[11,"as_expression","","",41,null],[11,"as_expression","","",41,null],[11,"to_sql","","",41,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"result"}}],[11,"to_sql","","",41,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"result"}}],[8,"Subject","","",null,null],[11,"may_read","","",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"may_write","","",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"may_create","","",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"may_delete","","",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[10,"may","","",42,{"inputs":[{"name":"self"},{"name":"t"},{"name":"permission"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"permission"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"self"},{"name":"permission"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"permission"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"acl"}}],[11,"new","","Create a new empty `Acl` object",43,{"inputs":[],"output":{"name":"self"}}],[11,"load","","Load the ACL structure from the database",43,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":null}],[11,"reload","","Reload the ACL structure from the database",43,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":null}],[11,"is_allowed","","Check if the `user` is allowed to do `perm` in namespace `ns`",43,{"inputs":[{"name":"self"},{"name":"uuid"},{"name":"uuid"},{"name":"str"},{"name":"permission"}],"output":{"name":"bool"}}],[11,"is_group_allowed","","Check if the `group` is allowed to do `perm` in namespace `ns`",43,{"inputs":[{"name":"self"},{"name":"uuid"},{"name":"str"},{"name":"permission"}],"output":{"name":"bool"}}],[11,"new","","",44,{"inputs":[{"name":"uuid"},{"name":"uuid"},{"name":"aclcontainer"}],"output":{"name":"usersubject"}}],[11,"user_id","","",44,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[11,"group_id","","",44,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[11,"may","","",44,{"inputs":[{"name":"self"},{"name":"torrent"},{"name":"permission"}],"output":{"name":"bool"}}],[11,"may","","",44,{"inputs":[{"name":"self"},{"name":"user"},{"name":"permission"}],"output":{"name":"bool"}}],[11,"may","","",44,{"inputs":[{"name":"self"},{"name":"chatroom"},{"name":"permission"}],"output":{"name":"bool"}}],[11,"may","","",44,{"inputs":[{"name":"self"},{"name":"content"},{"name":"permission"}],"output":{"name":"bool"}}],[0,"category","ripalt::models","Torrent category model",null,null],[3,"Category","ripalt::models::category","",null,null],[12,"id","","",45,null],[12,"name","","",45,null],[12,"created_at","","",45,null],[12,"updated_at","","",45,null],[11,"build","","",45,null],[11,"as_changeset","","",45,null],[11,"table","","",45,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"category"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"category"}],"output":{"name":"bool"}}],[11,"find","","",45,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"name":"option"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"self"}}],[0,"chat","ripalt::models","Chat models",null,null],[3,"ChatMessage","ripalt::models::chat","Chat message data structure",null,null],[12,"id","","the unique message id",46,null],[12,"user_id","","user id",46,null],[12,"chat","","chatroom. Can be converted to ChatRoom.",46,null],[12,"message","","the actual message",46,null],[12,"created_at","","timestamp when the message was created",46,null],[3,"ChatMessageWithUser","","Chat message data structure",null,null],[12,"id","","the unique message id",47,null],[12,"user_id","","user id",47,null],[12,"chat","","chatroom. Can be converted to ChatRoom.",47,null],[12,"message","","the actual message",47,null],[12,"created_at","","timestamp when the message was created",47,null],[12,"user_name","","user name",47,null],[12,"user_group","","user group",47,null],[3,"NewChatMessage","","A new chat message",null,null],[4,"ChatRoom","","The chatroom",null,null],[13,"Public","","Public (all registered users) chatroom. When converted to `i16` it has the value `1`.",48,null],[13,"Team","","Team (moderator+) only chatroom. When converted to `i16` it has the value `2`.",48,null],[11,"build","","",46,null],[11,"table","","",46,null],[11,"foreign_key","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"foreign_key_column","","",46,null],[11,"build","","",47,null],[11,"table","","",47,null],[11,"foreign_key","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"foreign_key_column","","",47,null],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"chatroom"}],"output":{"name":"bool"}}],[11,"try_from","","",48,{"inputs":[{"name":"i16"}],"output":{"generics":["error"],"name":"result"}}],[11,"into","","",48,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"to_string","","",48,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"chatmessage"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"chatmessagewithuser"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"messages_for_chat","","Fetch all messages for a chatroom",47,{"inputs":[{"name":"i16"},{"generics":["timestamp"],"name":"option"},{"name":"i64"},{"name":"pgconnection"}],"output":{"name":"vec"}}],[11,"from","","",47,{"inputs":[{"name":"chatmessage"}],"output":{"name":"self"}}],[11,"new","","Constructs a new `NewChatMessage` instance.",49,{"inputs":[{"name":"uuid"},{"name":"i16"},{"name":"str"}],"output":{"name":"newchatmessage"}}],[11,"save","","Save the message into the database.",49,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["chatmessage","error"],"name":"result"}}],[0,"group","ripalt::models","Use group model",null,null],[3,"Group","ripalt::models::group","",null,null],[12,"id","","",50,null],[12,"name","","",50,null],[12,"parent_id","","",50,null],[12,"created_at","","",50,null],[12,"updated_at","","",50,null],[11,"build","","",50,null],[11,"table","","",50,null],[11,"foreign_key","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"foreign_key_column","","",50,null],[11,"as_changeset","","",50,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"default","","",50,{"inputs":[],"output":{"name":"self"}}],[11,"find","","Find n Group by its id",50,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"generics":["group"],"name":"option"}}],[0,"message","ripalt::models","Message data models",null,null],[3,"MessageFolder","ripalt::models::message","A message folder",null,null],[12,"id","","",51,null],[12,"user_id","","",51,null],[12,"name","","",51,null],[12,"purge","","",51,null],[3,"NewMessageFolder","","A new message folder",null,null],[3,"Message","","A message",null,null],[12,"id","","",52,null],[12,"folder_id","","",52,null],[12,"sender_id","","",52,null],[12,"receiver_id","","",52,null],[12,"subject","","",52,null],[12,"body","","",52,null],[12,"is_read","","",52,null],[12,"created_at","","",52,null],[3,"NewMessage","","A new message",null,null],[11,"table","","",51,null],[11,"build","","",51,null],[11,"foreign_key","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"foreign_key_column","","",51,null],[11,"table","","",53,null],[11,"table","","",52,null],[11,"build","","",52,null],[11,"foreign_key","","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"foreign_key_column","","",52,null],[11,"foreign_key","","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"foreign_key_column","","",52,null],[11,"table","","",54,null],[11,"find","","Find a `MessageFolder` by its ID.",51,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"name":"option"}}],[11,"find_by_name","","Find a `MessageFolder` by its name for a user.",51,{"inputs":[{"name":"str"},{"name":"uuid"},{"name":"pgconnection"}],"output":{"name":"option"}}],[11,"new","","Construct a new `NewMessageFolder` instance.",53,{"inputs":[{"name":"uuid"},{"name":"str"},{"name":"i16"}],"output":{"name":"self"}}],[11,"save","","Save the message folder into the database.",53,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"find","","Find a `Message` by its ID.",52,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"name":"option"}}],[11,"fetch_by_folder","","Fetch all messages in a folder.",52,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"name":"vec"}}],[11,"fetch_unread","","Fetch all unread messages in a folder.",52,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"name":"vec"}}],[11,"copy_to_folder","","Copy the message to another folder.",52,{"inputs":[{"name":"self"},{"name":"uuid"},{"name":"pgconnection"}],"output":{"generics":["message","error"],"name":"result"}}],[11,"delete","","Delete this message",52,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"owner","","Get the owning user",52,{"inputs":[{"name":"self"},{"name":"messagefolder"}],"output":{"name":"uuid"}}],[11,"mark_as_read","","Mark this message as read",52,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"mark_as_unread","","Mark this message as unread",52,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"newmessage"}}],[11,"new","","Construct a new `NewMessage` instance.",54,{"inputs":[{"name":"uuid"},{"name":"uuid"},{"name":"uuid"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"save","","Save the message into the database.",54,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["message","error"],"name":"result"}}],[0,"peer","ripalt::models","Peer Model",null,null],[3,"Peer","ripalt::models::peer","",null,null],[12,"id","","",55,null],[12,"torrent_id","","",55,null],[12,"user_id","","",55,null],[12,"ip_address","","",55,null],[12,"port","","",55,null],[12,"bytes_uploaded","","",55,null],[12,"bytes_downloaded","","",55,null],[12,"bytes_left","","",55,null],[12,"seeder","","",55,null],[12,"peer_id","","",55,null],[12,"user_agent","","",55,null],[12,"crypto_enabled","","",55,null],[12,"crypto_port","","",55,null],[12,"offset_uploaded","","",55,null],[12,"offset_downloaded","","",55,null],[12,"created_at","","",55,null],[12,"finished_at","","",55,null],[12,"updated_at","","",55,null],[11,"build","","",55,null],[11,"as_changeset","","",55,null],[11,"table","","",55,null],[11,"foreign_key","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"foreign_key_column","","",55,null],[11,"foreign_key","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"foreign_key_column","","",55,null],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"find","","",55,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"name":"option"}}],[11,"find_for_torrent","","Returns all peers for a torrent",55,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"name":"vec"}}],[11,"seeder_for_torrent","","",55,{"inputs":[{"name":"uuid"},{"name":"i64"},{"name":"pgconnection"}],"output":{"name":"vec"}}],[11,"leecher_for_torrent","","",55,{"inputs":[{"name":"uuid"},{"name":"i64"},{"name":"pgconnection"}],"output":{"name":"vec"}}],[11,"peers_for_torrent","","",55,{"inputs":[{"name":"uuid"},{"name":"bool"},{"name":"i64"},{"name":"pgconnection"}],"output":{"name":"vec"}}],[11,"find_for_announce","","",55,null],[11,"save","","",55,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"delete","","",55,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"user_id","","",55,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[0,"static_content","ripalt::models","",null,null],[3,"Content","ripalt::models::static_content","",null,null],[12,"id","","",56,null],[12,"title","","",56,null],[12,"content","","",56,null],[12,"content_type","","",56,null],[12,"created_at","","",56,null],[12,"updated_at","","",56,null],[11,"build","","",56,null],[11,"table","","",56,null],[11,"as_changeset","","",56,null],[11,"new","","",56,{"inputs":[{"name":"string"},{"name":"string"},{"name":"string"},{"name":"string"},{"name":"timestamp"},{"name":"timestamp"}],"output":{"name":"self"}}],[11,"find","","",56,{"inputs":[{"name":"str"},{"name":"pgconnection"}],"output":{"name":"option"}}],[11,"render","","",56,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"save","","",56,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["usize","error"],"name":"result"}}],[0,"torrent","ripalt::models","Torrent model",null,null],[3,"Torrent","ripalt::models::torrent","",null,null],[12,"id","","",57,null],[12,"name","","",57,null],[12,"info_hash","","",57,null],[12,"category_id","","",57,null],[12,"user_id","","",57,null],[12,"description","","",57,null],[12,"size","","",57,null],[12,"visible","","",57,null],[12,"completed","","",57,null],[12,"last_action","","",57,null],[12,"last_seeder","","",57,null],[12,"created_at","","",57,null],[12,"updated_at","","",57,null],[3,"NewTorrent","","",null,null],[3,"UpdateTorrent","","",null,null],[3,"TorrentMetaFile","","",null,null],[12,"id","","",58,null],[12,"data","","",58,null],[3,"NewTorrentMetaFile","","",null,null],[3,"TorrentFile","","",null,null],[12,"id","","",59,null],[12,"torrent_id","","",59,null],[12,"file_name","","",59,null],[12,"size","","",59,null],[3,"NewTorrentFile","","",null,null],[3,"TorrentNFO","","",null,null],[12,"id","","",60,null],[12,"torrent_id","","",60,null],[12,"data","","",60,null],[3,"NewTorrentNFO","","",null,null],[3,"TorrentMsg","","",null,null],[12,"torrent","","",61,null],[12,"torrent_user_name","","",61,null],[12,"category","","",61,null],[12,"nfo","","",61,null],[12,"images","","",61,null],[12,"files","","",61,null],[12,"peers","","",61,null],[12,"timezone","","",61,null],[3,"TorrentList","","",null,null],[12,"id","","",62,null],[12,"info_hash","","",62,null],[12,"name","","",62,null],[12,"category_id","","",62,null],[12,"category_name","","",62,null],[12,"user_id","","",62,null],[12,"user_name","","",62,null],[12,"size","","",62,null],[12,"files","","",62,null],[12,"visible","","",62,null],[12,"completed","","",62,null],[12,"seeder","","",62,null],[12,"leecher","","",62,null],[12,"last_action","","",62,null],[12,"last_seeder","","",62,null],[12,"created_at","","",62,null],[3,"Transfer","","",null,null],[12,"id","","",63,null],[12,"user_id","","",63,null],[12,"torrent_id","","",63,null],[12,"bytes_uploaded","","",63,null],[12,"bytes_downloaded","","",63,null],[12,"time_seeded","","",63,null],[12,"created_at","","",63,null],[12,"updated_at","","",63,null],[12,"completed_at","","",63,null],[3,"TorrentImage","","",null,null],[12,"id","","",64,null],[12,"torrent_id","","",64,null],[12,"file_name","","",64,null],[12,"index","","",64,null],[12,"created_at","","",64,null],[3,"NewTorrentImage","","",null,null],[11,"build","","",57,null],[11,"as_changeset","","",57,null],[11,"table","","",57,null],[11,"foreign_key","","",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"foreign_key_column","","",57,null],[11,"foreign_key","","",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"foreign_key_column","","",57,null],[11,"table","","",65,null],[11,"as_changeset","","",66,null],[11,"build","","",58,null],[11,"as_changeset","","",58,null],[11,"table","","",58,null],[11,"table","","",67,null],[11,"build","","",59,null],[11,"as_changeset","","",59,null],[11,"table","","",59,null],[11,"foreign_key","","",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"foreign_key_column","","",59,null],[11,"table","","",68,null],[11,"build","","",60,null],[11,"as_changeset","","",60,null],[11,"table","","",60,null],[11,"foreign_key","","",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"foreign_key_column","","",60,null],[11,"table","","",69,null],[11,"build","","",62,null],[11,"table","","",62,null],[11,"build","","",63,null],[11,"table","","",63,null],[11,"as_changeset","","",63,null],[11,"foreign_key","","",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"foreign_key_column","","",63,null],[11,"foreign_key","","",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"foreign_key_column","","",63,null],[11,"build","","",64,null],[11,"foreign_key","","",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"foreign_key_column","","",64,null],[11,"table","","",64,null],[11,"table","","",70,null],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",57,{"inputs":[],"output":{"name":"self"}}],[11,"create","","",57,null],[11,"find","","",57,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"name":"option"}}],[11,"find_by_info_hash","","",57,null],[11,"save","","",57,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"delete","","",57,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"user_id","","",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",65,null],[11,"insert","","Insert the torrent into the database",65,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["torrent","error"],"name":"result"}}],[11,"new","","",66,{"inputs":[{"name":"str"},{"name":"uuid"},{"name":"str"}],"output":{"name":"self"}}],[11,"update","","",66,{"inputs":[{"name":"self"},{"name":"uuid"},{"name":"pgconnection"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"find","","",58,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"name":"option"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",67,null],[11,"create","","",67,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"find","","",59,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"name":"option"}}],[11,"find_for_torrent","","",59,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"name":"vec"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",68,{"inputs":[{"name":"uuid"},{"name":"str"},{"name":"i64"}],"output":{"name":"self"}}],[11,"create","","",68,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"find","","",60,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"name":"option"}}],[11,"find_for_torrent","","",60,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"name":"option"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",69,null],[11,"create","","",69,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"torrentmsg"}}],[11,"find","","",61,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"peer_count","","",62,null],[11,"peer_count_scrape","","",62,null],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"find_for_announce","","",63,{"inputs":[{"name":"uuid"},{"name":"uuid"},{"name":"pgconnection"}],"output":{"generics":["transfer"],"name":"option"}}],[11,"save","","",63,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"from","","",63,{"inputs":[{"name":"peer"}],"output":{"name":"self"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"find_for_torrent","","",64,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"name":"vec"}}],[11,"new","","",70,{"inputs":[{"name":"uuid"},{"name":"str"},{"name":"i16"}],"output":{"name":"self"}}],[11,"create","","",70,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["usize","error"],"name":"result"}}],[0,"user","ripalt::models","User models",null,null],[3,"User","ripalt::models::user","",null,null],[12,"id","","",71,null],[12,"name","","",71,null],[12,"email","","",71,null],[12,"password","","",71,null],[12,"salt","","",71,null],[12,"status","","",71,null],[12,"created_at","","",71,null],[12,"updated_at","","",71,null],[12,"passcode","","",71,null],[12,"uploaded","","",71,null],[12,"downloaded","","",71,null],[12,"group_id","","",71,null],[12,"ip_address","","",71,null],[12,"last_active","","",71,null],[3,"Property","","A User Property / Setting.",null,null],[12,"id","","",72,null],[12,"user_id","","",72,null],[12,"name","","",72,null],[12,"value","","",72,null],[12,"created_at","","",72,null],[12,"updated_at","","",72,null],[3,"UserStatsMsg","","The User stats",null,null],[12,"id","","",73,null],[12,"name","","",73,null],[12,"uploaded","","",73,null],[12,"downloaded","","",73,null],[12,"ratio","","",73,null],[12,"uploads","","",73,null],[12,"downloads","","",73,null],[3,"UserProfileMsg","","",null,null],[12,"user","","",74,null],[12,"active_uploads","","",74,null],[12,"active_downloads","","",74,null],[12,"uploads","","",74,null],[12,"completed","","",74,null],[12,"connections","","",74,null],[12,"timezone","","",74,null],[12,"may_view_passcode","","",74,null],[3,"UserTransfer","","",null,null],[3,"CompletedTorrent","","",null,null],[3,"UserConnection","","",null,null],[3,"UserUpload","","",null,null],[5,"username","","Get the username for a user id",null,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"generics":["string"],"name":"option"}}],[11,"build","","",71,null],[11,"foreign_key","","",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"foreign_key_column","","",71,null],[11,"table","","",71,null],[11,"as_changeset","","",71,null],[11,"build","","",72,null],[11,"foreign_key","","",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"foreign_key_column","","",72,null],[11,"table","","",72,null],[11,"as_changeset","","",72,null],[11,"build","","",75,null],[11,"table","","",75,null],[11,"build","","",76,null],[11,"table","","",76,null],[11,"build","","",77,null],[11,"build","","",78,null],[17,"STATUS_NEW","","New users",null,null],[17,"STATUS_INACTIVE","","Inactive/parked users",null,null],[17,"STATUS_ACTIVE","","Active/normal users",null,null],[17,"STATUS_LOCKED","","Locked users",null,null],[17,"STATUS_BANNED","","Banned (permanent or temporary) users",null,null],[8,"HasUser","","",null,null],[11,"user_name","","",79,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"name":"string"}}],[10,"user_id","","",79,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[8,"MaybeHasUser","","",null,null],[11,"user_name","","",80,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["string"],"name":"option"}}],[10,"user_id","","",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"user"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"user"}],"output":{"name":"bool"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"self"}}],[11,"find","","Find an `User` by its ID",71,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"generics":["user"],"name":"option"}}],[11,"find_by_name","","Find an `User` by the username",71,{"inputs":[{"name":"str"},{"name":"pgconnection"}],"output":{"generics":["user"],"name":"option"}}],[11,"find_by_email","","Find an `User` by the email address",71,{"inputs":[{"name":"str"},{"name":"pgconnection"}],"output":{"generics":["user"],"name":"option"}}],[11,"find_by_passcode","","Find an `User` by the passcode",71,null],[11,"set_password","","Set the password to the generated hash of the given password.",71,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"verify_password","","Verify that he given password is identical to the stored one",71,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"create","","Create a new `User`",71,{"inputs":[{"name":"pgconnection"},{"name":"string"},{"name":"string"},{"name":"str"},{"name":"group"}],"output":{"generics":["user","error"],"name":"result"}}],[11,"create_confirm_id","","Create a new confirm id",71,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"name":"bytes"}}],[11,"save","","Save the `User` into the database",71,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"update_last_active","","Update the `last_active` timestamp to now.",71,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"create_message_folders","","Create the Message Folders",71,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize","","",71,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Property` instance.",72,{"inputs":[{"name":"string"},{"name":"t"},{"name":"uuid"}],"output":{"name":"self"}}],[11,"save","","Save the `Property` into the database.",72,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["usize"],"name":"queryresult"}}],[11,"find","","Find a `Property` by its name for a user.",72,{"inputs":[{"name":"uuid"},{"name":"str"},{"name":"pgconnection"}],"output":{"generics":["property"],"name":"option"}}],[11,"find_by_name_value","","Find a `Property` by its name and value.",72,{"inputs":[{"name":"str"},{"name":"t"},{"name":"pgconnection"}],"output":{"generics":["property"],"name":"option"}}],[11,"delete","","Delete the `Property` from the database.",72,{"inputs":[{"name":"self"},{"name":"pgconnection"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",73,{"inputs":[],"output":{"name":"userstatsmsg"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",74,{"inputs":[],"output":{"name":"userprofilemsg"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"find_for_user","","",75,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"generics":["usertransfer"],"name":"vec"}}],[11,"is_seeder","","",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"find_for_user","","",76,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"generics":["completedtorrent"],"name":"vec"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"find_for_user","","",77,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"generics":["userconnection"],"name":"vec"}}],[11,"serialize","","",77,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"find_for_user","","",78,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"generics":["userupload"],"name":"vec"}}],[6,"Timestamp","ripalt::models","Convenient wrapper around DateTime<Utc>",null,null],[6,"Bytes","","Convenient wrapper around `Vec<u8>`",null,null],[0,"settings","ripalt","",null,null],[3,"Database","ripalt::settings","",null,null],[12,"url","","",81,null],[3,"User","","",null,null],[12,"default_group","","",82,null],[12,"passcode_length","","",82,null],[12,"default_timezone","","",82,null],[12,"default_torrents_per_page","","",82,null],[12,"default_delete_message_on_reply","","",82,null],[12,"default_save_message_in_sent","","",82,null],[12,"default_accept_messages","","",82,null],[3,"Email","","",null,null],[12,"enabled","","",83,null],[3,"Tracker","","",null,null],[12,"announce_url","","",84,null],[12,"comment","","",84,null],[12,"default_numwant","","",84,null],[12,"interval","","",84,null],[3,"Torrent","","",null,null],[12,"image_thumbnail_width","","",85,null],[3,"Settings","","",null,null],[12,"debug","","",86,null],[12,"jwt_secret","","",86,null],[12,"session_name","","",86,null],[12,"session_secret","","",86,null],[12,"session_strict","","",86,null],[12,"domain","","",86,null],[12,"https","","",86,null],[12,"bind","","",86,null],[12,"database","","",86,null],[12,"user","","",86,null],[12,"email","","",86,null],[12,"tracker","","",86,null],[12,"torrent","","",86,null],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",86,{"inputs":[],"output":{"generics":["configerror"],"name":"result"}}],[0,"state","ripalt","",null,null],[3,"State","ripalt::state","State represents the shared state for the application",null,null],[5,"init_acl","","",null,{"inputs":[{"name":"pool"}],"output":{"generics":["rwlock"],"name":"arc"}}],[6,"AclContainer","","",null,null],[11,"new","","Create a new State object",87,{"inputs":[{"generics":["syn","dbexecutor"],"name":"addr"},{"generics":["rwlock"],"name":"arc"}],"output":{"name":"self"}}],[11,"set_template","","Set the template object",87,{"inputs":[{"name":"self"},{"name":"templatecontainer"}],"output":null}],[11,"db","","Get the database object",87,{"inputs":[{"name":"self"}],"output":{"name":"addr"}}],[11,"acl_arc","","Get the ACL object",87,{"inputs":[{"name":"self"}],"output":{"generics":["rwlock"],"name":"arc"}}],[11,"acl","","",87,{"inputs":[{"name":"self"}],"output":{"generics":["acl"],"name":"rwlockreadguard"}}],[11,"template","","Get the Template object",87,{"inputs":[{"name":"self"}],"output":{"generics":["templatesystem"],"name":"rwlockreadguard"}}],[0,"template","ripalt","Template system",null,null],[3,"Template","ripalt::template","Container for the rendered template data",null,null],[12,"body","","",88,null],[12,"content_type","","",88,null],[5,"init_tera","","Initialize the Tera template system",null,{"inputs":[],"output":{"name":"templatecontainer"}}],[5,"template_file_watcher","","Watcher function to detect changed templates",null,{"inputs":[{"name":"templatecontainer"},{"name":"receiver"}],"output":null}],[6,"TemplateContainer","","",null,null],[6,"TemplateSystem","","",null,null],[11,"new","","Create a new Template container",88,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"self"}}],[11,"render","","Render a registered template",88,{"inputs":[{"name":"templatesystem"},{"name":"str"},{"name":"t"}],"output":{"generics":["httpresponse"],"name":"result"}}],[11,"default","","",88,{"inputs":[],"output":{"name":"self"}}],[11,"into","","",88,{"inputs":[{"name":"self"}],"output":{"name":"httpresponse"}}],[11,"respond_to","","",88,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"name":"result"}}],[0,"tracker","ripalt","",null,null],[3,"Peer","ripalt::tracker","",null,null],[3,"AnnounceData","","",null,null],[3,"ScrapeData","","",null,null],[3,"BencodeResponse","","",null,null],[5,"build","","",null,{"inputs":[{"generics":["syn","dbexecutor"],"name":"addr"}],"output":{"generics":["state"],"name":"app"}}],[8,"ResponseData","","",null,null],[10,"set_failure_reason","","",89,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"peer"}}],[11,"serialize","","",90,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from","","",90,{"inputs":[{"name":"peer"}],"output":{"name":"self"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",91,{"inputs":[],"output":{"name":"announcedata"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"announcedata"}}],[11,"set_failure_reason","","",91,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"serialize","","",91,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"scrapedata"}}],[11,"set_failure_reason","","",92,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"serialize","","",92,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"failure","","",93,{"inputs":[{"name":"str"}],"output":{"name":"bencoderesponse"}}],[11,"respond_to","","",93,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"name":"result"}}],[0,"util","ripalt","Utility functions for ripalt",null,null],[5,"to_hex","ripalt::util","",null,null],[5,"from_hex","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec","error"],"name":"result"}}],[5,"data_size","","",null,{"inputs":[{"name":"t"}],"output":{"name":"string"}}],[0,"rand","","RNG related functions",null,null],[5,"gen_random_bytes","ripalt::util::rand","Generate `len` random bytes",null,{"inputs":[{"name":"usize"}],"output":{"generics":["u8"],"name":"vec"}}],[0,"password","ripalt::util","Password handling functions",null,null],[5,"generate_passhash","ripalt::util::password","Generate the argon2i hash for the given password and salt",null,null],[5,"verify","","Verify that he given password is identical to the stored one",null,null],[0,"torrent","ripalt::util","Torrent and Torrent file related functions",null,null],[5,"info_hash","ripalt::util::torrent","Calculate the info hash for a torrent meta file",null,null],[5,"files","","Get all files for a torrent meta file",null,null],[5,"rewrite","","",null,null],[0,"user","ripalt::util","",null,null],[5,"user_timezone","ripalt::util::user","",null,{"inputs":[{"name":"uuid"},{"name":"pgconnection"}],"output":{"name":"i32"}}],[11,"check","ripalt::handlers::user","",32,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"name":"bool"}}],[11,"from","ripalt::models::acl","",44,{"inputs":[{"name":"usersubjectmsg"}],"output":{"name":"usersubject"}}]],"paths":[[3,"PublishMessage"],[8,"IdentityPolicy"],[8,"Identity"],[8,"RequestIdentity"],[3,"IdentityService"],[3,"ApiIdentityPolicy"],[3,"ApiIdentity"],[3,"NewMessage"],[3,"MessageListMsg"],[3,"DbConn"],[3,"DbExecutor"],[3,"LoadChatMessagesMsg"],[3,"PublishChatMessagesMsg"],[3,"MessageResponse"],[3,"LoadMessagesMsg"],[3,"LoadMessageMsg"],[3,"NewMessageMsg"],[3,"DeleteMessagesMsg"],[3,"MarkMessagesMsg"],[3,"LoadStaticContentMsg"],[3,"UpdateStaticContentMsg"],[3,"NewTorrentMsg"],[3,"UpdateTorrentMsg"],[3,"LoadTorrentMetaMsg"],[3,"LoadTorrentNfoMsg"],[3,"LoadTorrentListMsg"],[3,"TorrentListMsg"],[3,"DeleteTorrentMsg"],[4,"Visible"],[3,"NewTorrentBuilder"],[3,"NewFile"],[3,"LoadTorrentMsg"],[3,"RequireUserMsg"],[3,"LoginForm"],[3,"SignupForm"],[3,"ConfirmMsg"],[3,"LoadUserStatsMsg"],[3,"LoadUserProfileMsg"],[3,"ActiveUsers"],[3,"ActiveUsersMsg"],[3,"UserSubjectMsg"],[4,"Permission"],[8,"Subject"],[3,"Acl"],[3,"UserSubject"],[3,"Category"],[3,"ChatMessage"],[3,"ChatMessageWithUser"],[4,"ChatRoom"],[3,"NewChatMessage"],[3,"Group"],[3,"MessageFolder"],[3,"Message"],[3,"NewMessageFolder"],[3,"NewMessage"],[3,"Peer"],[3,"Content"],[3,"Torrent"],[3,"TorrentMetaFile"],[3,"TorrentFile"],[3,"TorrentNFO"],[3,"TorrentMsg"],[3,"TorrentList"],[3,"Transfer"],[3,"TorrentImage"],[3,"NewTorrent"],[3,"UpdateTorrent"],[3,"NewTorrentMetaFile"],[3,"NewTorrentFile"],[3,"NewTorrentNFO"],[3,"NewTorrentImage"],[3,"User"],[3,"Property"],[3,"UserStatsMsg"],[3,"UserProfileMsg"],[3,"UserTransfer"],[3,"CompletedTorrent"],[3,"UserConnection"],[3,"UserUpload"],[8,"HasUser"],[8,"MaybeHasUser"],[3,"Database"],[3,"User"],[3,"Email"],[3,"Tracker"],[3,"Torrent"],[3,"Settings"],[3,"State"],[3,"Template"],[8,"ResponseData"],[3,"Peer"],[3,"AnnounceData"],[3,"ScrapeData"],[3,"BencodeResponse"]]};
searchIndex["rustc_demangle"] = {"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",null,null],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",null,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,{"inputs":[{"name":"str"}],"output":{"name":"demangle"}}],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",null,{"inputs":[{"name":"str"}],"output":{"generics":["demangle","trydemangleerror"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"trydemangleerror"}}],[11,"as_str","","Returns the underlying string that's being demangled.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"TryDemangleError"],[3,"Demangle"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"inputs":[{"name":"self"}],"output":{"generics":["vec","frombase64error"],"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"inputs":[{"name":"self"}],"output":{"generics":["vec","fromhexerror"],"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"encodererror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"generics":["buildererror"],"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"generics":["buildererror"],"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json"],"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json"],"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"inputs":[{"name":"self"}],"output":{"generics":["stackelement"],"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["jsonevent"],"name":"option"}}],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["json","buildererror"],"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"decoderesult"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"decoderesult"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"decoderesult"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"decoderesult"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"decoderesult"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"decoderesult"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"decoderesult"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"decoderesult"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"decoderesult"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"decoderesult"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"decoderesult"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"decoderesult"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"decoderesult"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"decoderesult"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"decoderesult"}}],[11,"read_enum","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"generics":["json","parsererror"],"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","Read a usize value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[10,"read_isize","","Read a isize value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[10,"read_bool","","Read a bool value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[10,"read_char","","Read a char value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"result"}}],[10,"read_str","","Read a string value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","Read an struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","Read an optional value.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","Emit a char value.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","Emit a string value.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["vec"],"name":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["safemem"] = {"doc":"Safe wrappers for memory-accessing functions like `std::ptr::copy()`.","items":[[5,"copy_over","safemem","Copy `len` elements from `src_idx` to `dest_idx`. Ranges may overlap.",null,null],[5,"write_bytes","","Safe wrapper for `std::ptr::write_bytes()`/`memset()`.",null,null],[5,"prepend","","Prepend `elems` to `vec`, resizing if necessary.",null,null]],"paths":[]};
searchIndex["same_file"] = {"doc":"This crate provides a safe and simple cross platform way to determine whether two file paths refer to the same file or directory.","items":[[3,"Handle","same_file","A handle to a file that can be tested for equality with other handles.",null,null],[5,"is_same_file","","Returns true if the two file paths may correspond to the same file.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"generics":["bool"],"name":"result"}}],[11,"as_raw_fd","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"into_raw_fd","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"from_path","","Construct a handle from a path.",0,{"inputs":[{"name":"p"}],"output":{"generics":["handle"],"name":"result"}}],[11,"from_file","","Construct a handle from a file.",0,{"inputs":[{"name":"file"}],"output":{"generics":["handle"],"name":"result"}}],[11,"stdin","","Construct a handle from stdin.",0,{"inputs":[],"output":{"generics":["handle"],"name":"result"}}],[11,"stdout","","Construct a handle from stdout.",0,{"inputs":[],"output":{"generics":["handle"],"name":"result"}}],[11,"stderr","","Construct a handle from stderr.",0,{"inputs":[],"output":{"generics":["handle"],"name":"result"}}],[11,"as_file","","Return a reference to the underlying file.",0,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"as_file_mut","","Return a mutable reference to the underlying file.",0,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"dev","","Return the underlying device number of this handle.",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"ino","","Return the underlying inode number of this handle.",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}]],"paths":[[3,"Handle"]]};
searchIndex["scheduled_thread_pool"] = {"doc":"A thread pool to execute scheduled actions in parallel.","items":[[3,"JobHandle","scheduled_thread_pool","A handle to a scheduled job.",null,null],[3,"ScheduledThreadPool","","A pool of threads which can run tasks at specific time intervals.",null,null],[11,"cancel","","Cancels the job.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new thread pool with the specified number of threads.",1,{"inputs":[{"name":"usize"}],"output":{"name":"scheduledthreadpool"}}],[11,"with_name","","Creates a new thread pool with the specified number of threads which will be named.",1,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"scheduledthreadpool"}}],[11,"execute","","Executes a closure as soon as possible in the pool.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"jobhandle"}}],[11,"execute_after","","Executes a closure after a time delay in the pool.",1,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"f"}],"output":{"name":"jobhandle"}}],[11,"execute_at_fixed_rate","","Executes a closure after an initial delay at a fixed rate in the pool.",1,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"duration"},{"name":"f"}],"output":{"name":"jobhandle"}}],[11,"execute_with_fixed_delay","","Executes a closure after an initial delay at a fixed rate in the pool.",1,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"duration"},{"name":"f"}],"output":{"name":"jobhandle"}}]],"paths":[[3,"JobHandle"],[3,"ScheduledThreadPool"]]};
searchIndex["scoped_threadpool"] = {"doc":"This crate provides a stable, safe and scoped threadpool.","items":[[3,"Pool","scoped_threadpool","A threadpool that acts as a handle to a number of threads spawned at construction.",null,null],[3,"Scope","","Handle to the scope during which the threadpool is borrowed.",null,null],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Construct a threadpool with the given number of threads. Minimum value is `1`.",0,{"inputs":[{"name":"u32"}],"output":{"name":"pool"}}],[11,"scoped","","Borrows the pool and allows executing jobs on other threads during that scope via the argument of the closure.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"thread_count","","Returns the number of threads inside this pool.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"execute","","Execute a job on the threadpool.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"join_all","","Blocks until all currently queued jobs have run to completion.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Pool"],[3,"Scope"]]};
searchIndex["scoped_tls"] = {"doc":"Scoped thread-local storage","items":[[3,"ScopedKey","scoped_tls","Type representing a thread local storage key corresponding to a reference to the type parameter `T`.",null,null],[11,"set","","Inserts a value into this scoped thread local storage slot for a duration of a closure.",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"scoped_thread_local","","",null,null]],"paths":[[3,"ScopedKey"]]};
searchIndex["scopeguard"] = {"doc":"A scope guard will run a given closure when it goes out of scope, even if the code between panics. (as long as panic doesn't abort)","items":[[3,"ScopeGuard","scopeguard","`ScopeGuard` is a scope guard that may own a protected value.",null,null],[4,"Always","","Always run on scope exit.",null,null],[5,"guard","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"generics":["always"],"name":"scopeguard"}}],[8,"Strategy","","",null,null],[10,"should_run","","Return `true` if the guard’s associated code should run (in the context where this method is called).",0,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"should_run","","",1,{"inputs":[],"output":{"name":"bool"}}],[11,"with_strategy","","Create a `ScopeGuard` that owns `v` (accessible through deref) and calls `dropfn` when its destructor runs.",2,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"scopeguard"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"defer","","Macro to create a `ScopeGuard` (always run).",null,null],[14,"defer_on_unwind","","Macro to create a `ScopeGuard` (run on unwinding from panic).",null,null]],"paths":[[8,"Strategy"],[4,"Always"],[3,"ScopeGuard"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",0,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",0,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",0,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",0,null],[13,"Char","","The input contained a `char` that was not expected.",0,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",0,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",0,null],[13,"Unit","","The input contained a unit `()` that was not expected.",0,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,null],[13,"Seq","","The input contained a sequence that was not expected.",0,null],[13,"Map","","The input contained a map that was not expected.",0,null],[13,"Enum","","The input contained an enum that was not expected.",0,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",0,null],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"unitdeserializer"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",2,null],[11,"deserialize_enum","","",2,null],[11,"deserialize_identifier","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"booldeserializer"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",3,null],[11,"deserialize_enum","","",3,null],[11,"deserialize_identifier","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"i8deserializer"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",4,null],[11,"deserialize_enum","","",4,null],[11,"deserialize_identifier","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"i16deserializer"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",5,null],[11,"deserialize_enum","","",5,null],[11,"deserialize_identifier","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"i32deserializer"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",6,null],[11,"deserialize_enum","","",6,null],[11,"deserialize_identifier","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"i64deserializer"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",7,null],[11,"deserialize_enum","","",7,null],[11,"deserialize_identifier","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"isizedeserializer"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",8,null],[11,"deserialize_enum","","",8,null],[11,"deserialize_identifier","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u8deserializer"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",9,null],[11,"deserialize_enum","","",9,null],[11,"deserialize_identifier","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u16deserializer"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",10,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",10,null],[11,"deserialize_enum","","",10,null],[11,"deserialize_identifier","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u64deserializer"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",11,null],[11,"deserialize_enum","","",11,null],[11,"deserialize_identifier","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usizedeserializer"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",12,null],[11,"deserialize_enum","","",12,null],[11,"deserialize_identifier","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"f32deserializer"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_identifier","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"f64deserializer"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_identifier","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"chardeserializer"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_identifier","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32deserializer"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_identifier","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",16,null],[11,"variant_seed","","",16,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"strdeserializer"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",17,null],[11,"deserialize_bool","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_identifier","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given string.",18,{"inputs":[{"name":"str"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"deserialize_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",18,null],[11,"deserialize_bool","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_identifier","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"stringdeserializer"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",19,null],[11,"deserialize_bool","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_identifier","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"cowstrdeserializer"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",20,null],[11,"deserialize_bool","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_identifier","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"borrowedbytesdeserializer"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given byte slice.",21,null],[11,"deserialize_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_identifier","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",21,null],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"seqdeserializer"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",22,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_enum","","",22,null],[11,"deserialize_identifier","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"seqaccessdeserializer"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",23,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_enum","","",23,null],[11,"deserialize_identifier","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, E>`.",24,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_identifier","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_key_seed","","",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value_seed","","",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_entry_seed","","",24,{"inputs":[{"name":"self"},{"name":"tk"},{"name":"tv"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_element_seed","","",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"mapaccessdeserializer"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",25,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_identifier","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","serde::de","",26,{"inputs":[{"name":"self"}],"output":{"name":"ignoredany"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"ignoredany"}}],[11,"expecting","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i64","","",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u64","","",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f64","","",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_str","","",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","",26,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","",26,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",26,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","",26,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_bytes","","",26,null],[11,"deserialize","","",26,{"inputs":[{"name":"d"}],"output":{"generics":["ignoredany"],"name":"result"}}],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",27,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",27,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",27,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",27,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",27,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",27,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",27,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",27,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",29,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",30,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",30,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",31,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",31,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",31,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",31,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",32,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","The input contains a boolean.",32,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","The input contains an `i8`.",32,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","The input contains an `i16`.",32,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","The input contains an `i32`.",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","The input contains an `i64`.",32,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u8","","The input contains a `u8`.",32,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","The input contains a `u16`.",32,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","The input contains a `u32`.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","The input contains a `u64`.",32,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","The input contains an `f32`.",32,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","The input contains an `f64`.",32,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","The input contains a `char`.",32,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",32,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",32,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",32,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",32,null],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",32,null],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",32,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"result"}}],[11,"visit_none","","The input contains an optional that is absent.",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","The input contains an optional that is present.",32,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","The input contains a unit `()`.",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","The input contains a newtype struct.",32,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","The input contains a sequence of elements.",32,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","The input contains a key-value map.",32,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_enum","","The input contains an enum.",32,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",33,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",33,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",33,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",34,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",34,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"generics":["option"],"name":"result"}}],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",34,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",34,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",34,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",34,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",34,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",35,null],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant","","`variant` is called to identify which variant to deserialize.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",36,null],[10,"unit_variant","","Called when deserializing a variant with no values.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"newtype_variant","","Called when deserializing a variant with a single value.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"struct_variant","","Called when deserializing a struct-like variant.",36,null],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",37,null],[10,"into_deserializer","","Convert this value into a deserializer.",37,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",38,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",38,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",39,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",40,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",41,null],[16,"Error","","The error type when some error occurs during serialization.",41,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",41,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",41,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",41,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",41,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",41,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",41,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",41,null],[10,"serialize_bool","","Serialize a `bool` value.",41,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",41,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",41,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",41,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",41,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",41,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",41,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",41,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",41,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",41,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",41,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",41,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",41,null],[10,"serialize_none","","Serialize a [`None`] value.",41,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",41,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",41,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",41,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",42,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",42,null],[10,"serialize_element","","Serialize a sequence element.",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a sequence.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",43,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",43,null],[10,"serialize_element","","Serialize a tuple element.",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,null],[10,"serialize_field","","Serialize a tuple struct field.",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple struct.",44,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,null],[10,"serialize_field","","Serialize a tuple variant field.",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple variant.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,null],[10,"serialize_key","","Serialize a map key.",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_value","","Serialize a map value.",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",46,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a map.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,null],[10,"serialize_field","","Serialize a struct field.",47,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct field has been skipped.",47,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,null],[10,"serialize_field","","Serialize a struct variant field.",48,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct variant field has been skipped.",48,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct variant.",48,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Deserialize","serde","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",29,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",31,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",31,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",31,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",31,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",40,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",41,null],[16,"Error","","The error type when some error occurs during serialization.",41,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",41,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",41,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",41,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",41,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",41,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",41,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",41,null],[10,"serialize_bool","","Serialize a `bool` value.",41,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",41,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",41,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",41,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",41,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",41,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",41,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",41,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",41,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",41,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",41,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",41,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",41,null],[10,"serialize_none","","Serialize a [`None`] value.",41,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",41,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",41,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",41,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null]],"paths":[[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_bencode"] = {"doc":"","items":[[0,"error","serde_bencode","",null,null],[4,"Error","serde_bencode::error","",null,null],[13,"IoError","","",0,null],[13,"InvalidType","","",0,null],[13,"InvalidValue","","",0,null],[13,"InvalidLength","","",0,null],[13,"UnknownVariant","","",0,null],[13,"UnknownField","","",0,null],[13,"MissingField","","",0,null],[13,"DuplicateField","","",0,null],[13,"Custom","","",0,null],[13,"EndOfStream","","",0,null],[6,"Result","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"custom","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","",0,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","",0,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","",0,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","",0,null],[11,"unknown_field","","",0,null],[11,"missing_field","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ser","serde_bencode","",null,null],[3,"Serializer","serde_bencode::ser","",null,null],[3,"SerializeMap","","",null,null],[5,"to_bytes","","",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_string","","",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",1,{"inputs":[],"output":{"name":"serializer"}}],[11,"into_vec","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"as_ref","","",1,null],[11,"new","","",2,{"inputs":[{"name":"serializer"},{"name":"usize"}],"output":{"name":"serializemap"}}],[11,"serialize_key","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_entry","","",2,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"end","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"de","serde_bencode","",null,null],[3,"BencodeAccess","serde_bencode::de","",null,null],[3,"Deserializer","","",null,null],[5,"from_str","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"from_bytes","","",null,null],[11,"next_element_seed","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_key_seed","","",3,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value_seed","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"unit_variant","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"newtype_variant_seed","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"tuple_variant","","",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"struct_variant","","",3,null],[11,"variant_seed","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",4,{"inputs":[{"name":"r"}],"output":{"name":"deserializer"}}],[0,"value","serde_bencode","",null,null],[4,"Value","serde_bencode::value","",null,null],[13,"Bytes","","",5,null],[13,"Int","","",5,null],[13,"List","","",5,null],[13,"Dict","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"generics":["value"],"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"string"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"generics":["value"],"name":"vec"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"generics":["vec","value"],"name":"hashmap"}],"output":{"name":"value"}}]],"paths":[[4,"Error"],[3,"Serializer"],[3,"SerializeMap"],[3,"BencodeAccess"],[3,"Deserializer"],[4,"Value"]]};
searchIndex["serde_bytes"] = {"doc":"Wrapper types to enable optimized handling of `&[u8]` and `Vec<u8>`.","items":[[3,"ByteBuf","serde_bytes","Wrapper around `Vec<u8>` to serialize and deserialize efficiently.",null,null],[3,"Bytes","","Wrapper around `&[u8]` to serialize and deserialize efficiently.",null,null],[5,"serialize","","Serde `serialize_with` function to serialize bytes efficiently.",null,{"inputs":[{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[5,"deserialize","","Serde `deserialize_with` function to deserialize bytes efficiently.",null,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"into_deserializer","","",0,null],[11,"into_deserializer","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bytebuf"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"ordering"}}],[11,"new","","Construct a new, empty `ByteBuf`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Wrap existing bytes in a `ByteBuf`.",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",1,null],[11,"as_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"serialize","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"generics":["bytebuf"],"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"new","","Wrap an existing `&[u8]`.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,null],[11,"deref","","",0,null],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"generics":["bytes"],"name":"result"}}]],"paths":[[3,"Bytes"],[3,"ByteBuf"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["serde_derive_internals"] = {"doc":"","items":[[3,"Ctxt","serde_derive_internals","",null,null],[0,"ast","","",null,null],[3,"Container","serde_derive_internals::ast","",null,null],[12,"ident","","",0,null],[12,"attrs","","",0,null],[12,"data","","",0,null],[12,"generics","","",0,null],[3,"Variant","","",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"style","","",1,null],[12,"fields","","",1,null],[3,"Field","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"ty","","",2,null],[12,"original","","",2,null],[4,"Data","","",null,null],[13,"Enum","","",3,null],[13,"Struct","","",3,null],[4,"Style","","",null,null],[13,"Struct","","",4,null],[13,"Tuple","","",4,null],[13,"Newtype","","",4,null],[13,"Unit","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"from_ast","","",0,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"}],"output":{"name":"container"}}],[11,"all_fields","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"has_getter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"attr","serde_derive_internals","",null,null],[3,"Name","serde_derive_internals::attr","",null,null],[3,"Container","","Represents container (e.g. struct) attribute information",null,null],[3,"Variant","","Represents variant attribute information",null,null],[3,"Field","","Represents field attribute information",null,null],[4,"RenameRule","","",null,null],[13,"None","","Don't apply a default rename rule.",5,null],[13,"LowerCase","","Rename direct children to \"lowercase\" style.",5,null],[13,"UPPERCASE","","Rename direct children to \"UPPERCASE\" style.",5,null],[13,"PascalCase","","Rename direct children to \"PascalCase\" style, as typically used for enum variants.",5,null],[13,"CamelCase","","Rename direct children to \"camelCase\" style.",5,null],[13,"SnakeCase","","Rename direct children to \"snake_case\" style, as commonly used for fields.",5,null],[13,"ScreamingSnakeCase","","Rename direct children to \"SCREAMING_SNAKE_CASE\" style, as commonly used for constants.",5,null],[13,"KebabCase","","Rename direct children to \"kebab-case\" style.",5,null],[13,"ScreamingKebabCase","","Rename direct children to \"SCREAMING-KEBAB-CASE\" style.",5,null],[4,"EnumTag","","Styles of representing an enum.",null,null],[13,"External","","The default.",6,null],[13,"Internal","","`#[serde(tag = \"type\")]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[13,"Adjacent","serde_derive_internals::attr","`#[serde(tag = \"t\", content = \"c\")]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[12,"content","","",6,null],[13,"None","serde_derive_internals::attr","`#[serde(untagged)]`",6,null],[4,"Identifier","","Whether this enum represents the fields of a struct or the variants of an enum.",null,null],[13,"No","","It does not.",7,null],[13,"Field","","This enum represents the fields of a struct. All of the variants must be unit variants, except possibly one which is annotated with `#[serde(other)]` and is a newtype variant.",7,null],[13,"Variant","","This enum represents the variants of an enum. All of the variants must be unit variants.",7,null],[4,"Default","","Represents the default to use for a field when deserializing.",null,null],[13,"None","","Field must always be specified because it does not have a default.",8,null],[13,"Default","","The default is given by `std::default::Default::default()`.",8,null],[13,"Path","","The default is given by this function.",8,null],[5,"get_serde_meta_items","","",null,{"inputs":[{"name":"attribute"}],"output":{"generics":["vec"],"name":"option"}}],[11,"serialize_name","","Return the container name for the container when serializing.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deserialize_name","","Return the container name for the container when deserializing.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"is_some","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",10,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_all","","",10,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"deny_unknown_fields","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",10,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"ser_bound","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tag","","",10,{"inputs":[{"name":"self"}],"output":{"name":"enumtag"}}],[11,"type_from","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"option"}}],[11,"type_into","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"option"}}],[11,"remote","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"identifier","","",10,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"has_flatten","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mark_has_flatten","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"from_ast","","",11,{"inputs":[{"name":"ctxt"},{"name":"variant"}],"output":{"name":"self"}}],[11,"name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",11,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"rename_all","","",11,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"skip_deserializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"other","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"serialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["exprpath"],"name":"option"}}],[11,"deserialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["exprpath"],"name":"option"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",12,{"inputs":[{"name":"ctxt"},{"name":"usize"},{"name":"field"},{"generics":["variant"],"name":"option"},{"name":"default"}],"output":{"name":"self"}}],[11,"name","","",12,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",12,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"skip_serializing","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_deserializing","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing_if","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["exprpath"],"name":"option"}}],[11,"default","","",12,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"serialize_with","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["exprpath"],"name":"option"}}],[11,"deserialize_with","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["exprpath"],"name":"option"}}],[11,"ser_bound","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrowed_lifetimes","","",12,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"getter","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["exprpath"],"name":"option"}}],[11,"flatten","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","serde_derive_internals","",13,{"inputs":[],"output":{"name":"ctxt"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"error","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"check","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","serde_derive_internals::attr","",5,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":{"name":"bool"}}],[11,"apply_to_variant","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"apply_to_field","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Container"],[3,"Variant"],[3,"Field"],[4,"Data"],[4,"Style"],[4,"RenameRule"],[4,"EnumTag"],[4,"Identifier"],[4,"Default"],[3,"Name"],[3,"Container"],[3,"Variant"],[3,"Field"],[3,"Ctxt"]]};
searchIndex["serde_hjson"] = {"doc":"JSON and serialization - TODO/hjson","items":[[0,"builder","serde_hjson","JSON Builders",null,null],[3,"ArrayBuilder","serde_hjson::builder","This structure provides a simple interface for constructing a JSON array.",null,null],[3,"ObjectBuilder","","This structure provides a simple interface for constructing a JSON object.",null,null],[11,"new","","Construct an `ObjectBuilder`.",0,{"inputs":[],"output":{"name":"arraybuilder"}}],[11,"unwrap","","Return the constructed `Value`.",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"push","","Insert a value into the array.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"arraybuilder"}}],[11,"push_array","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting array into this array.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"arraybuilder"}}],[11,"push_object","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting object into this array.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"arraybuilder"}}],[11,"new","","Construct an `ObjectBuilder`.",1,{"inputs":[],"output":{"name":"objectbuilder"}}],[11,"unwrap","","Return the constructed `Value`.",1,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"insert","","Insert a key-value pair into the object.",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"v"}],"output":{"name":"objectbuilder"}}],[11,"insert_array","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting array into this object.",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":{"name":"objectbuilder"}}],[11,"insert_object","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting object into this object.",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":{"name":"objectbuilder"}}],[0,"de","serde_hjson","Hjson Deserialization",null,null],[3,"Deserializer","serde_hjson::de","A structure that deserializes Hjson into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple Hjson values.",null,null],[5,"from_iter","","Decodes a Hjson value from an iterator over an iterator `Iterator<Item=u8>`.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Decodes a Hjson value from a `std::io::Read`.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Decodes a Hjson value from a byte slice `&[u8]`.",null,null],[5,"from_str","","Decodes a Hjson value from a `&str`.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates the Hjson parser from an `std::iter::Iterator`.",2,{"inputs":[{"name":"iter"}],"output":{"name":"deserializer"}}],[11,"new_for_root","","Creates the Hjson parser from an `std::iter::Iterator`.",2,{"inputs":[{"name":"iter"}],"output":{"name":"deserializer"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","Parses a `null` as a None, and any other values as a `Some(...)`.",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","Parses a newtype struct as the underlying value.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","Parses an enum as an object like `{\"$KEY\":$VALUE}`, where $VALUE is either a straight value, a `[..]`, or a `{..}`.",2,null],[11,"deserialize_bool","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",2,null],[11,"deserialize_struct_field","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_variant","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_tuple","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","",2,null],[11,"new","","Returns an `Iterator` of decoded Hjson values from an iterator over `Iterator<Item=u8>`.",3,{"inputs":[{"name":"iter"}],"output":{"name":"streamdeserializer"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[0,"error","serde_hjson","JSON Errors",null,null],[4,"ErrorCode","serde_hjson::error","The errors that can arise while parsing a JSON stream.",null,null],[13,"Custom","","Catchall for syntax error messages",4,null],[13,"InvalidType","","Incorrect type from value",4,null],[13,"InvalidValue","","Incorrect value",4,null],[13,"InvalidLength","","Invalid length",4,null],[13,"UnknownVariant","","Unknown variant in an enum.",4,null],[13,"UnknownField","","Unknown field in struct.",4,null],[13,"MissingField","","Struct is missing a field.",4,null],[13,"EOFWhileParsingList","","EOF while parsing a list.",4,null],[13,"EOFWhileParsingObject","","EOF while parsing an object.",4,null],[13,"EOFWhileParsingString","","EOF while parsing a string.",4,null],[13,"EOFWhileParsingValue","","EOF while parsing a JSON value.",4,null],[13,"ExpectedColon","","Expected this character to be a `':'`.",4,null],[13,"ExpectedListCommaOrEnd","","Expected this character to be either a `','` or a `]`.",4,null],[13,"ExpectedObjectCommaOrEnd","","Expected this character to be either a `','` or a `}`.",4,null],[13,"ExpectedSomeIdent","","Expected to parse either a `true`, `false`, or a `null`.",4,null],[13,"ExpectedSomeValue","","Expected this character to start a JSON value.",4,null],[13,"InvalidEscape","","Invalid hex escape code.",4,null],[13,"InvalidNumber","","Invalid number.",4,null],[13,"InvalidUnicodeCodePoint","","Invalid unicode code point.",4,null],[13,"KeyMustBeAString","","Object key is not a string.",4,null],[13,"LoneLeadingSurrogateInHexEscape","","Lone leading surrogate in hex escape.",4,null],[13,"TrailingCharacters","","JSON has non-whitespace trailing characters after the value.",4,null],[13,"UnexpectedEndOfHexEscape","","Unexpected end of hex excape.",4,null],[13,"PunctuatorInQlString","","Found a punctuator character when excpecting a quoteless string.",4,null],[4,"Error","","This type represents all possible errors that can occur when serializing or deserializing a value into JSON.",null,null],[13,"Syntax","","The JSON value had some syntatic error.",5,null],[13,"Io","","Some IO error occurred when serializing or deserializing a value.",5,null],[13,"FromUtf8","","Some UTF8 error occurred while serializing or deserializing a value.",5,null],[6,"Result","","Helper alias for `Result` objects that return a JSON `Error`.",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"end_of_stream","","",5,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_type","","",5,{"inputs":[{"name":"type"}],"output":{"name":"error"}}],[11,"invalid_value","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"invalid_length","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"error"}}],[11,"unknown_variant","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"unknown_field","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"missing_field","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"custom","","Raised when there is general error when deserializing a type.",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"ser","serde_hjson","Hjson Serialization",null,null],[3,"Serializer","serde_hjson::ser","A structure for serializing Rust values into Hjson.",null,null],[5,"escape_bytes","","Serializes and escapes a `&[u8]` into a Hjson string.",null,null],[5,"quote_str","","Serializes and escapes a `&str` into a Hjson string.",null,{"inputs":[{"name":"w"},{"name":"f"},{"name":"str"}],"output":{"name":"result"}}],[5,"ml_str","","Serializes and escapes a `&str` into a multiline Hjson string.",null,{"inputs":[{"name":"w"},{"name":"f"},{"name":"str"}],"output":{"name":"result"}}],[5,"escape_key","","Serializes and escapes a `&str` into a Hjson key.",null,{"inputs":[{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[5,"to_writer","","Encode the specified struct into a Hjson `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Encode the specified struct into a Hjson `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_string","","Encode the specified struct into a Hjson `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters",null,null],[10,"open","","Called when serializing a '{' or '['.",6,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[10,"comma","","Called when serializing a ','.",6,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[10,"colon","","Called when serializing a ':'.",6,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[10,"close","","Called when serializing a '}' or ']'.",6,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[10,"newline","","Newline with indent.",6,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i32"}],"output":{"name":"result"}}],[10,"start_value","","Start a value.",6,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Creates a new Hjson serializer.",7,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new Hjson visitor whose output will be written to the writer specified.",7,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",7,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"serialize_bool","","",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"serialize_isize","","",7,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[11,"serialize_i8","","",7,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"serialize_i16","","",7,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"serialize_i32","","",7,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"serialize_i64","","",7,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_usize","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_u8","","",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"serialize_u16","","",7,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"serialize_u32","","",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"serialize_u64","","",7,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_f32","","",7,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"serialize_f64","","",7,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"serialize_char","","",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"serialize_str","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_bytes","","",7,null],[11,"serialize_unit","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_unit_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_unit_variant","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_newtype_struct","","Serialize newtypes without an object wrapper.",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_newtype_variant","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_none","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_some","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_seq","","",7,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["state"],"name":"result"}}],[11,"serialize_seq_elt","","",7,{"inputs":[{"name":"self"},{"name":"state"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_seq_end","","",7,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"result"}}],[11,"serialize_seq_fixed_size","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["state"],"name":"result"}}],[11,"serialize_tuple","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["state"],"name":"result"}}],[11,"serialize_tuple_elt","","",7,{"inputs":[{"name":"self"},{"name":"state"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_tuple_end","","",7,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["state"],"name":"result"}}],[11,"serialize_tuple_struct_elt","","",7,{"inputs":[{"name":"self"},{"name":"state"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct_end","","",7,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"generics":["state"],"name":"result"}}],[11,"serialize_tuple_variant_elt","","",7,{"inputs":[{"name":"self"},{"name":"state"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant_end","","",7,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"result"}}],[11,"serialize_map","","",7,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["state"],"name":"result"}}],[11,"serialize_map_key","","",7,{"inputs":[{"name":"self"},{"name":"state"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_map_value","","",7,{"inputs":[{"name":"self"},{"name":"state"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_map_end","","",7,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"result"}}],[11,"serialize_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["state"],"name":"result"}}],[11,"serialize_struct_elt","","",7,{"inputs":[{"name":"self"},{"name":"state"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_end","","",7,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"result"}}],[11,"serialize_struct_variant","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"generics":["state"],"name":"result"}}],[11,"serialize_struct_variant_elt","","",7,{"inputs":[{"name":"self"},{"name":"state"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_variant_end","","",7,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"result"}}],[0,"value","serde_hjson","JSON Value",null,null],[3,"Serializer","serde_hjson::value","Create a `serde::Serializer` that serializes a `Serialize`e into a `Value`.",null,null],[3,"Deserializer","","Creates a `serde::Deserializer` from a `json::Value` object.",null,null],[4,"Value","","Represents a JSON value",null,null],[13,"Null","","Represents a JSON null value",8,null],[13,"Bool","","Represents a JSON Boolean",8,null],[13,"I64","","Represents a JSON signed integer",8,null],[13,"U64","","Represents a JSON unsigned integer",8,null],[13,"F64","","Represents a JSON floating point number",8,null],[13,"String","","Represents a JSON string",8,null],[13,"Array","","Represents a JSON array",8,null],[13,"Object","","Represents a JSON object",8,null],[5,"to_value","","Shortcut function to encode a `T` into a JSON `Value`",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"from_value","","Shortcut function to decode a JSON `Value` into a `T`",null,{"inputs":[{"name":"value"}],"output":{"generics":["error"],"name":"result"}}],[6,"Map","","Represents a key/value type.",null,null],[6,"MapIntoIter","","Represents the IntoIter type.",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",9,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"find","","If the `Value` is an Object, returns the value associated with the provided key. Otherwise, returns None.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"find_path","","Attempts to get a nested Value Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the `Value` associated with the final key.",8,null],[11,"lookup","","Deprecated: Use `Value.pointer()` and pointer syntax instead.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"pointer","","Looks up a value by a JSON Pointer.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"search","","If the `Value` is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the `Value` is not an Object, returns None.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",8,{"inputs":[{"name":"self"}],"output":{"generics":["map"],"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",8,{"inputs":[{"name":"self"}],"output":{"generics":["map"],"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",8,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",8,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",8,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is a i64. Returns false otherwise.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is a u64. Returns false otherwise.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a f64. Returns false otherwise.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is a number, return or cast it to a i64. Returns None otherwise.",8,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the `Value` is a number, return or cast it to a u64. Returns None otherwise.",8,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","If the `Value` is a number, return or cast it to a f64. Returns None otherwise.",8,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",8,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"serialize","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",8,{"inputs":[{"name":"d"}],"output":{"generics":["value"],"name":"result"}}],[11,"fmt","","Serializes a json value into a string",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Serializes a json value into a string",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"new","","Construct a new `Serializer`.",10,{"inputs":[],"output":{"name":"serializer"}}],[11,"unwrap","","Unwrap the `Serializer` and return the `Value`.",10,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"serialize_bool","","",10,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_isize","","",10,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i8","","",10,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i16","","",10,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i32","","",10,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i64","","",10,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_usize","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u8","","",10,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u16","","",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u32","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u64","","",10,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_f32","","",10,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_f64","","",10,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_char","","",10,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_str","","",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_bytes","","",10,null],[11,"serialize_unit","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_unit_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_unit_variant","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_newtype_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_newtype_variant","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_none","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_some","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_seq","","",10,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"serialize_seq_elt","","",10,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_seq_end","","",10,{"inputs":[{"name":"self"},{"generics":["value"],"name":"vec"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_seq_fixed_size","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"serialize_tuple","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"serialize_tuple_elt","","",10,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_end","","",10,{"inputs":[{"name":"self"},{"generics":["value"],"name":"vec"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"serialize_tuple_struct_elt","","",10,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_struct_end","","",10,{"inputs":[{"name":"self"},{"generics":["value"],"name":"vec"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_variant","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"generics":["tuplevariantstate","error"],"name":"result"}}],[11,"serialize_tuple_variant_elt","","",10,{"inputs":[{"name":"self"},{"name":"tuplevariantstate"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_variant_end","","",10,{"inputs":[{"name":"self"},{"name":"tuplevariantstate"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_map","","",10,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["mapstate","error"],"name":"result"}}],[11,"serialize_map_key","","",10,{"inputs":[{"name":"self"},{"name":"mapstate"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_map_value","","",10,{"inputs":[{"name":"self"},{"name":"mapstate"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_map_end","","",10,{"inputs":[{"name":"self"},{"name":"mapstate"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["mapstate","error"],"name":"result"}}],[11,"serialize_struct_elt","","",10,{"inputs":[{"name":"self"},{"name":"mapstate"},{"name":"str"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_struct_end","","",10,{"inputs":[{"name":"self"},{"name":"mapstate"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_struct_variant","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"generics":["structvariantstate","error"],"name":"result"}}],[11,"serialize_struct_variant_elt","","",10,{"inputs":[{"name":"self"},{"name":"structvariantstate"},{"name":"str"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_struct_variant_end","","",10,{"inputs":[{"name":"self"},{"name":"structvariantstate"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Creates a new deserializer instance for deserializing the specified JSON value.",11,{"inputs":[{"name":"value"}],"output":{"name":"deserializer"}}],[11,"deserialize","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_option","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_enum","","",11,null],[11,"deserialize_newtype_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",11,null],[11,"deserialize_struct_field","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[14,"forward_to_deserialize","serde_hjson","",null,null]],"paths":[[3,"ArrayBuilder"],[3,"ObjectBuilder"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"ErrorCode"],[4,"Error"],[8,"Formatter"],[3,"Serializer"],[4,"Value"],[8,"ToJson"],[3,"Serializer"],[3,"Deserializer"]]};
searchIndex["serde_json"] = {"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[3,"Serializer","","A structure for serializing Rust values into JSON.",null,null],[3,"Map","","Represents a JSON key/value type.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"generics":["error"],"name":"result"}}],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"generics":["value","error"],"name":"result"}}],[0,"de","","Deserialize JSON data to a Rust data structure.",null,null],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",null,null],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",null,null],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",null,null],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",null,null],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,null],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,{"inputs":[{"name":"self"}],"output":{"name":"streamdeserializer"}}],[11,"from_str","serde_json","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","serde_json::de","Create a JSON stream deserializer from one of the possible serde_json input sources.",3,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"byte_offset","","Returns the number of bytes so far deserialized into a successful `T`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",null,null],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",null,null],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",4,null],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",4,null],[13,"Data","","The error was caused by input data that was semantically incorrect.",4,null],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",4,null],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[11,"line","","One-based line number at which the error was detected.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"column","","One-based column number at which the error was detected.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"classify","","Categorizes the cause of this error.",5,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"category"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"invalid_type","","",5,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"map","serde_json","A map of String to serde_json::Value.",null,null],[3,"Map","serde_json::map","Represents a JSON key/value type.",null,null],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",null,null],[3,"Iter","","An iterator over a serde_json::Map's entries.",null,null],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",null,null],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",null,null],[3,"Keys","","An iterator over a serde_json::Map's keys.",null,null],[3,"Values","","An iterator over a serde_json::Map's values.",null,null],[3,"ValuesMut","","A mutable iterator over a serde_json::Map's values.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",null,null],[13,"Vacant","","A vacant Entry.",6,null],[13,"Occupied","","An occupied Entry.",6,null],[11,"new","","Makes a new empty Map.",7,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",7,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Clears the map, removing all values.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["value"],"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["value"],"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",7,{"inputs":[{"name":"self"},{"name":"string"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["value"],"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Gets an iterator over the entries of the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Gets an iterator over mutable values of the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"index_mut","","",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_iter","","",7,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"extend","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"key","","Returns a reference to this entry's key.",6,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",6,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"value"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",8,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"key","","Gets a reference to the key in the entry.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get","","Gets a reference to the value in the entry.",9,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",9,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",9,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",9,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",9,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",7,null],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"next_back","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"next_back","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"next_back","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",null,null],[13,"Quote","","An escaped quote `\"`",16,null],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",16,null],[13,"Solidus","","An escaped solidus `/`",16,null],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",16,null],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",16,null],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",16,null],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",16,null],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",16,null],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",16,null],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",null,null],[11,"write_null","","Writes a `null` value to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f64"}],"output":{"name":"result"}}],[11,"write_number_str","","Writes a number that has already been rendered to a string.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char_escape","","Writes a character escape code to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"charescape"}],"output":{"name":"result"}}],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_array_value","","Called after every array value.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_key","","Called before every object key.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object_value","","Called after every object value.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Creates a new JSON serializer.",18,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",18,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",18,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",18,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"compactformatter"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"prettyformatter"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",20,{"inputs":[],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",20,null],[11,"default","","",20,{"inputs":[],"output":{"name":"self"}}],[11,"begin_array","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_array","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_array_value","","",20,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_array_value","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_key","","",20,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"begin_object_value","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object_value","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",null,null],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"generics":["value","error"],"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"generics":["value"],"name":"result"}}],[11,"fmt","","Display a JSON value as a string.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"deserialize_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_identifier","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Convert 32-bit floating point number to `Value`",0,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from","","Convert 64-bit floating point number to `Value`",0,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from","","Convert boolean to `Value`",0,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"from","","Convert `String` to `Value`",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","Convert string slice to `Value`",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","Convert copy-on-write string to `Value`",0,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","Convert map (with string keys) to `Value`",0,{"inputs":[{"generics":["string","value"],"name":"map"}],"output":{"name":"self"}}],[11,"from","","Convert a `Vec` to `Value`",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","Convert a slice to `Value`",0,null],[11,"from_iter","","Convert an iteratable type to a `Value`",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Index","","A type that can be used to index into a `serde_json::Value`.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["value"],"name":"option"}}],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["value"],"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["map"],"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["map"],"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pointer","","Looks up a value by a JSON Pointer.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"value"}}],[11,"clone","serde_json","",2,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",2,{"inputs":[{"name":"f64"}],"output":{"generics":["number"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"generics":["number"],"name":"result"}}],[11,"deserialize_any","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i8","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i16","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u8","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u16","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_f32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_f64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_bool","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",2,null],[11,"deserialize_enum","","",2,null],[11,"deserialize_identifier","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input stream.",21,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"discard","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"parse_str_raw","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"ignore_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a slice of bytes.",22,null],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"discard","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",22,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",22,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"parse_str_raw","","",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"ignore_str","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a UTF-8 string.",23,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"discard","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",23,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",23,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",23,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"parse_str_raw","","",23,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"ignore_str","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",null,null]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"Number"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"]]};
searchIndex["serde_test"] = {"doc":"","items":[[3,"Serializer","serde_test","",null,null],[3,"Deserializer","","",null,null],[4,"Token","","",null,null],[13,"Bool","","",0,null],[13,"Isize","","",0,null],[13,"I8","","",0,null],[13,"I16","","",0,null],[13,"I32","","",0,null],[13,"I64","","",0,null],[13,"Usize","","",0,null],[13,"U8","","",0,null],[13,"U16","","",0,null],[13,"U32","","",0,null],[13,"U64","","",0,null],[13,"F32","","",0,null],[13,"F64","","",0,null],[13,"Char","","",0,null],[13,"Str","","",0,null],[13,"String","","",0,null],[13,"Bytes","","",0,null],[13,"Option","","",0,null],[13,"Unit","","",0,null],[13,"UnitStruct","","",0,null],[13,"StructNewType","","",0,null],[13,"EnumStart","","",0,null],[13,"EnumUnit","","",0,null],[13,"EnumNewType","","",0,null],[13,"SeqStart","","",0,null],[13,"SeqArrayStart","","",0,null],[13,"SeqSep","","",0,null],[13,"SeqEnd","","",0,null],[13,"TupleStart","","",0,null],[13,"TupleSep","","",0,null],[13,"TupleEnd","","",0,null],[13,"TupleStructStart","","",0,null],[13,"TupleStructSep","","",0,null],[13,"TupleStructEnd","","",0,null],[13,"MapStart","","",0,null],[13,"MapSep","","",0,null],[13,"MapEnd","","",0,null],[13,"StructStart","","",0,null],[13,"StructSep","","",0,null],[13,"StructEnd","","",0,null],[13,"EnumSeqStart","","",0,null],[13,"EnumSeqSep","","",0,null],[13,"EnumSeqEnd","","",0,null],[13,"EnumMapStart","","",0,null],[13,"EnumMapSep","","",0,null],[13,"EnumMapEnd","","",0,null],[4,"Error","","",null,null],[13,"Custom","","",1,null],[13,"InvalidValue","","",1,null],[13,"EndOfStream","","",1,null],[13,"InvalidType","","",1,null],[13,"InvalidLength","","",1,null],[13,"UnknownVariant","","",1,null],[13,"UnknownField","","",1,null],[13,"MissingField","","",1,null],[13,"DuplicateField","","",1,null],[13,"InvalidName","","",1,null],[13,"UnexpectedToken","","",1,null],[5,"assert_tokens","","",null,null],[5,"assert_ser_tokens","","",null,null],[5,"assert_ser_tokens_error","","Expect an error serializing `T`.",null,null],[5,"assert_de_tokens","","",null,null],[5,"assert_de_tokens_error","","Expect an error deserializing tokens into a `T`.",null,null],[11,"new","","",2,{"inputs":[{"name":"i"}],"output":{"name":"serializer"}}],[11,"next_token","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["token"],"name":"option"}}],[11,"serialize_unit","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_newtype_variant","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_unit_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_unit_variant","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_bool","","",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_isize","","",2,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i8","","",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i16","","",2,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i32","","",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i64","","",2,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_usize","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u8","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u16","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u32","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u64","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_f32","","",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_f64","","",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_char","","",2,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_str","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_none","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_some","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_seq","","",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_seq_elt","","",2,null],[11,"serialize_seq_end","","",2,null],[11,"serialize_seq_fixed_size","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_elt","","",2,null],[11,"serialize_tuple_end","","",2,null],[11,"serialize_newtype_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_struct_elt","","",2,null],[11,"serialize_tuple_struct_end","","",2,null],[11,"serialize_tuple_variant","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_variant_elt","","",2,null],[11,"serialize_tuple_variant_end","","",2,null],[11,"serialize_map","","",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_map_key","","",2,null],[11,"serialize_map_value","","",2,null],[11,"serialize_map_end","","",2,null],[11,"serialize_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_struct_elt","","",2,null],[11,"serialize_struct_end","","",2,null],[11,"serialize_struct_variant","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_struct_variant_elt","","",2,null],[11,"serialize_struct_variant_end","","",2,null],[11,"serialize_bytes","","",2,null],[11,"new","","",3,{"inputs":[{"name":"i"}],"output":{"name":"deserializer"}}],[11,"next_token","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["token"],"name":"option"}}],[11,"deserialize_seq","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct_field","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",3,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_option","","Hook into `Option` deserializing so we can treat `Unit` as a `None`, or a regular value as `Some(value)`.",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_enum","","",3,null],[11,"deserialize_unit_struct","","",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_newtype_struct","","",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_seq_fixed_size","","",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_tuple","","",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_tuple_struct","","",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_struct","","",3,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"invalid_value","","",1,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"end_of_stream","","",1,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_type","","",1,{"inputs":[{"name":"type"}],"output":{"name":"error"}}],[11,"invalid_value","","",1,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"invalid_length","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"error"}}],[11,"unknown_variant","","",1,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"unknown_field","","",1,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"missing_field","","",1,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"duplicate_field","","",1,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}]],"paths":[[4,"Token"],[4,"Error"],[3,"Serializer"],[3,"Deserializer"]]};
searchIndex["serde_urlencoded"] = {"doc":"`x-www-form-urlencoded` meets Serde","items":[[3,"Deserializer","serde_urlencoded","A deserializer for the `application/x-www-form-urlencoded` format.",null,null],[3,"Serializer","","A serializer for the `application/x-www-form-urlencoded` format.",null,null],[5,"from_bytes","","Deserializes a `application/x-wwww-url-encoded` value from a `&[u8]`.",null,null],[5,"from_reader","","Convenience function that reads all bytes from `reader` and deserializes them with `from_bytes`.",null,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[5,"from_str","","Deserializes a `application/x-wwww-url-encoded` value from a `&str`.",null,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[5,"to_string","","Serializes a value into a `application/x-wwww-url-encoded` `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string","error"],"name":"result"}}],[0,"de","","Deserialization support for the `application/x-www-form-urlencoded` format.",null,null],[3,"Error","serde_urlencoded::de","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[3,"Deserializer","","A deserializer for the `application/x-www-form-urlencoded` format.",null,null],[5,"from_bytes","","Deserializes a `application/x-wwww-url-encoded` value from a `&[u8]`.",null,null],[5,"from_str","","Deserializes a `application/x-wwww-url-encoded` value from a `&str`.",null,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[5,"from_reader","","Convenience function that reads all bytes from `reader` and deserializes them with `from_bytes`.",null,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Returns a new `Deserializer`.",0,{"inputs":[{"name":"urlencodedparse"}],"output":{"name":"self"}}],[11,"deserialize_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_identifier","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[0,"ser","serde_urlencoded","Serialization support for the `application/x-www-form-urlencoded` format.",null,null],[3,"Serializer","serde_urlencoded::ser","A serializer for the `application/x-www-form-urlencoded` format.",null,null],[3,"SeqSerializer","","Sequence serializer.",null,null],[3,"TupleSerializer","","Tuple serializer.",null,null],[3,"TupleStructSerializer","","Tuple struct serializer.",null,null],[3,"TupleVariantSerializer","","Tuple variant serializer.",null,null],[3,"MapSerializer","","Map serializer.",null,null],[3,"StructSerializer","","Struct serializer.",null,null],[3,"StructVariantSerializer","","Struct variant serializer.",null,null],[4,"Error","","Errors returned during serializing to `application/x-www-form-urlencoded`.",null,null],[13,"Custom","","",1,null],[13,"Utf8","","",1,null],[5,"to_string","","Serializes a value into a `application/x-wwww-url-encoded` `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"new","","Returns a new `Serializer`.",2,{"inputs":[{"name":"urlencodedserializer"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, in the case of a `Utf8` error.",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"serialize_bool","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i8","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i16","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i32","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i64","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u8","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u16","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u32","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u64","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_f32","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_f64","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_char","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_str","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_bytes","","Returns an error.",2,null],[11,"serialize_unit","","Returns an error.",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_unit_struct","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_unit_variant","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_newtype_struct","","Serializes the inner value, ignoring the newtype name.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_newtype_variant","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_none","","Returns `Ok`.",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_some","","Serializes the given value.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_seq","","Serialize a sequence, given length (if any) is ignored.",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_struct","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_variant","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_map","","Serializes a map, given length is ignored.",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_struct","","Serializes a struct, given length is ignored.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_struct_variant","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_element","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_element","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_field","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_field","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_entry","","",7,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_key","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_value","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_field","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_field","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"custom","serde_urlencoded::de","",10,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",10,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[3,"Deserializer"],[4,"Error"],[3,"Serializer"],[3,"SeqSerializer"],[3,"TupleSerializer"],[3,"TupleStructSerializer"],[3,"TupleVariantSerializer"],[3,"MapSerializer"],[3,"StructSerializer"],[3,"StructVariantSerializer"],[3,"Error"]]};
searchIndex["sha1"] = {"doc":"A minimal implementation of SHA1 for rust.","items":[[3,"Sha1","sha1","Represents a Sha1 hash object in memory.",null,null],[3,"Digest","","Digest generated from a `Sha1` instance.",null,null],[3,"DigestParseError","","Indicates that a digest couldn't be parsed.",null,null],[17,"DIGEST_LENGTH","","The length of a SHA1 digest in bytes",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"sha1"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"sha1"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"sha1"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"sha1"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"sha1"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"sha1"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"sha1"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"sha1"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"sha1"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"digest"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"digest"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"digest"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"digest"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"sha1"}}],[11,"new","","Creates an fresh sha1 hash object.",0,{"inputs":[],"output":{"name":"sha1"}}],[11,"from","","Shortcut to create a sha1 from some bytes.",0,{"inputs":[{"name":"d"}],"output":{"name":"sha1"}}],[11,"reset","","Resets the hash object to it's initial state.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"update","","Update hash with input data.",0,null],[11,"digest","","Retrieve digest result.",0,{"inputs":[{"name":"self"}],"output":{"name":"digest"}}],[11,"bytes","","Returns the 160 bit (20 byte) digest as a byte array.",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"digestparseerror"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"digestparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"digestparseerror"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"digestparseerror"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"digestparseerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"digestparseerror"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"digestparseerror"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"digestparseerror"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"digestparseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["digest","digestparseerror"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Sha1"],[3,"Digest"],[3,"DigestParseError"]]};
searchIndex["siphasher"] = {"doc":"","items":[[0,"sip","siphasher","An implementation of SipHash.",null,null],[3,"SipHasher13","siphasher::sip","An implementation of SipHash 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",2,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",2,null],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",0,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",0,null],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",1,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",1,null],[11,"write","","",2,null],[11,"finish","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",1,null],[11,"finish","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"sip128","siphasher","An implementation of SipHash with a 128-bit output.",null,null],[3,"Hash128","siphasher::sip128","A 128-bit (2x64) hash output",null,null],[12,"h1","","",3,null],[12,"h2","","",3,null],[3,"SipHasher13","","An implementation of SipHash128 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash128 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash128 2-4.",null,null],[8,"Hasher128","","",null,null],[10,"finish128","","Return a 128-bit hash",4,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"hash128"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",7,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",7,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",7,null],[11,"finish128","","Return a 128-bit hash",7,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",5,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",5,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",5,null],[11,"finish128","","Return a 128-bit hash",5,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",6,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",6,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",6,null],[11,"finish128","","Return a 128-bit hash",6,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"write","","",7,null],[11,"finish","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",5,null],[11,"finish","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",6,null],[11,"finish","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_bytes","","Convert into a 16-bytes vector",3,null]],"paths":[[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Hash128"],[8,"Hasher128"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"]]};
searchIndex["slab"] = {"doc":"","items":[[3,"Slab","slab","A preallocated chunk of memory for storing objects of the same type.",null,null],[3,"SlabIter","","",null,null],[3,"SlabMutIter","","",null,null],[8,"Index","","Slab can be indexed by any type implementing `Index` trait.",null,null],[10,"from_usize","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"as_usize","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"slab"}}],[11,"new_starting_at","","",1,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"slab"}}],[11,"count","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remaining","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_remaining","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"get","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"insert","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"insert_with","","Like `insert` but for objects that require newly allocated usize in their constructor.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"remove","","Releases the given slot",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"replace","","",1,{"inputs":[{"name":"self"},{"name":"i"},{"name":"t"}],"output":{"name":"option"}}],[11,"replace_with","","Execute a function on the value in the slot and put the result of the function back into the slot. If function returns None, slot is left empty on exit.",1,{"inputs":[{"name":"self"},{"name":"i"},{"name":"f"}],"output":{"name":"result"}}],[11,"retain","","Retain only the elements specified by the predicate.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"slabiter"}}],[11,"iter_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"slabmutiter"}}],[11,"clear","","Empty the slab, by freeing all entries",1,{"inputs":[{"name":"self"}],"output":null}],[11,"grow","","Grow the slab, by adding `entries_num`",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"Index"],[3,"Slab"],[3,"SlabIter"],[3,"SlabMutIter"]]};
searchIndex["slug"] = {"doc":"","items":[[5,"slugify","slug","Convert any unicode string to an ascii \"slug\" (useful for file names/url components)",null,{"inputs":[{"name":"s"}],"output":{"name":"string"}}]],"paths":[]};
searchIndex["smallvec"] = {"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","An iterator that removes the items from a `SmallVec` and yields them by value.",null,null],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",null,null],[3,"IntoIter","","An iterator that consumes a `SmallVec` and yields its items by value.",null,null],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",null,null],[10,"push","","Append an element to the vector.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"ExtendFromSlice","","Trait to be implemented by a collection that can be extended from a slice",null,null],[10,"extend_from_slice","","Extends a collection from a slice of its element type",1,null],[8,"Array","","Types that can be used as the backing store for a SmallVec",null,null],[16,"Item","","The type of the array's elements.",2,null],[10,"size","","Returns the number of items the array can hold.",2,{"inputs":[],"output":{"name":"usize"}}],[10,"ptr","","Returns a pointer to the first element of the array.",2,null],[10,"ptr_mut","","Returns a mutable pointer to the first element of the array.",2,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Construct an empty vector",4,{"inputs":[],"output":{"name":"smallvec"}}],[11,"with_capacity","","Construct an empty vector with enough capacity pre-allocated to store at least `n` elements.",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>` without copying elements.",4,{"inputs":[{"name":"vec"}],"output":{"name":"smallvec"}}],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A` without copying elements.",4,{"inputs":[{"name":"a"}],"output":{"name":"smallvec"}}],[11,"set_len","","Sets the length of a vector.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"inline_size","","The maximum number of elements this vector can hold inline",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","The number of elements stored in the vector",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector is empty",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","The number of items the vector can hold without reallocating",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Empty the vector and return an iterator over its former contents.",4,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"push","","Append an item to the vector.",4,null],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"grow","","Re-allocate to set the capacity to `new_cap`.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_slice","","Extracts a slice containing the entire vector.",4,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",4,null],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",4,null],[11,"clear","","Remove all elements from the vector.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",4,null],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",4,null],[11,"insert_many","","Insert multiple elements at position `index`, shifting all following elements toward the back.",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"i"}],"output":null}],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",4,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"retain","","Retains only the elements specified by the predicate.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"dedup","","Removes consecutive duplicate elements.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"dedup_by","","Removes consecutive duplicate elements using the given equality relation.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"from_slice","","Copy the elements from a slice into a new `SmallVec`.",4,null],[11,"insert_from_slice","","Copy elements from a slice into the vector at position `index`, shifting any following elements toward the back.",4,null],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",4,null],[11,"resize","","Resizes the vector so that its length is equal to `len`.",4,null],[11,"from_elem","","Creates a `SmallVec` with `n` copies of `elem`. ``` use smallvec::SmallVec;",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"write","","",4,null],[11,"write_all","","",4,null],[11,"flush","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",4,null],[11,"from","","",4,{"inputs":[{"name":"vec"}],"output":{"name":"smallvec"}}],[11,"from","","",4,{"inputs":[{"name":"a"}],"output":{"name":"smallvec"}}],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"extend_from_slice","","",4,null],[11,"push","","",4,null],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"smallvec"}}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"smallvec"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"smallvec"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"ordering"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",4,null],[14,"smallvec","","Creates a [`SmallVec`] containing the arguments.",null,null]],"paths":[[8,"VecLike"],[8,"ExtendFromSlice"],[8,"Array"],[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"]]};
searchIndex["stable_deref_trait"] = {"doc":"This module defines an unsafe marker trait, StableDeref, for container types that deref to a fixed address which is valid even when the containing type is moved. For example, Box, Vec, Rc, Arc and String implement this trait. Additionally, it defines CloneStableDeref for types like Rc where clones deref to the same address.","items":[[8,"StableDeref","stable_deref_trait","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableDeref","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null]],"paths":[]};
searchIndex["string"] = {"doc":"A UTF-8 encoded string with configurable byte storage.","items":[[3,"String","string","A UTF-8 encoded string with configurable byte storage.",null,null],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",null,null],[16,"Error","","The type returned in the event of a conversion error.",0,null],[10,"try_from","","Performs the conversion.",0,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"string"}}],[11,"get_ref","","Get a reference to the underlying byte storage.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the underlying byte storage.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Unwraps this `String`, returning the underlying byte storage.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new empty `String`.",1,{"inputs":[],"output":{"name":"string"}}],[11,"from_utf8_unchecked","","Converts the provided value to a `String` without checking that the given value is valid UTF-8.",1,{"inputs":[{"name":"t"}],"output":{"name":"string"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"try_from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[8,"TryFrom"],[3,"String"]]};
searchIndex["syn"] = {"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Attribute","syn","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",0,null],[12,"style","","",0,null],[12,"bracket_token","","",0,null],[12,"path","","",0,null],[12,"tts","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",null,null],[12,"ident","","",1,null],[12,"paren_token","","",1,null],[12,"nested","","",1,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",null,null],[12,"ident","","",2,null],[12,"eq_token","","",2,null],[12,"lit","","",2,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",3,null],[12,"vis","","Visibility of the field.",3,null],[12,"ident","","Name of the field, if any.",3,null],[12,"colon_token","","",3,null],[12,"ty","","Type of the field.",3,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",null,null],[12,"brace_token","","",4,null],[12,"named","","",4,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",null,null],[12,"paren_token","","",5,null],[12,"unnamed","","",5,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",6,null],[12,"ident","","Name of the variant.",6,null],[12,"fields","","Content stored in the variant.",6,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,null],[3,"VisCrate","","A crate-level visibility: `crate`.",null,null],[12,"crate_token","","",7,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",8,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",null,null],[12,"pub_token","","",9,null],[12,"paren_token","","",9,null],[12,"in_token","","",9,null],[12,"path","","",9,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[12,"attrs","","",10,null],[12,"bracket_token","","",10,null],[12,"elems","","",10,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[12,"attrs","","",11,null],[12,"left","","",11,null],[12,"eq_token","","",11,null],[12,"right","","",11,null],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[12,"attrs","","",12,null],[12,"left","","",12,null],[12,"op","","",12,null],[12,"right","","",12,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",13,null],[12,"left","","",13,null],[12,"op","","",13,null],[12,"right","","",13,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[12,"attrs","","",14,null],[12,"block","","",14,null],[3,"ExprBox","","A box expression: `box f`.",null,null],[12,"attrs","","",15,null],[12,"box_token","","",15,null],[12,"expr","","",15,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",null,null],[12,"attrs","","",16,null],[12,"break_token","","",16,null],[12,"label","","",16,null],[12,"expr","","",16,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",17,null],[12,"func","","",17,null],[12,"paren_token","","",17,null],[12,"args","","",17,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",18,null],[12,"expr","","",18,null],[12,"as_token","","",18,null],[12,"ty","","",18,null],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",null,null],[12,"attrs","","",19,null],[12,"do_token","","",19,null],[12,"catch_token","","",19,null],[12,"block","","",19,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[12,"attrs","","",20,null],[12,"movability","","",20,null],[12,"capture","","",20,null],[12,"or1_token","","",20,null],[12,"inputs","","",20,null],[12,"or2_token","","",20,null],[12,"output","","",20,null],[12,"body","","",20,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[12,"attrs","","",21,null],[12,"continue_token","","",21,null],[12,"label","","",21,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",null,null],[12,"attrs","","",22,null],[12,"base","","",22,null],[12,"dot_token","","",22,null],[12,"member","","",22,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[12,"attrs","","",23,null],[12,"label","","",23,null],[12,"for_token","","",23,null],[12,"pat","","",23,null],[12,"in_token","","",23,null],[12,"expr","","",23,null],[12,"body","","",23,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[12,"attrs","","",24,null],[12,"group_token","","",24,null],[12,"expr","","",24,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",null,null],[12,"attrs","","",25,null],[12,"if_token","","",25,null],[12,"cond","","",25,null],[12,"then_branch","","",25,null],[12,"else_branch","","",25,null],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",null,null],[12,"attrs","","",26,null],[12,"if_token","","",26,null],[12,"let_token","","",26,null],[12,"pats","","",26,null],[12,"eq_token","","",26,null],[12,"expr","","",26,null],[12,"then_branch","","",26,null],[12,"else_branch","","",26,null],[3,"ExprInPlace","","A placement expression: `place <- value`.",null,null],[12,"attrs","","",27,null],[12,"place","","",27,null],[12,"arrow_token","","",27,null],[12,"value","","",27,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",28,null],[12,"expr","","",28,null],[12,"bracket_token","","",28,null],[12,"index","","",28,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",null,null],[12,"attrs","","",29,null],[12,"lit","","",29,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[12,"attrs","","",30,null],[12,"label","","",30,null],[12,"loop_token","","",30,null],[12,"body","","",30,null],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",null,null],[12,"attrs","","",31,null],[12,"mac","","",31,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",null,null],[12,"attrs","","",32,null],[12,"match_token","","",32,null],[12,"expr","","",32,null],[12,"brace_token","","",32,null],[12,"arms","","",32,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[12,"attrs","","",33,null],[12,"receiver","","",33,null],[12,"dot_token","","",33,null],[12,"method","","",33,null],[12,"turbofish","","",33,null],[12,"paren_token","","",33,null],[12,"args","","",33,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",34,null],[12,"paren_token","","",34,null],[12,"expr","","",34,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",null,null],[12,"attrs","","",35,null],[12,"qself","","",35,null],[12,"path","","",35,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[12,"attrs","","",36,null],[12,"from","","",36,null],[12,"limits","","",36,null],[12,"to","","",36,null],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",null,null],[12,"attrs","","",37,null],[12,"and_token","","",37,null],[12,"mutability","","",37,null],[12,"expr","","",37,null],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",null,null],[12,"attrs","","",38,null],[12,"bracket_token","","",38,null],[12,"expr","","",38,null],[12,"semi_token","","",38,null],[12,"len","","",38,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[12,"attrs","","",39,null],[12,"return_token","","",39,null],[12,"expr","","",39,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[12,"attrs","","",40,null],[12,"path","","",40,null],[12,"brace_token","","",40,null],[12,"fields","","",40,null],[12,"dot2_token","","",40,null],[12,"rest","","",40,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[12,"attrs","","",41,null],[12,"expr","","",41,null],[12,"question_token","","",41,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[12,"attrs","","",42,null],[12,"paren_token","","",42,null],[12,"elems","","",42,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[12,"attrs","","",43,null],[12,"expr","","",43,null],[12,"colon_token","","",43,null],[12,"ty","","",43,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",44,null],[12,"op","","",44,null],[12,"expr","","",44,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[12,"attrs","","",45,null],[12,"unsafe_token","","",45,null],[12,"block","","",45,null],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",null,null],[12,"tts","","",46,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[12,"attrs","","",47,null],[12,"label","","",47,null],[12,"while_token","","",47,null],[12,"cond","","",47,null],[12,"body","","",47,null],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",null,null],[12,"attrs","","",48,null],[12,"label","","",48,null],[12,"while_token","","",48,null],[12,"let_token","","",48,null],[12,"pats","","",48,null],[12,"eq_token","","",48,null],[12,"expr","","",48,null],[12,"body","","",48,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[12,"attrs","","",49,null],[12,"yield_token","","",49,null],[12,"expr","","",49,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",50,null],[12,"span","","",50,null],[3,"Arm","","One arm of a `match` expression: `0...10 => { return true; }`.",null,null],[12,"attrs","","",51,null],[12,"leading_vert","","",51,null],[12,"pats","","",51,null],[12,"guard","","",51,null],[12,"fat_arrow_token","","",51,null],[12,"body","","",51,null],[12,"comma","","",51,null],[3,"Block","","A braced block containing Rust statements.",null,null],[12,"brace_token","","",52,null],[12,"stmts","","Statements in a block",52,null],[3,"FieldPat","","A single field in a struct pattern.",null,null],[12,"attrs","","",53,null],[12,"member","","",53,null],[12,"colon_token","","",53,null],[12,"pat","","",53,null],[3,"FieldValue","","A field-value pair in a struct literal.",null,null],[12,"attrs","","Attributes tagged on the field.",54,null],[12,"member","","Name or index of the field.",54,null],[12,"colon_token","","The colon in `Struct { x: x }`. If written in shorthand like `Struct { x }`, there is no colon.",54,null],[12,"expr","","Value of the field.",54,null],[3,"Label","","A lifetime labeling a `for`, `while`, or `loop`.",null,null],[12,"name","","",55,null],[12,"colon_token","","",55,null],[3,"Local","","A local `let` binding: `let x: u64 = s.parse()?`.",null,null],[12,"attrs","","",56,null],[12,"let_token","","",56,null],[12,"pats","","",56,null],[12,"ty","","",56,null],[12,"init","","",56,null],[12,"semi_token","","",56,null],[3,"MethodTurbofish","","The `::<>` explicit type parameters passed to a method call: `parse::<u64>()`.",null,null],[12,"colon2_token","","",57,null],[12,"lt_token","","",57,null],[12,"args","","",57,null],[12,"gt_token","","",57,null],[3,"PatBox","","A box pattern: `box v`.",null,null],[12,"box_token","","",58,null],[12,"pat","","",58,null],[3,"PatIdent","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",null,null],[12,"by_ref","","",59,null],[12,"mutability","","",59,null],[12,"ident","","",59,null],[12,"subpat","","",59,null],[3,"PatLit","","A literal pattern: `0`.",null,null],[12,"expr","","",60,null],[3,"PatMacro","","A macro in expression position.",null,null],[12,"mac","","",61,null],[3,"PatPath","","A path pattern like `Color::Red`, optionally qualified with a self-type.",null,null],[12,"qself","","",62,null],[12,"path","","",62,null],[3,"PatRange","","A range pattern: `1..=2`.",null,null],[12,"lo","","",63,null],[12,"limits","","",63,null],[12,"hi","","",63,null],[3,"PatRef","","A reference pattern: `&mut (first, second)`.",null,null],[12,"and_token","","",64,null],[12,"mutability","","",64,null],[12,"pat","","",64,null],[3,"PatSlice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",null,null],[12,"bracket_token","","",65,null],[12,"front","","",65,null],[12,"middle","","",65,null],[12,"dot2_token","","",65,null],[12,"comma_token","","",65,null],[12,"back","","",65,null],[3,"PatStruct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",null,null],[12,"path","","",66,null],[12,"brace_token","","",66,null],[12,"fields","","",66,null],[12,"dot2_token","","",66,null],[3,"PatTuple","","A tuple pattern: `(a, b)`.",null,null],[12,"paren_token","","",67,null],[12,"front","","",67,null],[12,"dot2_token","","",67,null],[12,"comma_token","","",67,null],[12,"back","","",67,null],[3,"PatTupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",null,null],[12,"path","","",68,null],[12,"pat","","",68,null],[3,"PatVerbatim","","Tokens in pattern position not interpreted by Syn.",null,null],[12,"tts","","",69,null],[3,"PatWild","","A pattern that matches any value: `_`.",null,null],[12,"underscore_token","","",70,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",null,null],[12,"for_token","","",71,null],[12,"lt_token","","",71,null],[12,"lifetimes","","",71,null],[12,"gt_token","","",71,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",72,null],[12,"const_token","","",72,null],[12,"ident","","",72,null],[12,"colon_token","","",72,null],[12,"ty","","",72,null],[12,"eq_token","","",72,null],[12,"default","","",72,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lt_token","","",73,null],[12,"params","","",73,null],[12,"gt_token","","",73,null],[12,"where_clause","","",73,null],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",null,null],[12,"attrs","","",74,null],[12,"lifetime","","",74,null],[12,"colon_token","","",74,null],[12,"bounds","","",74,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",75,null],[12,"eq_token","","",75,null],[12,"rhs_ty","","",75,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",null,null],[12,"lifetime","","",76,null],[12,"colon_token","","",76,null],[12,"bounds","","",76,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",77,null],[12,"bounded_ty","","The type being bounded",77,null],[12,"colon_token","","",77,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",77,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"paren_token","","",78,null],[12,"modifier","","",78,null],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",78,null],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",78,null],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",79,null],[12,"ident","","",79,null],[12,"colon_token","","",79,null],[12,"bounds","","",79,null],[12,"eq_token","","",79,null],[12,"default","","",79,null],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",null,null],[12,"where_token","","",80,null],[12,"predicates","","",80,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",null,null],[3,"ArgCaptured","","An explicitly typed pattern captured by a function signature.",null,null],[12,"pat","","",81,null],[12,"colon_token","","",81,null],[12,"ty","","",81,null],[3,"ArgSelf","","Self captured by value in a function signature: `self` or `mut self`.",null,null],[12,"mutability","","",82,null],[12,"self_token","","",82,null],[3,"ArgSelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",null,null],[12,"and_token","","",83,null],[12,"lifetime","","",83,null],[12,"mutability","","",83,null],[12,"self_token","","",83,null],[3,"FnDecl","","Header of a function declaration, without including the body.",null,null],[12,"fn_token","","",84,null],[12,"generics","","",84,null],[12,"paren_token","","",84,null],[12,"inputs","","",84,null],[12,"variadic","","",84,null],[12,"output","","",84,null],[3,"ForeignItemFn","","A foreign function in an `extern` block.",null,null],[12,"attrs","","",85,null],[12,"vis","","",85,null],[12,"ident","","",85,null],[12,"decl","","",85,null],[12,"semi_token","","",85,null],[3,"ForeignItemStatic","","A foreign static item in an `extern` block: `static ext: u8`.",null,null],[12,"attrs","","",86,null],[12,"vis","","",86,null],[12,"static_token","","",86,null],[12,"mutability","","",86,null],[12,"ident","","",86,null],[12,"colon_token","","",86,null],[12,"ty","","",86,null],[12,"semi_token","","",86,null],[3,"ForeignItemType","","A foreign type in an `extern` block: `type void`.",null,null],[12,"attrs","","",87,null],[12,"vis","","",87,null],[12,"type_token","","",87,null],[12,"ident","","",87,null],[12,"semi_token","","",87,null],[3,"ForeignItemVerbatim","","Tokens in an `extern` block not interpreted by Syn.",null,null],[12,"tts","","",88,null],[3,"ImplItemConst","","An associated constant within an impl block.",null,null],[12,"attrs","","",89,null],[12,"vis","","",89,null],[12,"defaultness","","",89,null],[12,"const_token","","",89,null],[12,"ident","","",89,null],[12,"colon_token","","",89,null],[12,"ty","","",89,null],[12,"eq_token","","",89,null],[12,"expr","","",89,null],[12,"semi_token","","",89,null],[3,"ImplItemMacro","","A macro invocation within an impl block.",null,null],[12,"attrs","","",90,null],[12,"mac","","",90,null],[12,"semi_token","","",90,null],[3,"ImplItemMethod","","A method within an impl block.",null,null],[12,"attrs","","",91,null],[12,"vis","","",91,null],[12,"defaultness","","",91,null],[12,"sig","","",91,null],[12,"block","","",91,null],[3,"ImplItemType","","An associated type within an impl block.",null,null],[12,"attrs","","",92,null],[12,"vis","","",92,null],[12,"defaultness","","",92,null],[12,"type_token","","",92,null],[12,"ident","","",92,null],[12,"generics","","",92,null],[12,"eq_token","","",92,null],[12,"ty","","",92,null],[12,"semi_token","","",92,null],[3,"ImplItemVerbatim","","Tokens within an impl block not interpreted by Syn.",null,null],[12,"tts","","",93,null],[3,"ItemConst","","A constant item: `const MAX: u16 = 65535`.",null,null],[12,"attrs","","",94,null],[12,"vis","","",94,null],[12,"const_token","","",94,null],[12,"ident","","",94,null],[12,"colon_token","","",94,null],[12,"ty","","",94,null],[12,"eq_token","","",94,null],[12,"expr","","",94,null],[12,"semi_token","","",94,null],[3,"ItemEnum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",null,null],[12,"attrs","","",95,null],[12,"vis","","",95,null],[12,"enum_token","","",95,null],[12,"ident","","",95,null],[12,"generics","","",95,null],[12,"brace_token","","",95,null],[12,"variants","","",95,null],[3,"ItemExternCrate","","An `extern crate` item: `extern crate serde`.",null,null],[12,"attrs","","",96,null],[12,"vis","","",96,null],[12,"extern_token","","",96,null],[12,"crate_token","","",96,null],[12,"ident","","",96,null],[12,"rename","","",96,null],[12,"semi_token","","",96,null],[3,"ItemFn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",null,null],[12,"attrs","","",97,null],[12,"vis","","",97,null],[12,"constness","","",97,null],[12,"unsafety","","",97,null],[12,"abi","","",97,null],[12,"ident","","",97,null],[12,"decl","","",97,null],[12,"block","","",97,null],[3,"ItemForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",null,null],[12,"attrs","","",98,null],[12,"abi","","",98,null],[12,"brace_token","","",98,null],[12,"items","","",98,null],[3,"ItemImpl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",null,null],[12,"attrs","","",99,null],[12,"defaultness","","",99,null],[12,"unsafety","","",99,null],[12,"impl_token","","",99,null],[12,"generics","","",99,null],[12,"trait_","","Trait this impl implements.",99,null],[12,"self_ty","","The Self type of the impl.",99,null],[12,"brace_token","","",99,null],[12,"items","","",99,null],[3,"ItemMacro","","A macro invocation, which includes `macro_rules!` definitions.",null,null],[12,"attrs","","",100,null],[12,"ident","","The `example` in `macro_rules! example { ... }`.",100,null],[12,"mac","","",100,null],[12,"semi_token","","",100,null],[3,"ItemMacro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",null,null],[12,"attrs","","",101,null],[12,"vis","","",101,null],[12,"macro_token","","",101,null],[12,"ident","","",101,null],[12,"paren_token","","",101,null],[12,"args","","",101,null],[12,"brace_token","","",101,null],[12,"body","","",101,null],[3,"ItemMod","","A module or module declaration: `mod m` or `mod m { ... }`.",null,null],[12,"attrs","","",102,null],[12,"vis","","",102,null],[12,"mod_token","","",102,null],[12,"ident","","",102,null],[12,"content","","",102,null],[12,"semi","","",102,null],[3,"ItemStatic","","A static item: `static BIKE: Shed = Shed(42)`.",null,null],[12,"attrs","","",103,null],[12,"vis","","",103,null],[12,"static_token","","",103,null],[12,"mutability","","",103,null],[12,"ident","","",103,null],[12,"colon_token","","",103,null],[12,"ty","","",103,null],[12,"eq_token","","",103,null],[12,"expr","","",103,null],[12,"semi_token","","",103,null],[3,"ItemStruct","","A struct definition: `struct Foo<A> { x: A }`.",null,null],[12,"attrs","","",104,null],[12,"vis","","",104,null],[12,"struct_token","","",104,null],[12,"ident","","",104,null],[12,"generics","","",104,null],[12,"fields","","",104,null],[12,"semi_token","","",104,null],[3,"ItemTrait","","A trait definition: `pub trait Iterator { ... }`.",null,null],[12,"attrs","","",105,null],[12,"vis","","",105,null],[12,"unsafety","","",105,null],[12,"auto_token","","",105,null],[12,"trait_token","","",105,null],[12,"ident","","",105,null],[12,"generics","","",105,null],[12,"colon_token","","",105,null],[12,"supertraits","","",105,null],[12,"brace_token","","",105,null],[12,"items","","",105,null],[3,"ItemType","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",null,null],[12,"attrs","","",106,null],[12,"vis","","",106,null],[12,"type_token","","",106,null],[12,"ident","","",106,null],[12,"generics","","",106,null],[12,"eq_token","","",106,null],[12,"ty","","",106,null],[12,"semi_token","","",106,null],[3,"ItemUnion","","A union definition: `union Foo<A, B> { x: A, y: B }`.",null,null],[12,"attrs","","",107,null],[12,"vis","","",107,null],[12,"union_token","","",107,null],[12,"ident","","",107,null],[12,"generics","","",107,null],[12,"fields","","",107,null],[3,"ItemUse","","A use declaration: `use std::collections::HashMap`.",null,null],[12,"attrs","","",108,null],[12,"vis","","",108,null],[12,"use_token","","",108,null],[12,"leading_colon","","",108,null],[12,"tree","","",108,null],[12,"semi_token","","",108,null],[3,"ItemVerbatim","","Tokens forming an item not interpreted by Syn.",null,null],[12,"tts","","",109,null],[3,"MethodSig","","A method's signature in a trait or implementation: `unsafe fn initialize(&self)`.",null,null],[12,"constness","","",110,null],[12,"unsafety","","",110,null],[12,"abi","","",110,null],[12,"ident","","",110,null],[12,"decl","","",110,null],[3,"TraitItemConst","","An associated constant within the definition of a trait.",null,null],[12,"attrs","","",111,null],[12,"const_token","","",111,null],[12,"ident","","",111,null],[12,"colon_token","","",111,null],[12,"ty","","",111,null],[12,"default","","",111,null],[12,"semi_token","","",111,null],[3,"TraitItemMacro","","A macro invocation within the definition of a trait.",null,null],[12,"attrs","","",112,null],[12,"mac","","",112,null],[12,"semi_token","","",112,null],[3,"TraitItemMethod","","A trait method within the definition of a trait.",null,null],[12,"attrs","","",113,null],[12,"sig","","",113,null],[12,"default","","",113,null],[12,"semi_token","","",113,null],[3,"TraitItemType","","An associated type within the definition of a trait.",null,null],[12,"attrs","","",114,null],[12,"type_token","","",114,null],[12,"ident","","",114,null],[12,"generics","","",114,null],[12,"colon_token","","",114,null],[12,"bounds","","",114,null],[12,"default","","",114,null],[12,"semi_token","","",114,null],[3,"TraitItemVerbatim","","Tokens within the definition of a trait not interpreted by Syn.",null,null],[12,"tts","","",115,null],[3,"UseGlob","","A glob import in a `use` item: `*`.",null,null],[12,"star_token","","",116,null],[3,"UseGroup","","A braced group of imports in a `use` item: `{A, B, C}`.",null,null],[12,"brace_token","","",117,null],[12,"items","","",117,null],[3,"UseName","","An identifier imported by a `use` item: `HashMap`.",null,null],[12,"ident","","",118,null],[3,"UsePath","","A path prefix of imports in a `use` item: `std::...`.",null,null],[12,"ident","","",119,null],[12,"colon2_token","","",119,null],[12,"tree","","",119,null],[3,"UseRename","","An renamed identifier imported by a `use` item: `HashMap as Map`.",null,null],[12,"ident","","",120,null],[12,"as_token","","",120,null],[12,"rename","","",120,null],[3,"File","","A complete file of Rust source code.",null,null],[12,"shebang","","",121,null],[12,"attrs","","",121,null],[12,"items","","",121,null],[3,"Lifetime","","A Rust lifetime: `'a`.",null,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",122,null],[12,"span","","",122,null],[3,"LitByte","","A byte literal: `b'f'`.",null,null],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",null,null],[3,"LitChar","","A character literal: `'a'`.",null,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",null,null],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",null,null],[12,"token","","",123,null],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",null,null],[12,"path","","",124,null],[12,"bang_token","","",124,null],[12,"delimiter","","",124,null],[12,"tts","","",124,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",125,null],[12,"brace_token","","",125,null],[12,"variants","","",125,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",126,null],[12,"fields","","",126,null],[12,"semi_token","","",126,null],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",127,null],[12,"fields","","",127,null],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",128,null],[12,"vis","","Visibility of the struct or enum.",128,null],[12,"ident","","Name of the struct or enum.",128,null],[12,"generics","","Generics required to complete the definition.",128,null],[12,"data","","Data within the struct or enum.",128,null],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",null,null],[12,"extern_token","","",129,null],[12,"name","","",129,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",null,null],[12,"name","","",130,null],[12,"ty","","",130,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",131,null],[12,"elem","","",131,null],[12,"semi_token","","",131,null],[12,"len","","",131,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"unsafety","","",132,null],[12,"abi","","",132,null],[12,"fn_token","","",132,null],[12,"lifetimes","","",132,null],[12,"paren_token","","",132,null],[12,"inputs","","",132,null],[12,"variadic","","",132,null],[12,"output","","",132,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",133,null],[12,"elem","","",133,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",null,null],[12,"impl_token","","",134,null],[12,"bounds","","",134,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",null,null],[12,"underscore_token","","",135,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",136,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",137,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",138,null],[12,"elem","","",138,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",null,null],[12,"qself","","",139,null],[12,"path","","",139,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",140,null],[12,"const_token","","",140,null],[12,"mutability","","",140,null],[12,"elem","","",140,null],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",null,null],[12,"and_token","","",141,null],[12,"lifetime","","",141,null],[12,"mutability","","",141,null],[12,"elem","","",141,null],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",142,null],[12,"elem","","",142,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",null,null],[12,"dyn_token","","",143,null],[12,"bounds","","",143,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",144,null],[12,"elems","","",144,null],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",null,null],[12,"tts","","",145,null],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",null,null],[12,"0","","",146,null],[12,"1","","",146,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",null,null],[12,"colon2_token","","",147,null],[12,"lt_token","","",147,null],[12,"args","","",147,null],[12,"gt_token","","",147,null],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",null,null],[12,"ident","","",148,null],[12,"eq_token","","",148,null],[12,"ty","","",148,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",null,null],[12,"paren_token","","",149,null],[12,"inputs","","`(A, B)`",149,null],[12,"output","","`C`",149,null],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",null,null],[12,"leading_colon","","",150,null],[12,"segments","","",150,null],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",null,null],[12,"ident","","",151,null],[12,"arguments","","",151,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",null,null],[12,"lt_token","","",152,null],[12,"ty","","",152,null],[12,"position","","",152,null],[12,"as_token","","",152,null],[12,"gt_token","","",152,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",null,null],[13,"Outer","","",153,null],[13,"Inner","","",153,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Word","","",154,null],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",154,null],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",154,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",155,null],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",155,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",156,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",156,null],[13,"Unit","","Unit struct or unit variant such as `None`.",156,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",null,null],[13,"Public","","A public visibility level: `pub`.",157,null],[13,"Crate","","A crate-level visibility: `crate`.",157,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",157,null],[13,"Inherited","","An inherited visibility, which usually means private.",157,null],[4,"Expr","","A Rust expression.",null,null],[13,"Box","","A box expression: `box f`.",158,null],[13,"InPlace","","A placement expression: `place <- value`.",158,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",158,null],[13,"Call","","A function call expression: `invoke(a, b)`.",158,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",158,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",158,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",158,null],[13,"Unary","","A unary operation: `!x`, `*x`.",158,null],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",158,null],[13,"Cast","","A cast expression: `foo as f64`.",158,null],[13,"Type","","A type ascription expression: `foo: f64`.",158,null],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",158,null],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",158,null],[13,"While","","A while loop: `while expr { ... }`.",158,null],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",158,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",158,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",158,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",158,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",158,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",158,null],[13,"Block","","A blocked scope: `{ ... }`.",158,null],[13,"Assign","","An assignment expression: `a = compute()`.",158,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",158,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",158,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",158,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",158,null],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",158,null],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",158,null],[13,"Break","","A `break`, with an optional label to break and an optional expression.",158,null],[13,"Continue","","A `continue`, with an optional label.",158,null],[13,"Return","","A `return`, with an optional value to be returned.",158,null],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",158,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",158,null],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",158,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",158,null],[13,"Group","","An expression contained within invisible delimiters.",158,null],[13,"Try","","A try-expression: `expr?`.",158,null],[13,"Catch","","A catch expression: `do catch { ... }`.",158,null],[13,"Yield","","A yield expression: `yield expr`.",158,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",158,null],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",null,null],[13,"Named","","A named field like `self.x`.",159,null],[13,"Unnamed","","An unnamed field like `self.0`.",159,null],[4,"GenericMethodArgument","","An individual generic argument to a method, like `T`.",null,null],[13,"Type","","A type argument.",160,null],[13,"Const","","A const expression. Must be inside of a block.",160,null],[4,"Pat","","A pattern in a local binding, function signature, match expression, or various other places.",null,null],[13,"Wild","","A pattern that matches any value: `_`.",161,null],[13,"Ident","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",161,null],[13,"Struct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",161,null],[13,"TupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",161,null],[13,"Path","","A path pattern like `Color::Red`, optionally qualified with a self-type.",161,null],[13,"Tuple","","A tuple pattern: `(a, b)`.",161,null],[13,"Box","","A box pattern: `box v`.",161,null],[13,"Ref","","A reference pattern: `&mut (first, second)`.",161,null],[13,"Lit","","A literal pattern: `0`.",161,null],[13,"Range","","A range pattern: `1..=2`.",161,null],[13,"Slice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",161,null],[13,"Macro","","A macro in expression position.",161,null],[13,"Verbatim","","Tokens in pattern position not interpreted by Syn.",161,null],[4,"RangeLimits","","Limit types of a range, inclusive or exclusive.",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end.",162,null],[13,"Closed","","Inclusive at the beginning and end.",162,null],[4,"Stmt","","A statement, usually ending in a semicolon.",null,null],[13,"Local","","A local (let) binding.",163,null],[13,"Item","","An item definition.",163,null],[13,"Expr","","Expr without trailing semicolon.",163,null],[13,"Semi","","Expression with trailing semicolon.",163,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",164,null],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",164,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",164,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",null,null],[13,"None","","",165,null],[13,"Maybe","","",165,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",166,null],[13,"Lifetime","","",166,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",null,null],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",167,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",167,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",167,null],[4,"FnArg","","An argument in a function signature: the `n: usize` in `fn f(n: usize)`.",null,null],[13,"SelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",168,null],[13,"SelfValue","","Self captured by value in a function signature: `self` or `mut self`.",168,null],[13,"Captured","","An explicitly typed pattern captured by a function signature.",168,null],[13,"Inferred","","A pattern whose type is inferred captured by a function signature.",168,null],[13,"Ignored","","A type not bound to any pattern in a function signature.",168,null],[4,"ForeignItem","","An item within an `extern` block.",null,null],[13,"Fn","","A foreign function in an `extern` block.",169,null],[13,"Static","","A foreign static item in an `extern` block: `static ext: u8`.",169,null],[13,"Type","","A foreign type in an `extern` block: `type void`.",169,null],[13,"Verbatim","","Tokens in an `extern` block not interpreted by Syn.",169,null],[4,"ImplItem","","An item within an impl block.",null,null],[13,"Const","","An associated constant within an impl block.",170,null],[13,"Method","","A method within an impl block.",170,null],[13,"Type","","An associated type within an impl block.",170,null],[13,"Macro","","A macro invocation within an impl block.",170,null],[13,"Verbatim","","Tokens within an impl block not interpreted by Syn.",170,null],[4,"Item","","Things that can appear directly inside of a module or scope.",null,null],[13,"ExternCrate","","An `extern crate` item: `extern crate serde`.",171,null],[13,"Use","","A use declaration: `use std::collections::HashMap`.",171,null],[13,"Static","","A static item: `static BIKE: Shed = Shed(42)`.",171,null],[13,"Const","","A constant item: `const MAX: u16 = 65535`.",171,null],[13,"Fn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",171,null],[13,"Mod","","A module or module declaration: `mod m` or `mod m { ... }`.",171,null],[13,"ForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",171,null],[13,"Type","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",171,null],[13,"Struct","","A struct definition: `struct Foo<A> { x: A }`.",171,null],[13,"Enum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",171,null],[13,"Union","","A union definition: `union Foo<A, B> { x: A, y: B }`.",171,null],[13,"Trait","","A trait definition: `pub trait Iterator { ... }`.",171,null],[13,"Impl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",171,null],[13,"Macro","","A macro invocation, which includes `macro_rules!` definitions.",171,null],[13,"Macro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",171,null],[13,"Verbatim","","Tokens forming an item not interpreted by Syn.",171,null],[4,"TraitItem","","An item declaration within the definition of a trait.",null,null],[13,"Const","","An associated constant within the definition of a trait.",172,null],[13,"Method","","A trait method within the definition of a trait.",172,null],[13,"Type","","An associated type within the definition of a trait.",172,null],[13,"Macro","","A macro invocation within the definition of a trait.",172,null],[13,"Verbatim","","Tokens within the definition of a trait not interpreted by Syn.",172,null],[4,"UseTree","","A suffix of an import tree in a `use` item: `Type as Renamed` or `*`.",null,null],[13,"Path","","A path prefix of imports in a `use` item: `std::...`.",173,null],[13,"Name","","An identifier imported by a `use` item: `HashMap`.",173,null],[13,"Rename","","An renamed identifier imported by a `use` item: `HashMap as Map`.",173,null],[13,"Glob","","A glob import in a `use` item: `*`.",173,null],[13,"Group","","A braced group of imports in a `use` item: `{A, B, C}`.",173,null],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",null,null],[13,"F32","","",174,null],[13,"F64","","",174,null],[13,"None","","",174,null],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",null,null],[13,"I8","","",175,null],[13,"I16","","",175,null],[13,"I32","","",175,null],[13,"I64","","",175,null],[13,"I128","","",175,null],[13,"Isize","","",175,null],[13,"U8","","",175,null],[13,"U16","","",175,null],[13,"U32","","",175,null],[13,"U64","","",175,null],[13,"U128","","",175,null],[13,"Usize","","",175,null],[13,"None","","",175,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",176,null],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",176,null],[13,"Byte","","A byte literal: `b'f'`.",176,null],[13,"Char","","A character literal: `'a'`.",176,null],[13,"Int","","An integer literal: `1` or `1u16`.",176,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",176,null],[13,"Bool","","A boolean literal: `true` or `false`.",176,null],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",176,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",null,null],[13,"Cooked","","An ordinary string like `\"data\"`.",177,null],[13,"Raw","","A raw string like `r##\"data\"##`.",177,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",null,null],[13,"Paren","","",178,null],[13,"Brace","","",178,null],[13,"Bracket","","",178,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",179,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",179,null],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",179,null],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",180,null],[13,"Sub","","The `-` operator (subtraction)",180,null],[13,"Mul","","The `*` operator (multiplication)",180,null],[13,"Div","","The `/` operator (division)",180,null],[13,"Rem","","The `%` operator (modulus)",180,null],[13,"And","","The `&&` operator (logical and)",180,null],[13,"Or","","The `||` operator (logical or)",180,null],[13,"BitXor","","The `^` operator (bitwise xor)",180,null],[13,"BitAnd","","The `&` operator (bitwise and)",180,null],[13,"BitOr","","The `|` operator (bitwise or)",180,null],[13,"Shl","","The `<<` operator (shift left)",180,null],[13,"Shr","","The `>>` operator (shift right)",180,null],[13,"Eq","","The `==` operator (equality)",180,null],[13,"Lt","","The `<` operator (less than)",180,null],[13,"Le","","The `<=` operator (less than or equal to)",180,null],[13,"Ne","","The `!=` operator (not equal to)",180,null],[13,"Ge","","The `>=` operator (greater than or equal to)",180,null],[13,"Gt","","The `>` operator (greater than)",180,null],[13,"AddEq","","The `+=` operator",180,null],[13,"SubEq","","The `-=` operator",180,null],[13,"MulEq","","The `*=` operator",180,null],[13,"DivEq","","The `/=` operator",180,null],[13,"RemEq","","The `%=` operator",180,null],[13,"BitXorEq","","The `^=` operator",180,null],[13,"BitAndEq","","The `&=` operator",180,null],[13,"BitOrEq","","The `|=` operator",180,null],[13,"ShlEq","","The `<<=` operator",180,null],[13,"ShrEq","","The `>>=` operator",180,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",181,null],[13,"Not","","The `!` operator for logical inversion",181,null],[13,"Neg","","The `-` operator for negation",181,null],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",null,null],[13,"Named","","Argument given a name.",182,null],[13,"Wild","","Argument not given a name, matched with `_`.",182,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",183,null],[13,"Type","","A particular type is returned.",183,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",184,null],[13,"Array","","A fixed size array type: `[T; n]`.",184,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",184,null],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",184,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",184,null],[13,"Never","","The never type: `!`.",184,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",184,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",184,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",184,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",184,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",184,null],[13,"Group","","A type contained within invisible delimiters.",184,null],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",184,null],[13,"Macro","","A macro in the type position.",184,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",184,null],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",null,null],[13,"Lifetime","","A lifetime argument.",185,null],[13,"Type","","A type argument.",185,null],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",185,null],[13,"Const","","A const expression. Must be inside of a block.",185,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",null,null],[13,"None","","",186,null],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",186,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",186,null],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",null,{"inputs":[{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",null,{"inputs":[{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",null,{"inputs":[{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[5,"parse_file","","Parse the content of a file of Rust code.",null,{"inputs":[{"name":"str"}],"output":{"generics":["file","parseerror"],"name":"result"}}],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",null,null],[3,"Underscore","syn::token","`_`",null,null],[12,"0","","",187,null],[3,"Add","","`+`",null,null],[12,"0","","",188,null],[3,"AddEq","","`+=`",null,null],[12,"0","","",189,null],[3,"And","","`&`",null,null],[12,"0","","",190,null],[3,"AndAnd","","`&&`",null,null],[12,"0","","",191,null],[3,"AndEq","","`&=`",null,null],[12,"0","","",192,null],[3,"At","","`@`",null,null],[12,"0","","",193,null],[3,"Bang","","`!`",null,null],[12,"0","","",194,null],[3,"Caret","","`^`",null,null],[12,"0","","",195,null],[3,"CaretEq","","`^=`",null,null],[12,"0","","",196,null],[3,"Colon","","`:`",null,null],[12,"0","","",197,null],[3,"Colon2","","`::`",null,null],[12,"0","","",198,null],[3,"Comma","","`,`",null,null],[12,"0","","",199,null],[3,"Div","","`/`",null,null],[12,"0","","",200,null],[3,"DivEq","","`/=`",null,null],[12,"0","","",201,null],[3,"Dot","","`.`",null,null],[12,"0","","",202,null],[3,"Dot2","","`..`",null,null],[12,"0","","",203,null],[3,"Dot3","","`...`",null,null],[12,"0","","",204,null],[3,"DotDotEq","","`..=`",null,null],[12,"0","","",205,null],[3,"Eq","","`=`",null,null],[12,"0","","",206,null],[3,"EqEq","","`==`",null,null],[12,"0","","",207,null],[3,"Ge","","`>=`",null,null],[12,"0","","",208,null],[3,"Gt","","`>`",null,null],[12,"0","","",209,null],[3,"Le","","`<=`",null,null],[12,"0","","",210,null],[3,"Lt","","`<`",null,null],[12,"0","","",211,null],[3,"MulEq","","`*=`",null,null],[12,"0","","",212,null],[3,"Ne","","`!=`",null,null],[12,"0","","",213,null],[3,"Or","","`|`",null,null],[12,"0","","",214,null],[3,"OrEq","","`|=`",null,null],[12,"0","","",215,null],[3,"OrOr","","`||`",null,null],[12,"0","","",216,null],[3,"Pound","","`#`",null,null],[12,"0","","",217,null],[3,"Question","","`?`",null,null],[12,"0","","",218,null],[3,"RArrow","","`->`",null,null],[12,"0","","",219,null],[3,"LArrow","","`<-`",null,null],[12,"0","","",220,null],[3,"Rem","","`%`",null,null],[12,"0","","",221,null],[3,"RemEq","","`%=`",null,null],[12,"0","","",222,null],[3,"FatArrow","","`=>`",null,null],[12,"0","","",223,null],[3,"Semi","","`;`",null,null],[12,"0","","",224,null],[3,"Shl","","`<<`",null,null],[12,"0","","",225,null],[3,"ShlEq","","`<<=`",null,null],[12,"0","","",226,null],[3,"Shr","","`>>`",null,null],[12,"0","","",227,null],[3,"ShrEq","","`>>=`",null,null],[12,"0","","",228,null],[3,"Star","","`*`",null,null],[12,"0","","",229,null],[3,"Sub","","`-`",null,null],[12,"0","","",230,null],[3,"SubEq","","`-=`",null,null],[12,"0","","",231,null],[3,"Brace","","`{...}`",null,null],[12,"0","","",232,null],[3,"Bracket","","`[...]`",null,null],[12,"0","","",233,null],[3,"Paren","","`(...)`",null,null],[12,"0","","",234,null],[3,"Group","","None-delimited group",null,null],[12,"0","","",235,null],[3,"As","","`as`",null,null],[12,"0","","",236,null],[3,"Auto","","`auto`",null,null],[12,"0","","",237,null],[3,"Box","","`box`",null,null],[12,"0","","",238,null],[3,"Break","","`break`",null,null],[12,"0","","",239,null],[3,"CapSelf","","`Self`",null,null],[12,"0","","",240,null],[3,"Catch","","`catch`",null,null],[12,"0","","",241,null],[3,"Const","","`const`",null,null],[12,"0","","",242,null],[3,"Continue","","`continue`",null,null],[12,"0","","",243,null],[3,"Crate","","`crate`",null,null],[12,"0","","",244,null],[3,"Default","","`default`",null,null],[12,"0","","",245,null],[3,"Do","","`do`",null,null],[12,"0","","",246,null],[3,"Dyn","","`dyn`",null,null],[12,"0","","",247,null],[3,"Else","","`else`",null,null],[12,"0","","",248,null],[3,"Enum","","`enum`",null,null],[12,"0","","",249,null],[3,"Extern","","`extern`",null,null],[12,"0","","",250,null],[3,"Fn","","`fn`",null,null],[12,"0","","",251,null],[3,"For","","`for`",null,null],[12,"0","","",252,null],[3,"If","","`if`",null,null],[12,"0","","",253,null],[3,"Impl","","`impl`",null,null],[12,"0","","",254,null],[3,"In","","`in`",null,null],[12,"0","","",255,null],[3,"Let","","`let`",null,null],[12,"0","","",256,null],[3,"Loop","","`loop`",null,null],[12,"0","","",257,null],[3,"Macro","","`macro`",null,null],[12,"0","","",258,null],[3,"Match","","`match`",null,null],[12,"0","","",259,null],[3,"Mod","","`mod`",null,null],[12,"0","","",260,null],[3,"Move","","`move`",null,null],[12,"0","","",261,null],[3,"Mut","","`mut`",null,null],[12,"0","","",262,null],[3,"Pub","","`pub`",null,null],[12,"0","","",263,null],[3,"Ref","","`ref`",null,null],[12,"0","","",264,null],[3,"Return","","`return`",null,null],[12,"0","","",265,null],[3,"Self_","","`self`",null,null],[12,"0","","",266,null],[3,"Static","","`static`",null,null],[12,"0","","",267,null],[3,"Struct","","`struct`",null,null],[12,"0","","",268,null],[3,"Super","","`super`",null,null],[12,"0","","",269,null],[3,"Trait","","`trait`",null,null],[12,"0","","",270,null],[3,"Type","","`type`",null,null],[12,"0","","",271,null],[3,"Union","","`union`",null,null],[12,"0","","",272,null],[3,"Unsafe","","`unsafe`",null,null],[12,"0","","",273,null],[3,"Use","","`use`",null,null],[12,"0","","",274,null],[3,"Where","","`where`",null,null],[12,"0","","",275,null],[3,"While","","`while`",null,null],[12,"0","","",276,null],[3,"Yield","","`yield`",null,null],[12,"0","","",277,null],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"underscore"}}],[11,"new","","",187,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",187,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",187,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"to_tokens","","",187,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",187,{"inputs":[{"name":"cursor"}],"output":{"generics":["underscore"],"name":"presult"}}],[11,"description","","",187,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"add"}}],[11,"new","","",188,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",188,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",188,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"addeq"}}],[11,"new","","",189,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",189,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",189,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"and"}}],[11,"new","","",190,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",190,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",190,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"andand"}}],[11,"new","","",191,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",191,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",191,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"andeq"}}],[11,"new","","",192,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",192,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",192,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"at"}}],[11,"new","","",193,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",193,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",193,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"bang"}}],[11,"new","","",194,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",194,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",194,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"caret"}}],[11,"new","","",195,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",195,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",195,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"careteq"}}],[11,"new","","",196,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",196,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",196,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"colon"}}],[11,"new","","",197,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",197,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",197,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"colon2"}}],[11,"new","","",198,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",198,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",198,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"comma"}}],[11,"new","","",199,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",199,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",199,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"div"}}],[11,"new","","",200,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",200,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",200,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"diveq"}}],[11,"new","","",201,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",201,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",201,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"dot"}}],[11,"new","","",202,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",202,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",202,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"dot2"}}],[11,"new","","",203,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",203,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",203,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"dot3"}}],[11,"new","","",204,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",204,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",204,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"dotdoteq"}}],[11,"new","","",205,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",205,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",205,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",206,{"inputs":[{"name":"self"}],"output":{"name":"eq"}}],[11,"new","","",206,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",206,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",206,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"eqeq"}}],[11,"new","","",207,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",207,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",207,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"ge"}}],[11,"new","","",208,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",208,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",208,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"gt"}}],[11,"new","","",209,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",209,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",209,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"le"}}],[11,"new","","",210,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",210,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",210,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"lt"}}],[11,"new","","",211,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",211,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",211,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"muleq"}}],[11,"new","","",212,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",212,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",212,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"ne"}}],[11,"new","","",213,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",213,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",213,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"or"}}],[11,"new","","",214,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",214,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",214,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"oreq"}}],[11,"new","","",215,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",215,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",215,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"oror"}}],[11,"new","","",216,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",216,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",216,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"pound"}}],[11,"new","","",217,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",217,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",217,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"question"}}],[11,"new","","",218,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",218,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",218,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"rarrow"}}],[11,"new","","",219,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",219,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",219,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",220,{"inputs":[{"name":"self"}],"output":{"name":"larrow"}}],[11,"new","","",220,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",220,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",220,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",221,{"inputs":[{"name":"self"}],"output":{"name":"rem"}}],[11,"new","","",221,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",221,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",221,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",222,{"inputs":[{"name":"self"}],"output":{"name":"remeq"}}],[11,"new","","",222,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",222,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",222,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"fatarrow"}}],[11,"new","","",223,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",223,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",223,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",224,{"inputs":[{"name":"self"}],"output":{"name":"semi"}}],[11,"new","","",224,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",224,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",224,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",225,{"inputs":[{"name":"self"}],"output":{"name":"shl"}}],[11,"new","","",225,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",225,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",225,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",226,{"inputs":[{"name":"self"}],"output":{"name":"shleq"}}],[11,"new","","",226,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",226,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",226,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",227,{"inputs":[{"name":"self"}],"output":{"name":"shr"}}],[11,"new","","",227,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",227,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",227,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"shreq"}}],[11,"new","","",228,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",228,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",228,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"new","","",229,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",229,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",229,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",230,{"inputs":[{"name":"self"}],"output":{"name":"sub"}}],[11,"new","","",230,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",230,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",230,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",231,{"inputs":[{"name":"self"}],"output":{"name":"subeq"}}],[11,"new","","",231,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",231,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",231,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"to_tokens","","",188,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",188,{"inputs":[{"name":"cursor"}],"output":{"generics":["add"],"name":"presult"}}],[11,"description","","",188,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",189,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",189,{"inputs":[{"name":"cursor"}],"output":{"generics":["addeq"],"name":"presult"}}],[11,"description","","",189,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",190,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",190,{"inputs":[{"name":"cursor"}],"output":{"generics":["and"],"name":"presult"}}],[11,"description","","",190,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",191,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",191,{"inputs":[{"name":"cursor"}],"output":{"generics":["andand"],"name":"presult"}}],[11,"description","","",191,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",192,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",192,{"inputs":[{"name":"cursor"}],"output":{"generics":["andeq"],"name":"presult"}}],[11,"description","","",192,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",193,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",193,{"inputs":[{"name":"cursor"}],"output":{"generics":["at"],"name":"presult"}}],[11,"description","","",193,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",194,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",194,{"inputs":[{"name":"cursor"}],"output":{"generics":["bang"],"name":"presult"}}],[11,"description","","",194,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",195,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",195,{"inputs":[{"name":"cursor"}],"output":{"generics":["caret"],"name":"presult"}}],[11,"description","","",195,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",196,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",196,{"inputs":[{"name":"cursor"}],"output":{"generics":["careteq"],"name":"presult"}}],[11,"description","","",196,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",197,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",197,{"inputs":[{"name":"cursor"}],"output":{"generics":["colon"],"name":"presult"}}],[11,"description","","",197,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",198,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",198,{"inputs":[{"name":"cursor"}],"output":{"generics":["colon2"],"name":"presult"}}],[11,"description","","",198,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",199,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",199,{"inputs":[{"name":"cursor"}],"output":{"generics":["comma"],"name":"presult"}}],[11,"description","","",199,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",200,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",200,{"inputs":[{"name":"cursor"}],"output":{"generics":["div"],"name":"presult"}}],[11,"description","","",200,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",201,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",201,{"inputs":[{"name":"cursor"}],"output":{"generics":["diveq"],"name":"presult"}}],[11,"description","","",201,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",202,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",202,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot"],"name":"presult"}}],[11,"description","","",202,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",203,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",203,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot2"],"name":"presult"}}],[11,"description","","",203,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",204,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",204,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot3"],"name":"presult"}}],[11,"description","","",204,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",205,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",205,{"inputs":[{"name":"cursor"}],"output":{"generics":["dotdoteq"],"name":"presult"}}],[11,"description","","",205,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",206,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",206,{"inputs":[{"name":"cursor"}],"output":{"generics":["eq"],"name":"presult"}}],[11,"description","","",206,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",207,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",207,{"inputs":[{"name":"cursor"}],"output":{"generics":["eqeq"],"name":"presult"}}],[11,"description","","",207,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",208,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",208,{"inputs":[{"name":"cursor"}],"output":{"generics":["ge"],"name":"presult"}}],[11,"description","","",208,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",209,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",209,{"inputs":[{"name":"cursor"}],"output":{"generics":["gt"],"name":"presult"}}],[11,"description","","",209,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",210,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",210,{"inputs":[{"name":"cursor"}],"output":{"generics":["le"],"name":"presult"}}],[11,"description","","",210,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",211,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",211,{"inputs":[{"name":"cursor"}],"output":{"generics":["lt"],"name":"presult"}}],[11,"description","","",211,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",212,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",212,{"inputs":[{"name":"cursor"}],"output":{"generics":["muleq"],"name":"presult"}}],[11,"description","","",212,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",213,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",213,{"inputs":[{"name":"cursor"}],"output":{"generics":["ne"],"name":"presult"}}],[11,"description","","",213,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",214,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",214,{"inputs":[{"name":"cursor"}],"output":{"generics":["or"],"name":"presult"}}],[11,"description","","",214,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",215,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",215,{"inputs":[{"name":"cursor"}],"output":{"generics":["oreq"],"name":"presult"}}],[11,"description","","",215,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",216,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",216,{"inputs":[{"name":"cursor"}],"output":{"generics":["oror"],"name":"presult"}}],[11,"description","","",216,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",217,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",217,{"inputs":[{"name":"cursor"}],"output":{"generics":["pound"],"name":"presult"}}],[11,"description","","",217,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",218,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",218,{"inputs":[{"name":"cursor"}],"output":{"generics":["question"],"name":"presult"}}],[11,"description","","",218,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",219,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",219,{"inputs":[{"name":"cursor"}],"output":{"generics":["rarrow"],"name":"presult"}}],[11,"description","","",219,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",220,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",220,{"inputs":[{"name":"cursor"}],"output":{"generics":["larrow"],"name":"presult"}}],[11,"description","","",220,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",221,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",221,{"inputs":[{"name":"cursor"}],"output":{"generics":["rem"],"name":"presult"}}],[11,"description","","",221,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",222,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",222,{"inputs":[{"name":"cursor"}],"output":{"generics":["remeq"],"name":"presult"}}],[11,"description","","",222,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",223,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",223,{"inputs":[{"name":"cursor"}],"output":{"generics":["fatarrow"],"name":"presult"}}],[11,"description","","",223,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",224,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",224,{"inputs":[{"name":"cursor"}],"output":{"generics":["semi"],"name":"presult"}}],[11,"description","","",224,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",225,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",225,{"inputs":[{"name":"cursor"}],"output":{"generics":["shl"],"name":"presult"}}],[11,"description","","",225,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",226,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",226,{"inputs":[{"name":"cursor"}],"output":{"generics":["shleq"],"name":"presult"}}],[11,"description","","",226,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",227,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",227,{"inputs":[{"name":"cursor"}],"output":{"generics":["shr"],"name":"presult"}}],[11,"description","","",227,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",228,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",228,{"inputs":[{"name":"cursor"}],"output":{"generics":["shreq"],"name":"presult"}}],[11,"description","","",228,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",229,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",229,{"inputs":[{"name":"cursor"}],"output":{"generics":["star"],"name":"presult"}}],[11,"description","","",229,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",230,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",230,{"inputs":[{"name":"cursor"}],"output":{"generics":["sub"],"name":"presult"}}],[11,"description","","",230,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",231,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",231,{"inputs":[{"name":"cursor"}],"output":{"generics":["subeq"],"name":"presult"}}],[11,"description","","",231,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",232,{"inputs":[{"name":"self"}],"output":{"name":"brace"}}],[11,"default","","",232,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",232,{"inputs":[{"name":"self"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"parse","","",232,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",232,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",233,{"inputs":[{"name":"self"}],"output":{"name":"bracket"}}],[11,"default","","",233,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",233,{"inputs":[{"name":"self"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"parse","","",233,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",233,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",234,{"inputs":[{"name":"self"}],"output":{"name":"paren"}}],[11,"default","","",234,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",234,{"inputs":[{"name":"self"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"parse","","",234,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",234,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",235,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"default","","",235,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",235,{"inputs":[{"name":"self"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"parse","","",235,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",235,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",236,{"inputs":[{"name":"self"}],"output":{"name":"as"}}],[11,"default","","",236,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",236,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",236,{"inputs":[{"name":"cursor"}],"output":{"generics":["as"],"name":"presult"}}],[11,"description","","",236,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",236,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",237,{"inputs":[{"name":"self"}],"output":{"name":"auto"}}],[11,"default","","",237,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",237,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",237,{"inputs":[{"name":"cursor"}],"output":{"generics":["auto"],"name":"presult"}}],[11,"description","","",237,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",237,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",238,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"default","","",238,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",238,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",238,{"inputs":[{"name":"cursor"}],"output":{"generics":["box"],"name":"presult"}}],[11,"description","","",238,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",238,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",239,{"inputs":[{"name":"self"}],"output":{"name":"break"}}],[11,"default","","",239,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",239,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",239,{"inputs":[{"name":"cursor"}],"output":{"generics":["break"],"name":"presult"}}],[11,"description","","",239,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",239,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",240,{"inputs":[{"name":"self"}],"output":{"name":"capself"}}],[11,"default","","",240,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",240,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",240,{"inputs":[{"name":"cursor"}],"output":{"generics":["capself"],"name":"presult"}}],[11,"description","","",240,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",240,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",241,{"inputs":[{"name":"self"}],"output":{"name":"catch"}}],[11,"default","","",241,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",241,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",241,{"inputs":[{"name":"cursor"}],"output":{"generics":["catch"],"name":"presult"}}],[11,"description","","",241,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",241,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",242,{"inputs":[{"name":"self"}],"output":{"name":"const"}}],[11,"default","","",242,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",242,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",242,{"inputs":[{"name":"cursor"}],"output":{"generics":["const"],"name":"presult"}}],[11,"description","","",242,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",242,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",243,{"inputs":[{"name":"self"}],"output":{"name":"continue"}}],[11,"default","","",243,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",243,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",243,{"inputs":[{"name":"cursor"}],"output":{"generics":["continue"],"name":"presult"}}],[11,"description","","",243,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",243,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",244,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"default","","",244,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",244,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",244,{"inputs":[{"name":"cursor"}],"output":{"generics":["crate"],"name":"presult"}}],[11,"description","","",244,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",244,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",245,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"default","","",245,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",245,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",245,{"inputs":[{"name":"cursor"}],"output":{"generics":["default"],"name":"presult"}}],[11,"description","","",245,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",245,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",246,{"inputs":[{"name":"self"}],"output":{"name":"do"}}],[11,"default","","",246,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",246,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",246,{"inputs":[{"name":"cursor"}],"output":{"generics":["do"],"name":"presult"}}],[11,"description","","",246,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",246,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",247,{"inputs":[{"name":"self"}],"output":{"name":"dyn"}}],[11,"default","","",247,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",247,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",247,{"inputs":[{"name":"cursor"}],"output":{"generics":["dyn"],"name":"presult"}}],[11,"description","","",247,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",247,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",248,{"inputs":[{"name":"self"}],"output":{"name":"else"}}],[11,"default","","",248,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",248,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",248,{"inputs":[{"name":"cursor"}],"output":{"generics":["else"],"name":"presult"}}],[11,"description","","",248,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",248,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",249,{"inputs":[{"name":"self"}],"output":{"name":"enum"}}],[11,"default","","",249,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",249,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",249,{"inputs":[{"name":"cursor"}],"output":{"generics":["enum"],"name":"presult"}}],[11,"description","","",249,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",249,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",250,{"inputs":[{"name":"self"}],"output":{"name":"extern"}}],[11,"default","","",250,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",250,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",250,{"inputs":[{"name":"cursor"}],"output":{"generics":["extern"],"name":"presult"}}],[11,"description","","",250,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",250,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",251,{"inputs":[{"name":"self"}],"output":{"name":"fn"}}],[11,"default","","",251,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",251,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",251,{"inputs":[{"name":"cursor"}],"output":{"generics":["fn"],"name":"presult"}}],[11,"description","","",251,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",251,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",252,{"inputs":[{"name":"self"}],"output":{"name":"for"}}],[11,"default","","",252,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",252,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",252,{"inputs":[{"name":"cursor"}],"output":{"generics":["for"],"name":"presult"}}],[11,"description","","",252,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",252,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",253,{"inputs":[{"name":"self"}],"output":{"name":"if"}}],[11,"default","","",253,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",253,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",253,{"inputs":[{"name":"cursor"}],"output":{"generics":["if"],"name":"presult"}}],[11,"description","","",253,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",253,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",254,{"inputs":[{"name":"self"}],"output":{"name":"impl"}}],[11,"default","","",254,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",254,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",254,{"inputs":[{"name":"cursor"}],"output":{"generics":["impl"],"name":"presult"}}],[11,"description","","",254,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",254,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",255,{"inputs":[{"name":"self"}],"output":{"name":"in"}}],[11,"default","","",255,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",255,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",255,{"inputs":[{"name":"cursor"}],"output":{"generics":["in"],"name":"presult"}}],[11,"description","","",255,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",255,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",256,{"inputs":[{"name":"self"}],"output":{"name":"let"}}],[11,"default","","",256,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",256,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",256,{"inputs":[{"name":"cursor"}],"output":{"generics":["let"],"name":"presult"}}],[11,"description","","",256,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",256,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",257,{"inputs":[{"name":"self"}],"output":{"name":"loop"}}],[11,"default","","",257,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",257,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",257,{"inputs":[{"name":"cursor"}],"output":{"generics":["loop"],"name":"presult"}}],[11,"description","","",257,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",257,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",258,{"inputs":[{"name":"self"}],"output":{"name":"macro"}}],[11,"default","","",258,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",258,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",258,{"inputs":[{"name":"cursor"}],"output":{"generics":["macro"],"name":"presult"}}],[11,"description","","",258,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",258,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",259,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"default","","",259,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",259,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",259,{"inputs":[{"name":"cursor"}],"output":{"generics":["match"],"name":"presult"}}],[11,"description","","",259,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",259,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",260,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"default","","",260,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",260,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",260,{"inputs":[{"name":"cursor"}],"output":{"generics":["mod"],"name":"presult"}}],[11,"description","","",260,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",260,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",261,{"inputs":[{"name":"self"}],"output":{"name":"move"}}],[11,"default","","",261,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",261,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",261,{"inputs":[{"name":"cursor"}],"output":{"generics":["move"],"name":"presult"}}],[11,"description","","",261,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",261,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",262,{"inputs":[{"name":"self"}],"output":{"name":"mut"}}],[11,"default","","",262,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",262,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",262,{"inputs":[{"name":"cursor"}],"output":{"generics":["mut"],"name":"presult"}}],[11,"description","","",262,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",262,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",263,{"inputs":[{"name":"self"}],"output":{"name":"pub"}}],[11,"default","","",263,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",263,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",263,{"inputs":[{"name":"cursor"}],"output":{"generics":["pub"],"name":"presult"}}],[11,"description","","",263,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",263,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",264,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"default","","",264,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",264,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",264,{"inputs":[{"name":"cursor"}],"output":{"generics":["ref"],"name":"presult"}}],[11,"description","","",264,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",264,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",265,{"inputs":[{"name":"self"}],"output":{"name":"return"}}],[11,"default","","",265,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",265,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",265,{"inputs":[{"name":"cursor"}],"output":{"generics":["return"],"name":"presult"}}],[11,"description","","",265,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",265,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",266,{"inputs":[{"name":"self"}],"output":{"name":"self_"}}],[11,"default","","",266,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",266,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",266,{"inputs":[{"name":"cursor"}],"output":{"generics":["self_"],"name":"presult"}}],[11,"description","","",266,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",266,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",267,{"inputs":[{"name":"self"}],"output":{"name":"static"}}],[11,"default","","",267,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",267,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",267,{"inputs":[{"name":"cursor"}],"output":{"generics":["static"],"name":"presult"}}],[11,"description","","",267,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",267,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",268,{"inputs":[{"name":"self"}],"output":{"name":"struct"}}],[11,"default","","",268,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",268,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",268,{"inputs":[{"name":"cursor"}],"output":{"generics":["struct"],"name":"presult"}}],[11,"description","","",268,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",268,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",269,{"inputs":[{"name":"self"}],"output":{"name":"super"}}],[11,"default","","",269,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",269,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",269,{"inputs":[{"name":"cursor"}],"output":{"generics":["super"],"name":"presult"}}],[11,"description","","",269,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",269,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",270,{"inputs":[{"name":"self"}],"output":{"name":"trait"}}],[11,"default","","",270,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",270,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",270,{"inputs":[{"name":"cursor"}],"output":{"generics":["trait"],"name":"presult"}}],[11,"description","","",270,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",270,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",271,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"default","","",271,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",271,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",271,{"inputs":[{"name":"cursor"}],"output":{"generics":["type"],"name":"presult"}}],[11,"description","","",271,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",271,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",272,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"default","","",272,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",272,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",272,{"inputs":[{"name":"cursor"}],"output":{"generics":["union"],"name":"presult"}}],[11,"description","","",272,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",272,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",273,{"inputs":[{"name":"self"}],"output":{"name":"unsafe"}}],[11,"default","","",273,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",273,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",273,{"inputs":[{"name":"cursor"}],"output":{"generics":["unsafe"],"name":"presult"}}],[11,"description","","",273,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",273,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",274,{"inputs":[{"name":"self"}],"output":{"name":"use"}}],[11,"default","","",274,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",274,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",274,{"inputs":[{"name":"cursor"}],"output":{"generics":["use"],"name":"presult"}}],[11,"description","","",274,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",274,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",275,{"inputs":[{"name":"self"}],"output":{"name":"where"}}],[11,"default","","",275,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",275,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",275,{"inputs":[{"name":"cursor"}],"output":{"generics":["where"],"name":"presult"}}],[11,"description","","",275,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",275,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",276,{"inputs":[{"name":"self"}],"output":{"name":"while"}}],[11,"default","","",276,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",276,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",276,{"inputs":[{"name":"cursor"}],"output":{"generics":["while"],"name":"presult"}}],[11,"description","","",276,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",276,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",277,{"inputs":[{"name":"self"}],"output":{"name":"yield"}}],[11,"default","","",277,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",277,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",277,{"inputs":[{"name":"cursor"}],"output":{"generics":["yield"],"name":"presult"}}],[11,"description","","",277,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",277,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"parse_inner","syn","",0,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_outer","","",0,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,{"inputs":[{"name":"self"}],"output":{"generics":["meta"],"name":"option"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"meta"}}],[11,"from","","",154,{"inputs":[{"name":"ident"}],"output":{"name":"meta"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"metalist"}}],[11,"from","","",154,{"inputs":[{"name":"metalist"}],"output":{"name":"meta"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"metanamevalue"}}],[11,"from","","",154,{"inputs":[{"name":"metanamevalue"}],"output":{"name":"meta"}}],[11,"to_tokens","","",154,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"name","","Returns the identifier that begins this structured meta item.",154,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"nestedmeta"}}],[11,"from","","",155,{"inputs":[{"name":"meta"}],"output":{"name":"nestedmeta"}}],[11,"from","","",155,{"inputs":[{"name":"lit"}],"output":{"name":"nestedmeta"}}],[11,"to_tokens","","",155,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",6,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",6,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",4,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",4,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",5,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",5,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse_named","","",3,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_unnamed","","",3,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",157,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",157,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"fields"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fieldsnamed"}}],[11,"from","","",156,{"inputs":[{"name":"fieldsnamed"}],"output":{"name":"fields"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fieldsunnamed"}}],[11,"from","","",156,{"inputs":[{"name":"fieldsunnamed"}],"output":{"name":"fields"}}],[11,"to_tokens","","",156,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"iter","","Get an iterator over the [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",156,{"inputs":[{"name":"self"}],"output":{"generics":["field"],"name":"iter"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vispublic"}}],[11,"from","","",157,{"inputs":[{"name":"vispublic"}],"output":{"name":"visibility"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"viscrate"}}],[11,"from","","",157,{"inputs":[{"name":"viscrate"}],"output":{"name":"visibility"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"visrestricted"}}],[11,"from","","",157,{"inputs":[{"name":"visrestricted"}],"output":{"name":"visibility"}}],[11,"to_tokens","","",157,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",158,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",158,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",29,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",29,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",31,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",31,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",24,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",24,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",34,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",34,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",10,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",10,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",160,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",160,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",42,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",42,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",26,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",26,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",25,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",25,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",23,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",23,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",30,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",30,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",32,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",32,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",19,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",19,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",49,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",49,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",51,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",51,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",47,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",47,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",48,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",48,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",55,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",55,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",21,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",21,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",40,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",40,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",54,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",54,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",38,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",38,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",45,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",45,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",14,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",14,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",162,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",162,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",35,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",35,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",52,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",52,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse_within","","",52,{"inputs":[{"name":"cursor"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse","","",163,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",163,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",161,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",161,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",70,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",70,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",58,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",58,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",59,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",59,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",68,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",68,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",66,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",66,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",53,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",53,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",159,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",159,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",50,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",50,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",62,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",62,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",67,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",67,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",64,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",64,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",60,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",60,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",63,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",63,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",65,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",65,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",61,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",61,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",160,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",42,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",13,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",26,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",49,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",45,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",14,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",11,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",12,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",159,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",28,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",36,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",37,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",21,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",40,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",38,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",34,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",54,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",70,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",59,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",66,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",68,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",62,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",67,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",58,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",64,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",60,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",63,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",65,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",61,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",69,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",163,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"exprbox"}}],[11,"from","","",158,{"inputs":[{"name":"exprbox"}],"output":{"name":"expr"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"exprinplace"}}],[11,"from","","",158,{"inputs":[{"name":"exprinplace"}],"output":{"name":"expr"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"exprarray"}}],[11,"from","","",158,{"inputs":[{"name":"exprarray"}],"output":{"name":"expr"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"exprcall"}}],[11,"from","","",158,{"inputs":[{"name":"exprcall"}],"output":{"name":"expr"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"exprmethodcall"}}],[11,"from","","",158,{"inputs":[{"name":"exprmethodcall"}],"output":{"name":"expr"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"exprtuple"}}],[11,"from","","",158,{"inputs":[{"name":"exprtuple"}],"output":{"name":"expr"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exprbinary"}}],[11,"from","","",158,{"inputs":[{"name":"exprbinary"}],"output":{"name":"expr"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"exprunary"}}],[11,"from","","",158,{"inputs":[{"name":"exprunary"}],"output":{"name":"expr"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"exprlit"}}],[11,"from","","",158,{"inputs":[{"name":"exprlit"}],"output":{"name":"expr"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"exprcast"}}],[11,"from","","",158,{"inputs":[{"name":"exprcast"}],"output":{"name":"expr"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"exprtype"}}],[11,"from","","",158,{"inputs":[{"name":"exprtype"}],"output":{"name":"expr"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"exprif"}}],[11,"from","","",158,{"inputs":[{"name":"exprif"}],"output":{"name":"expr"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"expriflet"}}],[11,"from","","",158,{"inputs":[{"name":"expriflet"}],"output":{"name":"expr"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"exprwhile"}}],[11,"from","","",158,{"inputs":[{"name":"exprwhile"}],"output":{"name":"expr"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"exprwhilelet"}}],[11,"from","","",158,{"inputs":[{"name":"exprwhilelet"}],"output":{"name":"expr"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"exprforloop"}}],[11,"from","","",158,{"inputs":[{"name":"exprforloop"}],"output":{"name":"expr"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"exprloop"}}],[11,"from","","",158,{"inputs":[{"name":"exprloop"}],"output":{"name":"expr"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"exprmatch"}}],[11,"from","","",158,{"inputs":[{"name":"exprmatch"}],"output":{"name":"expr"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"exprclosure"}}],[11,"from","","",158,{"inputs":[{"name":"exprclosure"}],"output":{"name":"expr"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"exprunsafe"}}],[11,"from","","",158,{"inputs":[{"name":"exprunsafe"}],"output":{"name":"expr"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"exprblock"}}],[11,"from","","",158,{"inputs":[{"name":"exprblock"}],"output":{"name":"expr"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"exprassign"}}],[11,"from","","",158,{"inputs":[{"name":"exprassign"}],"output":{"name":"expr"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exprassignop"}}],[11,"from","","",158,{"inputs":[{"name":"exprassignop"}],"output":{"name":"expr"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"exprfield"}}],[11,"from","","",158,{"inputs":[{"name":"exprfield"}],"output":{"name":"expr"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"exprindex"}}],[11,"from","","",158,{"inputs":[{"name":"exprindex"}],"output":{"name":"expr"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"exprrange"}}],[11,"from","","",158,{"inputs":[{"name":"exprrange"}],"output":{"name":"expr"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"exprpath"}}],[11,"from","","",158,{"inputs":[{"name":"exprpath"}],"output":{"name":"expr"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"exprreference"}}],[11,"from","","",158,{"inputs":[{"name":"exprreference"}],"output":{"name":"expr"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"exprbreak"}}],[11,"from","","",158,{"inputs":[{"name":"exprbreak"}],"output":{"name":"expr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"exprcontinue"}}],[11,"from","","",158,{"inputs":[{"name":"exprcontinue"}],"output":{"name":"expr"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"exprreturn"}}],[11,"from","","",158,{"inputs":[{"name":"exprreturn"}],"output":{"name":"expr"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"exprmacro"}}],[11,"from","","",158,{"inputs":[{"name":"exprmacro"}],"output":{"name":"expr"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"exprstruct"}}],[11,"from","","",158,{"inputs":[{"name":"exprstruct"}],"output":{"name":"expr"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"exprrepeat"}}],[11,"from","","",158,{"inputs":[{"name":"exprrepeat"}],"output":{"name":"expr"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"exprparen"}}],[11,"from","","",158,{"inputs":[{"name":"exprparen"}],"output":{"name":"expr"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"exprgroup"}}],[11,"from","","",158,{"inputs":[{"name":"exprgroup"}],"output":{"name":"expr"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"exprtry"}}],[11,"from","","",158,{"inputs":[{"name":"exprtry"}],"output":{"name":"expr"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"exprcatch"}}],[11,"from","","",158,{"inputs":[{"name":"exprcatch"}],"output":{"name":"expr"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"expryield"}}],[11,"from","","",158,{"inputs":[{"name":"expryield"}],"output":{"name":"expr"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"exprverbatim"}}],[11,"from","","",158,{"inputs":[{"name":"exprverbatim"}],"output":{"name":"expr"}}],[11,"to_tokens","","",158,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"member"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"index"}}],[11,"from","","",50,{"inputs":[{"name":"usize"}],"output":{"name":"index"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"methodturbofish"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"genericmethodargument"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"fieldvalue"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"label"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"stmt"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"pat"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"patwild"}}],[11,"from","","",161,{"inputs":[{"name":"patwild"}],"output":{"name":"pat"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"patident"}}],[11,"from","","",161,{"inputs":[{"name":"patident"}],"output":{"name":"pat"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"patstruct"}}],[11,"from","","",161,{"inputs":[{"name":"patstruct"}],"output":{"name":"pat"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"pattuplestruct"}}],[11,"from","","",161,{"inputs":[{"name":"pattuplestruct"}],"output":{"name":"pat"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"patpath"}}],[11,"from","","",161,{"inputs":[{"name":"patpath"}],"output":{"name":"pat"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"pattuple"}}],[11,"from","","",161,{"inputs":[{"name":"pattuple"}],"output":{"name":"pat"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"patbox"}}],[11,"from","","",161,{"inputs":[{"name":"patbox"}],"output":{"name":"pat"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"patref"}}],[11,"from","","",161,{"inputs":[{"name":"patref"}],"output":{"name":"pat"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"patlit"}}],[11,"from","","",161,{"inputs":[{"name":"patlit"}],"output":{"name":"pat"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"patrange"}}],[11,"from","","",161,{"inputs":[{"name":"patrange"}],"output":{"name":"pat"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"patslice"}}],[11,"from","","",161,{"inputs":[{"name":"patslice"}],"output":{"name":"pat"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"patmacro"}}],[11,"from","","",161,{"inputs":[{"name":"patmacro"}],"output":{"name":"pat"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"patverbatim"}}],[11,"from","","",161,{"inputs":[{"name":"patverbatim"}],"output":{"name":"pat"}}],[11,"to_tokens","","",161,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"arm"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"rangelimits"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"fieldpat"}}],[11,"parse","","",73,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",73,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",164,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",164,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",74,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",74,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",71,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",71,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",79,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",79,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",166,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",166,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",78,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",78,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",165,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",165,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",72,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",72,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",80,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",80,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",167,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",167,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",73,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",278,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",279,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",280,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",71,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",74,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",79,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",78,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",165,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",72,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",80,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",77,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",76,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",75,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"default","","",73,{"inputs":[],"output":{"name":"generics"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"genericparam"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"typeparam"}}],[11,"from","","",164,{"inputs":[{"name":"typeparam"}],"output":{"name":"genericparam"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"from","","",164,{"inputs":[{"name":"lifetimedef"}],"output":{"name":"genericparam"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"constparam"}}],[11,"from","","",164,{"inputs":[{"name":"constparam"}],"output":{"name":"genericparam"}}],[11,"to_tokens","","",164,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",73,{"inputs":[{"name":"self"}],"output":{"name":"typeparams"}}],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",73,{"inputs":[{"name":"self"}],"output":{"name":"typeparamsmut"}}],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",73,{"inputs":[{"name":"self"}],"output":{"name":"lifetimes"}}],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",73,{"inputs":[{"name":"self"}],"output":{"name":"lifetimesmut"}}],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",73,{"inputs":[{"name":"self"}],"output":{"name":"constparams"}}],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",73,{"inputs":[{"name":"self"}],"output":{"name":"constparamsmut"}}],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",73,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"clone","","",278,{"inputs":[{"name":"self"}],"output":{"name":"implgenerics"}}],[11,"clone","","",279,{"inputs":[{"name":"self"}],"output":{"name":"typegenerics"}}],[11,"clone","","",280,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",73,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",279,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"boundlifetimes"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"boundlifetimes"}}],[11,"new","","",74,{"inputs":[{"name":"lifetime"}],"output":{"name":"self"}}],[11,"from","","",79,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"typeparambound"}}],[11,"from","","",166,{"inputs":[{"name":"traitbound"}],"output":{"name":"typeparambound"}}],[11,"from","","",166,{"inputs":[{"name":"lifetime"}],"output":{"name":"typeparambound"}}],[11,"to_tokens","","",166,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"traitbound"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"predicatetype"}}],[11,"from","","",167,{"inputs":[{"name":"predicatetype"}],"output":{"name":"wherepredicate"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"predicatelifetime"}}],[11,"from","","",167,{"inputs":[{"name":"predicatelifetime"}],"output":{"name":"wherepredicate"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"predicateeq"}}],[11,"from","","",167,{"inputs":[{"name":"predicateeq"}],"output":{"name":"wherepredicate"}}],[11,"to_tokens","","",167,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",281,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",281,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",281,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",281,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"fmt","","",281,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an ident with the given string representation.",281,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"self"}}],[11,"span","","",281,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",281,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"from","","",281,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",281,{"inputs":[{"name":"self_"}],"output":{"name":"self"}}],[11,"from","","",281,{"inputs":[{"name":"capself"}],"output":{"name":"self"}}],[11,"from","","",281,{"inputs":[{"name":"super"}],"output":{"name":"self"}}],[11,"from","","",281,{"inputs":[{"name":"crate"}],"output":{"name":"self"}}],[11,"from","","",281,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",281,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",281,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",281,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",281,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",281,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",281,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"hash","","",281,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"parse","","",171,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",171,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",100,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",100,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",101,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",101,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",96,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",96,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",108,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",108,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",173,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",173,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",119,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",119,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",118,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",118,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",120,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",120,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",116,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",116,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",117,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",117,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",103,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",103,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",94,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",94,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",97,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",97,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",168,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",168,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",102,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",102,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",98,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",98,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",169,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",169,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",85,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",85,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",86,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",86,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",87,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",87,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",106,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",106,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",104,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",104,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",95,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",95,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",107,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",107,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",105,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",105,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",172,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",172,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",111,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",111,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",113,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",113,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",114,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",114,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",112,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",112,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",99,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",99,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",170,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",170,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",89,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",89,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",91,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",91,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",92,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",92,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",90,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",90,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",96,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",108,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",103,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",94,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",97,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",102,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",98,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",106,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",95,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",104,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",107,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",105,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",99,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",100,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",101,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",109,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",119,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",118,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",120,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",116,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",117,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",111,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",113,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",114,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",112,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",115,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",89,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",91,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",92,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",90,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",93,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",85,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",86,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",87,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",88,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",110,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",83,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",82,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",81,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"itemexterncrate"}}],[11,"from","","",171,{"inputs":[{"name":"itemexterncrate"}],"output":{"name":"item"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"itemuse"}}],[11,"from","","",171,{"inputs":[{"name":"itemuse"}],"output":{"name":"item"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"itemstatic"}}],[11,"from","","",171,{"inputs":[{"name":"itemstatic"}],"output":{"name":"item"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"itemconst"}}],[11,"from","","",171,{"inputs":[{"name":"itemconst"}],"output":{"name":"item"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"itemfn"}}],[11,"from","","",171,{"inputs":[{"name":"itemfn"}],"output":{"name":"item"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"itemmod"}}],[11,"from","","",171,{"inputs":[{"name":"itemmod"}],"output":{"name":"item"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"itemforeignmod"}}],[11,"from","","",171,{"inputs":[{"name":"itemforeignmod"}],"output":{"name":"item"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"itemtype"}}],[11,"from","","",171,{"inputs":[{"name":"itemtype"}],"output":{"name":"item"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"itemstruct"}}],[11,"from","","",171,{"inputs":[{"name":"itemstruct"}],"output":{"name":"item"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"itemenum"}}],[11,"from","","",171,{"inputs":[{"name":"itemenum"}],"output":{"name":"item"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"itemunion"}}],[11,"from","","",171,{"inputs":[{"name":"itemunion"}],"output":{"name":"item"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"itemtrait"}}],[11,"from","","",171,{"inputs":[{"name":"itemtrait"}],"output":{"name":"item"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"itemimpl"}}],[11,"from","","",171,{"inputs":[{"name":"itemimpl"}],"output":{"name":"item"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"itemmacro"}}],[11,"from","","",171,{"inputs":[{"name":"itemmacro"}],"output":{"name":"item"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"itemmacro2"}}],[11,"from","","",171,{"inputs":[{"name":"itemmacro2"}],"output":{"name":"item"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"itemverbatim"}}],[11,"from","","",171,{"inputs":[{"name":"itemverbatim"}],"output":{"name":"item"}}],[11,"to_tokens","","",171,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"from","","",171,{"inputs":[{"name":"deriveinput"}],"output":{"name":"item"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"usetree"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"usepath"}}],[11,"from","","",173,{"inputs":[{"name":"usepath"}],"output":{"name":"usetree"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"usename"}}],[11,"from","","",173,{"inputs":[{"name":"usename"}],"output":{"name":"usetree"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"userename"}}],[11,"from","","",173,{"inputs":[{"name":"userename"}],"output":{"name":"usetree"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"useglob"}}],[11,"from","","",173,{"inputs":[{"name":"useglob"}],"output":{"name":"usetree"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"usegroup"}}],[11,"from","","",173,{"inputs":[{"name":"usegroup"}],"output":{"name":"usetree"}}],[11,"to_tokens","","",173,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"foreignitem"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemfn"}}],[11,"from","","",169,{"inputs":[{"name":"foreignitemfn"}],"output":{"name":"foreignitem"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemstatic"}}],[11,"from","","",169,{"inputs":[{"name":"foreignitemstatic"}],"output":{"name":"foreignitem"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemtype"}}],[11,"from","","",169,{"inputs":[{"name":"foreignitemtype"}],"output":{"name":"foreignitem"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemverbatim"}}],[11,"from","","",169,{"inputs":[{"name":"foreignitemverbatim"}],"output":{"name":"foreignitem"}}],[11,"to_tokens","","",169,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"traititemconst"}}],[11,"from","","",172,{"inputs":[{"name":"traititemconst"}],"output":{"name":"traititem"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"traititemmethod"}}],[11,"from","","",172,{"inputs":[{"name":"traititemmethod"}],"output":{"name":"traititem"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"traititemtype"}}],[11,"from","","",172,{"inputs":[{"name":"traititemtype"}],"output":{"name":"traititem"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"traititemmacro"}}],[11,"from","","",172,{"inputs":[{"name":"traititemmacro"}],"output":{"name":"traititem"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"traititemverbatim"}}],[11,"from","","",172,{"inputs":[{"name":"traititemverbatim"}],"output":{"name":"traititem"}}],[11,"to_tokens","","",172,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"implitemconst"}}],[11,"from","","",170,{"inputs":[{"name":"implitemconst"}],"output":{"name":"implitem"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"implitemmethod"}}],[11,"from","","",170,{"inputs":[{"name":"implitemmethod"}],"output":{"name":"implitem"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"implitemtype"}}],[11,"from","","",170,{"inputs":[{"name":"implitemtype"}],"output":{"name":"implitem"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"implitemmacro"}}],[11,"from","","",170,{"inputs":[{"name":"implitemmacro"}],"output":{"name":"implitem"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"implitemverbatim"}}],[11,"from","","",170,{"inputs":[{"name":"implitemverbatim"}],"output":{"name":"implitem"}}],[11,"to_tokens","","",170,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"methodsig"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"fnarg"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"argselfref"}}],[11,"from","","",168,{"inputs":[{"name":"argselfref"}],"output":{"name":"fnarg"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"argself"}}],[11,"from","","",168,{"inputs":[{"name":"argself"}],"output":{"name":"fnarg"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"argcaptured"}}],[11,"from","","",168,{"inputs":[{"name":"argcaptured"}],"output":{"name":"fnarg"}}],[11,"from","","",168,{"inputs":[{"name":"pat"}],"output":{"name":"fnarg"}}],[11,"from","","",168,{"inputs":[{"name":"type"}],"output":{"name":"fnarg"}}],[11,"to_tokens","","",168,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",121,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",121,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",121,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"parse","","",282,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",282,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",282,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",282,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"new","","",282,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"self"}}],[11,"span","","",282,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",282,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"fmt","","",282,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",282,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",282,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",282,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"hash","","",282,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"parse","","",176,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",176,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",283,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",283,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",284,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",284,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",285,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",285,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",286,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",286,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",287,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",287,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",288,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",288,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",122,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",122,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",283,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",284,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",285,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",286,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",287,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",288,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",122,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",123,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",176,{"inputs":[{"name":"literal"}],"output":{"name":"self"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"clone","","",283,{"inputs":[{"name":"self"}],"output":{"name":"litstr"}}],[11,"from","","",176,{"inputs":[{"name":"litstr"}],"output":{"name":"lit"}}],[11,"clone","","",284,{"inputs":[{"name":"self"}],"output":{"name":"litbytestr"}}],[11,"from","","",176,{"inputs":[{"name":"litbytestr"}],"output":{"name":"lit"}}],[11,"clone","","",285,{"inputs":[{"name":"self"}],"output":{"name":"litbyte"}}],[11,"from","","",176,{"inputs":[{"name":"litbyte"}],"output":{"name":"lit"}}],[11,"clone","","",286,{"inputs":[{"name":"self"}],"output":{"name":"litchar"}}],[11,"from","","",176,{"inputs":[{"name":"litchar"}],"output":{"name":"lit"}}],[11,"clone","","",287,{"inputs":[{"name":"self"}],"output":{"name":"litint"}}],[11,"from","","",176,{"inputs":[{"name":"litint"}],"output":{"name":"lit"}}],[11,"clone","","",288,{"inputs":[{"name":"self"}],"output":{"name":"litfloat"}}],[11,"from","","",176,{"inputs":[{"name":"litfloat"}],"output":{"name":"lit"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"litbool"}}],[11,"from","","",176,{"inputs":[{"name":"litbool"}],"output":{"name":"lit"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"litverbatim"}}],[11,"from","","",176,{"inputs":[{"name":"litverbatim"}],"output":{"name":"lit"}}],[11,"to_tokens","","",176,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"new","","",283,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",283,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","Parse a syntax tree node from the content of this string literal.",283,{"inputs":[{"name":"self"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"span","","",283,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",283,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",284,null],[11,"value","","",284,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"span","","",284,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",284,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",285,{"inputs":[{"name":"u8"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",285,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"span","","",285,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",285,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",286,{"inputs":[{"name":"char"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",286,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"span","","",286,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",286,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",287,{"inputs":[{"name":"u64"},{"name":"intsuffix"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",287,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"suffix","","",287,{"inputs":[{"name":"self"}],"output":{"name":"intsuffix"}}],[11,"span","","",287,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",287,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",288,{"inputs":[{"name":"f64"},{"name":"floatsuffix"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",288,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"suffix","","",288,{"inputs":[{"name":"self"}],"output":{"name":"floatsuffix"}}],[11,"span","","",288,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",288,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"span","","",123,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",123,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"intsuffix"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"floatsuffix"}}],[11,"parse","","",124,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",124,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",124,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"macro"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"macrodelimiter"}}],[11,"parse","","",128,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",128,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",128,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"data"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"datastruct"}}],[11,"from","","",179,{"inputs":[{"name":"datastruct"}],"output":{"name":"data"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"dataenum"}}],[11,"from","","",179,{"inputs":[{"name":"dataenum"}],"output":{"name":"data"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"dataunion"}}],[11,"from","","",179,{"inputs":[{"name":"dataunion"}],"output":{"name":"data"}}],[11,"parse_binop","","",180,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_assign_op","","",180,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",181,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",181,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",180,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",181,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"parse","","",184,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",184,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"without_plus","","",184,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",142,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",142,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",131,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",131,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",140,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",140,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",141,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",141,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",132,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",132,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",137,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",137,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",135,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",135,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",144,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",144,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",136,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",136,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",139,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",139,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",183,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",183,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",143,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",143,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"without_plus","","",143,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",134,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",134,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",133,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",133,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",138,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",138,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",130,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",130,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",182,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",182,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",129,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",129,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",142,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",131,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",140,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",141,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",132,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",137,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",144,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",139,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",143,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",134,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",133,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",138,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",135,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",136,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",145,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",183,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",130,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",182,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",129,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"typeslice"}}],[11,"from","","",184,{"inputs":[{"name":"typeslice"}],"output":{"name":"type"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"typearray"}}],[11,"from","","",184,{"inputs":[{"name":"typearray"}],"output":{"name":"type"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"typeptr"}}],[11,"from","","",184,{"inputs":[{"name":"typeptr"}],"output":{"name":"type"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"typereference"}}],[11,"from","","",184,{"inputs":[{"name":"typereference"}],"output":{"name":"type"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"typebarefn"}}],[11,"from","","",184,{"inputs":[{"name":"typebarefn"}],"output":{"name":"type"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"typenever"}}],[11,"from","","",184,{"inputs":[{"name":"typenever"}],"output":{"name":"type"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"typetuple"}}],[11,"from","","",184,{"inputs":[{"name":"typetuple"}],"output":{"name":"type"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"typepath"}}],[11,"from","","",184,{"inputs":[{"name":"typepath"}],"output":{"name":"type"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"typetraitobject"}}],[11,"from","","",184,{"inputs":[{"name":"typetraitobject"}],"output":{"name":"type"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"typeimpltrait"}}],[11,"from","","",184,{"inputs":[{"name":"typeimpltrait"}],"output":{"name":"type"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"typeparen"}}],[11,"from","","",184,{"inputs":[{"name":"typeparen"}],"output":{"name":"type"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"typegroup"}}],[11,"from","","",184,{"inputs":[{"name":"typegroup"}],"output":{"name":"type"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"typeinfer"}}],[11,"from","","",184,{"inputs":[{"name":"typeinfer"}],"output":{"name":"type"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"typemacro"}}],[11,"from","","",184,{"inputs":[{"name":"typemacro"}],"output":{"name":"type"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"typeverbatim"}}],[11,"from","","",184,{"inputs":[{"name":"typeverbatim"}],"output":{"name":"type"}}],[11,"to_tokens","","",184,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"barefnargname"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"returntype"}}],[11,"parse","","",150,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",150,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",185,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",185,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",147,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",147,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",149,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",149,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",151,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",151,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",148,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",148,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse_mod_style","","",150,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"to_tokens","","",150,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",151,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",186,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",185,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",147,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",148,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",149,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",146,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"global","","",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"pathtokens"}}],[11,"from","","",150,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"from","","",151,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"patharguments"}}],[11,"default","","",186,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",186,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"genericargument"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedgenericarguments"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"binding"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedgenericarguments"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",null,null],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",null,null],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",null,null],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",289,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenbuffer"}}],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",289,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenbuffer"}}],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",289,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"clone","","",290,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"eq","","",290,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"ne","","",290,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",290,{"inputs":[],"output":{"name":"self"}}],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",290,{"inputs":[{"name":"self"},{"name":"delimiter"}],"output":{"name":"option"}}],[11,"term","","If the cursor is pointing at a `Term`, returns it along with a cursor pointing at the next `TokenTree`.",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"op","","If the cursor is pointing at an `Op`, returns it along with a cursor pointing at the next `TokenTree`.",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",290,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",290,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",null,null],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",null,null],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",null,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",null,null],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",null,null],[3,"IntoIter","","An iterator over owned values of type `T`.",null,null],[3,"Iter","","An iterator over borrowed values of type `&T`.",null,null],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",null,null],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",291,null],[13,"End","","",291,null],[11,"to_tokens","","",292,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",291,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",292,{"inputs":[{"name":"self"}],"output":{"name":"punctuated"}}],[11,"new","","Creates an empty punctuated sequence.",292,{"inputs":[],"output":{"name":"punctuated"}}],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",292,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",292,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"first","","Borrows the first punctuated pair in this sequence.",292,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"last","","Borrows the last punctuated pair in this sequence.",292,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",292,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",292,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",292,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",292,{"inputs":[{"name":"self"}],"output":{"name":"pairs"}}],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",292,{"inputs":[{"name":"self"}],"output":{"name":"pairsmut"}}],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",292,{"inputs":[{"name":"self"}],"output":{"name":"intopairs"}}],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",292,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",292,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",292,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",292,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",292,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",292,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"insert","","Inserts an element at position `index`.",292,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"from_iter","","",292,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",292,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",292,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",292,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"into_iter","","",292,null],[11,"default","","",292,{"inputs":[],"output":{"name":"self"}}],[11,"next","","",293,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",294,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",295,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",296,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",297,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",298,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",291,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"value","","Borrows the syntax tree node from this punctuated pair.",291,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",291,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",291,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",291,{"inputs":[{"name":"t"},{"name":"option"}],"output":{"name":"self"}}],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",291,null],[11,"index","","",292,null],[11,"index_mut","","",292,null],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",292,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",292,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",292,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",292,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",292,null],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",292,null],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",292,null],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",292,null],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",null,null],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",null,null],[6,"PResult","","The result of a `Synom` parser.",null,null],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",null,null],[10,"parse","","",299,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","A short name of the type being parsed.",299,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",null,null],[16,"Output","","",300,null],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",300,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",300,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",300,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[0,"spanned","syn","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",301,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[5,"visit_abi","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"abi"}],"output":null}],[5,"visit_angle_bracketed_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"anglebracketedgenericarguments"}],"output":null}],[5,"visit_arg_captured","","",null,{"inputs":[{"name":"v"},{"name":"argcaptured"}],"output":null}],[5,"visit_arg_self","","",null,{"inputs":[{"name":"v"},{"name":"argself"}],"output":null}],[5,"visit_arg_self_ref","","",null,{"inputs":[{"name":"v"},{"name":"argselfref"}],"output":null}],[5,"visit_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":null}],[5,"visit_attr_style","","",null,{"inputs":[{"name":"v"},{"name":"attrstyle"}],"output":null}],[5,"visit_attribute","","",null,{"inputs":[{"name":"v"},{"name":"attribute"}],"output":null}],[5,"visit_bare_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"barefnarg"}],"output":null}],[5,"visit_bare_fn_arg_name","","",null,{"inputs":[{"name":"v"},{"name":"barefnargname"}],"output":null}],[5,"visit_bin_op","","",null,{"inputs":[{"name":"v"},{"name":"binop"}],"output":null}],[5,"visit_binding","","",null,{"inputs":[{"name":"v"},{"name":"binding"}],"output":null}],[5,"visit_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":null}],[5,"visit_bound_lifetimes","","",null,{"inputs":[{"name":"v"},{"name":"boundlifetimes"}],"output":null}],[5,"visit_const_param","","",null,{"inputs":[{"name":"v"},{"name":"constparam"}],"output":null}],[5,"visit_data","","",null,{"inputs":[{"name":"v"},{"name":"data"}],"output":null}],[5,"visit_data_enum","","",null,{"inputs":[{"name":"v"},{"name":"dataenum"}],"output":null}],[5,"visit_data_struct","","",null,{"inputs":[{"name":"v"},{"name":"datastruct"}],"output":null}],[5,"visit_data_union","","",null,{"inputs":[{"name":"v"},{"name":"dataunion"}],"output":null}],[5,"visit_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"visit_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"visit_expr_array","","",null,{"inputs":[{"name":"v"},{"name":"exprarray"}],"output":null}],[5,"visit_expr_assign","","",null,{"inputs":[{"name":"v"},{"name":"exprassign"}],"output":null}],[5,"visit_expr_assign_op","","",null,{"inputs":[{"name":"v"},{"name":"exprassignop"}],"output":null}],[5,"visit_expr_binary","","",null,{"inputs":[{"name":"v"},{"name":"exprbinary"}],"output":null}],[5,"visit_expr_block","","",null,{"inputs":[{"name":"v"},{"name":"exprblock"}],"output":null}],[5,"visit_expr_box","","",null,{"inputs":[{"name":"v"},{"name":"exprbox"}],"output":null}],[5,"visit_expr_break","","",null,{"inputs":[{"name":"v"},{"name":"exprbreak"}],"output":null}],[5,"visit_expr_call","","",null,{"inputs":[{"name":"v"},{"name":"exprcall"}],"output":null}],[5,"visit_expr_cast","","",null,{"inputs":[{"name":"v"},{"name":"exprcast"}],"output":null}],[5,"visit_expr_catch","","",null,{"inputs":[{"name":"v"},{"name":"exprcatch"}],"output":null}],[5,"visit_expr_closure","","",null,{"inputs":[{"name":"v"},{"name":"exprclosure"}],"output":null}],[5,"visit_expr_continue","","",null,{"inputs":[{"name":"v"},{"name":"exprcontinue"}],"output":null}],[5,"visit_expr_field","","",null,{"inputs":[{"name":"v"},{"name":"exprfield"}],"output":null}],[5,"visit_expr_for_loop","","",null,{"inputs":[{"name":"v"},{"name":"exprforloop"}],"output":null}],[5,"visit_expr_group","","",null,{"inputs":[{"name":"v"},{"name":"exprgroup"}],"output":null}],[5,"visit_expr_if","","",null,{"inputs":[{"name":"v"},{"name":"exprif"}],"output":null}],[5,"visit_expr_if_let","","",null,{"inputs":[{"name":"v"},{"name":"expriflet"}],"output":null}],[5,"visit_expr_in_place","","",null,{"inputs":[{"name":"v"},{"name":"exprinplace"}],"output":null}],[5,"visit_expr_index","","",null,{"inputs":[{"name":"v"},{"name":"exprindex"}],"output":null}],[5,"visit_expr_lit","","",null,{"inputs":[{"name":"v"},{"name":"exprlit"}],"output":null}],[5,"visit_expr_loop","","",null,{"inputs":[{"name":"v"},{"name":"exprloop"}],"output":null}],[5,"visit_expr_macro","","",null,{"inputs":[{"name":"v"},{"name":"exprmacro"}],"output":null}],[5,"visit_expr_match","","",null,{"inputs":[{"name":"v"},{"name":"exprmatch"}],"output":null}],[5,"visit_expr_method_call","","",null,{"inputs":[{"name":"v"},{"name":"exprmethodcall"}],"output":null}],[5,"visit_expr_paren","","",null,{"inputs":[{"name":"v"},{"name":"exprparen"}],"output":null}],[5,"visit_expr_path","","",null,{"inputs":[{"name":"v"},{"name":"exprpath"}],"output":null}],[5,"visit_expr_range","","",null,{"inputs":[{"name":"v"},{"name":"exprrange"}],"output":null}],[5,"visit_expr_reference","","",null,{"inputs":[{"name":"v"},{"name":"exprreference"}],"output":null}],[5,"visit_expr_repeat","","",null,{"inputs":[{"name":"v"},{"name":"exprrepeat"}],"output":null}],[5,"visit_expr_return","","",null,{"inputs":[{"name":"v"},{"name":"exprreturn"}],"output":null}],[5,"visit_expr_struct","","",null,{"inputs":[{"name":"v"},{"name":"exprstruct"}],"output":null}],[5,"visit_expr_try","","",null,{"inputs":[{"name":"v"},{"name":"exprtry"}],"output":null}],[5,"visit_expr_tuple","","",null,{"inputs":[{"name":"v"},{"name":"exprtuple"}],"output":null}],[5,"visit_expr_type","","",null,{"inputs":[{"name":"v"},{"name":"exprtype"}],"output":null}],[5,"visit_expr_unary","","",null,{"inputs":[{"name":"v"},{"name":"exprunary"}],"output":null}],[5,"visit_expr_unsafe","","",null,{"inputs":[{"name":"v"},{"name":"exprunsafe"}],"output":null}],[5,"visit_expr_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"exprverbatim"}],"output":null}],[5,"visit_expr_while","","",null,{"inputs":[{"name":"v"},{"name":"exprwhile"}],"output":null}],[5,"visit_expr_while_let","","",null,{"inputs":[{"name":"v"},{"name":"exprwhilelet"}],"output":null}],[5,"visit_expr_yield","","",null,{"inputs":[{"name":"v"},{"name":"expryield"}],"output":null}],[5,"visit_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"visit_field_pat","","",null,{"inputs":[{"name":"v"},{"name":"fieldpat"}],"output":null}],[5,"visit_field_value","","",null,{"inputs":[{"name":"v"},{"name":"fieldvalue"}],"output":null}],[5,"visit_fields","","",null,{"inputs":[{"name":"v"},{"name":"fields"}],"output":null}],[5,"visit_fields_named","","",null,{"inputs":[{"name":"v"},{"name":"fieldsnamed"}],"output":null}],[5,"visit_fields_unnamed","","",null,{"inputs":[{"name":"v"},{"name":"fieldsunnamed"}],"output":null}],[5,"visit_file","","",null,{"inputs":[{"name":"v"},{"name":"file"}],"output":null}],[5,"visit_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"fnarg"}],"output":null}],[5,"visit_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"visit_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"visit_foreign_item_fn","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemfn"}],"output":null}],[5,"visit_foreign_item_static","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemstatic"}],"output":null}],[5,"visit_foreign_item_type","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemtype"}],"output":null}],[5,"visit_foreign_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemverbatim"}],"output":null}],[5,"visit_generic_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericargument"}],"output":null}],[5,"visit_generic_method_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericmethodargument"}],"output":null}],[5,"visit_generic_param","","",null,{"inputs":[{"name":"v"},{"name":"genericparam"}],"output":null}],[5,"visit_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"visit_ident","","",null,{"inputs":[{"name":"v"},{"name":"ident"}],"output":null}],[5,"visit_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"visit_impl_item_const","","",null,{"inputs":[{"name":"v"},{"name":"implitemconst"}],"output":null}],[5,"visit_impl_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"implitemmacro"}],"output":null}],[5,"visit_impl_item_method","","",null,{"inputs":[{"name":"v"},{"name":"implitemmethod"}],"output":null}],[5,"visit_impl_item_type","","",null,{"inputs":[{"name":"v"},{"name":"implitemtype"}],"output":null}],[5,"visit_impl_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"implitemverbatim"}],"output":null}],[5,"visit_index","","",null,{"inputs":[{"name":"v"},{"name":"index"}],"output":null}],[5,"visit_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"visit_item_const","","",null,{"inputs":[{"name":"v"},{"name":"itemconst"}],"output":null}],[5,"visit_item_enum","","",null,{"inputs":[{"name":"v"},{"name":"itemenum"}],"output":null}],[5,"visit_item_extern_crate","","",null,{"inputs":[{"name":"v"},{"name":"itemexterncrate"}],"output":null}],[5,"visit_item_fn","","",null,{"inputs":[{"name":"v"},{"name":"itemfn"}],"output":null}],[5,"visit_item_foreign_mod","","",null,{"inputs":[{"name":"v"},{"name":"itemforeignmod"}],"output":null}],[5,"visit_item_impl","","",null,{"inputs":[{"name":"v"},{"name":"itemimpl"}],"output":null}],[5,"visit_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"itemmacro"}],"output":null}],[5,"visit_item_macro2","","",null,{"inputs":[{"name":"v"},{"name":"itemmacro2"}],"output":null}],[5,"visit_item_mod","","",null,{"inputs":[{"name":"v"},{"name":"itemmod"}],"output":null}],[5,"visit_item_static","","",null,{"inputs":[{"name":"v"},{"name":"itemstatic"}],"output":null}],[5,"visit_item_struct","","",null,{"inputs":[{"name":"v"},{"name":"itemstruct"}],"output":null}],[5,"visit_item_trait","","",null,{"inputs":[{"name":"v"},{"name":"itemtrait"}],"output":null}],[5,"visit_item_type","","",null,{"inputs":[{"name":"v"},{"name":"itemtype"}],"output":null}],[5,"visit_item_union","","",null,{"inputs":[{"name":"v"},{"name":"itemunion"}],"output":null}],[5,"visit_item_use","","",null,{"inputs":[{"name":"v"},{"name":"itemuse"}],"output":null}],[5,"visit_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"itemverbatim"}],"output":null}],[5,"visit_label","","",null,{"inputs":[{"name":"v"},{"name":"label"}],"output":null}],[5,"visit_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"visit_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"visit_lit","","",null,{"inputs":[{"name":"v"},{"name":"lit"}],"output":null}],[5,"visit_lit_bool","","",null,{"inputs":[{"name":"v"},{"name":"litbool"}],"output":null}],[5,"visit_lit_byte","","",null,{"inputs":[{"name":"v"},{"name":"litbyte"}],"output":null}],[5,"visit_lit_byte_str","","",null,{"inputs":[{"name":"v"},{"name":"litbytestr"}],"output":null}],[5,"visit_lit_char","","",null,{"inputs":[{"name":"v"},{"name":"litchar"}],"output":null}],[5,"visit_lit_float","","",null,{"inputs":[{"name":"v"},{"name":"litfloat"}],"output":null}],[5,"visit_lit_int","","",null,{"inputs":[{"name":"v"},{"name":"litint"}],"output":null}],[5,"visit_lit_str","","",null,{"inputs":[{"name":"v"},{"name":"litstr"}],"output":null}],[5,"visit_lit_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"litverbatim"}],"output":null}],[5,"visit_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"visit_macro","","",null,{"inputs":[{"name":"v"},{"name":"macro"}],"output":null}],[5,"visit_macro_delimiter","","",null,{"inputs":[{"name":"v"},{"name":"macrodelimiter"}],"output":null}],[5,"visit_member","","",null,{"inputs":[{"name":"v"},{"name":"member"}],"output":null}],[5,"visit_meta","","",null,{"inputs":[{"name":"v"},{"name":"meta"}],"output":null}],[5,"visit_meta_list","","",null,{"inputs":[{"name":"v"},{"name":"metalist"}],"output":null}],[5,"visit_meta_name_value","","",null,{"inputs":[{"name":"v"},{"name":"metanamevalue"}],"output":null}],[5,"visit_method_sig","","",null,{"inputs":[{"name":"v"},{"name":"methodsig"}],"output":null}],[5,"visit_method_turbofish","","",null,{"inputs":[{"name":"v"},{"name":"methodturbofish"}],"output":null}],[5,"visit_nested_meta","","",null,{"inputs":[{"name":"v"},{"name":"nestedmeta"}],"output":null}],[5,"visit_parenthesized_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"parenthesizedgenericarguments"}],"output":null}],[5,"visit_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"visit_pat_box","","",null,{"inputs":[{"name":"v"},{"name":"patbox"}],"output":null}],[5,"visit_pat_ident","","",null,{"inputs":[{"name":"v"},{"name":"patident"}],"output":null}],[5,"visit_pat_lit","","",null,{"inputs":[{"name":"v"},{"name":"patlit"}],"output":null}],[5,"visit_pat_macro","","",null,{"inputs":[{"name":"v"},{"name":"patmacro"}],"output":null}],[5,"visit_pat_path","","",null,{"inputs":[{"name":"v"},{"name":"patpath"}],"output":null}],[5,"visit_pat_range","","",null,{"inputs":[{"name":"v"},{"name":"patrange"}],"output":null}],[5,"visit_pat_ref","","",null,{"inputs":[{"name":"v"},{"name":"patref"}],"output":null}],[5,"visit_pat_slice","","",null,{"inputs":[{"name":"v"},{"name":"patslice"}],"output":null}],[5,"visit_pat_struct","","",null,{"inputs":[{"name":"v"},{"name":"patstruct"}],"output":null}],[5,"visit_pat_tuple","","",null,{"inputs":[{"name":"v"},{"name":"pattuple"}],"output":null}],[5,"visit_pat_tuple_struct","","",null,{"inputs":[{"name":"v"},{"name":"pattuplestruct"}],"output":null}],[5,"visit_pat_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"patverbatim"}],"output":null}],[5,"visit_pat_wild","","",null,{"inputs":[{"name":"v"},{"name":"patwild"}],"output":null}],[5,"visit_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"visit_path_arguments","","",null,{"inputs":[{"name":"v"},{"name":"patharguments"}],"output":null}],[5,"visit_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"visit_predicate_eq","","",null,{"inputs":[{"name":"v"},{"name":"predicateeq"}],"output":null}],[5,"visit_predicate_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"predicatelifetime"}],"output":null}],[5,"visit_predicate_type","","",null,{"inputs":[{"name":"v"},{"name":"predicatetype"}],"output":null}],[5,"visit_qself","","",null,{"inputs":[{"name":"v"},{"name":"qself"}],"output":null}],[5,"visit_range_limits","","",null,{"inputs":[{"name":"v"},{"name":"rangelimits"}],"output":null}],[5,"visit_return_type","","",null,{"inputs":[{"name":"v"},{"name":"returntype"}],"output":null}],[5,"visit_span","","",null,{"inputs":[{"name":"v"},{"name":"span"}],"output":null}],[5,"visit_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"visit_trait_bound","","",null,{"inputs":[{"name":"v"},{"name":"traitbound"}],"output":null}],[5,"visit_trait_bound_modifier","","",null,{"inputs":[{"name":"v"},{"name":"traitboundmodifier"}],"output":null}],[5,"visit_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"visit_trait_item_const","","",null,{"inputs":[{"name":"v"},{"name":"traititemconst"}],"output":null}],[5,"visit_trait_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"traititemmacro"}],"output":null}],[5,"visit_trait_item_method","","",null,{"inputs":[{"name":"v"},{"name":"traititemmethod"}],"output":null}],[5,"visit_trait_item_type","","",null,{"inputs":[{"name":"v"},{"name":"traititemtype"}],"output":null}],[5,"visit_trait_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"traititemverbatim"}],"output":null}],[5,"visit_type","","",null,{"inputs":[{"name":"v"},{"name":"type"}],"output":null}],[5,"visit_type_array","","",null,{"inputs":[{"name":"v"},{"name":"typearray"}],"output":null}],[5,"visit_type_bare_fn","","",null,{"inputs":[{"name":"v"},{"name":"typebarefn"}],"output":null}],[5,"visit_type_group","","",null,{"inputs":[{"name":"v"},{"name":"typegroup"}],"output":null}],[5,"visit_type_impl_trait","","",null,{"inputs":[{"name":"v"},{"name":"typeimpltrait"}],"output":null}],[5,"visit_type_infer","","",null,{"inputs":[{"name":"v"},{"name":"typeinfer"}],"output":null}],[5,"visit_type_macro","","",null,{"inputs":[{"name":"v"},{"name":"typemacro"}],"output":null}],[5,"visit_type_never","","",null,{"inputs":[{"name":"v"},{"name":"typenever"}],"output":null}],[5,"visit_type_param","","",null,{"inputs":[{"name":"v"},{"name":"typeparam"}],"output":null}],[5,"visit_type_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typeparambound"}],"output":null}],[5,"visit_type_paren","","",null,{"inputs":[{"name":"v"},{"name":"typeparen"}],"output":null}],[5,"visit_type_path","","",null,{"inputs":[{"name":"v"},{"name":"typepath"}],"output":null}],[5,"visit_type_ptr","","",null,{"inputs":[{"name":"v"},{"name":"typeptr"}],"output":null}],[5,"visit_type_reference","","",null,{"inputs":[{"name":"v"},{"name":"typereference"}],"output":null}],[5,"visit_type_slice","","",null,{"inputs":[{"name":"v"},{"name":"typeslice"}],"output":null}],[5,"visit_type_trait_object","","",null,{"inputs":[{"name":"v"},{"name":"typetraitobject"}],"output":null}],[5,"visit_type_tuple","","",null,{"inputs":[{"name":"v"},{"name":"typetuple"}],"output":null}],[5,"visit_type_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"typeverbatim"}],"output":null}],[5,"visit_un_op","","",null,{"inputs":[{"name":"v"},{"name":"unop"}],"output":null}],[5,"visit_use_glob","","",null,{"inputs":[{"name":"v"},{"name":"useglob"}],"output":null}],[5,"visit_use_group","","",null,{"inputs":[{"name":"v"},{"name":"usegroup"}],"output":null}],[5,"visit_use_name","","",null,{"inputs":[{"name":"v"},{"name":"usename"}],"output":null}],[5,"visit_use_path","","",null,{"inputs":[{"name":"v"},{"name":"usepath"}],"output":null}],[5,"visit_use_rename","","",null,{"inputs":[{"name":"v"},{"name":"userename"}],"output":null}],[5,"visit_use_tree","","",null,{"inputs":[{"name":"v"},{"name":"usetree"}],"output":null}],[5,"visit_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"}],"output":null}],[5,"visit_vis_crate","","",null,{"inputs":[{"name":"v"},{"name":"viscrate"}],"output":null}],[5,"visit_vis_public","","",null,{"inputs":[{"name":"v"},{"name":"vispublic"}],"output":null}],[5,"visit_vis_restricted","","",null,{"inputs":[{"name":"v"},{"name":"visrestricted"}],"output":null}],[5,"visit_visibility","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":null}],[5,"visit_where_clause","","",null,{"inputs":[{"name":"v"},{"name":"whereclause"}],"output":null}],[5,"visit_where_predicate","","",null,{"inputs":[{"name":"v"},{"name":"wherepredicate"}],"output":null}],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[11,"visit_abi","","",302,{"inputs":[{"name":"self"},{"name":"abi"}],"output":null}],[11,"visit_angle_bracketed_generic_arguments","","",302,{"inputs":[{"name":"self"},{"name":"anglebracketedgenericarguments"}],"output":null}],[11,"visit_arg_captured","","",302,{"inputs":[{"name":"self"},{"name":"argcaptured"}],"output":null}],[11,"visit_arg_self","","",302,{"inputs":[{"name":"self"},{"name":"argself"}],"output":null}],[11,"visit_arg_self_ref","","",302,{"inputs":[{"name":"self"},{"name":"argselfref"}],"output":null}],[11,"visit_arm","","",302,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_attr_style","","",302,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":null}],[11,"visit_attribute","","",302,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_bare_fn_arg","","",302,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":null}],[11,"visit_bare_fn_arg_name","","",302,{"inputs":[{"name":"self"},{"name":"barefnargname"}],"output":null}],[11,"visit_bin_op","","",302,{"inputs":[{"name":"self"},{"name":"binop"}],"output":null}],[11,"visit_binding","","",302,{"inputs":[{"name":"self"},{"name":"binding"}],"output":null}],[11,"visit_block","","",302,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_bound_lifetimes","","",302,{"inputs":[{"name":"self"},{"name":"boundlifetimes"}],"output":null}],[11,"visit_const_param","","",302,{"inputs":[{"name":"self"},{"name":"constparam"}],"output":null}],[11,"visit_data","","",302,{"inputs":[{"name":"self"},{"name":"data"}],"output":null}],[11,"visit_data_enum","","",302,{"inputs":[{"name":"self"},{"name":"dataenum"}],"output":null}],[11,"visit_data_struct","","",302,{"inputs":[{"name":"self"},{"name":"datastruct"}],"output":null}],[11,"visit_data_union","","",302,{"inputs":[{"name":"self"},{"name":"dataunion"}],"output":null}],[11,"visit_derive_input","","",302,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_expr","","",302,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_expr_array","","",302,{"inputs":[{"name":"self"},{"name":"exprarray"}],"output":null}],[11,"visit_expr_assign","","",302,{"inputs":[{"name":"self"},{"name":"exprassign"}],"output":null}],[11,"visit_expr_assign_op","","",302,{"inputs":[{"name":"self"},{"name":"exprassignop"}],"output":null}],[11,"visit_expr_binary","","",302,{"inputs":[{"name":"self"},{"name":"exprbinary"}],"output":null}],[11,"visit_expr_block","","",302,{"inputs":[{"name":"self"},{"name":"exprblock"}],"output":null}],[11,"visit_expr_box","","",302,{"inputs":[{"name":"self"},{"name":"exprbox"}],"output":null}],[11,"visit_expr_break","","",302,{"inputs":[{"name":"self"},{"name":"exprbreak"}],"output":null}],[11,"visit_expr_call","","",302,{"inputs":[{"name":"self"},{"name":"exprcall"}],"output":null}],[11,"visit_expr_cast","","",302,{"inputs":[{"name":"self"},{"name":"exprcast"}],"output":null}],[11,"visit_expr_catch","","",302,{"inputs":[{"name":"self"},{"name":"exprcatch"}],"output":null}],[11,"visit_expr_closure","","",302,{"inputs":[{"name":"self"},{"name":"exprclosure"}],"output":null}],[11,"visit_expr_continue","","",302,{"inputs":[{"name":"self"},{"name":"exprcontinue"}],"output":null}],[11,"visit_expr_field","","",302,{"inputs":[{"name":"self"},{"name":"exprfield"}],"output":null}],[11,"visit_expr_for_loop","","",302,{"inputs":[{"name":"self"},{"name":"exprforloop"}],"output":null}],[11,"visit_expr_group","","",302,{"inputs":[{"name":"self"},{"name":"exprgroup"}],"output":null}],[11,"visit_expr_if","","",302,{"inputs":[{"name":"self"},{"name":"exprif"}],"output":null}],[11,"visit_expr_if_let","","",302,{"inputs":[{"name":"self"},{"name":"expriflet"}],"output":null}],[11,"visit_expr_in_place","","",302,{"inputs":[{"name":"self"},{"name":"exprinplace"}],"output":null}],[11,"visit_expr_index","","",302,{"inputs":[{"name":"self"},{"name":"exprindex"}],"output":null}],[11,"visit_expr_lit","","",302,{"inputs":[{"name":"self"},{"name":"exprlit"}],"output":null}],[11,"visit_expr_loop","","",302,{"inputs":[{"name":"self"},{"name":"exprloop"}],"output":null}],[11,"visit_expr_macro","","",302,{"inputs":[{"name":"self"},{"name":"exprmacro"}],"output":null}],[11,"visit_expr_match","","",302,{"inputs":[{"name":"self"},{"name":"exprmatch"}],"output":null}],[11,"visit_expr_method_call","","",302,{"inputs":[{"name":"self"},{"name":"exprmethodcall"}],"output":null}],[11,"visit_expr_paren","","",302,{"inputs":[{"name":"self"},{"name":"exprparen"}],"output":null}],[11,"visit_expr_path","","",302,{"inputs":[{"name":"self"},{"name":"exprpath"}],"output":null}],[11,"visit_expr_range","","",302,{"inputs":[{"name":"self"},{"name":"exprrange"}],"output":null}],[11,"visit_expr_reference","","",302,{"inputs":[{"name":"self"},{"name":"exprreference"}],"output":null}],[11,"visit_expr_repeat","","",302,{"inputs":[{"name":"self"},{"name":"exprrepeat"}],"output":null}],[11,"visit_expr_return","","",302,{"inputs":[{"name":"self"},{"name":"exprreturn"}],"output":null}],[11,"visit_expr_struct","","",302,{"inputs":[{"name":"self"},{"name":"exprstruct"}],"output":null}],[11,"visit_expr_try","","",302,{"inputs":[{"name":"self"},{"name":"exprtry"}],"output":null}],[11,"visit_expr_tuple","","",302,{"inputs":[{"name":"self"},{"name":"exprtuple"}],"output":null}],[11,"visit_expr_type","","",302,{"inputs":[{"name":"self"},{"name":"exprtype"}],"output":null}],[11,"visit_expr_unary","","",302,{"inputs":[{"name":"self"},{"name":"exprunary"}],"output":null}],[11,"visit_expr_unsafe","","",302,{"inputs":[{"name":"self"},{"name":"exprunsafe"}],"output":null}],[11,"visit_expr_verbatim","","",302,{"inputs":[{"name":"self"},{"name":"exprverbatim"}],"output":null}],[11,"visit_expr_while","","",302,{"inputs":[{"name":"self"},{"name":"exprwhile"}],"output":null}],[11,"visit_expr_while_let","","",302,{"inputs":[{"name":"self"},{"name":"exprwhilelet"}],"output":null}],[11,"visit_expr_yield","","",302,{"inputs":[{"name":"self"},{"name":"expryield"}],"output":null}],[11,"visit_field","","",302,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_field_pat","","",302,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":null}],[11,"visit_field_value","","",302,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":null}],[11,"visit_fields","","",302,{"inputs":[{"name":"self"},{"name":"fields"}],"output":null}],[11,"visit_fields_named","","",302,{"inputs":[{"name":"self"},{"name":"fieldsnamed"}],"output":null}],[11,"visit_fields_unnamed","","",302,{"inputs":[{"name":"self"},{"name":"fieldsunnamed"}],"output":null}],[11,"visit_file","","",302,{"inputs":[{"name":"self"},{"name":"file"}],"output":null}],[11,"visit_fn_arg","","",302,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":null}],[11,"visit_fn_decl","","",302,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":null}],[11,"visit_foreign_item","","",302,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_foreign_item_fn","","",302,{"inputs":[{"name":"self"},{"name":"foreignitemfn"}],"output":null}],[11,"visit_foreign_item_static","","",302,{"inputs":[{"name":"self"},{"name":"foreignitemstatic"}],"output":null}],[11,"visit_foreign_item_type","","",302,{"inputs":[{"name":"self"},{"name":"foreignitemtype"}],"output":null}],[11,"visit_foreign_item_verbatim","","",302,{"inputs":[{"name":"self"},{"name":"foreignitemverbatim"}],"output":null}],[11,"visit_generic_argument","","",302,{"inputs":[{"name":"self"},{"name":"genericargument"}],"output":null}],[11,"visit_generic_method_argument","","",302,{"inputs":[{"name":"self"},{"name":"genericmethodargument"}],"output":null}],[11,"visit_generic_param","","",302,{"inputs":[{"name":"self"},{"name":"genericparam"}],"output":null}],[11,"visit_generics","","",302,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ident","","",302,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_impl_item","","",302,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_impl_item_const","","",302,{"inputs":[{"name":"self"},{"name":"implitemconst"}],"output":null}],[11,"visit_impl_item_macro","","",302,{"inputs":[{"name":"self"},{"name":"implitemmacro"}],"output":null}],[11,"visit_impl_item_method","","",302,{"inputs":[{"name":"self"},{"name":"implitemmethod"}],"output":null}],[11,"visit_impl_item_type","","",302,{"inputs":[{"name":"self"},{"name":"implitemtype"}],"output":null}],[11,"visit_impl_item_verbatim","","",302,{"inputs":[{"name":"self"},{"name":"implitemverbatim"}],"output":null}],[11,"visit_index","","",302,{"inputs":[{"name":"self"},{"name":"index"}],"output":null}],[11,"visit_item","","",302,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_item_const","","",302,{"inputs":[{"name":"self"},{"name":"itemconst"}],"output":null}],[11,"visit_item_enum","","",302,{"inputs":[{"name":"self"},{"name":"itemenum"}],"output":null}],[11,"visit_item_extern_crate","","",302,{"inputs":[{"name":"self"},{"name":"itemexterncrate"}],"output":null}],[11,"visit_item_fn","","",302,{"inputs":[{"name":"self"},{"name":"itemfn"}],"output":null}],[11,"visit_item_foreign_mod","","",302,{"inputs":[{"name":"self"},{"name":"itemforeignmod"}],"output":null}],[11,"visit_item_impl","","",302,{"inputs":[{"name":"self"},{"name":"itemimpl"}],"output":null}],[11,"visit_item_macro","","",302,{"inputs":[{"name":"self"},{"name":"itemmacro"}],"output":null}],[11,"visit_item_macro2","","",302,{"inputs":[{"name":"self"},{"name":"itemmacro2"}],"output":null}],[11,"visit_item_mod","","",302,{"inputs":[{"name":"self"},{"name":"itemmod"}],"output":null}],[11,"visit_item_static","","",302,{"inputs":[{"name":"self"},{"name":"itemstatic"}],"output":null}],[11,"visit_item_struct","","",302,{"inputs":[{"name":"self"},{"name":"itemstruct"}],"output":null}],[11,"visit_item_trait","","",302,{"inputs":[{"name":"self"},{"name":"itemtrait"}],"output":null}],[11,"visit_item_type","","",302,{"inputs":[{"name":"self"},{"name":"itemtype"}],"output":null}],[11,"visit_item_union","","",302,{"inputs":[{"name":"self"},{"name":"itemunion"}],"output":null}],[11,"visit_item_use","","",302,{"inputs":[{"name":"self"},{"name":"itemuse"}],"output":null}],[11,"visit_item_verbatim","","",302,{"inputs":[{"name":"self"},{"name":"itemverbatim"}],"output":null}],[11,"visit_label","","",302,{"inputs":[{"name":"self"},{"name":"label"}],"output":null}],[11,"visit_lifetime","","",302,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",302,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_lit","","",302,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_lit_bool","","",302,{"inputs":[{"name":"self"},{"name":"litbool"}],"output":null}],[11,"visit_lit_byte","","",302,{"inputs":[{"name":"self"},{"name":"litbyte"}],"output":null}],[11,"visit_lit_byte_str","","",302,{"inputs":[{"name":"self"},{"name":"litbytestr"}],"output":null}],[11,"visit_lit_char","","",302,{"inputs":[{"name":"self"},{"name":"litchar"}],"output":null}],[11,"visit_lit_float","","",302,{"inputs":[{"name":"self"},{"name":"litfloat"}],"output":null}],[11,"visit_lit_int","","",302,{"inputs":[{"name":"self"},{"name":"litint"}],"output":null}],[11,"visit_lit_str","","",302,{"inputs":[{"name":"self"},{"name":"litstr"}],"output":null}],[11,"visit_lit_verbatim","","",302,{"inputs":[{"name":"self"},{"name":"litverbatim"}],"output":null}],[11,"visit_local","","",302,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_macro","","",302,{"inputs":[{"name":"self"},{"name":"macro"}],"output":null}],[11,"visit_macro_delimiter","","",302,{"inputs":[{"name":"self"},{"name":"macrodelimiter"}],"output":null}],[11,"visit_member","","",302,{"inputs":[{"name":"self"},{"name":"member"}],"output":null}],[11,"visit_meta","","",302,{"inputs":[{"name":"self"},{"name":"meta"}],"output":null}],[11,"visit_meta_list","","",302,{"inputs":[{"name":"self"},{"name":"metalist"}],"output":null}],[11,"visit_meta_name_value","","",302,{"inputs":[{"name":"self"},{"name":"metanamevalue"}],"output":null}],[11,"visit_method_sig","","",302,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":null}],[11,"visit_method_turbofish","","",302,{"inputs":[{"name":"self"},{"name":"methodturbofish"}],"output":null}],[11,"visit_nested_meta","","",302,{"inputs":[{"name":"self"},{"name":"nestedmeta"}],"output":null}],[11,"visit_parenthesized_generic_arguments","","",302,{"inputs":[{"name":"self"},{"name":"parenthesizedgenericarguments"}],"output":null}],[11,"visit_pat","","",302,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_pat_box","","",302,{"inputs":[{"name":"self"},{"name":"patbox"}],"output":null}],[11,"visit_pat_ident","","",302,{"inputs":[{"name":"self"},{"name":"patident"}],"output":null}],[11,"visit_pat_lit","","",302,{"inputs":[{"name":"self"},{"name":"patlit"}],"output":null}],[11,"visit_pat_macro","","",302,{"inputs":[{"name":"self"},{"name":"patmacro"}],"output":null}],[11,"visit_pat_path","","",302,{"inputs":[{"name":"self"},{"name":"patpath"}],"output":null}],[11,"visit_pat_range","","",302,{"inputs":[{"name":"self"},{"name":"patrange"}],"output":null}],[11,"visit_pat_ref","","",302,{"inputs":[{"name":"self"},{"name":"patref"}],"output":null}],[11,"visit_pat_slice","","",302,{"inputs":[{"name":"self"},{"name":"patslice"}],"output":null}],[11,"visit_pat_struct","","",302,{"inputs":[{"name":"self"},{"name":"patstruct"}],"output":null}],[11,"visit_pat_tuple","","",302,{"inputs":[{"name":"self"},{"name":"pattuple"}],"output":null}],[11,"visit_pat_tuple_struct","","",302,{"inputs":[{"name":"self"},{"name":"pattuplestruct"}],"output":null}],[11,"visit_pat_verbatim","","",302,{"inputs":[{"name":"self"},{"name":"patverbatim"}],"output":null}],[11,"visit_pat_wild","","",302,{"inputs":[{"name":"self"},{"name":"patwild"}],"output":null}],[11,"visit_path","","",302,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_arguments","","",302,{"inputs":[{"name":"self"},{"name":"patharguments"}],"output":null}],[11,"visit_path_segment","","",302,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_predicate_eq","","",302,{"inputs":[{"name":"self"},{"name":"predicateeq"}],"output":null}],[11,"visit_predicate_lifetime","","",302,{"inputs":[{"name":"self"},{"name":"predicatelifetime"}],"output":null}],[11,"visit_predicate_type","","",302,{"inputs":[{"name":"self"},{"name":"predicatetype"}],"output":null}],[11,"visit_qself","","",302,{"inputs":[{"name":"self"},{"name":"qself"}],"output":null}],[11,"visit_range_limits","","",302,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":null}],[11,"visit_return_type","","",302,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"visit_span","","",302,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"visit_stmt","","",302,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_trait_bound","","",302,{"inputs":[{"name":"self"},{"name":"traitbound"}],"output":null}],[11,"visit_trait_bound_modifier","","",302,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_trait_item","","",302,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_trait_item_const","","",302,{"inputs":[{"name":"self"},{"name":"traititemconst"}],"output":null}],[11,"visit_trait_item_macro","","",302,{"inputs":[{"name":"self"},{"name":"traititemmacro"}],"output":null}],[11,"visit_trait_item_method","","",302,{"inputs":[{"name":"self"},{"name":"traititemmethod"}],"output":null}],[11,"visit_trait_item_type","","",302,{"inputs":[{"name":"self"},{"name":"traititemtype"}],"output":null}],[11,"visit_trait_item_verbatim","","",302,{"inputs":[{"name":"self"},{"name":"traititemverbatim"}],"output":null}],[11,"visit_type","","",302,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"visit_type_array","","",302,{"inputs":[{"name":"self"},{"name":"typearray"}],"output":null}],[11,"visit_type_bare_fn","","",302,{"inputs":[{"name":"self"},{"name":"typebarefn"}],"output":null}],[11,"visit_type_group","","",302,{"inputs":[{"name":"self"},{"name":"typegroup"}],"output":null}],[11,"visit_type_impl_trait","","",302,{"inputs":[{"name":"self"},{"name":"typeimpltrait"}],"output":null}],[11,"visit_type_infer","","",302,{"inputs":[{"name":"self"},{"name":"typeinfer"}],"output":null}],[11,"visit_type_macro","","",302,{"inputs":[{"name":"self"},{"name":"typemacro"}],"output":null}],[11,"visit_type_never","","",302,{"inputs":[{"name":"self"},{"name":"typenever"}],"output":null}],[11,"visit_type_param","","",302,{"inputs":[{"name":"self"},{"name":"typeparam"}],"output":null}],[11,"visit_type_param_bound","","",302,{"inputs":[{"name":"self"},{"name":"typeparambound"}],"output":null}],[11,"visit_type_paren","","",302,{"inputs":[{"name":"self"},{"name":"typeparen"}],"output":null}],[11,"visit_type_path","","",302,{"inputs":[{"name":"self"},{"name":"typepath"}],"output":null}],[11,"visit_type_ptr","","",302,{"inputs":[{"name":"self"},{"name":"typeptr"}],"output":null}],[11,"visit_type_reference","","",302,{"inputs":[{"name":"self"},{"name":"typereference"}],"output":null}],[11,"visit_type_slice","","",302,{"inputs":[{"name":"self"},{"name":"typeslice"}],"output":null}],[11,"visit_type_trait_object","","",302,{"inputs":[{"name":"self"},{"name":"typetraitobject"}],"output":null}],[11,"visit_type_tuple","","",302,{"inputs":[{"name":"self"},{"name":"typetuple"}],"output":null}],[11,"visit_type_verbatim","","",302,{"inputs":[{"name":"self"},{"name":"typeverbatim"}],"output":null}],[11,"visit_un_op","","",302,{"inputs":[{"name":"self"},{"name":"unop"}],"output":null}],[11,"visit_use_glob","","",302,{"inputs":[{"name":"self"},{"name":"useglob"}],"output":null}],[11,"visit_use_group","","",302,{"inputs":[{"name":"self"},{"name":"usegroup"}],"output":null}],[11,"visit_use_name","","",302,{"inputs":[{"name":"self"},{"name":"usename"}],"output":null}],[11,"visit_use_path","","",302,{"inputs":[{"name":"self"},{"name":"usepath"}],"output":null}],[11,"visit_use_rename","","",302,{"inputs":[{"name":"self"},{"name":"userename"}],"output":null}],[11,"visit_use_tree","","",302,{"inputs":[{"name":"self"},{"name":"usetree"}],"output":null}],[11,"visit_variant","","",302,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[11,"visit_vis_crate","","",302,{"inputs":[{"name":"self"},{"name":"viscrate"}],"output":null}],[11,"visit_vis_public","","",302,{"inputs":[{"name":"self"},{"name":"vispublic"}],"output":null}],[11,"visit_vis_restricted","","",302,{"inputs":[{"name":"self"},{"name":"visrestricted"}],"output":null}],[11,"visit_visibility","","",302,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":null}],[11,"visit_where_clause","","",302,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":null}],[11,"visit_where_predicate","","",302,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":null}],[11,"fmt","syn::synom","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",303,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",null,null],[14,"call","","Invoke the given parser function with zero or more arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",null,null],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",null,null],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything.",null,null],[14,"reject","","Unconditionally fail to parse anything.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",null,null],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"syn","","Parse any type that implements the `Synom` trait.",null,null],[14,"parens","","Parse inside of `(` `)` parentheses.",null,null],[14,"brackets","","Parse inside of `[` `]` square brackets.",null,null],[14,"braces","","Parse inside of `{` `}` curly braces.",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",null,null],[14,"punct","","Parse a single Rust punctuation token.",null,null],[14,"keyword","","Parse a single Rust keyword token.",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",null,null],[11,"visit_abi","syn::visit","",302,{"inputs":[{"name":"self"},{"name":"abi"}],"output":null}],[11,"visit_angle_bracketed_generic_arguments","","",302,{"inputs":[{"name":"self"},{"name":"anglebracketedgenericarguments"}],"output":null}],[11,"visit_arg_captured","","",302,{"inputs":[{"name":"self"},{"name":"argcaptured"}],"output":null}],[11,"visit_arg_self","","",302,{"inputs":[{"name":"self"},{"name":"argself"}],"output":null}],[11,"visit_arg_self_ref","","",302,{"inputs":[{"name":"self"},{"name":"argselfref"}],"output":null}],[11,"visit_arm","","",302,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_attr_style","","",302,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":null}],[11,"visit_attribute","","",302,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_bare_fn_arg","","",302,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":null}],[11,"visit_bare_fn_arg_name","","",302,{"inputs":[{"name":"self"},{"name":"barefnargname"}],"output":null}],[11,"visit_bin_op","","",302,{"inputs":[{"name":"self"},{"name":"binop"}],"output":null}],[11,"visit_binding","","",302,{"inputs":[{"name":"self"},{"name":"binding"}],"output":null}],[11,"visit_block","","",302,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_bound_lifetimes","","",302,{"inputs":[{"name":"self"},{"name":"boundlifetimes"}],"output":null}],[11,"visit_const_param","","",302,{"inputs":[{"name":"self"},{"name":"constparam"}],"output":null}],[11,"visit_data","","",302,{"inputs":[{"name":"self"},{"name":"data"}],"output":null}],[11,"visit_data_enum","","",302,{"inputs":[{"name":"self"},{"name":"dataenum"}],"output":null}],[11,"visit_data_struct","","",302,{"inputs":[{"name":"self"},{"name":"datastruct"}],"output":null}],[11,"visit_data_union","","",302,{"inputs":[{"name":"self"},{"name":"dataunion"}],"output":null}],[11,"visit_derive_input","","",302,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_expr","","",302,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_expr_array","","",302,{"inputs":[{"name":"self"},{"name":"exprarray"}],"output":null}],[11,"visit_expr_assign","","",302,{"inputs":[{"name":"self"},{"name":"exprassign"}],"output":null}],[11,"visit_expr_assign_op","","",302,{"inputs":[{"name":"self"},{"name":"exprassignop"}],"output":null}],[11,"visit_expr_binary","","",302,{"inputs":[{"name":"self"},{"name":"exprbinary"}],"output":null}],[11,"visit_expr_block","","",302,{"inputs":[{"name":"self"},{"name":"exprblock"}],"output":null}],[11,"visit_expr_box","","",302,{"inputs":[{"name":"self"},{"name":"exprbox"}],"output":null}],[11,"visit_expr_break","","",302,{"inputs":[{"name":"self"},{"name":"exprbreak"}],"output":null}],[11,"visit_expr_call","","",302,{"inputs":[{"name":"self"},{"name":"exprcall"}],"output":null}],[11,"visit_expr_cast","","",302,{"inputs":[{"name":"self"},{"name":"exprcast"}],"output":null}],[11,"visit_expr_catch","","",302,{"inputs":[{"name":"self"},{"name":"exprcatch"}],"output":null}],[11,"visit_expr_closure","","",302,{"inputs":[{"name":"self"},{"name":"exprclosure"}],"output":null}],[11,"visit_expr_continue","","",302,{"inputs":[{"name":"self"},{"name":"exprcontinue"}],"output":null}],[11,"visit_expr_field","","",302,{"inputs":[{"name":"self"},{"name":"exprfield"}],"output":null}],[11,"visit_expr_for_loop","","",302,{"inputs":[{"name":"self"},{"name":"exprforloop"}],"output":null}],[11,"visit_expr_group","","",302,{"inputs":[{"name":"self"},{"name":"exprgroup"}],"output":null}],[11,"visit_expr_if","","",302,{"inputs":[{"name":"self"},{"name":"exprif"}],"output":null}],[11,"visit_expr_if_let","","",302,{"inputs":[{"name":"self"},{"name":"expriflet"}],"output":null}],[11,"visit_expr_in_place","","",302,{"inputs":[{"name":"self"},{"name":"exprinplace"}],"output":null}],[11,"visit_expr_index","","",302,{"inputs":[{"name":"self"},{"name":"exprindex"}],"output":null}],[11,"visit_expr_lit","","",302,{"inputs":[{"name":"self"},{"name":"exprlit"}],"output":null}],[11,"visit_expr_loop","","",302,{"inputs":[{"name":"self"},{"name":"exprloop"}],"output":null}],[11,"visit_expr_macro","","",302,{"inputs":[{"name":"self"},{"name":"exprmacro"}],"output":null}],[11,"visit_expr_match","","",302,{"inputs":[{"name":"self"},{"name":"exprmatch"}],"output":null}],[11,"visit_expr_method_call","","",302,{"inputs":[{"name":"self"},{"name":"exprmethodcall"}],"output":null}],[11,"visit_expr_paren","","",302,{"inputs":[{"name":"self"},{"name":"exprparen"}],"output":null}],[11,"visit_expr_path","","",302,{"inputs":[{"name":"self"},{"name":"exprpath"}],"output":null}],[11,"visit_expr_range","","",302,{"inputs":[{"name":"self"},{"name":"exprrange"}],"output":null}],[11,"visit_expr_reference","","",302,{"inputs":[{"name":"self"},{"name":"exprreference"}],"output":null}],[11,"visit_expr_repeat","","",302,{"inputs":[{"name":"self"},{"name":"exprrepeat"}],"output":null}],[11,"visit_expr_return","","",302,{"inputs":[{"name":"self"},{"name":"exprreturn"}],"output":null}],[11,"visit_expr_struct","","",302,{"inputs":[{"name":"self"},{"name":"exprstruct"}],"output":null}],[11,"visit_expr_try","","",302,{"inputs":[{"name":"self"},{"name":"exprtry"}],"output":null}],[11,"visit_expr_tuple","","",302,{"inputs":[{"name":"self"},{"name":"exprtuple"}],"output":null}],[11,"visit_expr_type","","",302,{"inputs":[{"name":"self"},{"name":"exprtype"}],"output":null}],[11,"visit_expr_unary","","",302,{"inputs":[{"name":"self"},{"name":"exprunary"}],"output":null}],[11,"visit_expr_unsafe","","",302,{"inputs":[{"name":"self"},{"name":"exprunsafe"}],"output":null}],[11,"visit_expr_verbatim","","",302,{"inputs":[{"name":"self"},{"name":"exprverbatim"}],"output":null}],[11,"visit_expr_while","","",302,{"inputs":[{"name":"self"},{"name":"exprwhile"}],"output":null}],[11,"visit_expr_while_let","","",302,{"inputs":[{"name":"self"},{"name":"exprwhilelet"}],"output":null}],[11,"visit_expr_yield","","",302,{"inputs":[{"name":"self"},{"name":"expryield"}],"output":null}],[11,"visit_field","","",302,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_field_pat","","",302,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":null}],[11,"visit_field_value","","",302,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":null}],[11,"visit_fields","","",302,{"inputs":[{"name":"self"},{"name":"fields"}],"output":null}],[11,"visit_fields_named","","",302,{"inputs":[{"name":"self"},{"name":"fieldsnamed"}],"output":null}],[11,"visit_fields_unnamed","","",302,{"inputs":[{"name":"self"},{"name":"fieldsunnamed"}],"output":null}],[11,"visit_file","","",302,{"inputs":[{"name":"self"},{"name":"file"}],"output":null}],[11,"visit_fn_arg","","",302,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":null}],[11,"visit_fn_decl","","",302,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":null}],[11,"visit_foreign_item","","",302,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_foreign_item_fn","","",302,{"inputs":[{"name":"self"},{"name":"foreignitemfn"}],"output":null}],[11,"visit_foreign_item_static","","",302,{"inputs":[{"name":"self"},{"name":"foreignitemstatic"}],"output":null}],[11,"visit_foreign_item_type","","",302,{"inputs":[{"name":"self"},{"name":"foreignitemtype"}],"output":null}],[11,"visit_foreign_item_verbatim","","",302,{"inputs":[{"name":"self"},{"name":"foreignitemverbatim"}],"output":null}],[11,"visit_generic_argument","","",302,{"inputs":[{"name":"self"},{"name":"genericargument"}],"output":null}],[11,"visit_generic_method_argument","","",302,{"inputs":[{"name":"self"},{"name":"genericmethodargument"}],"output":null}],[11,"visit_generic_param","","",302,{"inputs":[{"name":"self"},{"name":"genericparam"}],"output":null}],[11,"visit_generics","","",302,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ident","","",302,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_impl_item","","",302,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_impl_item_const","","",302,{"inputs":[{"name":"self"},{"name":"implitemconst"}],"output":null}],[11,"visit_impl_item_macro","","",302,{"inputs":[{"name":"self"},{"name":"implitemmacro"}],"output":null}],[11,"visit_impl_item_method","","",302,{"inputs":[{"name":"self"},{"name":"implitemmethod"}],"output":null}],[11,"visit_impl_item_type","","",302,{"inputs":[{"name":"self"},{"name":"implitemtype"}],"output":null}],[11,"visit_impl_item_verbatim","","",302,{"inputs":[{"name":"self"},{"name":"implitemverbatim"}],"output":null}],[11,"visit_index","","",302,{"inputs":[{"name":"self"},{"name":"index"}],"output":null}],[11,"visit_item","","",302,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_item_const","","",302,{"inputs":[{"name":"self"},{"name":"itemconst"}],"output":null}],[11,"visit_item_enum","","",302,{"inputs":[{"name":"self"},{"name":"itemenum"}],"output":null}],[11,"visit_item_extern_crate","","",302,{"inputs":[{"name":"self"},{"name":"itemexterncrate"}],"output":null}],[11,"visit_item_fn","","",302,{"inputs":[{"name":"self"},{"name":"itemfn"}],"output":null}],[11,"visit_item_foreign_mod","","",302,{"inputs":[{"name":"self"},{"name":"itemforeignmod"}],"output":null}],[11,"visit_item_impl","","",302,{"inputs":[{"name":"self"},{"name":"itemimpl"}],"output":null}],[11,"visit_item_macro","","",302,{"inputs":[{"name":"self"},{"name":"itemmacro"}],"output":null}],[11,"visit_item_macro2","","",302,{"inputs":[{"name":"self"},{"name":"itemmacro2"}],"output":null}],[11,"visit_item_mod","","",302,{"inputs":[{"name":"self"},{"name":"itemmod"}],"output":null}],[11,"visit_item_static","","",302,{"inputs":[{"name":"self"},{"name":"itemstatic"}],"output":null}],[11,"visit_item_struct","","",302,{"inputs":[{"name":"self"},{"name":"itemstruct"}],"output":null}],[11,"visit_item_trait","","",302,{"inputs":[{"name":"self"},{"name":"itemtrait"}],"output":null}],[11,"visit_item_type","","",302,{"inputs":[{"name":"self"},{"name":"itemtype"}],"output":null}],[11,"visit_item_union","","",302,{"inputs":[{"name":"self"},{"name":"itemunion"}],"output":null}],[11,"visit_item_use","","",302,{"inputs":[{"name":"self"},{"name":"itemuse"}],"output":null}],[11,"visit_item_verbatim","","",302,{"inputs":[{"name":"self"},{"name":"itemverbatim"}],"output":null}],[11,"visit_label","","",302,{"inputs":[{"name":"self"},{"name":"label"}],"output":null}],[11,"visit_lifetime","","",302,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",302,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_lit","","",302,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_lit_bool","","",302,{"inputs":[{"name":"self"},{"name":"litbool"}],"output":null}],[11,"visit_lit_byte","","",302,{"inputs":[{"name":"self"},{"name":"litbyte"}],"output":null}],[11,"visit_lit_byte_str","","",302,{"inputs":[{"name":"self"},{"name":"litbytestr"}],"output":null}],[11,"visit_lit_char","","",302,{"inputs":[{"name":"self"},{"name":"litchar"}],"output":null}],[11,"visit_lit_float","","",302,{"inputs":[{"name":"self"},{"name":"litfloat"}],"output":null}],[11,"visit_lit_int","","",302,{"inputs":[{"name":"self"},{"name":"litint"}],"output":null}],[11,"visit_lit_str","","",302,{"inputs":[{"name":"self"},{"name":"litstr"}],"output":null}],[11,"visit_lit_verbatim","","",302,{"inputs":[{"name":"self"},{"name":"litverbatim"}],"output":null}],[11,"visit_local","","",302,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_macro","","",302,{"inputs":[{"name":"self"},{"name":"macro"}],"output":null}],[11,"visit_macro_delimiter","","",302,{"inputs":[{"name":"self"},{"name":"macrodelimiter"}],"output":null}],[11,"visit_member","","",302,{"inputs":[{"name":"self"},{"name":"member"}],"output":null}],[11,"visit_meta","","",302,{"inputs":[{"name":"self"},{"name":"meta"}],"output":null}],[11,"visit_meta_list","","",302,{"inputs":[{"name":"self"},{"name":"metalist"}],"output":null}],[11,"visit_meta_name_value","","",302,{"inputs":[{"name":"self"},{"name":"metanamevalue"}],"output":null}],[11,"visit_method_sig","","",302,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":null}],[11,"visit_method_turbofish","","",302,{"inputs":[{"name":"self"},{"name":"methodturbofish"}],"output":null}],[11,"visit_nested_meta","","",302,{"inputs":[{"name":"self"},{"name":"nestedmeta"}],"output":null}],[11,"visit_parenthesized_generic_arguments","","",302,{"inputs":[{"name":"self"},{"name":"parenthesizedgenericarguments"}],"output":null}],[11,"visit_pat","","",302,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_pat_box","","",302,{"inputs":[{"name":"self"},{"name":"patbox"}],"output":null}],[11,"visit_pat_ident","","",302,{"inputs":[{"name":"self"},{"name":"patident"}],"output":null}],[11,"visit_pat_lit","","",302,{"inputs":[{"name":"self"},{"name":"patlit"}],"output":null}],[11,"visit_pat_macro","","",302,{"inputs":[{"name":"self"},{"name":"patmacro"}],"output":null}],[11,"visit_pat_path","","",302,{"inputs":[{"name":"self"},{"name":"patpath"}],"output":null}],[11,"visit_pat_range","","",302,{"inputs":[{"name":"self"},{"name":"patrange"}],"output":null}],[11,"visit_pat_ref","","",302,{"inputs":[{"name":"self"},{"name":"patref"}],"output":null}],[11,"visit_pat_slice","","",302,{"inputs":[{"name":"self"},{"name":"patslice"}],"output":null}],[11,"visit_pat_struct","","",302,{"inputs":[{"name":"self"},{"name":"patstruct"}],"output":null}],[11,"visit_pat_tuple","","",302,{"inputs":[{"name":"self"},{"name":"pattuple"}],"output":null}],[11,"visit_pat_tuple_struct","","",302,{"inputs":[{"name":"self"},{"name":"pattuplestruct"}],"output":null}],[11,"visit_pat_verbatim","","",302,{"inputs":[{"name":"self"},{"name":"patverbatim"}],"output":null}],[11,"visit_pat_wild","","",302,{"inputs":[{"name":"self"},{"name":"patwild"}],"output":null}],[11,"visit_path","","",302,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_arguments","","",302,{"inputs":[{"name":"self"},{"name":"patharguments"}],"output":null}],[11,"visit_path_segment","","",302,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_predicate_eq","","",302,{"inputs":[{"name":"self"},{"name":"predicateeq"}],"output":null}],[11,"visit_predicate_lifetime","","",302,{"inputs":[{"name":"self"},{"name":"predicatelifetime"}],"output":null}],[11,"visit_predicate_type","","",302,{"inputs":[{"name":"self"},{"name":"predicatetype"}],"output":null}],[11,"visit_qself","","",302,{"inputs":[{"name":"self"},{"name":"qself"}],"output":null}],[11,"visit_range_limits","","",302,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":null}],[11,"visit_return_type","","",302,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"visit_span","","",302,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"visit_stmt","","",302,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_trait_bound","","",302,{"inputs":[{"name":"self"},{"name":"traitbound"}],"output":null}],[11,"visit_trait_bound_modifier","","",302,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_trait_item","","",302,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_trait_item_const","","",302,{"inputs":[{"name":"self"},{"name":"traititemconst"}],"output":null}],[11,"visit_trait_item_macro","","",302,{"inputs":[{"name":"self"},{"name":"traititemmacro"}],"output":null}],[11,"visit_trait_item_method","","",302,{"inputs":[{"name":"self"},{"name":"traititemmethod"}],"output":null}],[11,"visit_trait_item_type","","",302,{"inputs":[{"name":"self"},{"name":"traititemtype"}],"output":null}],[11,"visit_trait_item_verbatim","","",302,{"inputs":[{"name":"self"},{"name":"traititemverbatim"}],"output":null}],[11,"visit_type","","",302,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"visit_type_array","","",302,{"inputs":[{"name":"self"},{"name":"typearray"}],"output":null}],[11,"visit_type_bare_fn","","",302,{"inputs":[{"name":"self"},{"name":"typebarefn"}],"output":null}],[11,"visit_type_group","","",302,{"inputs":[{"name":"self"},{"name":"typegroup"}],"output":null}],[11,"visit_type_impl_trait","","",302,{"inputs":[{"name":"self"},{"name":"typeimpltrait"}],"output":null}],[11,"visit_type_infer","","",302,{"inputs":[{"name":"self"},{"name":"typeinfer"}],"output":null}],[11,"visit_type_macro","","",302,{"inputs":[{"name":"self"},{"name":"typemacro"}],"output":null}],[11,"visit_type_never","","",302,{"inputs":[{"name":"self"},{"name":"typenever"}],"output":null}],[11,"visit_type_param","","",302,{"inputs":[{"name":"self"},{"name":"typeparam"}],"output":null}],[11,"visit_type_param_bound","","",302,{"inputs":[{"name":"self"},{"name":"typeparambound"}],"output":null}],[11,"visit_type_paren","","",302,{"inputs":[{"name":"self"},{"name":"typeparen"}],"output":null}],[11,"visit_type_path","","",302,{"inputs":[{"name":"self"},{"name":"typepath"}],"output":null}],[11,"visit_type_ptr","","",302,{"inputs":[{"name":"self"},{"name":"typeptr"}],"output":null}],[11,"visit_type_reference","","",302,{"inputs":[{"name":"self"},{"name":"typereference"}],"output":null}],[11,"visit_type_slice","","",302,{"inputs":[{"name":"self"},{"name":"typeslice"}],"output":null}],[11,"visit_type_trait_object","","",302,{"inputs":[{"name":"self"},{"name":"typetraitobject"}],"output":null}],[11,"visit_type_tuple","","",302,{"inputs":[{"name":"self"},{"name":"typetuple"}],"output":null}],[11,"visit_type_verbatim","","",302,{"inputs":[{"name":"self"},{"name":"typeverbatim"}],"output":null}],[11,"visit_un_op","","",302,{"inputs":[{"name":"self"},{"name":"unop"}],"output":null}],[11,"visit_use_glob","","",302,{"inputs":[{"name":"self"},{"name":"useglob"}],"output":null}],[11,"visit_use_group","","",302,{"inputs":[{"name":"self"},{"name":"usegroup"}],"output":null}],[11,"visit_use_name","","",302,{"inputs":[{"name":"self"},{"name":"usename"}],"output":null}],[11,"visit_use_path","","",302,{"inputs":[{"name":"self"},{"name":"usepath"}],"output":null}],[11,"visit_use_rename","","",302,{"inputs":[{"name":"self"},{"name":"userename"}],"output":null}],[11,"visit_use_tree","","",302,{"inputs":[{"name":"self"},{"name":"usetree"}],"output":null}],[11,"visit_variant","","",302,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[11,"visit_vis_crate","","",302,{"inputs":[{"name":"self"},{"name":"viscrate"}],"output":null}],[11,"visit_vis_public","","",302,{"inputs":[{"name":"self"},{"name":"vispublic"}],"output":null}],[11,"visit_vis_restricted","","",302,{"inputs":[{"name":"self"},{"name":"visrestricted"}],"output":null}],[11,"visit_visibility","","",302,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":null}],[11,"visit_where_clause","","",302,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":null}],[11,"visit_where_predicate","","",302,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":null}]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprCatch"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprInPlace"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprVerbatim"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprYield"],[3,"Index"],[3,"Arm"],[3,"Block"],[3,"FieldPat"],[3,"FieldValue"],[3,"Label"],[3,"Local"],[3,"MethodTurbofish"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatPath"],[3,"PatRange"],[3,"PatRef"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatVerbatim"],[3,"PatWild"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"ArgCaptured"],[3,"ArgSelf"],[3,"ArgSelfRef"],[3,"FnDecl"],[3,"ForeignItemFn"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ForeignItemVerbatim"],[3,"ImplItemConst"],[3,"ImplItemMacro"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ImplItemVerbatim"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[3,"ItemVerbatim"],[3,"MethodSig"],[3,"TraitItemConst"],[3,"TraitItemMacro"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"TraitItemVerbatim"],[3,"UseGlob"],[3,"UseGroup"],[3,"UseName"],[3,"UsePath"],[3,"UseRename"],[3,"File"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"PathTokens"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericMethodArgument"],[4,"Pat"],[4,"RangeLimits"],[4,"Stmt"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FnArg"],[4,"ForeignItem"],[4,"ImplItem"],[4,"Item"],[4,"TraitItem"],[4,"UseTree"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"Ident"],[3,"Lifetime"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"Synom"],[8,"Parser"],[8,"Spanned"],[8,"Visit"],[3,"ParseError"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["synstructure"] = {"doc":"This crate provides helper types for matching against enum variants, and extracting bindings to each of the fields in the deriving Struct or Enum in a generic way.","items":[[3,"BindingInfo","synstructure","Information about a specific binding. This contains both an `Ident` reference to the given field, and the syn `&'a Field` descriptor for that field.",null,null],[12,"binding","","The name which this BindingInfo will bind to.",0,null],[12,"style","","The type of binding which this BindingInfo will create.",0,null],[3,"VariantAst","","This type is similar to `syn`'s `Variant` type, however each of the fields are references rather than owned. When this is used as the AST for a real variant, this struct simply borrows the fields of the `syn` `Variant`, however this type may also be used as the sole variant for astruct.",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"data","","",1,null],[12,"discriminant","","",1,null],[3,"VariantInfo","","A wrapper around a `syn` `DeriveInput`'s variant which provides utilities for destructuring `Variant`s with `match` expressions.",null,null],[12,"prefix","","",2,null],[3,"Structure","","A wrapper around a `syn` `DeriveInput` which provides utilities for creating custom derive trait implementations.",null,null],[4,"BindStyle","","The type of binding to use when generating a pattern.",null,null],[13,"Move","","`x`",3,null],[13,"MoveMut","","`mut x`",3,null],[13,"Ref","","`ref x`",3,null],[13,"RefMut","","`ref mut x`",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bindstyle"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bindstyle"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bindinginfo"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bindinginfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bindinginfo"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `BindingInfo` references",0,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"pat","","Generates the pattern fragment for this field binding.",0,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",0,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"vec"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"variantast"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"variantast"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"variantast"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variantinfo"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"bindings","","Returns a slice of the bindings in this Variant.",2,null],[11,"bindings_mut","","Returns a mut slice of the bindings in this Variant.",2,null],[11,"ast","","Returns a `VariantAst` object which contains references to the underlying `syn` AST node which this `Variant` was created from.",2,{"inputs":[{"name":"self"}],"output":{"name":"variantast"}}],[11,"omitted_bindings","","True if any bindings were omitted due to a `filter` call.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pat","","Generates the match-arm pattern which could be used to match against this Variant.",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"construct","","Generates the token stream required to construct the current variant.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating a `match` arm which evaluates the returned tokens.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating a `match` arm which evaluates to the resulting tokens.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"filter","","Filter the bindings created by this `Variant` object. This has 2 effects:",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"remove_binding","","Remove the binding at the given index.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",2,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"vec"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"structure"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"structure"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"structure"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"new","","Create a new `Structure` with the variants and fields from the passed-in `DeriveInput`.",4,{"inputs":[{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"variants","","Returns a slice of the variants in this Structure.",4,null],[11,"variants_mut","","Returns a mut slice of the variants in this Structure.",4,null],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `Structure` was created from.",4,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"omitted_variants","","True if any variants were omitted due to a `filter_variants` call.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating `match` arms which evaluate the returned tokens.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating `match` arms which evaluate to the resulting tokens.",4,{"inputs":[{"name":"self"},{"name":"i"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"each_variant","","Runs the passed-in function once for each variant, passing in a `VariantInfo`. and generating `match` arms which evaluate the returned tokens.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"filter","","Filter the bindings created by this `Structure` object. This has 2 effects:",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"filter_variants","","Filter the variants matched by this `Structure` object. This has 2 effects:",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"remove_variant","","Remove the variant at the given index.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are refrenced in the types of non-filtered fields / variants.",4,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"vec"}}],[11,"add_trait_bounds","","Add trait bounds for a trait with the given path for each type parmaeter referenced in the types of non-filtered fields.",4,{"inputs":[{"name":"self"},{"name":"typarambound"},{"name":"vec"}],"output":null}],[11,"bound_impl","","Creates an `impl` block with the required generic type fields filled in to implement the trait `path`.",4,{"inputs":[{"name":"self"},{"name":"p"},{"name":"b"}],"output":{"name":"tokens"}}],[11,"unsafe_bound_impl","","This method is the same as `bound_impl`, except also includes the `unsafe` keyword for implementing unsafe traits.",4,{"inputs":[{"name":"self"},{"name":"p"},{"name":"b"}],"output":{"name":"tokens"}}],[11,"unbound_impl","","This method is like `bound_impl` but doesn't add the additional bounds to the where clause.",4,{"inputs":[{"name":"self"},{"name":"p"},{"name":"b"}],"output":{"name":"tokens"}}],[11,"unsafe_unbound_impl","","This method is the same as `unbound_impl`, except also includes the `unsafe` keyword for implementing unsafe traits.",4,{"inputs":[{"name":"self"},{"name":"p"},{"name":"b"}],"output":{"name":"tokens"}}],[14,"decl_derive","","The `decl_derive!` macro declares a custom derive wrapper. It will parse the incoming TokenStream into a `synstructure::Structure` object, and pass it into the inner function.",null,null],[14,"test_derive","","Run a test on a custom derive. This macro expands both the original struct and the expansion to ensure that they compile correctly, and confirms that feeding the original struct into the named derive will produce the written output.",null,null]],"paths":[[3,"BindingInfo"],[3,"VariantAst"],[3,"VariantInfo"],[4,"BindStyle"],[3,"Structure"]]};
searchIndex["syntex_fmt_macros"] = {"doc":"Macro support for format strings","items":[[3,"Argument","syntex_fmt_macros","Representation of an argument specification.",null,null],[12,"position","","Where to find this argument",0,null],[12,"format","","How to format the argument",0,null],[3,"FormatSpec","","Specification for the formatting of an argument in the format string.",null,null],[12,"fill","","Optionally specified character to fill alignment with",1,null],[12,"align","","Optionally specified alignment",1,null],[12,"flags","","Packed version of various flags provided",1,null],[12,"precision","","The integer precision to use",1,null],[12,"width","","The string width requested for the resulting format",1,null],[12,"ty","","The descriptor string representing the name of the format desired for this argument, this can be empty or any number of characters, although it is required to be one word.",1,null],[3,"Parser","","The parser structure for interpreting the input format string. This is modelled as an iterator over `Piece` structures to form a stream of tokens being output.",null,null],[12,"errors","","Error messages accumulated during parsing",2,null],[4,"Piece","","A piece is a portion of the format string which represents the next part to emit. These are emitted as a stream by the `Parser` class.",null,null],[13,"String","","A literal string which should directly be emitted",3,null],[13,"NextArgument","","This describes that formatting should process the next argument (as specified inside) for emission.",3,null],[4,"Position","","Enum describing where an argument for a format can be located.",null,null],[13,"ArgumentNext","","The argument will be in the next position. This is the default.",4,null],[13,"ArgumentIs","","The argument is located at a specific index.",4,null],[13,"ArgumentNamed","","The argument has a name.",4,null],[4,"Alignment","","Enum of alignments which are supported.",null,null],[13,"AlignLeft","","The value will be aligned to the left.",5,null],[13,"AlignRight","","The value will be aligned to the right.",5,null],[13,"AlignCenter","","The value will be aligned in the center.",5,null],[13,"AlignUnknown","","The value will take on a default alignment.",5,null],[4,"Flag","","Various flags which can be applied to format strings. The meaning of these flags is defined by the formatters themselves.",null,null],[13,"FlagSignPlus","","A `+` will be used to denote positive numbers.",6,null],[13,"FlagSignMinus","","A `-` will be used to denote negative numbers. This is the default.",6,null],[13,"FlagAlternate","","An alternate form will be used for the value. In the case of numbers, this means that the number will be prefixed with the supplied string.",6,null],[13,"FlagSignAwareZeroPad","","For numbers, this means that the number will be padded with zeroes, and the sign (`+` or `-`) will precede them.",6,null],[4,"Count","","A count is used for the precision and width parameters of an integer, and can reference either an argument or a literal integer.",null,null],[13,"CountIs","","The count is specified explicitly.",7,null],[13,"CountIsName","","The count is specified by the argument with the given name.",7,null],[13,"CountIsParam","","The count is specified by the argument at the given index.",7,null],[13,"CountIsNextParam","","The count is specified by the next parameter.",7,null],[13,"CountImplied","","The count is implied and cannot be explicitly specified.",7,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"piece"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"piece"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"piece"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"argument"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"argument"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"argument"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"formatspec"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"formatspec"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"formatspec"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"flag"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"count"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"count"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"count"}],"output":{"name":"bool"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["piece"],"name":"option"}}],[11,"new","","Creates a new parser for the given format string",2,{"inputs":[{"name":"str"}],"output":{"name":"parser"}}]],"paths":[[3,"Argument"],[3,"FormatSpec"],[3,"Parser"],[4,"Piece"],[4,"Position"],[4,"Alignment"],[4,"Flag"],[4,"Count"]]};
searchIndex["tempdir"] = {"doc":"Temporary directories of files.","items":[[3,"TempDir","tempdir","A directory in the filesystem that is automatically deleted when it goes out of scope.",null,null],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose name will have the prefix, `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",0,{"inputs":[{"name":"str"}],"output":{"generics":["tempdir"],"name":"result"}}],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name will have the prefix `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",0,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"generics":["tempdir"],"name":"result"}}],[11,"path","","Accesses the [`Path`] to the temporary directory.",0,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_path","","Unwraps the [`Path`] contained in the `TempDir` and returns it. This destroys the `TempDir` without deleting the directory represented by the returned `Path`.",0,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"close","","Closes and removes the temporary directory, returing a `Result`.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"TempDir"]]};
searchIndex["tempfile"] = {"doc":"Temporary files and directories.","items":[[3,"TempDir","tempfile","A directory in the filesystem that is automatically deleted when it goes out of scope.",null,null],[3,"NamedTempFile","","A named temporary file.",null,null],[3,"PersistError","","Error returned when persisting a temporary file fails.",null,null],[12,"error","","The underlying IO error.",0,null],[12,"file","","The temporary file that couldn't be persisted.",0,null],[3,"TempPath","","A path to a named temporary file without an open file handle.",null,null],[3,"Builder","","Create a new temporary file or directory with custom parameters.",null,null],[5,"tempdir","","Create a new temporary directory.",null,{"inputs":[],"output":{"generics":["tempdir"],"name":"result"}}],[5,"tempdir_in","","Create a new temporary directory.",null,{"inputs":[{"name":"p"}],"output":{"generics":["tempdir"],"name":"result"}}],[5,"tempfile","","Create a new temporary file.",null,{"inputs":[],"output":{"generics":["file"],"name":"result"}}],[5,"tempfile_in","","Create a new temporary file in the specified directory.",null,{"inputs":[{"name":"p"}],"output":{"generics":["file"],"name":"result"}}],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()`.",1,{"inputs":[],"output":{"generics":["tempdir"],"name":"result"}}],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name will have the prefix `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",1,{"inputs":[{"name":"p"}],"output":{"generics":["tempdir"],"name":"result"}}],[11,"path","","Accesses the [`Path`] to the temporary directory.",1,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_path","","Persist the temporary directory to disk, returning the [`PathBuf`] where it is located.",1,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"close","","Closes and removes the temporary directory, returing a `Result`.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Close and remove the temporary file.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"persist","","Persist the temporary file at the target path.",2,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathpersisterror"],"name":"result"}}],[11,"persist_noclobber","","Persist the temporary file at the target path iff no file exists there.",2,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathpersisterror"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"persisterror"}],"output":{"name":"namedtempfile"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"new","","Create a new named temporary file.",3,{"inputs":[],"output":{"generics":["namedtempfile"],"name":"result"}}],[11,"new_in","","Create a new named temporary file in the specified directory.",3,{"inputs":[{"name":"p"}],"output":{"generics":["namedtempfile"],"name":"result"}}],[11,"path","","Get the temporary file's path.",3,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"close","","Close and remove the temporary file.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"persist","","Persist the temporary file at the target path.",3,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["file","persisterror"],"name":"result"}}],[11,"persist_noclobber","","Persist the temporary file at the target path iff no file exists there.",3,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["file","persisterror"],"name":"result"}}],[11,"reopen","","Reopen the temporary file.",3,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"result"}}],[11,"as_file","","Get a reference to the underlying file.",3,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"as_file_mut","","Get a mutable reference to the underlying file.",3,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"into_file","","Convert the temporary file into a `std::fs::File`.",3,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"into_temp_path","","Closes the file, leaving only the temporary file path.",3,{"inputs":[{"name":"self"}],"output":{"name":"temppath"}}],[11,"read","","",3,null],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"seek","","",3,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64"],"name":"result"}}],[11,"as_raw_fd","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"builder"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"builder"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"builder"}],"output":{"name":"bool"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a new `Builder`.",4,{"inputs":[],"output":{"name":"self"}}],[11,"prefix","","Set a custom filename prefix.",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"suffix","","Set a custom filename suffix.",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"rand_bytes","","Set the number of random bytes.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"tempfile","","Create the named temporary file.",4,{"inputs":[{"name":"self"}],"output":{"generics":["namedtempfile"],"name":"result"}}],[11,"tempfile_in","","Create the named temporary file in the specified directory.",4,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["namedtempfile"],"name":"result"}}],[11,"tempdir","","Attempts to make a temporary directory inside of `env::temp_dir()` whose name will have the prefix, `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",4,{"inputs":[{"name":"self"}],"output":{"generics":["tempdir"],"name":"result"}}],[11,"tempdir_in","","Attempts to make a temporary directory inside of `dir`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",4,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["tempdir"],"name":"result"}}]],"paths":[[3,"PersistError"],[3,"TempDir"],[3,"TempPath"],[3,"NamedTempFile"],[3,"Builder"]]};
searchIndex["tera"] = {"doc":"Tera Tera is a template engine based on Jinja2 and the Django template language.","items":[[5,"from_value","tera","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"generics":["error"],"name":"result"}}],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"generics":["value","error"],"name":"result"}}],[3,"Map","","Represents a JSON key/value type.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[3,"Context","","The struct that holds the context of a template rendering.",null,null],[3,"Tera","","The main point of interaction in this library.",null,null],[3,"Error","","The Error type.",null,null],[12,"0","","The kind of the error.",1,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",2,null],[13,"Json","","An error happened while serializing JSON",2,null],[5,"escape_html","","Escape HTML following OWASP",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",1,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",1,null],[11,"with_chain","","",1,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[11,"kind","","",1,null],[11,"iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"chain_err","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"backtrace","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"extract_backtrace","","",1,{"inputs":[{"name":"error"}],"output":{"generics":["arc"],"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",1,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",1,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",1,{"inputs":[{"generics":["error"],"name":"box"},{"name":"k"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",1,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",1,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"bool"}}],[11,"new","","Initializes an empty context",3,{"inputs":[],"output":{"name":"context"}}],[11,"add","","Converts the `val` parameter to `Value` and insert it into the context",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":null}],[11,"insert","","Converts the `val` parameter to `Value` and insert it into the context",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":null}],[11,"extend","","Appends the data of the `source` parameter to `self`, overwriting existing keys. The source context will be dropped.",3,{"inputs":[{"name":"self"},{"name":"context"}],"output":null}],[11,"default","","",3,{"inputs":[],"output":{"name":"context"}}],[11,"serialize","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","","Create a new instance of Tera, containing all the parsed templates found in the `dir` glob",4,{"inputs":[{"name":"str"}],"output":{"generics":["tera"],"name":"result"}}],[11,"parse","","Create a new instance of Tera, containing all the parsed templates found in the `dir` glob  The difference with `Tera::new` is that it won't build the inheritance chains automatically  so you are free to modify the templates if you need to.  You will NOT get a working Tera instance using `Tera::parse`, you will need to call  `tera.build_inheritance_chains()` to make it usable",4,{"inputs":[{"name":"str"}],"output":{"generics":["tera"],"name":"result"}}],[11,"build_inheritance_chains","","We need to know the hierarchy of templates to be able to render multiple extends level This happens at compile-time to avoid checking it every time we want to render a template This also checks for soundness issues in the inheritance chains, such as missing template or circular extends. It also builds the block inheritance chain and detects when super() is called in a place where it can't possibly work",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"render","","Renders a Tera template given an object that implements `Serialize`.",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[11,"one_off","","Renders a one off template (for example a template coming from a user input) given a `Context` or an object that implements `Serialize`.",4,{"inputs":[{"name":"str"},{"name":"t"},{"name":"bool"}],"output":{"generics":["string"],"name":"result"}}],[11,"add_raw_template","","Add a single template to the Tera instance",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"add_raw_templates","","Add all the templates given to the Tera instance",4,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"add_template_file","","Add a single template from a path to the Tera instance. The default name for the template is the path given, but this can be renamed with the `name` parameter",4,{"inputs":[{"name":"self"},{"name":"p"},{"generics":["str"],"name":"option"}],"output":{"name":"result"}}],[11,"add_template_files","","Add several templates from paths to the Tera instance. The default name for the template is the path given, but this can be renamed with the second parameter of the tuple",4,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"register_filter","","Register a filter with Tera.",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"filterfn"}],"output":null}],[11,"register_tester","","Register a tester with Tera.",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"testerfn"}],"output":null}],[11,"register_global_function","","Register a global function with Tera.",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"globalfn"}],"output":null}],[11,"autoescape_on","","Select which suffix(es) to automatically do HTML escaping on, `[\".html\", \".htm\", \".xml\"]` by default.",4,{"inputs":[{"name":"self"},{"generics":["str"],"name":"vec"}],"output":null}],[11,"full_reload","","Re-parse all templates found in the glob given to Tera Use this when you are watching a directory and want to reload everything, for example when a file is added.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"extend","","Use that method when you want to add a given Tera instance templates/filters/testers  to your own. If a template/filter/tester with the same name already exists in your instance,  it will not be overwritten.",4,{"inputs":[{"name":"self"},{"name":"tera"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"tera"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[6,"GlobalFn","","The global function type definition",null,null],[6,"FilterFn","","The filter function type definition",null,null],[6,"TesterFn","","The tester function type definition",null,null],[14,"try_get_value","","Helper macro to get real values out of Value while retaining proper errors in filters",null,null],[14,"compile_templates","","Compile templates or exits process",null,null],[11,"new","","Makes a new empty Map.",5,{"inputs":[],"output":{"generics":["string","value"],"name":"map"}}],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",5,{"inputs":[{"name":"usize"}],"output":{"generics":["string","value"],"name":"map"}}],[11,"clear","","Clears the map, removing all values.",5,null],[11,"get","","Returns a reference to the value corresponding to the key.",5,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["value"],"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",5,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",5,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["value"],"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",5,{"inputs":[{"name":"self"},{"name":"string"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",5,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["value"],"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Gets an iterator over the entries of the map.",5,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",5,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",5,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",5,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Gets an iterator over mutable values of the map.",5,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"fmt","","Display a JSON value as a string.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"map"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"generics":["number"],"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"into_iter","","",5,null],[11,"deserialize","","",6,{"inputs":[{"name":"d"}],"output":{"generics":["number"],"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"generics":["value"],"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"generics":["map"],"name":"result"}}],[11,"deserialize_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_identifier","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i8","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i16","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i32","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i64","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u8","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u16","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u32","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u64","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_f32","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_f64","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_bool","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",6,null],[11,"deserialize_enum","","",6,null],[11,"deserialize_identifier","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"index_mut","","",5,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"from_iter","","",5,{"inputs":[{"name":"t"}],"output":{"generics":["string","value"],"name":"map"}}],[11,"from_iter","","Convert an iteratable type to a `Value`",0,{"inputs":[{"name":"i"}],"output":{"name":"value"}}],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"index","","",5,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["string","value"],"name":"map"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[11,"default","","",5,{"inputs":[],"output":{"generics":["string","value"],"name":"map"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"value"}}],[11,"extend","","",5,null],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"value"}}],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"number"}}],[11,"from","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"number"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"number"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"number"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"number"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"value"}}],[11,"from","","Convert map (with string keys) to `Value`",0,{"inputs":[{"generics":["string","value"],"name":"map"}],"output":{"name":"value"}}],[11,"from","","Convert string slice to `Value`",0,{"inputs":[{"name":"str"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"value"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"number"}}],[11,"from","","Convert a slice to `Value`",0,null],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"value"}}],[11,"from","","Convert boolean to `Value`",0,{"inputs":[{"name":"bool"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"value"}}],[11,"from","","",6,{"inputs":[{"name":"parsernumber"}],"output":{"name":"number"}}],[11,"from","","Convert copy-on-write string to `Value`",0,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"value"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"number"}}],[11,"from","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"number"}}],[11,"from","","Convert a `Vec` to `Value`",0,{"inputs":[{"name":"vec"}],"output":{"name":"value"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"number"}}],[11,"from","","Convert 32-bit floating point number to `Value`",0,{"inputs":[{"name":"f32"}],"output":{"name":"value"}}],[11,"from","","Convert 64-bit floating point number to `Value`",0,{"inputs":[{"name":"f64"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"value"}}],[11,"from","","Convert `String` to `Value`",0,{"inputs":[{"name":"string"}],"output":{"name":"value"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"number"}}],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",6,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",6,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",6,{"inputs":[{"name":"f64"}],"output":{"generics":["number"],"name":"option"}}],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["value"],"name":"option"}}],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["value"],"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["map"],"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["map"],"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pointer","","Looks up a value by a JSON Pointer.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}]],"paths":[[4,"Value"],[3,"Error"],[4,"ErrorKind"],[3,"Context"],[3,"Tera"],[3,"Map"],[3,"Number"]]};
searchIndex["termcolor"] = {"doc":"This crate provides a cross platform abstraction for writing colored text to a terminal. Colors are written using either ANSI escape sequences or by communicating with a Windows console. Much of this API was motivated by use inside command line applications, where colors or styles can be configured by the end user and/or the environment.","items":[[3,"StandardStream","termcolor","Satisfies `io::Write` and `WriteColor`, and supports optional coloring to either of the standard output streams, stdout and stderr.",null,null],[3,"StandardStreamLock","","`StandardStreamLock` is a locked reference to a `StandardStream`.",null,null],[3,"BufferWriter","","Writes colored buffers to stdout or stderr.",null,null],[3,"Buffer","","Write colored text to memory.",null,null],[3,"NoColor","","Satisfies `WriteColor` but ignores all color options.",null,null],[3,"Ansi","","Satisfies `WriteColor` using standard ANSI escape sequences.",null,null],[3,"ColorSpec","","A color specification.",null,null],[3,"ParseColorError","","An error from parsing an invalid color specification.",null,null],[4,"ColorChoice","","ColorChoice represents the color preferences of an end user.",null,null],[13,"Always","","Try very hard to emit colors. This includes emitting ANSI colors on Windows if the console API is unavailable.",0,null],[13,"AlwaysAnsi","","AlwaysAnsi is like Always, except it never tries to use anything other than emitting ANSI color codes.",0,null],[13,"Auto","","Try to use colors, but don't force the issue. If the console isn't available on Windows, or if TERM=dumb, for example, then don't use colors.",0,null],[13,"Never","","Never emit colors.",0,null],[4,"Color","","The set of available colors for the terminal foreground/background.",null,null],[13,"Black","","",1,null],[13,"Blue","","",1,null],[13,"Green","","",1,null],[13,"Red","","",1,null],[13,"Cyan","","",1,null],[13,"Magenta","","",1,null],[13,"Yellow","","",1,null],[13,"White","","",1,null],[13,"Ansi256","","",1,null],[13,"Rgb","","",1,null],[8,"WriteColor","","This trait describes the behavior of writers that support colored output.",null,null],[10,"supports_color","","Returns true if and only if the underlying writer supports colors.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_color","","Set the color settings of the writer.",2,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"result"}}],[10,"reset","","Reset the current color settings to their original settings.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"colorchoice"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"colorchoice"}],"output":{"name":"bool"}}],[11,"stdout","","Create a new `StandardStream` with the given color preferences that writes to standard output.",3,{"inputs":[{"name":"colorchoice"}],"output":{"name":"standardstream"}}],[11,"stderr","","Create a new `StandardStream` with the given color preferences that writes to standard error.",3,{"inputs":[{"name":"colorchoice"}],"output":{"name":"standardstream"}}],[11,"lock","","Lock the underlying writer.",3,{"inputs":[{"name":"self"}],"output":{"name":"standardstreamlock"}}],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"supports_color","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_color","","",3,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"result"}}],[11,"reset","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",4,null],[11,"flush","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"supports_color","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_color","","",4,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"result"}}],[11,"reset","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"stdout","","Create a new `BufferWriter` that writes to stdout with the given color preferences.",5,{"inputs":[{"name":"colorchoice"}],"output":{"name":"bufferwriter"}}],[11,"stderr","","Create a new `BufferWriter` that writes to stderr with the given color preferences.",5,{"inputs":[{"name":"colorchoice"}],"output":{"name":"bufferwriter"}}],[11,"separator","","If set, the separator given is printed between buffers. By default, no separator is printed.",5,{"inputs":[{"name":"self"},{"generics":["vec"],"name":"option"}],"output":null}],[11,"buffer","","Creates a new `Buffer` with the current color preferences.",5,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"print","","Prints the contents of the given buffer.",5,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"no_color","","Create a buffer that drops all color information.",6,{"inputs":[],"output":{"name":"buffer"}}],[11,"ansi","","Create a buffer that uses ANSI escape sequences.",6,{"inputs":[],"output":{"name":"buffer"}}],[11,"is_empty","","Returns true if and only if this buffer is empty.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of this buffer in bytes.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Clears this buffer.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"into_inner","","Consume this buffer and return the underlying raw data.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"as_slice","","Return the underlying data of the buffer.",6,null],[11,"as_mut_slice","","Return the underlying data of the buffer as a mutable slice.",6,null],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"supports_color","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_color","","",6,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"result"}}],[11,"reset","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a new writer that satisfies `WriteColor` but drops all color information.",7,{"inputs":[{"name":"w"}],"output":{"name":"nocolor"}}],[11,"into_inner","","Consume this `NoColor` value and return the inner writer.",7,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_ref","","Return a reference to the inner writer.",7,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Return a mutable reference to the inner writer.",7,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"supports_color","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_color","","",7,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"result"}}],[11,"reset","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a new writer that satisfies `WriteColor` using standard ANSI escape sequences.",8,{"inputs":[{"name":"w"}],"output":{"name":"ansi"}}],[11,"into_inner","","Consume this `Ansi` value and return the inner writer.",8,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_ref","","Return a reference to the inner writer.",8,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Return a mutable reference to the inner writer.",8,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"supports_color","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_color","","",8,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"result"}}],[11,"reset","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"colorspec"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"colorspec"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"bool"}}],[11,"new","","Create a new color specification that has no colors or styles.",9,{"inputs":[],"output":{"name":"colorspec"}}],[11,"fg","","Get the foreground color.",9,{"inputs":[{"name":"self"}],"output":{"generics":["color"],"name":"option"}}],[11,"set_fg","","Set the foreground color.",9,{"inputs":[{"name":"self"},{"generics":["color"],"name":"option"}],"output":{"name":"colorspec"}}],[11,"bg","","Get the background color.",9,{"inputs":[{"name":"self"}],"output":{"generics":["color"],"name":"option"}}],[11,"set_bg","","Set the background color.",9,{"inputs":[{"name":"self"},{"generics":["color"],"name":"option"}],"output":{"name":"colorspec"}}],[11,"bold","","Get whether this is bold or not.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_bold","","Set whether the text is bolded or not.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"colorspec"}}],[11,"underline","","Get whether this is underline or not.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_underline","","Set whether the text is underlined or not.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"colorspec"}}],[11,"intense","","Get whether this is intense or not.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_intense","","Set whether the text is intense or not.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"colorspec"}}],[11,"is_none","","Returns true if this color specification has no colors or styles.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears this color specification so that it has no color/style settings.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"parsecolorerror"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"parsecolorerror"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"parsecolorerror"}],"output":{"name":"bool"}}],[11,"invalid","","Return the string that couldn't be parsed as a valid color.",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["color","parsecolorerror"],"name":"result"}}]],"paths":[[4,"ColorChoice"],[4,"Color"],[8,"WriteColor"],[3,"StandardStream"],[3,"StandardStreamLock"],[3,"BufferWriter"],[3,"Buffer"],[3,"NoColor"],[3,"Ansi"],[3,"ColorSpec"],[3,"ParseColorError"]]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,{"inputs":[{"name":"self"}],"output":{"name":"cacheditermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cachedintoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["tm","parseerror"],"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"generics":["string","parseerror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"generics":["duration","outofrangeerror"],"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"generics":["stdduration","outofrangeerror"],"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["tmfmt","parseerror"],"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["tokio"] = {"doc":"A runtime for writing reliable, asynchronous, and slim applications.","items":[[0,"executor","tokio","Task execution utilities.",null,null],[8,"Executor","tokio::executor","A value that executes futures.",null,null],[10,"spawn","","Spawns a future object to run on this executor.",0,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",0,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",null,null],[3,"SpawnError","","Errors returned by `Executor::spawn`.",null,null],[3,"Spawn","","Return value from the `spawn` function.",null,null],[5,"spawn","","Spawns a future on the default executor.",null,{"inputs":[{"name":"f"}],"output":{"name":"spawn"}}],[0,"current_thread","","Execute many tasks concurrently on the current thread.",null,null],[3,"CurrentThread","tokio::executor::current_thread","Executes tasks on the current thread",null,null],[3,"TaskExecutor","","Executes futures on the current thread.",null,null],[3,"Turn","","Returned by the `turn` function.",null,null],[3,"Entered","","A `CurrentThread` instance bound to a supplied execution conext.",null,null],[3,"RunError","","Error returned by the `run` function.",null,null],[3,"RunTimeoutError","","Error returned by the `run_timeout` function.",null,null],[3,"TurnError","","Error returned by the `turn` function.",null,null],[3,"BlockError","","Error returned by the `block_on` function.",null,null],[5,"block_on_all","","Run the executor bootstrapping the execution with the provided future.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"spawn","","Executes a future on the current thread.",null,{"inputs":[{"name":"f"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"taskexecutor"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"has_polled","","`true` if any futures were polled at all and `false` otherwise.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new instance of `CurrentThread`.",7,{"inputs":[],"output":{"name":"self"}}],[11,"new_with_park","","Create a new instance of `CurrentThread` backed by the given park handle.",7,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"is_idle","","Returns `true` if the executor is currently idle.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spawn","","Spawn the future on the executor.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"block_on","","Synchronously waits for the provided `future` to complete.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["blockerror"],"name":"result"}}],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",7,{"inputs":[{"name":"self"}],"output":{"generics":["runerror"],"name":"result"}}],[11,"run_timeout","","Run the executor to completion, blocking the thread until all spawned futures have completed or `duration` time has elapsed.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["runtimeouterror"],"name":"result"}}],[11,"turn","","Perform a single iteration of the event loop.",7,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn","turnerror"],"name":"result"}}],[11,"enter","","Bind `CurrentThread` instance with an execution context.",7,{"inputs":[{"name":"self"},{"name":"enter"}],"output":{"name":"entered"}}],[11,"get_park","","Returns a reference to the underlying `Park` instance.",7,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",7,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"spawn","","",7,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"spawn","","Spawn the future on the executor.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"block_on","","Synchronously waits for the provided `future` to complete.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["blockerror"],"name":"result"}}],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",8,{"inputs":[{"name":"self"}],"output":{"generics":["runerror"],"name":"result"}}],[11,"run_timeout","","Run the executor to completion, blocking the thread until all spawned futures have completed or `duration` time has elapsed.",8,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["runtimeouterror"],"name":"result"}}],[11,"turn","","Perform a single iteration of the event loop.",8,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn","turnerror"],"name":"result"}}],[11,"get_park","","Returns a reference to the underlying `Park` instance.",8,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",8,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","Returns an executor that executes futures on the current thread.",1,{"inputs":[],"output":{"name":"taskexecutor"}}],[11,"spawn_local","","Spawn a future onto the current `CurrentThread` instance.",1,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"spawn","","",1,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"execute","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"is_timeout","","Returns `true` if the error was caused by the operation timeing out.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",4,{"inputs":[{"name":"entererror"}],"output":{"name":"self"}}],[11,"into_inner","","Returns the error yielded by the future being blocked on",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"entererror"}],"output":{"name":"self"}}],[0,"thread_pool","tokio::executor","Maintains a pool of threads across which the set of spawned tasks are executed.",null,null],[3,"Builder","tokio::executor::thread_pool","Builds a thread pool with custom configuration values.",null,null],[3,"Sender","","Submit futures to the associated thread pool for execution.",null,null],[3,"Shutdown","","Future that resolves when the thread pool is shutdown.",null,null],[3,"ThreadPool","","Work-stealing based thread pool for executing futures.",null,null],[11,"fmt","tokio::executor","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_future","","",9,null],[0,"fs","tokio","Asynchronous filesystem manipulation operations.",null,null],[0,"file","tokio::fs","Types for working with [`File`].",null,null],[3,"File","tokio::fs::file","A reference to an open file on the filesystem.",null,null],[3,"OpenFuture","","Future returned by `File::open` and resolves to a `File` instance.",null,null],[3,"CreateFuture","","Future returned by `File::create` and resolves to a `File` instance.",null,null],[3,"File","tokio::fs","A reference to an open file on the filesystem.",null,null],[0,"net","tokio","TCP/UDP bindings for `tokio`.",null,null],[3,"TcpStream","tokio::net","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"ConnectFuture","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",null,null],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",null,null],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",null,null],[0,"reactor","tokio","Event loop that drives Tokio I/O resources.",null,null],[3,"Reactor","tokio::reactor","The core reactor, or event loop.",null,null],[3,"Handle","","A reference to a reactor.",null,null],[3,"Background","","Handle to the reactor running on a background thread.",null,null],[3,"Turn","","Return value from the `turn` method on `Reactor`.",null,null],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",null,null],[3,"PollEvented2","","Associates an I/O resource that implements the [`std::Read`] and / or [`std::Write`] traits with the reactor that drives it.",null,null],[0,"runtime","tokio","A batteries included runtime for applications using Tokio.",null,null],[3,"Builder","tokio::runtime","Builds Tokio Runtime with custom configuration values.",null,null],[3,"Shutdown","","A future that resolves when the Tokio `Runtime` is shut down.",null,null],[3,"TaskExecutor","","Executes futures on the runtime",null,null],[3,"Runtime","","Handle to the Tokio runtime.",null,null],[5,"run","","Start the Tokio runtime using the supplied future to bootstrap execution.",null,{"inputs":[{"name":"f"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new runtime builder initialized with default configuration values.",10,{"inputs":[],"output":{"name":"builder"}}],[11,"threadpool_builder","","Set builder to set up the thread pool instance.",10,{"inputs":[{"name":"self"},{"name":"threadpoolbuilder"}],"output":{"name":"self"}}],[11,"build","","Create the configured `Runtime`.",10,{"inputs":[{"name":"self"}],"output":{"generics":["runtime"],"name":"result"}}],[0,"current_thread","","A runtime implementation that runs everything on the current thread.",null,null],[3,"Runtime","tokio::runtime::current_thread","Single-threaded runtime provides a way to start reactor and executor on the current thread.",null,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new runtime initialized with default configuration values.",11,{"inputs":[],"output":{"generics":["runtime"],"name":"result"}}],[11,"spawn","","Spawn a future onto the single-threaded Tokio runtime.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"block_on","","Runs the provided future, blocking the current thread until the future completes.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",11,{"inputs":[{"name":"self"}],"output":{"generics":["runerror"],"name":"result"}}],[11,"poll","tokio::runtime","",12,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"taskexecutor"}}],[11,"spawn","","Spawn a future onto the Tokio runtime.",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"execute","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"spawn","","",13,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new runtime instance with default configuration values.",14,{"inputs":[],"output":{"name":"result"}}],[11,"reactor","","Return a reference to the reactor handle for this runtime instance.",14,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"executor","","Return a handle to the runtime's executor.",14,{"inputs":[{"name":"self"}],"output":{"name":"taskexecutor"}}],[11,"spawn","","Spawn a future onto the Tokio runtime.",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"shutdown_on_idle","","Signals the runtime to shutdown once it becomes idle.",14,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Signals the runtime to shutdown immediately.",14,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[0,"timer","tokio","Utilities for tracking time.",null,null],[3,"Deadline","tokio::timer","Allows a given `Future` to execute until the specified deadline.",null,null],[3,"DeadlineError","","Error returned by `Deadline` future.",null,null],[3,"Error","","Errors encountered by the timer implementation.",null,null],[3,"Interval","","A stream representing notifications at fixed interval",null,null],[3,"Delay","","A future that completes at a specified instant in time.",null,null],[0,"util","tokio","Utilities for working with Tokio.",null,null],[8,"FutureExt","tokio::util","An extension trait for `Future` that provides a variety of convenient combinator functions.",null,null],[11,"deadline","","Creates a new future which allows `self` until `deadline`.",15,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"deadline"}}],[0,"io","tokio","Asynchronous I/O.",null,null],[8,"AsyncRead","tokio::io","Read bytes asynchronously.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",16,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",16,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",16,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",16,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",16,null],[8,"AsyncWrite","","Writes bytes asynchronously.",null,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",17,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",17,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",17,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",17,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[3,"Stdout","","A handle to the standard output stream of a process.",null,null],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"copy"}}],[3,"Copy","","A future which will copy all data from a reader into a writer.",null,null],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"flush"}}],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",null,{"inputs":[{"name":"a"}],"output":{"name":"lines"}}],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",null,null],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"readexact"}}],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",null,{"inputs":[{"name":"a"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readtoend"}}],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",null,{"inputs":[{"name":"a"},{"name":"u8"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readuntil"}}],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",null,null],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",null,null],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"shutdown"}}],[3,"Shutdown","","A future used to fully shutdown an I/O object.",null,null],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"writeall"}}],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",null,null],[3,"Error","","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",18,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",18,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",18,null],[13,"ConnectionReset","","The connection was reset by the remote server.",18,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",18,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",18,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",18,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",18,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",18,null],[13,"AlreadyExists","","An entity already exists, often a file.",18,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",18,null],[13,"InvalidInput","","A parameter was incorrect.",18,null],[13,"InvalidData","","Data not valid for the operation were encountered.",18,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",18,null],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",18,null],[13,"Interrupted","","This operation was interrupted.",18,null],[13,"Other","","Any I/O error not part of this list.",18,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",18,null],[6,"Result","","A specialized `Result` type for I/O operations.",null,null],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",19,null],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",19,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",19,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",19,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",19,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",19,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an [`Iterator`] over [`char`]s.",19,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",20,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",20,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",20,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",20,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"prelude","tokio","A \"prelude\" for users of the `tokio` crate.",null,null],[8,"AsyncRead","tokio::prelude","Read bytes asynchronously.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",16,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",16,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",16,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",16,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",16,null],[8,"AsyncWrite","","Writes bytes asynchronously.",null,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",17,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",17,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",17,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",17,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",19,null],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",19,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",19,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",19,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",19,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",19,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an [`Iterator`] over [`char`]s.",19,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",20,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",20,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",20,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",20,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",21,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",21,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",21,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Block the current thread until this future is resolved.",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",21,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",21,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",21,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",21,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",21,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",21,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",21,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",21,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",21,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",21,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[0,"future","","Futures",null,null],[8,"Future","tokio::prelude::future","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",21,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",21,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",21,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Block the current thread until this future is resolved.",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",21,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",21,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",21,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",21,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",21,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",21,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",21,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",21,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",21,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",21,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",22,null],[16,"Item","","The item that the future may resolve with.",22,null],[16,"Error","","The error that the future may resolve with.",22,null],[10,"into_future","","Consumes this object and produces a future.",22,null],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",null,null],[16,"Future","","The future for the conversion.",23,null],[16,"Error","","Possible errors during conversion.",23,null],[10,"future_from","","Consume the given value, beginning the conversion.",23,null],[8,"Executor","","A trait for types which can spawn fresh futures.",null,null],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",null,null],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",null,null],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",25,null],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",25,null],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",null,null],[13,"A","","First branch of the type",26,null],[13,"B","","Second branch of the type",26,null],[3,"Empty","","A future which is never resolved.",null,null],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",null,null],[3,"Ok","","A future representing a value that is immediately ready.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",null,null],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectall"}}],[5,"err","","Creates a \"leaf future\" from an immediate value of a failed computation.",null,{"inputs":[{"name":"e"}],"output":{"name":"futureresult"}}],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",null,null],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",null,null],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",null,null],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",null,{"inputs":[{"name":"f"}],"output":{"name":"lazy"}}],[5,"finished","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",null,{"inputs":[{"name":"t"}],"output":{"name":"futureresult"}}],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",null,null],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",null,null],[4,"Loop","","The status of a `loop_fn` loop.",null,null],[13,"Break","","Indicates that the loop has completed with output `T`.",27,null],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",27,null],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",null,null],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",null,{"inputs":[],"output":{"name":"empty"}}],[3,"PollFn","","A future which adapts a function returning `Poll`.",null,null],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",null,{"inputs":[{"name":"i"}],"output":{"name":"joinall"}}],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectok"}}],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",null,null],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",null,null],[5,"done","","Creates a new \"leaf future\" which will resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",null,null],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",null,{"inputs":[{"name":"s"},{"name":"f"}],"output":{"name":"loopfn"}}],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",null,null],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",null,null],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",null,null],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",null,null],[3,"LoopFn","","A future implementing a tail-recursive loop.",null,null],[3,"Inspect","","Do something with the item of a future, passing it on.",null,null],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",null,null],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",null,null],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",null,null],[8,"Stream","tokio::prelude","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",28,null],[16,"Error","","The type of error this stream may generate.",28,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",28,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",28,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"into_future","","Converts this stream into a `Future`.",28,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",28,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",28,{"inputs":[{"name":"self"}],"output":{"name":"concat2"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",28,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",28,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",28,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",28,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",28,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",28,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",28,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",28,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",28,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",28,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",28,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",28,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[0,"stream","","Asynchronous streams",null,null],[0,"futures_unordered","tokio::prelude::stream","An unbounded set of futures.",null,null],[3,"FuturesUnordered","tokio::prelude::stream::futures_unordered","An unbounded set of futures.",null,null],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",null,null],[8,"Stream","tokio::prelude::stream","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",28,null],[16,"Error","","The type of error this stream may generate.",28,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",28,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",28,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"into_future","","Converts this stream into a `Future`.",28,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",28,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",28,{"inputs":[{"name":"self"}],"output":{"name":"concat2"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",28,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",28,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",28,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",28,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",28,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",28,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",28,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",28,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",28,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",28,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",28,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",28,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresunordered"}}],[3,"InspectErr","","Do something with the error of a stream, passing it on.",null,null],[3,"Empty","","A stream which contains no elements.",null,null],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",null,null],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",null,null],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",null,null],[3,"FuturesUnordered","","An unbounded set of futures.",null,null],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",null,null],[3,"Take","","A stream combinator which returns a maximum number of elements.",null,null],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",null,null],[12,"0","","",29,null],[12,"1","","",29,null],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",null,null],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",null,null],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iterresult"}}],[3,"SendError","","Error type for sending, used when the receiving end of the channel is dropped",null,null],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",null,null],[3,"Chain","","An adapter for chaining the output of two streams.",null,null],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",null,null],[3,"Chunks","","An adaptor that chunks up elements in a vector.",null,null],[3,"FutureSender","","Future returned by `Sender::send`.",null,null],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",null,null],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",null,null],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iter"}}],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",null,null],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",null,null],[13,"First","","An item from the first stream",30,null],[13,"Second","","An item from the second stream",30,null],[13,"Both","","Items from both streams",30,null],[3,"Collect","","A future which collects all of the values of a stream into a vector.",null,null],[3,"Unfold","","A stream which creates futures, polls them and return their result",null,null],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",null,null],[3,"Select","","An adapter for merging the output of two streams.",null,null],[3,"PollFn","","A stream which adapts a function returning `Poll`.",null,null],[5,"empty","","Creates a stream which contains no elements.",null,{"inputs":[],"output":{"name":"empty"}}],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",null,null],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresordered"}}],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait.",null,null],[5,"repeat","","Create a stream which produces the same item repeatedly.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"i"}],"output":{"name":"iterok"}}],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"SplitSink","","A `Sink` part of the split pair",null,null],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"FromErr","","A stream combinator to change the error type of a stream.",null,null],[3,"Once","","A stream which emits single element and then EOF.",null,null],[3,"Zip","","An adapter for merging the output of two streams.",null,null],[3,"Sender","","The transmission end of a channel which is used to send values.",null,null],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"unfold"}}],[3,"Merge","","An adapter for merging the output of two streams.",null,null],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",null,null],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",null,null],[3,"Inspect","","Do something with the items of a stream, passing it on.",null,null],[3,"Repeat","","Stream that produces the same element repeatedly.",null,null],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",null,null],[3,"SplitStream","","A `Stream` part of the split pair",null,null],[3,"FuturesOrdered","","An unbounded queue of futures.",null,null],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"Peekable","","A `Stream` that implements a `peek` method.",null,null],[5,"once","","Creates a stream of single element",null,{"inputs":[{"name":"result"}],"output":{"name":"once"}}],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",null,null],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",null,null],[8,"Sink","tokio::prelude","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",31,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",31,null],[10,"start_send","","Begin the process of sending a value to the sink.",31,null],[10,"poll_complete","","Flush all output from this sink, if necessary.",31,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",31,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Creates a new object which will produce a synchronous sink.",31,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"with","","Composes a function in front of the sink.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"with"}}],[11,"with_flat_map","","Composes a function in front of the sink.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"withflatmap"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"sinkmaperr"}}],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",31,{"inputs":[{"name":"self"}],"output":{"name":"sinkfromerr"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"fanout","","Fanout items to multiple sinks.",31,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"fanout"}}],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",31,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",31,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",31,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"sendall"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",22,null],[16,"Item","","The item that the future may resolve with.",22,null],[16,"Error","","The error that the future may resolve with.",22,null],[10,"into_future","","Consumes this object and produces a future.",22,null],[4,"Async","","Return type of future, indicating whether a value is ready or not.",null,null],[13,"Ready","","Represents that a value is immediately ready.",32,null],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",32,null],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",null,null],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",33,null],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",33,null],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",null,null],[0,"task","","Tasks used to drive a future computation",null,null],[3,"TaskRc","tokio::prelude::task","A reference to a piece of data that's accessible only within a specific `Task`.",null,null],[3,"Task","","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",null,null],[3,"AtomicTask","","A synchronization primitive for task notification.",null,null],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",null,null],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",34,null],[5,"init","","Initialize the `futures` task system.",null,null],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",null,{"inputs":[],"output":{"name":"task"}}],[5,"spawn","","Spawns a future or stream, returning it and the new task responsible for running it to completion.",null,{"inputs":[{"name":"t"}],"output":{"name":"spawn"}}],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",null,null],[10,"insert","","Insert the given ID into the set",35,null],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",null,{"inputs":[{"name":"unparkevent"},{"name":"f"}],"output":{"name":"r"}}],[3,"Run","","Units of work submitted to an `Executor`, currently only created internally.",null,null],[3,"Spawn","","Representation of a spawned future/stream.",null,null],[8,"Executor","","A trait representing requests to poll futures.",null,null],[10,"execute","","Requests that `Run` is executed soon on the given executor.",36,null],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",null,null],[3,"LocalKey","","A key for task-local data stored in a future's task.",null,null],[8,"FutureExt","tokio::prelude","An extension trait for `Future` that provides a variety of convenient combinator functions.",null,null],[11,"deadline","tokio::util","Creates a new future which allows `self` until `deadline`.",15,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"deadline"}}],[11,"eq","tokio::io","",18,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"hash","","",18,null],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"ordering"}}],[11,"from","","",37,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"from","","",37,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"from","","",37,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"description","","",37,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll","tokio::prelude::future","",38,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",45,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",47,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",58,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",59,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",61,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",63,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",64,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",65,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",66,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",69,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",70,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",71,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","tokio::prelude::stream","",72,null],[11,"poll_complete","","",72,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",72,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",73,null],[11,"poll_complete","","",73,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",73,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",74,null],[11,"poll_complete","","",74,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",74,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",75,null],[11,"poll_complete","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",76,null],[11,"poll_complete","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",77,null],[11,"poll_complete","","",77,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",77,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",78,null],[11,"poll_complete","","",78,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",78,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",79,null],[11,"poll_complete","","",79,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",79,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",80,null],[11,"poll_complete","","",80,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",80,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",81,null],[11,"poll_complete","","",81,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",81,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",82,null],[11,"poll_complete","","",82,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",82,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",83,null],[11,"poll_complete","","",83,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",83,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",84,null],[11,"poll_complete","","",84,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",84,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",85,null],[11,"poll_complete","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",86,null],[11,"poll_complete","","",86,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",86,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",87,null],[11,"poll_complete","","",87,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",87,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",88,null],[11,"poll_complete","","",88,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",88,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",89,null],[11,"poll_complete","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",90,null],[11,"poll_complete","","",90,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",90,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",91,null],[11,"poll_complete","","",91,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",91,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",92,null],[11,"poll_complete","","",92,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",92,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"eq","tokio::prelude","",32,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"eq","tokio::prelude::future","",25,{"inputs":[{"name":"self"},{"name":"executeerrorkind"}],"output":{"name":"bool"}}],[11,"deref","","",93,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",94,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"poll","tokio::prelude::stream","",95,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",74,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",96,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",97,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",82,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",99,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",100,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",101,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",102,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",103,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",72,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",86,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",90,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",104,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",88,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",87,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",105,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",78,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",81,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",106,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",83,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",107,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",77,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",84,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",92,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",108,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",109,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",110,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",111,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",80,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",112,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",113,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",91,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",73,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"from","tokio::prelude","",32,{"inputs":[{"name":"t"}],"output":{"name":"async"}}],[11,"from","tokio::prelude::future","",54,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[11,"fmt","tokio::prelude::stream","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next","tokio::prelude::stream::futures_unordered","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next","tokio::prelude::stream","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","tokio::prelude::future","",67,null],[11,"drop","tokio::prelude::stream","",110,null],[11,"default","tokio::prelude::task","",117,{"inputs":[],"output":{"name":"atomictask"}}],[11,"description","tokio::prelude::stream","",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","tokio::prelude::future","",94,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",94,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","tokio::prelude::stream","",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","tokio::prelude::future","",25,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"clone","tokio::prelude::task","",118,{"inputs":[{"name":"self"}],"output":{"name":"task"}}],[11,"clone","tokio::prelude","",32,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"clone","tokio::prelude::future","",94,{"inputs":[{"name":"self"}],"output":{"name":"sharederror"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"futureresult"}}],[11,"clone","tokio::prelude","",33,{"inputs":[{"name":"self"}],"output":{"name":"asyncsink"}}],[11,"clone","tokio::prelude::future","",67,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"shareditem"}}],[11,"clone","tokio::prelude::task","",119,{"inputs":[{"name":"self"}],"output":{"name":"unparkevent"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"taskrc"}}],[11,"fmt","tokio::prelude::stream","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream::futures_unordered","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_iter","","",106,{"inputs":[{"name":"t"}],"output":{"name":"futuresordered"}}],[11,"from_iter","","",110,{"inputs":[{"name":"t"}],"output":{"name":"futuresunordered"}}],[11,"fmt","tokio::io","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","","",130,null],[11,"flush","","",130,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","",135,null],[11,"shutdown","","",130,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write_buf","","",130,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"read_buf","","",135,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",133,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",134,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",127,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",126,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",131,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",129,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",128,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",132,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"fmt","tokio::executor","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"defaultexecutor"}}],[11,"spawn","","",137,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"shutdown","tokio::fs","",138,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"shutdown","tokio::io","",139,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"shutdown","","",140,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"fmt","tokio::fs::file","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::io","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::fs","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::io","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"prepare_uninitialized_buffer","","",143,null],[11,"prepare_uninitialized_buffer","tokio::fs","",138,null],[11,"write","","",138,null],[11,"flush","","",138,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","tokio::io","",140,null],[11,"flush","","",140,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","","",139,null],[11,"flush","","",139,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","tokio::fs","",138,null],[11,"read","tokio::io","",143,null],[11,"poll","tokio::fs::file","",142,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",141,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"drop","tokio::fs","",138,null],[11,"fmt","tokio::executor::thread_pool","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"execute","","",146,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"drop","","",145,null],[11,"status","","",146,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"spawn","","",146,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"poll","","",144,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"fmt","tokio::reactor","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","","",151,null],[11,"flush","","",151,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"read","","",151,null],[11,"default","","",152,{"inputs":[],"output":{"name":"handle"}}],[11,"drop","","",150,null],[11,"drop","","",151,null],[11,"shutdown","","",151,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"unpark","","",152,null],[11,"unpark","","",153,null],[11,"park","","",153,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"park_timeout","","",153,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::timer","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll","","",154,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"description","","",155,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",156,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"poll","","",157,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",158,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::net","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"as_raw_fd","","",161,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",160,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"write","","",160,null],[11,"flush","","",160,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","",160,null],[11,"shutdown","","",160,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write_buf","","",160,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"prepare_uninitialized_buffer","","",160,null],[11,"read_buf","","",160,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",159,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",162,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"as_raw_fd","","",166,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"poll","","",163,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",165,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",164,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"start_send","","",163,null],[11,"poll_complete","","",163,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",163,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"current","tokio::executor","Returns a handle to the default executor for the current context.",137,{"inputs":[],"output":{"name":"defaultexecutor"}}],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",136,{"inputs":[],"output":{"name":"spawnerror"}}],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",136,{"inputs":[],"output":{"name":"spawnerror"}}],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",136,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",136,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","tokio::executor::thread_pool","Returns a new thread pool builder initialized with default configuration values.",147,{"inputs":[],"output":{"name":"builder"}}],[11,"pool_size","","Set the maximum number of worker threads for the thread pool instance.",147,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"max_blocking","","Set the maximum number of concurrent blocking sections.",147,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"keep_alive","","Set the worker thread keep alive duration",147,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"builder"}}],[11,"name_prefix","","Set name prefix of threads spawned by the scheduler",147,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"builder"}}],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",147,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"around_worker","","Execute function `f` on each worker thread.",147,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"builder"}}],[11,"after_start","","Execute function `f` after each thread is started but before it starts doing work.",147,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"builder"}}],[11,"before_stop","","Execute function `f` before each thread stops.",147,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"builder"}}],[11,"custom_park","","Customize the `park` instance used by each worker thread.",147,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"builder"}}],[11,"build","","Create the configured `ThreadPool`.",147,{"inputs":[{"name":"self"}],"output":{"name":"threadpool"}}],[11,"spawn","","Spawn a future onto the thread pool",146,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"new","","Create a new `ThreadPool` with default values.",145,{"inputs":[],"output":{"name":"threadpool"}}],[11,"spawn","","Spawn a future onto the thread pool.",145,null],[11,"sender","","Return a reference to the sender handle",145,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"sender_mut","","Return a mutable reference to the sender handle",145,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"shutdown_on_idle","","Shutdown the pool once it becomes idle.",145,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown","","Shutdown the pool",145,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Shutdown the pool immediately",145,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"open","tokio::fs","Attempts to open a file in read-only mode.",138,{"inputs":[{"name":"p"}],"output":{"name":"openfuture"}}],[11,"create","","Opens a file in write-only mode.",138,{"inputs":[{"name":"p"}],"output":{"name":"createfuture"}}],[11,"poll_seek","","Seek to an offset, in bytes, in a stream.",138,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_sync_all","","Attempts to sync all OS-internal metadata to disk.",138,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_sync_data","","This function is similar to `poll_sync_all`, except that it may not synchronize file metadata to the filesystem.",138,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_set_len","","Truncates or extends the underlying file, updating the size of this file to become size.",138,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_metadata","","Queries metadata about the underlying file.",138,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_try_clone","","Create a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both File instances simultaneously.",138,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_set_permissions","","Changes the permissions on the underlying file.",138,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"connect","tokio::net","Create a new TCP stream connected to the specified address.",160,{"inputs":[{"name":"socketaddr"}],"output":{"name":"connectfuture"}}],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",160,{"inputs":[{"name":"tcpstream"},{"name":"handle"}],"output":{"generics":["tcpstream","error"],"name":"result"}}],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",160,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"connectfuture"}}],[11,"poll_read_ready","","Check the TCP stream's read readiness state.",160,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_write_ready","","Check the TCP stream's write readiness state.",160,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",160,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"peer_addr","","Returns the remote address that this stream is connected to.",160,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"poll_peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",160,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",160,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"generics":["error"],"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",160,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",160,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",160,{"inputs":[{"name":"self"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",160,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",160,{"inputs":[{"name":"self"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",160,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",160,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",160,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",160,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",160,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",160,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",160,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"bind","","Create a new TCP listener associated with this event loop.",161,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcplistener","error"],"name":"result"}}],[11,"poll_accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",161,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",161,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",161,{"inputs":[{"name":"tcplistener"},{"name":"handle"}],"output":{"generics":["tcplistener","error"],"name":"result"}}],[11,"local_addr","","Returns the local address that this listener is bound to.",161,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",161,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",161,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",161,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",166,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["udpsocket","error"],"name":"result"}}],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",166,{"inputs":[{"name":"udpsocket"},{"name":"handle"}],"output":{"generics":["udpsocket","error"],"name":"result"}}],[11,"local_addr","","Returns the local address that this socket is bound to.",166,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",166,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll_send","","Sends data on the socket to the remote address to which it is connected.",166,null],[11,"poll_recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",166,null],[11,"poll_send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",166,null],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",166,{"inputs":[{"name":"self"},{"name":"t"},{"name":"socketaddr"}],"output":{"name":"senddgram"}}],[11,"poll_recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",166,null],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",166,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"recvdgram"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",166,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",166,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",166,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",166,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",166,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",166,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",166,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",166,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",166,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",166,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",166,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"generics":["error"],"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",166,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",166,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"generics":["error"],"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",166,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Create a new `UdpFramed` backed by the given socket and codec.",163,{"inputs":[{"name":"udpsocket"},{"name":"c"}],"output":{"name":"udpframed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",163,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",163,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",163,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"new","tokio::reactor","Creates a new event loop, returning any error that happened during the creation.",153,{"inputs":[],"output":{"generics":["reactor","error"],"name":"result"}}],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",153,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",153,{"inputs":[{"name":"self"}],"output":{"generics":["setfallbackerror"],"name":"result"}}],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",153,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn","error"],"name":"result"}}],[11,"is_idle","","Returns true if the reactor is currently idle.",153,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"background","","Run this reactor on a background thread.",153,{"inputs":[{"name":"self"}],"output":{"generics":["background","error"],"name":"result"}}],[11,"current","","Returns a handle to the current reactor.",152,{"inputs":[],"output":{"name":"handle"}}],[11,"handle","","Returns a reference to the reactor handle.",150,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",150,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Shutdown the reactor immediately",150,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"forget","","Run the reactor on its thread until the process terminates.",150,null],[11,"new","","Create a new `Registration`.",148,{"inputs":[],"output":{"name":"registration"}}],[11,"register","","Register the I/O resource with the default reactor.",148,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"deregister","","Deregister the I/O resource from the reactor it is associatd with.",148,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"register_with","","Register the I/O resource with the specified reactor.",148,{"inputs":[{"name":"self"},{"name":"t"},{"name":"handle"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",148,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"take_read_ready","","Consume any pending read readiness event.",148,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",148,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"take_write_ready","","Consume any pending write readiness event.",148,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",151,{"inputs":[{"name":"e"}],"output":{"name":"pollevented"}}],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",151,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"generics":["pollevented","error"],"name":"result"}}],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",151,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",151,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"into_inner","","Consumes self, returning the inner I/O object",151,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",151,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",151,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",151,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",151,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","tokio::timer","Create a new `Deadline` that completes when `future` completes or when `deadline` is reached.",157,{"inputs":[{"name":"t"},{"name":"instant"}],"output":{"name":"deadline"}}],[11,"get_ref","","Gets a reference to the underlying future in this deadline.",157,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying future in this deadline.",157,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this deadline, returning the underlying future.",157,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"inner","","Create a new `DeadlineError` representing the inner future completing with `Err`.",155,{"inputs":[{"name":"t"}],"output":{"name":"deadlineerror"}}],[11,"is_inner","","Returns `true` if the error was caused by the inner future completing with `Err`.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes `self`, returning the inner future error.",155,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"elapsed","","Create a new `DeadlineError` representing the inner future not completing before the deadline is reached.",155,{"inputs":[],"output":{"name":"deadlineerror"}}],[11,"is_elapsed","","Returns `true` if the error was caused by the inner future not completing before the deadline is reached.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"timer","","Creates a new `DeadlineError` representing an error encountered by the timer implementation",155,{"inputs":[{"name":"error"}],"output":{"name":"deadlineerror"}}],[11,"is_timer","","Returns `true` if the error was caused by the timer.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_timer","","Consumes `self`, returning the error raised by the timer implementation.",155,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"shutdown","","Create an error representing a shutdown timer.",156,{"inputs":[],"output":{"name":"error"}}],[11,"is_shutdown","","Returns `true` if the error was caused by the timer being shutdown.",156,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"at_capacity","","Create an error representing a timer at capacity.",156,{"inputs":[],"output":{"name":"error"}}],[11,"is_at_capacity","","Returns `true` if the error was caused by the timer being at capacity.",156,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",154,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"interval"}}],[11,"new","","Create a new `Delay` instance that elapses at `deadline`.",158,{"inputs":[{"name":"instant"}],"output":{"name":"delay"}}],[11,"deadline","","Returns the instant at which the future will complete.",158,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reset","","Reset the `Delay` instance to a new deadline.",158,null],[11,"deadline","tokio::util","Creates a new future which allows `self` until `deadline`.",15,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"deadline"}}],[11,"into_inner","tokio::io","Returns the underlying I/O object.",133,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",37,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",37,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",37,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",37,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",37,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",37,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",37,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",37,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"new","tokio::prelude::future","Create a new `ExecuteError`",124,{"inputs":[{"name":"executeerrorkind"},{"name":"f"}],"output":{"name":"executeerror"}}],[11,"kind","","Returns the associated reason for the error",124,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"into_future","","Consumes self and returns the original future that was spawned.",124,{"inputs":[{"name":"self"}],"output":{"name":"f"}}],[11,"split","","Splits out the homogeneous type from an either of tuples.",26,null],[11,"is_done","","Returns whether the underlying future has finished or not.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",67,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"new","tokio::prelude::stream","Constructs a new, empty `FuturesUnordered`",110,{"inputs":[],"output":{"name":"futuresunordered"}}],[11,"len","","Returns the number of futures contained in the set.",110,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no futures",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the set.",110,null],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",110,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",73,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",73,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",73,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"is_done","","Returns whether the underlying stream has finished or not.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",72,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",72,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",72,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",87,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",87,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",87,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",70,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",70,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",70,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",70,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",81,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",81,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",81,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",83,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",83,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",83,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",76,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",76,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",76,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",85,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",85,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",85,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",79,{"inputs":[{"name":"self"},{"name":"splitstream"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",88,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",88,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",88,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"send","","Sends a new value along this channel to the receiver.",122,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"futuresender"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",86,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",86,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",86,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",74,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",74,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",74,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",90,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",90,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",90,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",97,{"inputs":[{"name":"self"},{"name":"splitsink"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"new","","Constructs a new, empty `FuturesOrdered`",106,{"inputs":[],"output":{"name":"futuresordered"}}],[11,"len","","Returns the number of futures contained in the queue.",106,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the queue contains no futures",106,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the queue.",106,null],[11,"peek","","Peek retrieves a reference to the next item in the stream.",75,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",91,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",91,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",91,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",116,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",116,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",116,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"map","tokio::prelude","Change the success value of this `Async` with the closure provided",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"async"}}],[11,"is_ready","","Returns whether this is `Async::Ready`",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"asyncsink"}}],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","tokio::prelude::task","Inserts a new piece of task-local data into this task, returning a reference to it.",120,{"inputs":[{"name":"a"}],"output":{"name":"taskrc"}}],[11,"with","","Operate with a reference to the underlying data.",120,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",118,null],[11,"is_current","","Returns `true` when called from within the context of the task.",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create an `AtomicTask` initialized with the given `Task`",117,{"inputs":[],"output":{"name":"atomictask"}}],[11,"register","","Registers the current task to be notified on calls to `notify`.",117,null],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",117,null],[11,"notify","","Notifies the task that last called `register`.",117,null],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",121,null],[11,"poll_future","","Polls the internal future, scheduling notifications to be sent to the `unpark` argument.",125,{"inputs":[{"name":"self"},{"generics":["unpark"],"name":"arc"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",125,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"execute","","A specialized function to request running a future to completion on the specified executor.",125,null],[11,"poll_stream","","Like `poll_future`, except polls the underlying stream.",125,{"inputs":[{"name":"self"},{"generics":["unpark"],"name":"arc"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",125,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"start_send","","Invokes the underlying `start_send` method with this task in place.",125,null],[11,"poll_flush","","Invokes the underlying `poll_complete` method with this task in place.",125,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",125,null],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",125,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",125,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the object the Spawn is wrapping.",125,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",125,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consume the Spawn, returning its inner object",125,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",125,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",125,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",125,null],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",125,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["async"],"name":"result"}}],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",125,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["async"],"name":"result"}}],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",119,{"inputs":[{"generics":["eventset"],"name":"arc"},{"name":"usize"}],"output":{"name":"unparkevent"}}],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",123,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}]],"paths":[[8,"Executor"],[3,"TaskExecutor"],[3,"Turn"],[3,"RunError"],[3,"RunTimeoutError"],[3,"TurnError"],[3,"BlockError"],[3,"CurrentThread"],[3,"Entered"],[3,"Spawn"],[3,"Builder"],[3,"Runtime"],[3,"Shutdown"],[3,"TaskExecutor"],[3,"Runtime"],[8,"FutureExt"],[8,"AsyncRead"],[8,"AsyncWrite"],[4,"ErrorKind"],[8,"Read"],[8,"Write"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[4,"ExecuteErrorKind"],[4,"Either"],[4,"Loop"],[8,"Stream"],[3,"ReuniteError"],[4,"MergedItem"],[8,"Sink"],[4,"Async"],[4,"AsyncSink"],[8,"Unpark"],[8,"EventSet"],[8,"Executor"],[3,"Error"],[3,"Fuse"],[3,"MapErr"],[3,"SelectOk"],[3,"Select2"],[3,"Empty"],[3,"AndThen"],[3,"OrElse"],[3,"Collect"],[3,"ForEach"],[3,"SelectAll"],[3,"SelectNext"],[3,"PollFn"],[3,"Then"],[3,"Inspect"],[3,"Lazy"],[3,"Join3"],[3,"Ok"],[3,"Join"],[3,"Flatten"],[3,"FromErr"],[3,"Fold"],[3,"Map"],[3,"JoinAll"],[3,"FutureSender"],[3,"Concat"],[3,"Select"],[3,"Concat2"],[3,"StreamFuture"],[3,"CatchUnwind"],[3,"Shared"],[3,"LoopFn"],[3,"Join4"],[3,"Forward"],[3,"Join5"],[3,"Fuse"],[3,"InspectErr"],[3,"Skip"],[3,"Peekable"],[3,"Chunks"],[3,"Take"],[3,"TakeWhile"],[3,"SplitSink"],[3,"OrElse"],[3,"Filter"],[3,"SkipWhile"],[3,"MapErr"],[3,"Then"],[3,"Buffered"],[3,"BufferUnordered"],[3,"FilterMap"],[3,"FromErr"],[3,"Flatten"],[3,"Inspect"],[3,"AndThen"],[3,"Map"],[3,"SharedItem"],[3,"SharedError"],[3,"IterResult"],[3,"IterOk"],[3,"SplitStream"],[3,"Empty"],[3,"Repeat"],[3,"Receiver"],[3,"IntoStream"],[3,"Zip"],[3,"Once"],[3,"IterStream"],[3,"CatchUnwind"],[3,"FuturesOrdered"],[3,"Merge"],[3,"FlattenStream"],[3,"Select"],[3,"FuturesUnordered"],[3,"Unfold"],[3,"Chain"],[3,"PollFn"],[3,"SendError"],[3,"IterMut"],[3,"Wait"],[3,"AtomicTask"],[3,"Task"],[3,"UnparkEvent"],[3,"TaskRc"],[3,"Run"],[3,"Sender"],[3,"LocalKey"],[3,"ExecuteError"],[3,"Spawn"],[3,"WriteAll"],[3,"ReadExact"],[3,"ReadUntil"],[3,"Flush"],[3,"WriteHalf"],[3,"Copy"],[3,"Shutdown"],[3,"Lines"],[3,"ReadToEnd"],[3,"ReadHalf"],[3,"SpawnError"],[3,"DefaultExecutor"],[3,"File"],[3,"Stdout"],[3,"Stderr"],[3,"CreateFuture"],[3,"OpenFuture"],[3,"Stdin"],[3,"Shutdown"],[3,"ThreadPool"],[3,"Sender"],[3,"Builder"],[3,"Registration"],[3,"Turn"],[3,"Background"],[3,"PollEvented2"],[3,"Handle"],[3,"Reactor"],[3,"Interval"],[3,"DeadlineError"],[3,"Error"],[3,"Deadline"],[3,"Delay"],[3,"Incoming"],[3,"TcpStream"],[3,"TcpListener"],[3,"ConnectFuture"],[3,"UdpFramed"],[3,"RecvDgram"],[3,"SendDgram"],[3,"UdpSocket"]]};
searchIndex["tokio_core"] = {"doc":"`Future`-powered I/O at the core of Tokio","items":[[0,"net","tokio_core","TCP/UDP bindings for `tokio-core`",null,null],[3,"TcpStream","tokio_core::net","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"TcpStreamNew","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `UdpCodec` trait to encode and decode frames.",null,null],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",null,null],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",null,null],[11,"as_raw_fd","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"bind","","Create a new TCP listener associated with this event loop.",1,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"bind2","","Create a new TCP listener associated with this event loop.",1,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"accept_std","","Like `accept`, except that it returns a raw `std::net::TcpStream`.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_listener","","Create a new TCP listener from the standard library's TCP listener.",1,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"},{"name":"handle"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",1,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"local_addr","","Returns the local address that this listener is bound to.",1,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",1,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"connect","","Create a new TCP stream connected to the specified address.",0,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"tcpstreamnew"}}],[11,"connect2","","Create a new TCP stream connected to the specified address.",0,{"inputs":[{"name":"socketaddr"}],"output":{"name":"tcpstreamnew"}}],[11,"from_stream","","Create a new `TcpStream` from a `net::TcpStream`.",0,{"inputs":[{"name":"tcpstream"},{"name":"handle"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",0,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"handle"}],"output":{"generics":["future"],"name":"box"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",0,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Test whether this socket is ready to be written to or not.",0,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",0,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"peer_addr","","Returns the remote address that this stream is connected to.",0,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",0,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",0,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",0,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",0,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",0,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",0,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"read","","",0,null],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"prepare_uninitialized_buffer","","",0,null],[11,"read_buf","","",0,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"shutdown","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","",0,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream","error"],"name":"poll"}}],[11,"poll","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"start_send","","",4,null],[11,"poll_complete","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"close","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",4,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",4,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",4,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"bind","","Create a new UDP socket bound to the specified address.",5,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"from_socket","","Creates a new `UdpSocket` from the previously bound socket provided.",5,{"inputs":[{"name":"udpsocket"},{"name":"handle"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `UdpSocket` object, using the provided `UdpCodec` to read and write the raw data.",5,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"udpframed"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",5,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in addr.",5,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"send","","Sends data on the socket to the address previously bound via connect(). On success, returns the number of bytes written.",5,null],[11,"recv","","Receives data from the socket previously bound with connect(). On success, returns the number of bytes read.",5,null],[11,"poll_read","","Test whether this socket is ready to be read or not.",5,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Test whether this socket is ready to be written to or not.",5,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",5,null],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",5,{"inputs":[{"name":"self"},{"name":"t"},{"name":"socketaddr"}],"output":{"name":"senddgram"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",5,null],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"recvdgram"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",5,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",5,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",5,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",5,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[8,"UdpCodec","","Encoding of frames via buffers.",null,null],[16,"In","","The type of decoded frames.",8,null],[16,"Out","","The type of frames to be encoded.",8,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",8,null],[10,"encode","","Encodes a frame into the buffer provided.",8,null],[0,"reactor","tokio_core","The core reactor driving all I/O",null,null],[3,"PollEvented","tokio_core::reactor","A concrete implementation of a stream of readiness notifications for I/O objects that originates from an event loop.",null,null],[3,"Timeout","","A future representing the notification that a timeout has occurred.",null,null],[3,"Interval","","A stream representing notifications at fixed interval",null,null],[3,"Core","","An event loop.",null,null],[3,"CoreId","","An unique ID for a Core",null,null],[3,"Remote","","Handle to an event loop, used to construct I/O objects, send messages, and otherwise interact indirectly with the event loop itself.",null,null],[3,"Handle","","A non-sendable handle to an event loop, useful for manufacturing instances of `LoopData`.",null,null],[11,"new","","Creates a new readiness stream associated with the provided `loop_handle` and for the given `source`.",9,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"generics":["pollevented"],"name":"result"}}],[11,"deregister","","Deregisters this source of events from the reactor core specified.",9,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"result"}}],[11,"poll_read","","Tests to see if this source is ready to be read from or not.",9,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Tests to see if this source is ready to be written to or not.",9,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_ready","","Test to see whether this source fulfills any condition listed in `mask` provided.",9,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["ready"],"name":"async"}}],[11,"need_read","","Indicates to this source of events that the corresponding I/O object is no longer readable, but it needs to be.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"need_write","","Indicates to this source of events that the corresponding I/O object is no longer writable, but it needs to be.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"remote","","Returns a reference to the event loop handle that this readiness stream is associated with.",9,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",9,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",9,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"read","","",9,null],[11,"write","","",9,null],[11,"flush","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new timeout which will fire at `dur` time into the future.",10,{"inputs":[{"name":"duration"},{"name":"handle"}],"output":{"generics":["timeout"],"name":"result"}}],[11,"new_at","","Creates a new timeout which will fire at the time specified by `at`.",10,{"inputs":[{"name":"instant"},{"name":"handle"}],"output":{"generics":["timeout"],"name":"result"}}],[11,"reset","","Resets this timeout to an new timeout which will fire at the time specified by `at`.",10,{"inputs":[{"name":"self"},{"name":"instant"}],"output":null}],[11,"poll","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"new","","Creates a new interval which will fire at `dur` time into the future, and will repeat every `dur` interval after",11,{"inputs":[{"name":"duration"},{"name":"handle"}],"output":{"generics":["interval"],"name":"result"}}],[11,"new_at","","Creates a new interval which will fire at the time specified by `at`, and then will repeat every `dur` interval after",11,{"inputs":[{"name":"instant"},{"name":"duration"},{"name":"handle"}],"output":{"generics":["interval"],"name":"result"}}],[11,"poll","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"coreid"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"coreid"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",15,{"inputs":[],"output":{"generics":["core"],"name":"result"}}],[11,"handle","","Returns a handle to this event loop which cannot be sent across threads but can be used as a proxy to the event loop itself.",15,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"runtime","","Returns a reference to the runtime backing the instance",15,{"inputs":[{"name":"self"}],"output":{"name":"runtime"}}],[11,"remote","","Generates a remote handle to this event loop which can be used to spawn tasks from other threads into this event loop.",15,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"run","","Runs a future until completion, driving the event loop while we're otherwise waiting for the future to complete.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",15,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":null}],[11,"id","","Get the ID of this loop",15,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"execute","","",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"spawn","","Spawns a new future into the event loop this remote is associated with.",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"id","","Return the ID of the represented Core",13,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"handle","","Attempts to \"promote\" this remote to a handle, if possible.",13,{"inputs":[{"name":"self"}],"output":{"generics":["handle"],"name":"option"}}],[11,"execute","","",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tokio_handle","","Returns a reference to the new Tokio handle",14,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"remote","","Returns a reference to the underlying remote handle to the event loop.",14,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"spawn","","Spawns a new future on the event loop this handle is associated with.",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"spawn_send","","Spawns a new future onto the threadpool",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"spawn_fn","","Spawns a closure on this event loop.",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"id","","Return the ID of the represented Core",14,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"execute","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_nb","tokio_core","A convenience macro for working with `io::Result<T>` from the `Read` and `Write` traits.",null,null]],"paths":[[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"TcpStreamNew"],[3,"UdpFramed"],[3,"UdpSocket"],[3,"SendDgram"],[3,"RecvDgram"],[8,"UdpCodec"],[3,"PollEvented"],[3,"Timeout"],[3,"Interval"],[3,"CoreId"],[3,"Remote"],[3,"Handle"],[3,"Core"]]};
searchIndex["tokio_executor"] = {"doc":"Task execution related traits and utilities.","items":[[3,"Enter","tokio_executor","Represents an executor context.",null,null],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",null,null],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",null,null],[3,"SpawnError","","Errors returned by `Executor::spawn`.",null,null],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",null,{"inputs":[],"output":{"generics":["enter","entererror"],"name":"result"}}],[5,"spawn","","Submits a future for execution on the default executor -- usually a threadpool.",null,{"inputs":[{"name":"t"}],"output":null}],[5,"with_default","","Set the default executor for the duration of the closure",null,{"inputs":[{"name":"t"},{"name":"enter"},{"name":"f"}],"output":{"name":"r"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"on_exit","","Register a callback to be invoked if and when the thread ceased to act as an executor.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"make_permanent","","Treat the remainder of execution on this thread as part of an executor; used mostly for thread pool worker threads.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"defaultexecutor"}}],[11,"current","","Returns a handle to the default executor for the current context.",2,{"inputs":[],"output":{"name":"defaultexecutor"}}],[11,"spawn","","",2,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[0,"park","","Abstraction over blocking and unblocking the current thread.",null,null],[3,"ParkThread","tokio_executor::park","Blocks the current thread using a condition variable.",null,null],[3,"ParkError","","Error returned by [`ParkThread`]",null,null],[3,"UnparkThread","","Unblocks a thread that was blocked by `ParkThread`.",null,null],[8,"Park","","Block the current thread.",null,null],[16,"Unpark","","Unpark handle type for the `Park` implementation.",3,null],[16,"Error","","Error returned by `park`",3,null],[10,"unpark","","Get a new `Unpark` handle associated with this `Park` instance.",3,null],[10,"park","","Block the current thread unless or until the token is available.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"park_timeout","","Park the current thread for at most `duration`.",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[8,"Unpark","","Unblock a thread blocked by the associated [`Park`] instance.",null,null],[10,"unpark","","Unblock a thread that is blocked by the associated `Park` handle.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unparkthread"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ParkThread` handle for the current thread.",5,{"inputs":[],"output":{"name":"parkthread"}}],[11,"unpark","","",5,null],[11,"park","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"park_timeout","","",5,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"unpark","","",7,{"inputs":[{"name":"self"}],"output":null}],[8,"Executor","tokio_executor","A value that executes futures.",null,null],[10,"spawn","","Spawns a future object to run on this executor.",8,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",8,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",9,{"inputs":[],"output":{"name":"self"}}],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",9,{"inputs":[],"output":{"name":"self"}}],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"EnterError"],[3,"Enter"],[3,"DefaultExecutor"],[8,"Park"],[8,"Unpark"],[3,"ParkThread"],[3,"ParkError"],[3,"UnparkThread"],[8,"Executor"],[3,"SpawnError"]]};
searchIndex["tokio_fs"] = {"doc":"Asynchronous filesystem manipulation operations (and stdin, stdout, stderr).","items":[[3,"Stdin","tokio_fs","A handle to the standard input stream of a process.",null,null],[3,"Stdout","","A handle to the standard output stream of a process.",null,null],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[0,"file","","Types for working with [`File`].",null,null],[3,"CreateFuture","tokio_fs::file","Future returned by `File::create` and resolves to a `File` instance.",null,null],[3,"OpenFuture","","Future returned by `File::open` and resolves to a `File` instance.",null,null],[3,"File","","A reference to an open file on the filesystem.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",1,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open","","Attempts to open a file in read-only mode.",2,{"inputs":[{"name":"p"}],"output":{"name":"openfuture"}}],[11,"create","","Opens a file in write-only mode.",2,{"inputs":[{"name":"p"}],"output":{"name":"createfuture"}}],[11,"poll_seek","","Seek to an offset, in bytes, in a stream.",2,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64","error"],"name":"poll"}}],[11,"poll_sync_all","","Attempts to sync all OS-internal metadata to disk.",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll_sync_data","","This function is similar to `poll_sync_all`, except that it may not synchronize file metadata to the filesystem.",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll_set_len","","Truncates or extends the underlying file, updating the size of this file to become size.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll_metadata","","Queries metadata about the underlying file.",2,{"inputs":[{"name":"self"}],"output":{"generics":["metadata","error"],"name":"poll"}}],[11,"poll_try_clone","","Create a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both File instances simultaneously.",2,{"inputs":[{"name":"self"}],"output":{"generics":["file","error"],"name":"poll"}}],[11,"poll_set_permissions","","Changes the permissions on the underlying file.",2,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"generics":["error"],"name":"poll"}}],[11,"read","","",2,null],[11,"prepare_uninitialized_buffer","","",2,null],[11,"write","","",2,null],[11,"flush","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","tokio_fs","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",3,null],[11,"prepare_uninitialized_buffer","","",3,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",4,null],[11,"flush","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",5,null],[11,"flush","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}]],"paths":[[3,"CreateFuture"],[3,"OpenFuture"],[3,"File"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"]]};
searchIndex["tokio_io"] = {"doc":"Core I/O traits and combinators when working with Tokio.","items":[[0,"io","tokio_io","I/O conveniences when working with primitives in `tokio-core`",null,null],[3,"AllowStdIo","tokio_io::io","A simple wrapper type which allows types that only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",null,null],[3,"Copy","","A future which will copy all data from a reader into a writer.",null,null],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",null,null],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",null,null],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",null,null],[3,"Shutdown","","A future used to fully shutdown an I/O object.",null,null],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",null,null],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",null,null],[3,"Window","","A owned window around an underlying buffer.",null,null],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"copy"}}],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"flush"}}],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",null,{"inputs":[{"name":"a"}],"output":{"name":"lines"}}],[5,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",null,{"inputs":[{"name":"r"},{"name":"t"}],"output":{"name":"read"}}],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"readexact"}}],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",null,{"inputs":[{"name":"a"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readtoend"}}],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",null,{"inputs":[{"name":"a"},{"name":"u8"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readuntil"}}],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"shutdown"}}],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"writeall"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[0,"codec","tokio_io","Utilities for encoding and decoding frames.",null,null],[3,"BytesCodec","tokio_io::codec","A simple `Codec` implementation that just ships bytes around.",null,null],[3,"LinesCodec","","A simple `Codec` implementation that splits up data into lines.",null,null],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying I/O object, using the `Encoder` and `Decoder` traits to encode and decode frames.",null,null],[3,"FramedParts","","`FramedParts` contains an export of the data of a Framed transport. It can be used to construct a new `Framed` with a different codec. It contains all current buffers and the inner transport.",null,null],[12,"inner","","The inner transport used to read bytes to and write bytes to",8,null],[12,"readbuf","","The buffer with read but unprocessed data.",8,null],[12,"writebuf","","A buffer with unprocessed data which are not written yet.",8,null],[3,"FramedRead","","A `Stream` of messages decoded from an `AsyncRead`.",null,null],[3,"FramedWrite","","A `Sink` of frames encoded to an `AsyncWrite`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bytescodec"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"new","","Creates a new `BytesCodec` for shipping around raw bytes.",9,{"inputs":[],"output":{"name":"bytescodec"}}],[11,"decode","","",9,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"bytes"},{"name":"bytesmut"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"linescodec"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"new","","Returns a `LinesCodec` for splitting up data into lines.",10,{"inputs":[],"output":{"name":"linescodec"}}],[11,"decode","","",10,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"decode_eof","","",10,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"self"},{"name":"string"},{"name":"bytesmut"}],"output":{"generics":["error"],"name":"result"}}],[0,"length_delimited","","Frame a stream of bytes based on a length prefix",null,null],[3,"Builder","tokio_io::codec::length_delimited","Configure length delimited `FramedRead`, `FramedWrite`, and `Framed` values.",null,null],[3,"Framed","","Adapts a byte stream into a unified `Stream` and `Sink` that works over entire frame values.",null,null],[3,"FramedRead","","Adapts a byte stream to a `Stream` yielding entire frame values.",null,null],[3,"FrameTooBig","","An error when the number of bytes read is more than max frame length.",null,null],[3,"FramedWrite","","Adapts a byte stream to a `Sink` accepting entire frame values.",null,null],[8,"Decoder","tokio_io::codec","Decoding of frames via buffers.",null,null],[16,"Item","","The type of decoded frames.",11,null],[16,"Error","","The type of unrecoverable frame decoding errors.",11,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",11,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option"],"name":"result"}}],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",11,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option"],"name":"result"}}],[8,"Encoder","","Trait of helper objects to write out messages as bytes, for use with `FramedWrite`.",null,null],[16,"Item","","The type of items consumed by the `Encoder`",12,null],[16,"Error","","The type of encoding errors.",12,null],[10,"encode","","Encodes a frame into the buffer provided.",12,null],[11,"fmt","tokio_io::io","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"allowstdio"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",13,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"get_ref","","Returns a reference to the contained IO object.",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained IO object.",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes self and returns the contained IO object.",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",13,null],[11,"write_fmt","","",13,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"shutdown","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"read","","",13,null],[11,"read_to_end","","",13,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_to_string","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_exact","","",13,null],[11,"from_parts","tokio_io::codec","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",14,{"inputs":[{"name":"framedparts"},{"name":"u"}],"output":{"name":"framed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Frame`.",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Frame`.",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `Frame`, returning its underlying I/O stream.",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_parts","","Consumes the `Frame`, returning its underlying I/O stream and the buffer with unprocessed data.",14,{"inputs":[{"name":"self"}],"output":{"name":"framedparts"}}],[11,"into_parts_and_codec","","Consumes the `Frame`, returning its underlying I/O stream and the buffer with unprocessed data, and also the current codec state.",14,null],[11,"poll","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",14,null],[11,"poll_complete","","",14,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",14,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `FramedRead` with the given `decoder`.",15,{"inputs":[{"name":"t"},{"name":"d"}],"output":{"name":"framedread"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",15,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",15,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",15,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"decoder","","Returns a reference to the underlying decoder.",15,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"decoder_mut","","Returns a mutable reference to the underlying decoder.",15,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"poll","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",15,null],[11,"poll_complete","","",15,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",15,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `FramedWrite` with the given `encoder`.",16,{"inputs":[{"name":"t"},{"name":"e"}],"output":{"name":"framedwrite"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"encoder","","Returns a reference to the underlying decoder.",16,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"encoder_mut","","Returns a mutable reference to the underlying decoder.",16,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"start_send","","",16,null],[11,"poll_complete","","",16,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",16,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","tokio_io::codec::length_delimited","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"builder"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Framed` with default configuration values.",19,{"inputs":[{"name":"t"}],"output":{"name":"framed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",19,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",19,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"start_send","","",19,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["error"],"name":"startsend"}}],[11,"poll_complete","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"close","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `FramedRead` with default configuration values.",18,{"inputs":[{"name":"t"}],"output":{"name":"framedread"}}],[11,"max_frame_length","","Returns the current max frame setting",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_max_frame_length","","Updates the max frame setting.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",18,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",18,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",18,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"start_send","","",18,null],[11,"poll_complete","","",18,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",18,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"write","","",18,null],[11,"flush","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","",18,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"new","","Creates a new `FramedWrite` with default configuration values.",20,{"inputs":[{"name":"t"}],"output":{"name":"framedwrite"}}],[11,"max_frame_length","","Returns the current max frame setting",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_max_frame_length","","Updates the max frame setting.",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",20,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",20,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",20,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start_send","","",20,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["error"],"name":"startsend"}}],[11,"poll_complete","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"close","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"read","","",20,null],[11,"read_buf","","",20,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"prepare_uninitialized_buffer","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new length delimited framer builder with default configuration values.",17,{"inputs":[],"output":{"name":"builder"}}],[11,"big_endian","","Read the length field as a big endian integer",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"little_endian","","Read the length field as a little endian integer",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"native_endian","","Read the length field as a native endian integer",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"max_frame_length","","Sets the max frame length",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"length_field_length","","Sets the number of bytes used to represent the length field",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"length_field_offset","","Sets the number of bytes in the header before the length field",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"length_adjustment","","Delta between the payload length specified in the header and the real payload length",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"self"}}],[11,"num_skip","","Sets the number of bytes to skip before reading the payload",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"new_read","","Create a configured length delimited `FramedRead`",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framedread"}}],[11,"new_write","","Create a configured length delimited `FramedWrite`",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framedwrite"}}],[11,"new_framed","","Create a configured length delimited `Framed`",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","tokio_io::io","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Returns the underlying I/O object.",22,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"poll","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",23,null],[11,"read_buf","","",23,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"write","","",24,null],[11,"flush","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","",24,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",25,{"inputs":[{"name":"t"}],"output":{"name":"window"}}],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",25,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",25,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",25,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_start","","Changes the starting index of this window to the index specified.",25,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"set_end","","Changes the end index of this window to the index specified.",25,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"as_ref","","",25,null],[11,"as_mut","","",25,null],[6,"IoFuture","tokio_io","A convenience typedef around a `Future` whose error component is `io::Error`",null,null],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",null,null],[8,"AsyncRead","","Read bytes asynchronously.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",26,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",26,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",26,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",26,null],[8,"AsyncWrite","","Writes bytes asynchronously.",null,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",27,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",27,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",27,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",27,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[14,"try_nb","","A convenience macro for working with `io::Result<T>` from the `Read` and `Write` traits.",null,null],[11,"decode_eof","tokio_io::codec","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",11,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option"],"name":"result"}}],[11,"prepare_uninitialized_buffer","tokio_io","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",26,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",26,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",26,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",26,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",27,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",27,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",27,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}]],"paths":[[3,"Copy"],[3,"Flush"],[3,"Read"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"ReadUntil"],[3,"Shutdown"],[3,"WriteAll"],[3,"FramedParts"],[3,"BytesCodec"],[3,"LinesCodec"],[8,"Decoder"],[8,"Encoder"],[3,"AllowStdIo"],[3,"Framed"],[3,"FramedRead"],[3,"FramedWrite"],[3,"Builder"],[3,"FramedRead"],[3,"Framed"],[3,"FramedWrite"],[3,"FrameTooBig"],[3,"Lines"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"Window"],[8,"AsyncRead"],[8,"AsyncWrite"]]};
searchIndex["tokio_reactor"] = {"doc":"Event loop that drives Tokio I/O resources.","items":[[3,"Background","tokio_reactor","Handle to the reactor running on a background thread.",null,null],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",null,null],[3,"PollEvented","","Associates an I/O resource that implements the [`std::Read`] and / or [`std::Write`] traits with the reactor that drives it.",null,null],[3,"Reactor","","The core reactor, or event loop.",null,null],[3,"Handle","","A reference to a reactor.",null,null],[3,"Turn","","Return value from the `turn` method on `Reactor`.",null,null],[3,"SetFallbackError","","Error returned from `Handle::set_fallback`.",null,null],[5,"with_default","","Set the default reactor for the duration of the closure",null,{"inputs":[{"name":"handle"},{"name":"enter"},{"name":"f"}],"output":{"name":"r"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"handle","","Returns a reference to the reactor handle.",0,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",0,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Shutdown the reactor immediately",0,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"forget","","Run the reactor on its thread until the process terminates.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",1,{"inputs":[{"name":"e"}],"output":{"name":"pollevented"}}],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",1,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"into_inner","","Consumes self, returning the inner I/O object",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",1,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",1,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"result"}}],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",1,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",1,null],[11,"write","","",1,null],[11,"flush","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Registration`.",2,{"inputs":[],"output":{"name":"registration"}}],[11,"register","","Register the I/O resource with the default reactor.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["bool"],"name":"result"}}],[11,"deregister","","Deregister the I/O resource from the reactor it is associatd with.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"register_with","","Register the I/O resource with the specified reactor.",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"handle"}],"output":{"generics":["bool"],"name":"result"}}],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",2,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"take_read_ready","","Consume any pending read readiness event.",2,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",2,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"take_write_ready","","Consume any pending write readiness event.",2,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"setfallbackerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",6,{"inputs":[],"output":{"generics":["reactor"],"name":"result"}}],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",6,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",6,{"inputs":[{"name":"self"}],"output":{"generics":["setfallbackerror"],"name":"result"}}],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",6,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn"],"name":"result"}}],[11,"is_idle","","Returns true if the reactor is currently idle.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"background","","Run this reactor on a background thread.",6,{"inputs":[{"name":"self"}],"output":{"generics":["background"],"name":"result"}}],[11,"unpark","","",6,null],[11,"park","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"park_timeout","","",6,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","Returns a handle to the current reactor.",3,{"inputs":[],"output":{"name":"handle"}}],[11,"unpark","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",3,{"inputs":[],"output":{"name":"handle"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Background"],[3,"PollEvented"],[3,"Registration"],[3,"Handle"],[3,"Turn"],[3,"SetFallbackError"],[3,"Reactor"]]};
searchIndex["tokio_signal"] = {"doc":"Asynchronous signal handling for Tokio","items":[[5,"ctrl_c","tokio_signal","Creates a stream which receives \"ctrl-c\" notifications sent to a process.",null,{"inputs":[{"name":"handle"}],"output":{"generics":["iostream"],"name":"iofuture"}}],[0,"unix","","Unix-specific types for signal handling.",null,null],[17,"SIGINT","tokio_signal::unix","",null,null],[17,"SIGTERM","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTRAP","","",null,null],[3,"Signal","","An implementation of `Stream` for receiving a particular type of signal.",null,null],[11,"new","","Creates a new stream which will receive notifications when the current process receives the signal `signal`.",0,{"inputs":[{"name":"c_int"},{"name":"handle"}],"output":{"generics":["signal"],"name":"iofuture"}}],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[6,"IoFuture","tokio_signal","A future whose error is `io::Error`",null,null],[6,"IoStream","","A stream whose error is `io::Error`",null,null]],"paths":[[3,"Signal"]]};
searchIndex["tokio_tcp"] = {"doc":"TCP bindings for `tokio`.","items":[[3,"Incoming","tokio_tcp","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"ConnectFuture","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"bind","","Create a new TCP listener associated with this event loop.",1,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"poll_accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",1,{"inputs":[{"name":"tcplistener"},{"name":"handle"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"local_addr","","Returns the local address that this listener is bound to.",1,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",1,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Create a new TCP stream connected to the specified address.",2,{"inputs":[{"name":"socketaddr"}],"output":{"name":"connectfuture"}}],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",2,{"inputs":[{"name":"tcpstream"},{"name":"handle"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",2,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"connectfuture"}}],[11,"poll_read_ready","","Check the TCP stream's read readiness state.",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"poll_write_ready","","Check the TCP stream's write readiness state.",2,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",2,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"peer_addr","","Returns the remote address that this stream is connected to.",2,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"poll_peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",2,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",2,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",2,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",2,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",2,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",2,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"read","","",2,null],[11,"write","","",2,null],[11,"flush","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"prepare_uninitialized_buffer","","",2,null],[11,"read_buf","","",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"shutdown","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream","error"],"name":"poll"}}]],"paths":[[3,"Incoming"],[3,"TcpListener"],[3,"TcpStream"],[3,"ConnectFuture"]]};
searchIndex["tokio_threadpool"] = {"doc":"A work-stealing based thread pool for executing futures.","items":[[3,"BlockingError","tokio_threadpool","Error raised by `blocking`.",null,null],[3,"Builder","","Builds a thread pool with custom configuration values.",null,null],[3,"Sender","","Submit futures to the associated thread pool for execution.",null,null],[3,"Shutdown","","Future that resolves when the thread pool is shutdown.",null,null],[3,"ThreadPool","","Work-stealing based thread pool for executing futures.",null,null],[3,"Worker","","Thread worker",null,null],[5,"blocking","","Enter a blocking section of code.",null,{"inputs":[{"name":"f"}],"output":{"generics":["blockingerror"],"name":"poll"}}],[0,"park","","Thread parking utilities.",null,null],[3,"DefaultPark","tokio_threadpool::park","Parks the thread.",null,null],[3,"DefaultUnpark","","Unparks threads that were parked by `DefaultPark`.",null,null],[3,"ParkError","","Error returned by [`ParkThread`]",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `DefaultPark` instance.",0,{"inputs":[],"output":{"name":"defaultpark"}}],[11,"unpark","","",0,null],[11,"park","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"park_timeout","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"unpark","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","tokio_threadpool","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Returns a new thread pool builder initialized with default configuration values.",4,{"inputs":[],"output":{"name":"builder"}}],[11,"pool_size","","Set the maximum number of worker threads for the thread pool instance.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_blocking","","Set the maximum number of concurrent blocking sections.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"keep_alive","","Set the worker thread keep alive duration",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"self"}}],[11,"name_prefix","","Set name prefix of threads spawned by the scheduler",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"around_worker","","Execute function `f` on each worker thread.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"after_start","","Execute function `f` after each thread is started but before it starts doing work.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"before_stop","","Execute function `f` before each thread stops.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"custom_park","","Customize the `park` instance used by each worker thread.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"build","","Create the configured `ThreadPool`.",4,{"inputs":[{"name":"self"}],"output":{"name":"threadpool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"spawn","","Spawn a future onto the thread pool",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"spawn","","",5,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"execute","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ThreadPool` with default values.",7,{"inputs":[],"output":{"name":"threadpool"}}],[11,"spawn","","Spawn a future onto the thread pool.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"sender","","Return a reference to the sender handle",7,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"sender_mut","","Return a mutable reference to the sender handle",7,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"shutdown_on_idle","","Shutdown the pool once it becomes idle.",7,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown","","Shutdown the pool",7,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Shutdown the pool immediately",7,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"id","","Returns a reference to the worker's identifier.",8,{"inputs":[{"name":"self"}],"output":{"name":"workerid"}}],[11,"run","","Run the worker",8,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"DefaultPark"],[3,"DefaultUnpark"],[3,"ParkError"],[3,"BlockingError"],[3,"Builder"],[3,"Sender"],[3,"Shutdown"],[3,"ThreadPool"],[3,"Worker"]]};
searchIndex["tokio_timer"] = {"doc":"Utilities for scheduling work to happen after a period of time.","items":[[3,"Deadline","tokio_timer","Allows a given `Future` to execute until the specified deadline.",null,null],[3,"DeadlineError","","Error returned by `Deadline` future.",null,null],[3,"Delay","","A future that completes at a specified instant in time.",null,null],[3,"Error","","Errors encountered by the timer implementation.",null,null],[3,"Interval","","A stream representing notifications at fixed interval",null,null],[5,"with_default","","Set the default timer for the duration of the closure.",null,{"inputs":[{"name":"handle"},{"name":"enter"},{"name":"f"}],"output":{"name":"r"}}],[0,"timer","","Timer implementation.",null,null],[3,"Handle","tokio_timer::timer","Handle to timer instance.",null,null],[3,"SystemNow","","Returns the instant corresponding to now using a monotonic clock.",null,null],[3,"Timer","","Timer implementation that drives [`Delay`], [`Interval`], and [`Deadline`].",null,null],[3,"Turn","","Return value from the `turn` method on `Timer`.",null,null],[5,"with_default","","Set the default timer for the duration of the closure.",null,{"inputs":[{"name":"handle"},{"name":"enter"},{"name":"f"}],"output":{"name":"r"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"current","","Returns a handle to the current timer.",0,{"inputs":[],"output":{"name":"handle"}}],[11,"delay","","Create a `Delay` driven by this handle's associated `Timer`.",0,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"delay"}}],[11,"deadline","","Create a `Deadline` driven by this handle's associated `Timer`.",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"instant"}],"output":{"name":"deadline"}}],[11,"interval","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",0,{"inputs":[{"name":"self"},{"name":"instant"},{"name":"duration"}],"output":{"name":"interval"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `SystemNow`.",1,{"inputs":[],"output":{"name":"systemnow"}}],[11,"now","","",1,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[8,"Now","","Returns `Instant` values representing the current instant in time.",null,null],[10,"now","","Returns an instant corresponding to \"now\".",2,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Timer` instance that uses `park` to block the current thread.",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"get_park","","Returns a reference to the underlying `Park` instance.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new_with_now","","Create a new `Timer` instance that uses `park` to block the current thread and `now` to get the current `Instant`.",3,{"inputs":[{"name":"t"},{"name":"n"}],"output":{"name":"self"}}],[11,"handle","","Returns a handle to the timer.",3,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"turn","","Performs one iteration of the timer loop.",3,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn"],"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"unpark","","",3,null],[11,"park","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"park_timeout","","",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","tokio_timer","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Deadline` that completes when `future` completes or when `deadline` is reached.",5,{"inputs":[{"name":"t"},{"name":"instant"}],"output":{"name":"deadline"}}],[11,"get_ref","","Gets a reference to the underlying future in this deadline.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying future in this deadline.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this deadline, returning the underlying future.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"inner","","Create a new `DeadlineError` representing the inner future completing with `Err`.",6,{"inputs":[{"name":"t"}],"output":{"name":"deadlineerror"}}],[11,"is_inner","","Returns `true` if the error was caused by the inner future completing with `Err`.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes `self`, returning the inner future error.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"elapsed","","Create a new `DeadlineError` representing the inner future not completing before the deadline is reached.",6,{"inputs":[],"output":{"name":"deadlineerror"}}],[11,"is_elapsed","","Returns `true` if the error was caused by the inner future not completing before the deadline is reached.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"timer","","Creates a new `DeadlineError` representing an error encountered by the timer implementation",6,{"inputs":[{"name":"error"}],"output":{"name":"deadlineerror"}}],[11,"is_timer","","Returns `true` if the error was caused by the timer.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_timer","","Consumes `self`, returning the error raised by the timer implementation.",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Delay` instance that elapses at `deadline`.",7,{"inputs":[{"name":"instant"}],"output":{"name":"delay"}}],[11,"deadline","","Returns the instant at which the future will complete.",7,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reset","","Reset the `Delay` instance to a new deadline.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":null}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"shutdown","","Create an error representing a shutdown timer.",8,{"inputs":[],"output":{"name":"error"}}],[11,"is_shutdown","","Returns `true` if the error was caused by the timer being shutdown.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"at_capacity","","Create an error representing a timer at capacity.",8,{"inputs":[],"output":{"name":"error"}}],[11,"is_at_capacity","","Returns `true` if the error was caused by the timer being at capacity.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",9,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"interval"}}],[11,"poll","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}]],"paths":[[3,"Handle"],[3,"SystemNow"],[8,"Now"],[3,"Timer"],[3,"Turn"],[3,"Deadline"],[3,"DeadlineError"],[3,"Delay"],[3,"Error"],[3,"Interval"]]};
searchIndex["tokio_udp"] = {"doc":"UDP bindings for `tokio`.","items":[[3,"UdpFramed","tokio_udp","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",null,null],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",0,null],[11,"poll_complete","","",0,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",0,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"new","","Create a new `UdpFramed` backed by the given socket and codec.",0,{"inputs":[{"name":"udpsocket"},{"name":"c"}],"output":{"name":"udpframed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",0,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",0,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",0,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",1,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",1,{"inputs":[{"name":"udpsocket"},{"name":"handle"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"local_addr","","Returns the local address that this socket is bound to.",1,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",1,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"poll_send","","Sends data on the socket to the remote address to which it is connected.",1,null],[11,"poll_recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",1,null],[11,"poll_send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",1,null],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"socketaddr"}],"output":{"name":"senddgram"}}],[11,"poll_recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",1,null],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"recvdgram"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",1,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",1,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",1,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",1,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}]],"paths":[[3,"UdpFramed"],[3,"UdpSocket"],[3,"SendDgram"],[3,"RecvDgram"]]};
searchIndex["toml"] = {"doc":"A [TOML]-parsing library","items":[[0,"value","toml","Definition of a TOML value",null,null],[3,"Datetime","toml::value","A parsed TOML datetime value",null,null],[3,"DatetimeParseError","","Error returned from parsing a `Datetime` in the `FromStr` implementation.",null,null],[4,"Value","","Representation of a TOML value.",null,null],[13,"String","","Represents a TOML string",0,null],[13,"Integer","","Represents a TOML integer",0,null],[13,"Float","","Represents a TOML float",0,null],[13,"Boolean","","Represents a TOML boolean",0,null],[13,"Datetime","","Represents a TOML datetime",0,null],[13,"Array","","Represents a TOML array",0,null],[13,"Table","","Represents a TOML table",0,null],[6,"Array","","Type representing a TOML array, payload of the `Value::Array` variant",null,null],[6,"Table","","Type representing a TOML table, payload of the `Value::Table` variant",null,null],[8,"Index","","Types that can be used to index a `toml::Value`",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_from","","Convert a `T` into `toml::Value` which is an enum that can represent any valid TOML data.",0,{"inputs":[{"name":"t"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"try_into","","Interpret a `toml::Value` as an instance of type `T`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"get","","Index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["value"],"name":"option"}}],[11,"get_mut","","Mutably index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["value"],"name":"option"}}],[11,"as_integer","","Extracts the integer value if it is an integer.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"is_integer","","Tests whether this value is an integer.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_float","","Extracts the float value if it is a float.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_float","","Tests whether this value is a float.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","Extracts the boolean value if it is a boolean.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_bool","","Tests whether this value is a boolean.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","Extracts the string of this value if it is a string.",0,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_str","","Tests if this value is a string.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",0,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"is_datetime","","Tests whether this value is a datetime.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","Extracts the array value if it is an array.",0,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"as_array_mut","","Extracts the array value if it is an array.",0,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"is_array","","Tests whether this value is an array.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_table","","Extracts the table value if it is a table.",0,{"inputs":[{"name":"self"}],"output":{"generics":["table"],"name":"option"}}],[11,"as_table_mut","","Extracts the table value if it is a table.",0,{"inputs":[{"name":"self"}],"output":{"generics":["table"],"name":"option"}}],[11,"is_table","","Tests whether this value is a table.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"same_type","","Tests whether this and another value have the same type.",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"type_str","","Returns a human-readable representation of the type of this value.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"btreemap"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"hashmap"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"bool"}],"output":{"name":"value"}}],[11,"from","","",0,{"inputs":[{"name":"datetime"}],"output":{"name":"value"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["value"],"name":"result"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"generics":["value"],"name":"result"}}],[11,"deserialize_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_identifier","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"into_deserializer","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"datetimeparseerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["datetime","datetimeparseerror"],"name":"result"}}],[11,"serialize","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"generics":["datetime"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"ser","toml","Serializing Rust structures into TOML.",null,null],[3,"Serializer","toml::ser","Serialization implementation for TOML.",null,null],[4,"Error","","Errors that can occur when serializing a type.",null,null],[13,"UnsupportedType","","Indicates that a Rust type was requested to be serialized but it was not supported.",3,null],[13,"KeyNotString","","The key of all TOML maps must be strings, but serialization was attempted where the key of a map was not a string.",3,null],[13,"ArrayMixedType","","Arrays in TOML must have a homogenous type, but a heterogeneous array was emitted.",3,null],[13,"ValueAfterTable","","All values in a TOML table must be emitted before further tables are emitted. If a value is emitted after a table then this error is generated.",3,null],[13,"DateInvalid","","A serialized date was invalid.",3,null],[13,"NumberInvalid","","A serialized number was invalid.",3,null],[13,"UnsupportedNone","","None was attempted to be serialized, but it's not supported.",3,null],[13,"Custom","","A custom error which could be generated when serializing a particular type.",3,null],[5,"to_vec","","Serialize the given data structure as a TOML byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec","error"],"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of TOML.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string","error"],"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a \"pretty\" String of TOML.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string","error"],"name":"result"}}],[5,"tables_last","","Convenience function to serialize items in a map in an order valid with TOML.",null,{"inputs":[{"name":"i"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"new","","Creates a new serializer which will emit TOML into the buffer provided.",4,{"inputs":[{"name":"string"}],"output":{"name":"serializer"}}],[11,"pretty","","Instantiate a \"pretty\" formatter",4,{"inputs":[{"name":"string"}],"output":{"name":"serializer"}}],[11,"pretty_string","","Enable or Disable pretty strings",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"pretty_string_literal","","Enable or Disable Literal strings for pretty strings",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"pretty_array","","Enable or Disable pretty arrays",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"pretty_array_indent","","Set the indent for pretty arrays",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"pretty_array_trailing_comma","","Specify whether to use a trailing comma when serializing pretty arrays",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"custom","","",3,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"de","toml","Deserializing TOML into Rust structures.",null,null],[3,"Error","toml::de","Errors that can occur when deserializing a type.",null,null],[3,"Deserializer","","Deserialization implementation for TOML.",null,null],[5,"from_slice","","Deserializes a byte slice into a type.",null,null],[5,"from_str","","Deserializes a string into a type.",null,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"new","","Creates a new deserializer which will be deserializing the string provided.",6,{"inputs":[{"name":"str"}],"output":{"name":"deserializer"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.  This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace/comments.",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_require_newline_after_table","","Historical versions of toml-rs accidentally allowed a newline after a table definition, but the TOML spec requires a newline after a table definition header.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"line_col","","Produces a (line, column) pair of the position of the error if available",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[14,"toml","toml","Construct a [`toml::Value`] from TOML syntax.",null,null]],"paths":[[4,"Value"],[3,"Datetime"],[3,"DatetimeParseError"],[4,"Error"],[3,"Serializer"],[3,"Error"],[3,"Deserializer"]]};
searchIndex["trust_dns_proto"] = {"doc":"TRust-DNS Protocol library","items":[[3,"BasicDnsHandle","trust_dns_proto","Root DnsHandle implementaton returned by DnsFuture",null,null],[3,"DnsFuture","","A DNS Client implemented over futures-rs.",null,null],[3,"StreamHandle","","The StreamHandle is the general interface for communicating with the DnsFuture",null,null],[3,"RetryDnsHandle","","Can be used to reattempt a queries if they fail",null,null],[3,"BufStreamHandle","","A sender to which serialized DNS Messages can be sent",null,null],[3,"BufDnsStreamHandle","","A buffering stream bound to a `SocketAddr`",null,null],[11,"new","","Constructs a new StreamHandle for wrapping the sender",0,{"inputs":[{"generics":["vec"],"name":"unboundedsender"}],"output":{"name":"self"}}],[11,"send","","",0,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"result"}}],[11,"new","","Spawns a new DnsFuture Stream. This uses a default timeout of 5 seconds for all requests.",1,{"inputs":[{"generics":["future"],"name":"box"},{"generics":["dnsstreamhandle"],"name":"box"},{"name":"handle"},{"generics":["arc"],"name":"option"}],"output":{"name":"basicdnshandle"}}],[11,"with_timeout","","Spawns a new DnsFuture Stream.",1,{"inputs":[{"generics":["future"],"name":"box"},{"generics":["dnsstreamhandle"],"name":"box"},{"name":"handle"},{"name":"duration"},{"generics":["arc"],"name":"option"}],"output":{"name":"basicdnshandle"}}],[11,"poll","","",1,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"basicdnshandle"}}],[11,"send","","",2,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"generics":["future"],"name":"box"}}],[0,"error","","",null,null],[3,"ProtoError","trust_dns_proto::error","",null,null],[12,"0","","",3,null],[12,"1","","",3,null],[4,"ProtoErrorKind","","",null,null],[13,"Msg","","",4,null],[13,"Io","","",4,null],[13,"AddrParseError","","",4,null],[13,"ParseIntError","","",4,null],[13,"Utf8Error","","",4,null],[13,"FromUtf8Error","","",4,null],[13,"SSL","","",4,null],[13,"Ring","","",4,null],[13,"UrlParsingError","","",4,null],[13,"Canceled","","",4,null],[13,"CharacterDataTooLong","","",4,null],[13,"DnsKeyProtocolNot3","","",4,null],[13,"DomainNameTooLong","","",4,null],[13,"EdnsNameNotRoot","","",4,null],[13,"LabelBytesTooLong","","",4,null],[13,"Message","","",4,null],[13,"NoError","","",4,null],[13,"IncorrectRDataLengthRead","","",4,null],[13,"Timeout","","",4,null],[13,"UnknownAlgorithmTypeValue","","",4,null],[13,"UnknownDnsClassStr","","",4,null],[13,"UnknownDnsClassValue","","",4,null],[13,"UnrecognizedLabelCode","","",4,null],[13,"UnrecognizedNsec3Flags","","",4,null],[13,"UnknownRecordTypeStr","","",4,null],[13,"UnknownRecordTypeValue","","",4,null],[13,"RrsigsNotPresent","","",4,null],[0,"not_openssl","","",null,null],[3,"SslErrorStack","trust_dns_proto::error::not_openssl","",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"not_ring","trust_dns_proto::error","",null,null],[3,"Unspecified","trust_dns_proto::error::not_ring","",null,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[6,"ProtoResult","trust_dns_proto::error","",null,null],[8,"ProtoChainErr","","",null,null],[10,"chain_err","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["protoerror"],"name":"result"}}],[8,"FromProtoError","","",null,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kind","","",3,{"inputs":[{"name":"self"}],"output":{"name":"protoerrorkind"}}],[11,"into_kind","","",3,{"inputs":[{"name":"self"}],"output":{"name":"protoerrorkind"}}],[11,"iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","",3,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"parseinterror"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"utf8error"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"sslerrorstack"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"unspecified"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"parseerror"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"protoerrorkind"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",4,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"op","trust_dns_proto","Operations to send with a `Client` or server, e.g. `Query`, `Message`, or `UpdateMessage` can be used to gether to either query or update resource records sets.",null,null],[3,"Edns","trust_dns_proto::op","Edns implements the higher level concepts for working with extended dns as it is used to create or be created from OPT record data.",null,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"edns"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"edns"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"edns"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new extended DNS object.",8,{"inputs":[],"output":{"name":"self"}}],[11,"rcode_high","","The high order bytes for the response code in the DNS Message",8,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"version","","Returns the EDNS version",8,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"dnssec_ok","","Specifies that DNSSec is supported for this Client or Server",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"max_payload","","Maximum supported size of the DNS payload",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"option","","Returns the Option associated with the code",8,{"inputs":[{"name":"self"},{"name":"ednscode"}],"output":{"generics":["ednsoption"],"name":"option"}}],[11,"options","","Returns the options portion of EDNS",8,{"inputs":[{"name":"self"}],"output":{"name":"opt"}}],[11,"set_rcode_high","","Set the high order bits for the result code.",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"set_version","","Set the EDNS version",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"set_dnssec_ok","","Set to true if DNSSec is supported",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_max_payload","","Set the maximum payload which can be supported From RFC 6891: `Values lower than 512 MUST be treated as equal to 512`",8,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"set_option","","Set the specified EDNS option",8,{"inputs":[{"name":"self"},{"name":"ednsoption"}],"output":null}],[11,"from","","",8,{"inputs":[{"name":"record"}],"output":{"name":"self"}}],[11,"emit","","",8,{"inputs":[{"name":"self"},{"name":"binencoder"}],"output":{"name":"protoresult"}}],[0,"header","","Message metadata",null,null],[3,"Header","trust_dns_proto::op::header","Metadata for the `Message` struct.",null,null],[4,"MessageType","","Message types are either Query (also Update) or Response",null,null],[13,"Query","","Queries are Client requests, these are either Queries or Updates",9,null],[13,"Response","","Response message from the Server or upstream Resolver",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"messagetype"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"messagetype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"messagetype"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"new","","A default Header, not very useful.",10,{"inputs":[],"output":{"name":"self"}}],[11,"len","","Length of the header, always 12 bytes",10,{"inputs":[],"output":{"name":"usize"}}],[11,"set_id","","Sets the id of the message, for queries this shoudl be random.",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"self"}}],[11,"set_message_type","","Sets the message type, Queries and Updates both use Query.",10,{"inputs":[{"name":"self"},{"name":"messagetype"}],"output":{"name":"self"}}],[11,"set_op_code","","Set the operation code for the message",10,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"self"}}],[11,"set_authoritative","","From the server is specifies that it is an authoritative reqponse.",10,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"set_truncated","","Specifies that the records were too large for the payload.",10,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"set_recursion_desired","","Specify that the resolver should recursiviley request data from upstream DNS nodes",10,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"set_recursion_available","","Specifies that recursion is available from this or the remote resolver",10,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"set_authentic_data","","Specifies that the data is authnetic, i.e. the resolver believes all data to be valid through DNSSec",10,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"set_checking_disabled","","Used during recursive resolution to specified if a resolver should or should not validate DNSSec signatures",10,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"set_response_code","","The low responsed code (original response codes before EDNS extensions)",10,{"inputs":[{"name":"self"},{"name":"responsecode"}],"output":{"name":"self"}}],[11,"set_query_count","","Number or query records in the message",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"self"}}],[11,"set_answer_count","","Number of answer records in the message",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"self"}}],[11,"set_name_server_count","","Number of name server records in the message",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"self"}}],[11,"set_additional_count","","Number of additional records in the message",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"self"}}],[11,"id","","`text ID A 16 bit identifier assigned by the program that generates any kind of query. This identifier is copied the corresponding reply and can be used by the requester to match up replies to outstanding queries.`",10,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"message_type","","`text QR A one bit field that specifies whether this message is a query (0), or a response (1).`",10,{"inputs":[{"name":"self"}],"output":{"name":"messagetype"}}],[11,"op_code","","`text OPCODE A four bit field that specifies kind of query in this message. This value is set by the originator of a query and copied into the response. The values are: <see super::op_code>`",10,{"inputs":[{"name":"self"}],"output":{"name":"opcode"}}],[11,"authoritative","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"truncated","","`text TC TrunCation - specifies that this message was truncated due to length greater than that permitted on the transmission channel.`",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"recursion_desired","","`text RD Recursion Desired - this bit may be set in a query and is copied into the response. If RD is set, it directs the name server to pursue the query recursively. Recursive query support is optional.`",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"recursion_available","","`text RA Recursion Available - this be is set or cleared in a response, and denotes whether recursive query support is available in the name server.`",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"authentic_data","","RFC 4035, DNSSEC Resource Records, March 2005",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"checking_disabled","","see `is_authentic_data()`",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"response_code","","`text RCODE Response code - this 4 bit field is set as part of responses. The values have the following interpretation: <see super::response_code>`",10,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"query_count","","`text QDCOUNT an unsigned 16 bit integer specifying the number of entries in the question section.`",10,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"answer_count","","`text ANCOUNT an unsigned 16 bit integer specifying the number of resource records in the answer section.`",10,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"name_server_count","","for queries this is the nameservers which are authorities for the SOA of the Record for updates this is the update record count `text NSCOUNT an unsigned 16 bit integer specifying the number of name server resource records in the authority records section.`",10,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"additional_count","","`text ARCOUNT an unsigned 16 bit integer specifying the number of resource records in the additional records section.`",10,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"clone","","This is a specialized clone which clones all the fields but the counts handy for setting the count fields before sending over the wire.",10,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"self"}}],[11,"emit","","",10,{"inputs":[{"name":"self"},{"name":"binencoder"}],"output":{"name":"protoresult"}}],[11,"read","","",10,{"inputs":[{"name":"bindecoder"}],"output":{"name":"protoresult"}}],[0,"message","trust_dns_proto::op","Basic protocol message for DNS",null,null],[3,"Message","trust_dns_proto::op::message","The basic request and response datastructure, used for all DNS protocols.",null,null],[3,"NoopMessageFinalizer","","A MessageFinalizer which does nothing",null,null],[8,"EncodableMessage","","A generic EncodableMessage with associated information for streaming to a connection",null,null],[10,"header","","The Header associated with this Message",11,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[10,"queries_len","","return the length of the set of queries",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"emit_queries","","Emit the queries section of the EncodableMessage, if there are none, it's acceptable to return Ok(())",11,{"inputs":[{"name":"self"},{"name":"binencoder"}],"output":{"name":"protoresult"}}],[10,"answers_len","","return the length of the set of queries",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"emit_answers","","Emit the answers section of the EncodableMessage, if there are none, it's acceptable to return Ok(())",11,{"inputs":[{"name":"self"},{"name":"binencoder"}],"output":{"name":"protoresult"}}],[10,"name_servers_len","","return the length of the set of queries",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"emit_name_servers","","Emit the name_servers section of the EncodableMessage, if there are none, it's acceptable to return Ok(())",11,{"inputs":[{"name":"self"},{"name":"binencoder"}],"output":{"name":"protoresult"}}],[10,"additionals_len","","return the length of the set of queries",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"emit_additionals","","Emit the additionals section of the EncodableMessage, if there are none, it's acceptable to return Ok(())",11,{"inputs":[{"name":"self"},{"name":"binencoder"}],"output":{"name":"protoresult"}}],[10,"edns","","Extended DNS options associated with this message",11,{"inputs":[{"name":"self"}],"output":{"generics":["edns"],"name":"option"}}],[10,"sig0","","Any SIG0 records for signed messages",11,null],[11,"update_header_counts","","Returns a new Header with accurate counts for each Message section",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"header"}}],[8,"MessageFinalizer","","A trait for performing final ammendments to a Message before it is sent.",null,null],[10,"finalize_message","","The message taken in should be processed and then return [`Record`]s which should be  appended to the additional section of the message.",12,{"inputs":[{"name":"self"},{"name":"message"},{"name":"u32"}],"output":{"generics":["vec"],"name":"protoresult"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"bool"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"message"}}],[11,"header","","",13,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"queries_len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"emit_queries","","",13,{"inputs":[{"name":"self"},{"name":"binencoder"}],"output":{"name":"protoresult"}}],[11,"answers_len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"emit_answers","","",13,{"inputs":[{"name":"self"},{"name":"binencoder"}],"output":{"name":"protoresult"}}],[11,"name_servers_len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"emit_name_servers","","",13,{"inputs":[{"name":"self"},{"name":"binencoder"}],"output":{"name":"protoresult"}}],[11,"additionals_len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"emit_additionals","","",13,{"inputs":[{"name":"self"},{"name":"binencoder"}],"output":{"name":"protoresult"}}],[11,"edns","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["edns"],"name":"option"}}],[11,"sig0","","",13,null],[11,"new","","Returns a new \"empty\" Message",13,{"inputs":[],"output":{"name":"self"}}],[11,"error_msg","","Returns a Message constructed with error details to return to a client",13,{"inputs":[{"name":"u16"},{"name":"opcode"},{"name":"responsecode"}],"output":{"name":"message"}}],[11,"truncate","","Truncates a Message, this blindly removes all response fields and sets trucation to `true`",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"set_id","","see `Header::set_id`",13,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"self"}}],[11,"set_message_type","","see `Header::set_message_type`",13,{"inputs":[{"name":"self"},{"name":"messagetype"}],"output":{"name":"self"}}],[11,"set_op_code","","see `Header::set_op_code`",13,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"self"}}],[11,"set_authoritative","","see `Header::set_authoritative`",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"set_truncated","","see `Header::set_truncated`",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"set_recursion_desired","","see `Header::set_recursion_desired`",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"set_recursion_available","","see `Header::set_recursion_available`",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"set_authentic_data","","see `Header::set_authentic_data`",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"set_checking_disabled","","see `Header::set_checking_disabled`",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"set_response_code","","see `Header::set_response_code`",13,{"inputs":[{"name":"self"},{"name":"responsecode"}],"output":{"name":"self"}}],[11,"add_query","","Add a query to the Message, either the query response from the server, or the request Query.",13,{"inputs":[{"name":"self"},{"name":"query"}],"output":{"name":"self"}}],[11,"add_queries","","Adds an iterator over a set of Queries to be added to the message",13,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"self"}}],[11,"add_answer","","Add an answer to the Message",13,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"self"}}],[11,"add_answers","","Add all the records from the iterator to the answers section of the Message",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"self"}}],[11,"insert_answers","","Sets the answers to the specified set of Records.",13,{"inputs":[{"name":"self"},{"generics":["record"],"name":"vec"}],"output":null}],[11,"add_name_server","","Add a name server record to the Message",13,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"self"}}],[11,"add_name_servers","","Add all the records in the Iterator to the name server section of the message",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"self"}}],[11,"insert_name_servers","","Sets the name_servers to the specified set of Records.",13,{"inputs":[{"name":"self"},{"generics":["record"],"name":"vec"}],"output":null}],[11,"add_additional","","A an addtional Record to the message",13,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"self"}}],[11,"insert_additionals","","Sets the additional to the specified set of Records.",13,{"inputs":[{"name":"self"},{"generics":["record"],"name":"vec"}],"output":null}],[11,"set_edns","","Add the EDNS section the the Message",13,{"inputs":[{"name":"self"},{"name":"edns"}],"output":{"name":"self"}}],[11,"id","","see `Header::id()`",13,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"message_type","","see `Header::message_type()`",13,{"inputs":[{"name":"self"}],"output":{"name":"messagetype"}}],[11,"op_code","","see `Header::op_code()`",13,{"inputs":[{"name":"self"}],"output":{"name":"opcode"}}],[11,"authoritative","","see `Header::authoritative()`",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"truncated","","see `Header::truncated()`",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"recursion_desired","","see `Header::recursion_desired()`",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"recursion_available","","see `Header::recursion_available()`",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"authentic_data","","see `Header::authentic_data()`",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"checking_disabled","","see `Header::checking_disabled()`",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"response_code","","Return value",13,{"inputs":[{"name":"self"}],"output":{"name":"responsecode"}}],[11,"queries","","`text Question Carries the query name and other query parameters.`",13,null],[11,"answers","","`text Answer Carries RRs which directly answer the query.`",13,null],[11,"take_answers","","Removes all the answers from the Message",13,{"inputs":[{"name":"self"}],"output":{"generics":["record"],"name":"vec"}}],[11,"name_servers","","`text Authority Carries RRs which describe other authoritative servers. May optionally carry the SOA RR for the authoritative data in the answer section.`",13,null],[11,"take_name_servers","","Remove the name servers from the Message",13,{"inputs":[{"name":"self"}],"output":{"generics":["record"],"name":"vec"}}],[11,"additionals","","`text Additional Carries RRs which may be helpful in using the RRs in the other sections.`",13,null],[11,"take_additionals","","Remove the additional Records from the Message",13,{"inputs":[{"name":"self"}],"output":{"generics":["record"],"name":"vec"}}],[11,"edns","","RFC 6891, EDNS(0) Extensions, April 2013",13,{"inputs":[{"name":"self"}],"output":{"generics":["edns"],"name":"option"}}],[11,"edns_mut","","If edns is_none, this will create a new default Edns.",13,{"inputs":[{"name":"self"}],"output":{"name":"edns"}}],[11,"max_payload","","Return value",13,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"version","","Return value",13,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"sig0","","RFC 2535, Domain Name System Security Extensions, March 1999",13,null],[11,"read_queries","","Attempts to read the specified number of `Query`s",13,{"inputs":[{"name":"bindecoder"},{"name":"usize"}],"output":{"generics":["vec"],"name":"protoresult"}}],[11,"read_records","","Attempts to read the specified number of records",13,{"inputs":[{"name":"bindecoder"},{"name":"usize"},{"name":"bool"}],"output":{"name":"protoresult"}}],[11,"from_vec","","Decodes a message from the buffer.",13,null],[11,"to_vec","","Encodes the Message into a buffer",13,{"inputs":[{"name":"self"}],"output":{"generics":["vec","protoerror"],"name":"result"}}],[11,"finalize","","Finalize the message prior to sending.",13,{"inputs":[{"name":"self"},{"name":"mf"},{"name":"u32"}],"output":{"name":"protoresult"}}],[11,"new","","Always returns None",14,{"inputs":[],"output":{"generics":["arc"],"name":"option"}}],[11,"finalize_message","","",14,{"inputs":[{"name":"self"},{"name":"message"},{"name":"u32"}],"output":{"generics":["vec"],"name":"protoresult"}}],[11,"read","","",13,{"inputs":[{"name":"bindecoder"}],"output":{"name":"protoresult"}}],[0,"op_code","trust_dns_proto::op","Operation code for queries, updates, and responses",null,null],[4,"OpCode","trust_dns_proto::op::op_code","Operation code for queries, updates, and responses",null,null],[13,"Query","","Query request RFC 1035",15,null],[13,"Status","","Status message RFC 1035",15,null],[13,"Notify","","Notify of change RFC 1996",15,null],[13,"Update","","Update message RFC 2136",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"opcode"}}],[11,"from_u8","","Decodes the binary value of the OpCode",15,{"inputs":[{"name":"u8"}],"output":{"name":"protoresult"}}],[0,"query","trust_dns_proto::op","Query struct for looking up resource records",null,null],[3,"Query","trust_dns_proto::op::query","Query struct for looking up resource records, basically a resource record without RDATA.",null,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"query"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",16,null],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"query"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"query"}],"output":{"name":"bool"}}],[11,"default","","Return a default query with an empty name and A, IN for the query_type and query_class",16,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Return a default query with an empty name and A, IN for the query_type and query_class",16,{"inputs":[],"output":{"name":"self"}}],[11,"query","","Create a new query from name and type, class defaults to IN",16,{"inputs":[{"name":"name"},{"name":"recordtype"}],"output":{"name":"self"}}],[11,"set_name","","replaces name with the new name",16,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"self"}}],[11,"set_query_type","","Specify the RecordType being queried",16,{"inputs":[{"name":"self"},{"name":"recordtype"}],"output":{"name":"self"}}],[11,"set_query_class","","Specify÷ the DNS class of the Query, almost always IN",16,{"inputs":[{"name":"self"},{"name":"dnsclass"}],"output":{"name":"self"}}],[11,"name","","`text QNAME a domain name represented as a sequence of labels, where each label consists of a length octet followed by that number of octets. The domain name terminates with the zero length octet for the null label of the root. Note that this field may be an odd number of octets; no padding is used.`",16,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"query_type","","`text QTYPE a two octet code which specifies the type of the query. The values for this field include all codes valid for a TYPE field, together with some more general codes which can match more than one type of RR.`",16,{"inputs":[{"name":"self"}],"output":{"name":"recordtype"}}],[11,"query_class","","`text QCLASS a two octet code that specifies the class of the query. For example, the QCLASS field is IN for the Internet.`",16,{"inputs":[{"name":"self"}],"output":{"name":"dnsclass"}}],[11,"emit","","",16,{"inputs":[{"name":"self"},{"name":"binencoder"}],"output":{"name":"protoresult"}}],[11,"read","","",16,{"inputs":[{"name":"bindecoder"}],"output":{"name":"protoresult"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[0,"response_code","trust_dns_proto::op","All defined response codes in DNS",null,null],[4,"ResponseCode","trust_dns_proto::op::response_code","The status code of the response to a query.",null,null],[13,"NoError","","No Error RFC 1035",17,null],[13,"FormErr","","Format Error RFC 1035",17,null],[13,"ServFail","","Server Failure RFC 1035",17,null],[13,"NXDomain","","Non-Esistent Domain RFC 1035",17,null],[13,"NotImp","","Not Implemented RFC 1035",17,null],[13,"Refused","","Query Refused RFC 1035",17,null],[13,"YXDomain","","Name Exists when it should not RFC 2136",17,null],[13,"YXRRSet","","RR Set Exists when it should not RFC 2136",17,null],[13,"NXRRSet","","RR Set that should exist does not RFC 2136",17,null],[13,"NotAuth","","Server Not Authoritative for zone RFC 2136 or Not Authorized RFC 2845",17,null],[13,"NotZone","","Name not contained in zone RFC 2136",17,null],[13,"BADVERS","","Bad OPT Version RFC 6891",17,null],[13,"BADSIG","","TSIG Signature Failure RFC 2845",17,null],[13,"BADKEY","","Key not recognized RFC 2845",17,null],[13,"BADTIME","","Signature out of time window RFC 2845",17,null],[13,"BADMODE","","Bad TKEY Mode RFC 2930",17,null],[13,"BADNAME","","Duplicate key name RFC 2930",17,null],[13,"BADALG","","Algorithm not supported RFC 2930",17,null],[13,"BADTRUNC","","Bad Truncation RFC 4635",17,null],[13,"BADCOOKIE","","Bad/missing server cookie draft-ietf-dnsop-cookies",17,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"responsecode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"responsecode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"responsecode"}}],[11,"low","","returns the lower 4 bits of the response code (for the original header portion of the code)",17,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"high","","returns the high 12 bits for the edns portion of the response code",17,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from","","Combines the EDNS high and low from the Header to produce the Extended ResponseCode",17,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"responsecode"}}],[11,"to_str","","Transforms the response code into the human message",17,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",17,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[0,"rr","trust_dns_proto","Resource record related components, e.g. `Name` aka label, `Record`, `RData`, ...",null,null],[3,"Name","trust_dns_proto::rr","Them should be through references. As a workaround the Strings are all Rc as well as the array",null,null],[3,"RecordSet","","Set of resource records associated to a name and type",null,null],[0,"dns_class","","class of DNS operations, in general always IN for internet",null,null],[4,"DNSClass","trust_dns_proto::rr::dns_class","The DNS Record class",null,null],[13,"IN","","Internet",18,null],[13,"CH","","Chaos",18,null],[13,"HS","","Hesiod",18,null],[13,"NONE","","QCLASS NONE",18,null],[13,"ANY","","QCLASS * (ANY)",18,null],[13,"OPT","","Special class for OPT Version, it was overloaded for EDNS - RFC 6891 From the RFC: `Values lower than 512 MUST be treated as equal to 512`",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"dnsclass"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"dnsclass"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"dnsclass"}}],[11,"from_str","","Convert from `&str` to `DNSClass`",18,{"inputs":[{"name":"str"}],"output":{"name":"protoresult"}}],[11,"from_u16","","Convert from u16 to DNSClass",18,{"inputs":[{"name":"u16"}],"output":{"name":"protoresult"}}],[11,"for_opt","","Return the OPT version from value",18,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"emit","","",18,{"inputs":[{"name":"self"},{"name":"binencoder"}],"output":{"name":"protoresult"}}],[11,"read","","",18,{"inputs":[{"name":"bindecoder"}],"output":{"name":"protoresult"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"dnsclass"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[0,"domain","trust_dns_proto::rr","Domain name associated types, suchas Name and Label.",null,null],[3,"Name","trust_dns_proto::rr::domain","Them should be through references. As a workaround the Strings are all Rc as well as the array",null,null],[3,"Label","","Labels are always stored as ASCII, unicode characters must be encoded with punycode",null,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"label"}}],[11,"from_raw_bytes","","These must only be ASCII, with unicode encoded to PunyCode, or other such transformation.",19,null],[11,"from_utf8","","Translates this string into IDNA safe name, encoding to punycode as necessary.",19,{"inputs":[{"name":"str"}],"output":{"name":"protoresult"}}],[11,"from_ascii","","Takes the ascii string and returns a new label.",19,{"inputs":[{"name":"str"}],"output":{"name":"protoresult"}}],[11,"to_lowercase","","Converts this label to lowercase",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"is_wildcard","","Returns true if this label is the wildcard, '*', label",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the lenght in bytes of this label",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_bytes","","Returns the raw bytes of the label, this is good for writing to the wire.",19,null],[11,"eq_ignore_ascii_case","","Performs the equivelence operation disregarding case",19,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp_with_f","","compares with the other label, ignoring case",19,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"to_utf8","","Performs the conversion to utf8 from IDNA as necessary, see `fmt` for more details",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_ascii","","Converts this label to safe ascii, escaping characters as necessary",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"write_ascii","","Writes this label to safe ascii, escaping characters as necessary",19,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[11,"as_ref","","",19,null],[11,"borrow","","",19,null],[11,"fmt","","outputs characters in a safe string manner.",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"label"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",19,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",19,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"into_label","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["label"],"name":"protoresult"}}],[11,"clone","trust_dns_proto::rr","",20,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"name"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"new","","Create a new domain::Name, i.e. label",20,{"inputs":[],"output":{"name":"self"}}],[11,"root","","Returns the root label, i.e. no labels, can probably make this better in the future.",20,{"inputs":[],"output":{"name":"self"}}],[11,"is_root","","Returns true if there are no labels, i.e. it's empty.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fqdn","","Returns true if the name is a fully qualified domain name.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_fqdn","","Specifies this name is a fully qualified domain name",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"iter","","Returns an iterator over the labels",20,{"inputs":[{"name":"self"}],"output":{"name":"labeliter"}}],[11,"append_label","","Appends the label to the end of this name",20,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"protoresult"}}],[11,"from_labels","","Creates a new Name from the specified labels",20,{"inputs":[{"name":"i"}],"output":{"name":"protoresult"}}],[11,"append_name","","Appends `other` to `self`, returning a new `Name`",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"append_domain","","Appends the `domain` to `self`, making the new Name an FQDN",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"to_lowercase","","Creates a new Name with all labels lowercased",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"base_name","","Trims off the first part of the name, to help with searching for the domain piece",20,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"trim_to","","Trims to the number of labels specified",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"name"}}],[11,"zone_of_case","","same as zone_of allows for case sensitive call",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"zone_of","","returns true if the name components of self are all present at the end of name",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"num_labels","","Returns the number of labels in the name, discounting `*`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"len","","returns the length in bytes of the labels. '.' counts as 1",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the length of the labels, in bytes is 0. In practive, since '.' counts as 1, this is never the case so the method returns false.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parse","","attempts to parse a name such as `\"example.com.\"` or `\"subdomain.example.com.\"`",20,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"protoresult"}}],[11,"from_ascii","","Will convert the string to a name only allowing ascii as valid input ",20,{"inputs":[{"name":"s"}],"output":{"name":"protoresult"}}],[11,"emit_as_canonical","","Emits the canonical version of the name to the encoder.",20,{"inputs":[{"name":"self"},{"name":"binencoder"},{"name":"bool"}],"output":{"name":"protoresult"}}],[11,"emit_with_lowercase","","Writes the labels, as lower case, to the encoder",20,{"inputs":[{"name":"self"},{"name":"binencoder"},{"name":"bool"}],"output":{"name":"protoresult"}}],[11,"cmp_case","","Case sensitive comparison",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"eq_case","","Compares the Names, in a case sensitive manner",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii","","Converts this name into an ascii safe string.",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_utf8","","Converts the Name labels to the utf8 String form.",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_localhost","","Returns true if the `Name` is either localhost or in the localhost zone.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",20,{"inputs":[{"name":"ipaddr"}],"output":{"name":"name"}}],[11,"from","","",20,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"name"}}],[11,"from","","",20,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"name"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"emit","","",20,{"inputs":[{"name":"self"},{"name":"binencoder"}],"output":{"name":"protoresult"}}],[11,"read","","parses the chain of labels  this has a max of 255 octets, with each label being less than 63.  all names will be stored lowercase internally. This will consume the portions of the Vec which it is reading...",20,{"inputs":[{"name":"bindecoder"}],"output":{"generics":["name"],"name":"protoresult"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"label"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","Case insensitive comparison, see [`Name::cmp_case`] for case sensitive comparisons",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"from_str","","Uses the Name::from_utf8 conversion on this string, see [`from_ascii`] for ascii only, or for preserving case",20,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"into_name","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["name"],"name":"protoresult"}}],[0,"usage","trust_dns_proto::rr::domain","Reserved zone names.",null,null],[3,"DEFAULT","trust_dns_proto::rr::domain::usage","Default Name usage, everything is normal...",null,null],[3,"IN_ADDR_ARPA","","zone for ipv4 reverse addresses",null,null],[3,"IP6_ARPA","","zone for ipv6 reverse addresses",null,null],[3,"LOCALHOST","","localhost. usage",null,null],[3,"IN_ADDR_ARPA_127","","127.in-addr.arpa. usage; 127/8 is reserved for loopback",null,null],[3,"IP6_ARPA_1","","1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa. usage; 1/128 is the only address in ipv6 loopback",null,null],[3,"INVALID","","invalid. name usage",null,null],[3,"ZoneUsage","","ZoneUsage represents information about how a name falling in a given zone should be treated",null,null],[4,"UserUsage","","Users:",null,null],[13,"Normal","","Users are free to use these names as they would any other reverse-mapping names.  However, since there is no central authority responsible for use of private addresses, users SHOULD be aware that these names are likely to yield different results on different networks.",21,null],[13,"Loopback","","Users are free to use localhost names as they would any other domain names.  Users may assume that IPv4 and IPv6 address queries for localhost names will always resolve to the respective IP loopback address.",21,null],[13,"NxDomain","","Users are free to use \"invalid\" names as they would any other domain names.  Users MAY assume that queries for \"invalid\" names will always return NXDOMAIN responses.",21,null],[4,"AppUsage","","Application Software:",null,null],[13,"Normal","","Application software SHOULD NOT recognize these names as special, and SHOULD use these names as they would other reverse-mapping names.",22,null],[13,"Loopback","","Application software MAY recognize localhost names as special, or MAY pass them to name resolution APIs as they would for other domain names.",22,null],[13,"NxDomain","","Application software MAY recognize \"invalid\" names as special or MAY pass them to name resolution APIs as they would for other domain names.",22,null],[4,"ResolverUsage","","Name Resolution APIs and Libraries:",null,null],[13,"Normal","","Name resolution APIs and libraries SHOULD NOT recognize these names as special and SHOULD NOT treat them differently.  Name resolution APIs SHOULD send queries for these names to their configured caching DNS server(s).",23,null],[13,"Loopback","","Name resolution APIs and libraries SHOULD recognize localhost names as special and SHOULD always return the IP loopback address for address queries and negative responses for all other query types.  Name resolution APIs SHOULD NOT send queries for localhost names to their configured caching DNS server(s).",23,null],[13,"NxDomain","","Name resolution APIs and libraries SHOULD recognize \"invalid\" names as special and SHOULD always return immediate negative responses.  Name resolution APIs SHOULD NOT send queries for \"invalid\" names to their configured caching DNS server(s).",23,null],[4,"CacheUsage","","Caching DNS Servers:",null,null],[13,"NonRecursive","","Caching DNS servers SHOULD recognize these names as special and SHOULD NOT, by default, attempt to look up NS records for them, or otherwise query authoritative DNS servers in an attempt to resolve these names.  Instead, caching DNS servers SHOULD, by default, generate immediate (positive or negative) responses for all such queries.  This is to avoid unnecessary load on the root name servers and other name servers.  Caching DNS servers SHOULD offer a configuration option (disabled by default) to enable upstream resolution of such names, for use in private networks where private-address reverse-mapping names are known to be handled by an authoritative DNS server in said private network.",24,null],[13,"NxDomain","","Caching DNS servers SHOULD recognize \"invalid\" names as special and SHOULD NOT attempt to look up NS records for them, or otherwise query authoritative DNS servers in an attempt to resolve \"invalid\" names.  Instead, caching DNS servers SHOULD generate immediate NXDOMAIN responses for all such queries.  This is to avoid unnecessary load on the root name servers and other name servers.",24,null],[13,"Loopback","","Caching DNS servers SHOULD recognize localhost names as special and SHOULD NOT attempt to look up NS records for them, or otherwise query authoritative DNS servers in an attempt to resolve localhost names.  Instead, caching DNS servers SHOULD, for all such address queries, generate an immediate positive response giving the IP loopback address, and for all other query types, generate an immediate negative response.  This is to avoid unnecessary load on the root name servers and other name servers.",24,null],[13,"Normal","","Caching DNS servers SHOULD NOT recognize example names as special and SHOULD resolve them normally.",24,null],[4,"AuthUsage","","Authoritative DNS Servers:",null,null],[13,"Local","","Authoritative DNS servers SHOULD recognize these names as special and SHOULD, by default, generate immediate negative responses for all such queries, unless explicitly configured by the administrator to give positive answers for private-address reverse-mapping names.",25,null],[13,"NxDomain","","Authoritative DNS servers SHOULD recognize these names as special and SHOULD, by default, generate immediate negative responses for all such queries, unless explicitly configured by the administrator to give positive answers for private-address reverse-mapping names.",25,null],[13,"Loopback","","Authoritative DNS servers SHOULD recognize localhost names as special and handle them as described above for caching DNS servers.",25,null],[13,"Normal","","Authoritative DNS servers SHOULD NOT recognize example names as special.",25,null],[4,"OpUsage","","DNS Server Operators:",null,null],[13,"Normal","","DNS server operators SHOULD, if they are using private addresses, configure their authoritative DNS servers to act as authoritative for these names.",26,null],[13,"Loopback","","DNS server operators SHOULD be aware that the effective RDATA for localhost names is defined by protocol specification and cannot be modified by local configuration.",26,null],[13,"NxDomain","","DNS server operators SHOULD be aware that the effective RDATA for \"invalid\" names is defined by protocol specification to be nonexistent and cannot be modified by local configuration.",26,null],[4,"RegistryUsage","","DNS Registries/Registrars:",null,null],[13,"Normal","","Stanard checks apply",27,null],[13,"Reserved","","DNS Registries/Registrars MUST NOT grant requests to register test names in the normal way to any person or entity.  Test names are reserved for use in private networks and fall outside the set of names available for allocation by registries/registrars. Attempting to allocate a test name as if it were a normal DNS domain name will probably not work as desired, for reasons 4, 5, and 6 above.",27,null],[11,"deref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"zoneusage"}}],[11,"initialize","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"initialize","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"initialize","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"zoneusage"}}],[11,"initialize","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"zoneusage"}}],[11,"initialize","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"zoneusage"}}],[11,"initialize","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"zoneusage"}}],[11,"initialize","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"userusage"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"userusage"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"appusage"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"appusage"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"resolverusage"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"resolverusage"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"cacheusage"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"cacheusage"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"authusage"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"authusage"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"opusage"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"opusage"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"registryusage"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"registryusage"}],"output":{"name":"bool"}}],[11,"new","","Constructs a new ZoneUsage with the associated values",35,{"inputs":[{"name":"name"},{"name":"userusage"},{"name":"appusage"},{"name":"resolverusage"},{"name":"cacheusage"},{"name":"authusage"},{"name":"opusage"},{"name":"registryusage"}],"output":{"name":"self"}}],[11,"default","","Constructs a new Default, with all no restrictions",35,{"inputs":[],"output":{"name":"self"}}],[11,"reverse","","Restrictions for reverse zones",35,{"inputs":[{"name":"name"}],"output":{"name":"self"}}],[11,"test","","Restrictions for the .test. zone",35,{"inputs":[{"name":"name"}],"output":{"name":"self"}}],[11,"localhost","","Restrictions for the .localhost. zone",35,{"inputs":[{"name":"name"}],"output":{"name":"self"}}],[11,"invalid","","Restrictions for the .invalid. zone",35,{"inputs":[{"name":"name"}],"output":{"name":"self"}}],[11,"example","","Restrictions for the .example. zone",35,{"inputs":[{"name":"name"}],"output":{"name":"self"}}],[11,"name","","A reference to this zone name",35,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"user","","Returnes the UserUsage of this zone",35,{"inputs":[{"name":"self"}],"output":{"name":"userusage"}}],[11,"app","","Returnes the AppUsage of this zone",35,{"inputs":[{"name":"self"}],"output":{"name":"appusage"}}],[11,"resolver","","Returnes the ResolverUsage of this zone",35,{"inputs":[{"name":"self"}],"output":{"name":"resolverusage"}}],[11,"cache","","Returnes the CacheUsage of this zone",35,{"inputs":[{"name":"self"}],"output":{"name":"cacheusage"}}],[11,"auth","","Returnes the AuthUsage of this zone",35,{"inputs":[{"name":"self"}],"output":{"name":"authusage"}}],[11,"op","","Returnes the OpUsage of this zone",35,{"inputs":[{"name":"self"}],"output":{"name":"opusage"}}],[11,"registry","","Returnes the RegistryUsage of this zone",35,{"inputs":[{"name":"self"}],"output":{"name":"registryusage"}}],[11,"deref","","",35,null],[8,"IntoName","trust_dns_proto::rr::domain","Conversion into a Name",null,null],[10,"into_name","","Convert this into Name",36,{"inputs":[{"name":"self"}],"output":{"generics":["name"],"name":"protoresult"}}],[8,"IntoLabel","","Conversion into a Label",null,null],[10,"into_label","","Convert this into Label",37,{"inputs":[{"name":"self"}],"output":{"generics":["label"],"name":"protoresult"}}],[0,"rdata","trust_dns_proto::rr","All record data structures and related serialization methods",null,null],[0,"a","trust_dns_proto::rr::rdata","IPv4 address record data",null,null],[5,"read","trust_dns_proto::rr::rdata::a","Read the RData from the given Decoder",null,{"inputs":[{"name":"bindecoder"}],"output":{"generics":["ipv4addr"],"name":"protoresult"}}],[5,"emit","","Write the RData from the given Decoder",null,{"inputs":[{"name":"binencoder"},{"name":"ipv4addr"}],"output":{"name":"protoresult"}}],[0,"aaaa","trust_dns_proto::rr::rdata","IPv6 address record data",null,null],[5,"read","trust_dns_proto::rr::rdata::aaaa","Read the RData from the given Decoder",null,{"inputs":[{"name":"bindecoder"}],"output":{"generics":["ipv6addr"],"name":"protoresult"}}],[5,"emit","","Write the RData from the given Decoder",null,{"inputs":[{"name":"binencoder"},{"name":"ipv6addr"}],"output":{"name":"protoresult"}}],[0,"caa","trust_dns_proto::rr::rdata","allows a DNS domain name holder to specify one or more Certification Authorities (CAs) authorized to issue certificates for that domain.",null,null],[3,"CAA","trust_dns_proto::rr::rdata::caa","The CAA RR Type",null,null],[3,"KeyValue","","Issuer key and value pairs.",null,null],[4,"Property","","Specifies in what contexts this key may be trusted for use",null,null],[13,"Issue","","The issue property entry authorizes the holder of the domain name  or a party acting under the explicit authority of the holder of that domain name to issue certificates for the domain in which the property is published.",38,null],[13,"IssueWild","","The issuewild property entry authorizes the holder of the domain name  or a party acting under the explicit authority of the holder of that domain name to issue wildcard certificates for the domain in which the property is published.",38,null],[13,"Iodef","","Specifies a URL to which an issuer MAY report certificate issue requests that are inconsistent with the issuer's Certification Practices or Certificate Policy, or that a Certificate Evaluator may use to report observation of a possible policy violation. The Incident Object Description Exchange Format (IODEF) format is used [RFC5070].",38,null],[13,"Unknown","","Unknown format to TRust-DNS",38,null],[4,"Value","","Potential values.",null,null],[13,"Issuer","","Issuer authorized to issue certs for this zone, and any associated parameters",39,null],[13,"Url","","Url to which to send CA errors",39,null],[13,"Unknown","","Unrecognized tag and value by TRust-DNS",39,null],[5,"read_issuer","","Reads the issuer field according to the spec",null,null],[5,"read_iodef","","Incident Object Description Exchange Format",null,null],[5,"read","","Read the bincary CAA format",null,{"inputs":[{"name":"bindecoder"},{"name":"u16"}],"output":{"generics":["caa"],"name":"protoresult"}}],[5,"emit","","Write the RData from the given Decoder",null,{"inputs":[{"name":"binencoder"},{"name":"caa"}],"output":{"name":"protoresult"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"caa"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"caa"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"caa"}}],[11,"new_issue","","Creates a new CAA issue record data, the tag is `issue`",40,{"inputs":[{"name":"bool"},{"generics":["name"],"name":"option"},{"generics":["keyvalue"],"name":"vec"}],"output":{"name":"self"}}],[11,"new_issuewild","","Creates a new CAA issue record data, the tag is `issuewild`",40,{"inputs":[{"name":"bool"},{"generics":["name"],"name":"option"},{"generics":["keyvalue"],"name":"vec"}],"output":{"name":"self"}}],[11,"new_iodef","","Creates a new CAA issue record data, the tag is `iodef`",40,{"inputs":[{"name":"bool"},{"name":"url"}],"output":{"name":"self"}}],[11,"issuer_critical","","Indicates that the corresponding property tag MUST be understood if the semantics of the CAA record are to be correctly interpreted by an issuer",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"tag","","The property tag, see struct documentation",40,{"inputs":[{"name":"self"}],"output":{"name":"property"}}],[11,"value","","a potentially associated value with the property tag, see struct documentation",40,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"property"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"property"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"property"}}],[11,"is_issue","","true if the property is `issue`",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_issuewild","","true if the property is `issueworld`",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_iodef","","true if the property is `iodef`",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unknown","","true if the property is not known to TRust-DNS",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",38,{"inputs":[{"name":"string"}],"output":{"name":"property"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"is_issuer","","true if this is an `Issuer`",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_url","","true if this is a `Url`",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unknown","","true if this is an `Unknown`",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"keyvalue"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"keyvalue"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"keyvalue"}}],[11,"new","","Contstruct a new KeyValue pair",41,{"inputs":[{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[0,"mx","trust_dns_proto::rr::rdata","mail exchange, email, record",null,null],[3,"MX","trust_dns_proto::rr::rdata::mx","RFC 1035, DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION, November 1987",null,null],[5,"read","","Read the RData from the given Decoder",null,{"inputs":[{"name":"bindecoder"}],"output":{"generics":["mx"],"name":"protoresult"}}],[5,"emit","","RFC 4034, DNSSEC Resource Records, March 2005",null,{"inputs":[{"name":"binencoder"},{"name":"mx"}],"output":{"name":"protoresult"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"mx"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"mx"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"mx"}}],[11,"new","","Constructs a new MX RData",42,{"inputs":[{"name":"u16"},{"name":"name"}],"output":{"name":"mx"}}],[11,"preference","","RFC 1035, DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION, November 1987",42,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"exchange","","RFC 1035, DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION, November 1987",42,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[0,"name","trust_dns_proto::rr::rdata","Record type for all cname like records.",null,null],[5,"read","trust_dns_proto::rr::rdata::name","Read the RData from the given Decoder",null,{"inputs":[{"name":"bindecoder"}],"output":{"generics":["name"],"name":"protoresult"}}],[5,"emit","","RFC 4034, DNSSEC Resource Records, March 2005",null,{"inputs":[{"name":"binencoder"},{"name":"name"}],"output":{"name":"protoresult"}}],[0,"null","trust_dns_proto::rr::rdata","null record type, generally not used except as an internal tool for representing null data",null,null],[3,"NULL","trust_dns_proto::rr::rdata::null","RFC 1035, DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION, November 1987",null,null],[5,"read","","Read the RData from the given Decoder",null,{"inputs":[{"name":"bindecoder"},{"name":"u16"}],"output":{"generics":["null"],"name":"protoresult"}}],[5,"emit","","Write the RData from the given Decoder",null,{"inputs":[{"name":"binencoder"},{"name":"null"}],"output":{"name":"protoresult"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"null"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"null"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"null"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"null"}}],[11,"new","","Construct a new NULL RData",43,{"inputs":[],"output":{"name":"null"}}],[11,"with","","Constructs a new NULL RData with the associated data",43,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"null"}}],[11,"anything","","Returns the buffer stored in the NULL",43,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[0,"opt","trust_dns_proto::rr::rdata","option record for passing protocol options between the client and server",null,null],[3,"OPT","trust_dns_proto::rr::rdata::opt","The OPT record type is used for ExtendedDNS records.",null,null],[4,"EdnsCode","","The code of the EDNS data option",null,null],[13,"Zero","","RFC 6891, Reserved",44,null],[13,"LLQ","","LLQ On-hold",44,null],[13,"UL","","UL On-hold",44,null],[13,"NSID","","RFC 5001, NSID",44,null],[13,"DAU","","RFC 6975, DNSSEC Algorithm Understood",44,null],[13,"DHU","","RFC 6975, DS Hash Understood",44,null],[13,"N3U","","RFC 6975, NSEC3 Hash Understood",44,null],[13,"Subnet","","edns-client-subnet, Optional",44,null],[13,"Expire","","RFC 7314, EDNS EXPIRE, Optional",44,null],[13,"Cookie","","draft-ietf-dnsop-cookies",44,null],[13,"Keepalive","","draft-ietf-dnsop-edns-tcp-keepalive, Optional",44,null],[13,"Padding","","draft-mayrhofer-edns0-padding, Optional",44,null],[13,"Chain","","draft-ietf-dnsop-edns-chain-query",44,null],[13,"Unknown","","Unknown, used to deal with unknown or unsupported codes",44,null],[4,"EdnsOption","","options used to pass information about capabilities between client and server",null,null],[13,"Unknown","","Unknown, used to deal with unknown or unsupported codes",45,null],[5,"read","","Read the RData from the given Decoder",null,{"inputs":[{"name":"bindecoder"},{"name":"u16"}],"output":{"generics":["opt"],"name":"protoresult"}}],[5,"emit","","Write the RData from the given Decoder",null,{"inputs":[{"name":"binencoder"},{"name":"opt"}],"output":{"name":"protoresult"}}],[11,"default","","",46,{"inputs":[],"output":{"name":"opt"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"opt"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"opt"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"opt"}}],[11,"new","","Creates a new OPT record data.",46,{"inputs":[{"generics":["ednscode","ednsoption"],"name":"hashmap"}],"output":{"name":"opt"}}],[11,"options","","The entire map of options",46,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"get","","Get a single option based on the code",46,{"inputs":[{"name":"self"},{"name":"ednscode"}],"output":{"generics":["ednsoption"],"name":"option"}}],[11,"insert","","Insert a new option, the key is derived from the `EdnsOption`",46,{"inputs":[{"name":"self"},{"name":"ednsoption"}],"output":null}],[11,"hash","","",44,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"ednscode"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"ednscode"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"ednscode"}],"output":{"name":"bool"}}],[11,"from","","",44,{"inputs":[{"name":"u16"}],"output":{"name":"ednscode"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"self"},{"name":"ednsoption"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",45,{"inputs":[{"name":"self"},{"name":"ednsoption"}],"output":{"name":"bool"}}],[11,"le","","",45,{"inputs":[{"name":"self"},{"name":"ednsoption"}],"output":{"name":"bool"}}],[11,"gt","","",45,{"inputs":[{"name":"self"},{"name":"ednsoption"}],"output":{"name":"bool"}}],[11,"ge","","",45,{"inputs":[{"name":"self"},{"name":"ednsoption"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"ednsoption"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"ednsoption"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"ednsoption"}}],[11,"hash","","",45,null],[11,"len","","Returns the length in bytes of the EdnsOption",45,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"is_empty","","Returns `true` if the length in bytes of the EdnsOption is 0",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"emit","","",45,{"inputs":[{"name":"self"},{"name":"binencoder"}],"output":{"name":"protoresult"}}],[11,"from","","",45,null],[11,"from","","",44,{"inputs":[{"name":"ednsoption"}],"output":{"name":"ednscode"}}],[0,"soa","trust_dns_proto::rr::rdata","start of authority record defining ownership and defaults for the zone",null,null],[3,"SOA","trust_dns_proto::rr::rdata::soa","RFC 1035, DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION, November 1987",null,null],[5,"read","","Read the RData from the given Decoder",null,{"inputs":[{"name":"bindecoder"}],"output":{"generics":["soa"],"name":"protoresult"}}],[5,"emit","","RFC 4034, DNSSEC Resource Records, March 2005",null,{"inputs":[{"name":"binencoder"},{"name":"soa"}],"output":{"name":"protoresult"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"soa"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"soa"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"soa"}}],[11,"new","","Creates a new SOA record data.",47,{"inputs":[{"name":"name"},{"name":"name"},{"name":"u32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"increment_serial","","Increments the serial number by one",47,{"inputs":[{"name":"self"}],"output":null}],[11,"mname","","`text MNAME The <domain-name> of the name server that was the original or primary source of data for this zone.`",47,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rname","","`text RNAME A <domain-name> which specifies the mailbox of the person responsible for this zone.`",47,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"serial","","`text SERIAL The unsigned 32 bit version number of the original copy of the zone. Zone transfers preserve this value. This value wraps and should be compared using sequence space arithmetic.`",47,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"refresh","","`text REFRESH A 32 bit time interval before the zone should be refreshed.`",47,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"retry","","`text RETRY A 32 bit time interval that should elapse before a failed refresh should be retried.`",47,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"expire","","`text EXPIRE A 32 bit time value that specifies the upper limit on the time interval that can elapse before the zone is no longer authoritative.`",47,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"minimum","","`text MINIMUM The unsigned 32 bit minimum TTL field that should be exported with any RR from this zone.`",47,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[0,"srv","trust_dns_proto::rr::rdata","service records for identify port mapping for specific services on a host",null,null],[3,"SRV","trust_dns_proto::rr::rdata::srv","RFC 2782, DNS SRV RR, February 2000",null,null],[5,"read","","Read the RData from the given Decoder",null,{"inputs":[{"name":"bindecoder"}],"output":{"generics":["srv"],"name":"protoresult"}}],[5,"emit","","RFC 4034, DNSSEC Resource Records, March 2005",null,{"inputs":[{"name":"binencoder"},{"name":"srv"}],"output":{"name":"protoresult"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"srv"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"srv"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"srv"}}],[11,"new","","Creates a new SRV record data.",48,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"name"}],"output":{"name":"srv"}}],[11,"priority","","`text Priority The priority of this target host. A client MUST attempt to contact the target host with the lowest-numbered priority it can reach; target hosts with the same priority SHOULD be tried in an order defined by the weight field. The range is 0-65535. This is a 16 bit unsigned integer in network byte order.`",48,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"weight","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"port","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"target","","",48,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[0,"tlsa","trust_dns_proto::rr::rdata","TLSA records for storing TLS certificate validation information",null,null],[3,"TLSA","trust_dns_proto::rr::rdata::tlsa","RFC 6698, DNS-Based Authentication for TLS",null,null],[4,"CertUsage","","RFC 6698, DNS-Based Authentication for TLS",null,null],[13,"CA","","`text 0 -- Certificate usage 0 is used to specify a CA certificate, or the public key of such a certificate, that MUST be found in any of the PKIX certification paths for the end entity certificate given by the server in TLS. This certificate usage is sometimes referred to as \"CA constraint\" because it limits which CA can be used to issue certificates for a given service on a host. The presented certificate MUST pass PKIX certification path validation, and a CA certificate that matches the TLSA record MUST be included as part of a valid certification path. Because this certificate usage allows both trust anchors and CA certificates, the certificate might or might not have the basicConstraints extension present.`",49,null],[13,"Service","","`text 1 -- Certificate usage 1 is used to specify an end entity certificate, or the public key of such a certificate, that MUST be matched with the end entity certificate given by the server in TLS. This certificate usage is sometimes referred to as \"service certificate constraint\" because it limits which end entity certificate can be used by a given service on a host. The target certificate MUST pass PKIX certification path validation and MUST match the TLSA record.`",49,null],[13,"TrustAnchor","","`text 2 -- Certificate usage 2 is used to specify a certificate, or the public key of such a certificate, that MUST be used as the trust anchor when validating the end entity certificate given by the server in TLS. This certificate usage is sometimes referred to as \"trust anchor assertion\" and allows a domain name administrator to specify a new trust anchor -- for example, if the domain issues its own certificates under its own CA that is not expected to be in the end users' collection of trust anchors. The target certificate MUST pass PKIX certification path validation, with any certificate matching the TLSA record considered to be a trust anchor for this certification path validation.`",49,null],[13,"DomainIssued","","`text 3 -- Certificate usage 3 is used to specify a certificate, or the public key of such a certificate, that MUST match the end entity certificate given by the server in TLS. This certificate usage is sometimes referred to as \"domain-issued certificate\" because it allows for a domain name administrator to issue certificates for a domain without involving a third-party CA. The target certificate MUST match the TLSA record. The difference between certificate usage 1 and certificate usage 3 is that certificate usage 1 requires that the certificate pass PKIX validation, but PKIX validation is not tested for certificate usage 3.`",49,null],[13,"Unassigned","","Unassined at the time of this implementation",49,null],[13,"Private","","Private usage",49,null],[4,"Selector","","RFC 6698, DNS-Based Authentication for TLS",null,null],[13,"Full","","Full certificate: the Certificate binary structure as defined in [RFC5280]",50,null],[13,"Spki","","SubjectPublicKeyInfo: DER-encoded binary structure as defined in [RFC5280]",50,null],[13,"Unassigned","","Unassigned at the time of this writing",50,null],[13,"Private","","Private usage",50,null],[4,"Matching","","RFC 6698, DNS-Based Authentication for TLS",null,null],[13,"Raw","","Exact match on selected content",51,null],[13,"Sha256","","SHA-256 hash of selected content [RFC6234]",51,null],[13,"Sha512","","SHA-512 hash of selected content [RFC6234]",51,null],[13,"Unassigned","","Unassigned at the time of this writing",51,null],[13,"Private","","Private usage",51,null],[5,"read","","Read the RData from the given Decoder",null,{"inputs":[{"name":"bindecoder"},{"name":"u16"}],"output":{"generics":["tlsa"],"name":"protoresult"}}],[5,"emit","","Write the RData from the given Decoder",null,{"inputs":[{"name":"binencoder"},{"name":"tlsa"}],"output":{"name":"protoresult"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"tlsa"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"tlsa"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"tlsa"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"certusage"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"certusage"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"certusage"}}],[11,"from","","",49,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"selector"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"selector"}}],[11,"from","","",50,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"matching"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"matching"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"matching"}}],[11,"from","","",51,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"new","","Constructs a new TLSA",52,{"inputs":[{"name":"certusage"},{"name":"selector"},{"name":"matching"},{"generics":["u8"],"name":"vec"}],"output":{"name":"self"}}],[11,"cert_usage","","Specifies the provided association that will be used to match the certificate presented in the TLS handshake",52,{"inputs":[{"name":"self"}],"output":{"name":"certusage"}}],[11,"selector","","Specifies which part of the TLS certificate presented by the server will be matched against the association data",52,{"inputs":[{"name":"self"}],"output":{"name":"selector"}}],[11,"matching","","Specifies how the certificate association is presented",52,{"inputs":[{"name":"self"}],"output":{"name":"matching"}}],[11,"cert_data","","Binary data for validating the cert, see other members to understand format",52,null],[0,"txt","trust_dns_proto::rr::rdata","text records for storing arbitrary data",null,null],[3,"TXT","trust_dns_proto::rr::rdata::txt","RFC 1035, DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION, November 1987",null,null],[5,"read","","Read the RData from the given Decoder",null,{"inputs":[{"name":"bindecoder"},{"name":"u16"}],"output":{"generics":["txt"],"name":"protoresult"}}],[5,"emit","","Write the RData from the given Decoder",null,{"inputs":[{"name":"binencoder"},{"name":"txt"}],"output":{"name":"protoresult"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"txt"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"txt"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"txt"}}],[11,"new","","Creates a new TXT record data.",53,{"inputs":[{"generics":["string"],"name":"vec"}],"output":{"name":"txt"}}],[11,"txt_data","","`text TXT-DATA One or more <character-string>s.`",53,null],[0,"record_data","trust_dns_proto::rr","record data enum variants",null,null],[4,"RData","trust_dns_proto::rr::record_data","Record data enum variants",null,null],[13,"A","","",54,null],[13,"AAAA","","",54,null],[13,"CAA","","",54,null],[13,"CNAME","","",54,null],[13,"MX","","",54,null],[13,"NULL","","",54,null],[13,"NS","","",54,null],[13,"OPT","","",54,null],[13,"PTR","","",54,null],[13,"SOA","","",54,null],[13,"SRV","","",54,null],[13,"TLSA","","RFC 6698, DNS-Based Authentication for TLS",54,null],[13,"TXT","","",54,null],[13,"Unknown","","Unknown RecordData is for record types not supported by TRust-DNS",54,null],[12,"code","trust_dns_proto::rr::record_data::RData","RecordType code",54,null],[12,"rdata","","RData associated to the record",54,null],[13,"ZERO","trust_dns_proto::rr::record_data","This corresponds to a record type of 0, unspecified",54,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"rdata"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"rdata"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"rdata"}}],[11,"read","","Read the RData from the given Decoder",54,{"inputs":[{"name":"bindecoder"},{"name":"recordtype"},{"name":"u16"}],"output":{"name":"protoresult"}}],[11,"emit","","RFC 4034, DNSSEC Resource Records, March 2005",54,{"inputs":[{"name":"self"},{"name":"binencoder"}],"output":{"name":"protoresult"}}],[11,"to_record_type","","Converts this to a Recordtype",54,{"inputs":[{"name":"self"}],"output":{"name":"recordtype"}}],[11,"to_ip_addr","","If this is an A or AAAA record type, then an IpAddr will be returned",54,{"inputs":[{"name":"self"}],"output":{"generics":["ipaddr"],"name":"option"}}],[11,"partial_cmp","","",54,{"inputs":[{"name":"self"},{"name":"rdata"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",54,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[0,"record_type","trust_dns_proto::rr","record type definitions",null,null],[4,"RecordType","trust_dns_proto::rr::record_type","The type of the resource record.",null,null],[13,"A","","RFC 1035[1] IPv4 Address record",55,null],[13,"AAAA","","RFC 3596[2] IPv6 address record",55,null],[13,"ANY","","RFC 1035[1] All cached records, aka ANY",55,null],[13,"AXFR","","RFC 1035[1] Authoritative Zone Transfer",55,null],[13,"CAA","","RFC 6844 Certification Authority Authorization",55,null],[13,"CNAME","","RFC 1035[1] Canonical name record",55,null],[13,"IXFR","","RFC 1996    Incremental Zone Transfer",55,null],[13,"MX","","RFC 1035[1] Mail exchange record",55,null],[13,"NS","","RFC 1035[1] Name server record",55,null],[13,"NULL","","RFC 1035[1] Null server record, for testing",55,null],[13,"OPT","","RFC 6891    Option",55,null],[13,"PTR","","RFC 1035[1] Pointer record",55,null],[13,"SOA","","RFC 1035[1] and RFC 2308[9] Start of [a zone of] authority record",55,null],[13,"SRV","","RFC 2782    Service locator",55,null],[13,"TLSA","","RFC 6698    TLSA certificate association",55,null],[13,"TXT","","RFC 1035[1] Text record",55,null],[13,"Unknown","","Unknown Record type, or unsupported",55,null],[13,"ZERO","","This corresponds to a record type of 0, unspecified",55,null],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"recordtype"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"recordtype"}],"output":{"name":"bool"}}],[11,"hash","","",55,null],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"recordtype"}}],[11,"is_any","","Returns true if this is an ANY",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_cname","","Returns true if this is a CNAME",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_srv","","Returns true if this is an SRV",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","Convert `&str` to `RecordType`",55,{"inputs":[{"name":"str"}],"output":{"name":"protoresult"}}],[11,"from","","Convert from `u16` to `RecordType`",55,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"emit","","",55,{"inputs":[{"name":"self"},{"name":"binencoder"}],"output":{"name":"protoresult"}}],[11,"read","","",55,{"inputs":[{"name":"bindecoder"}],"output":{"name":"protoresult"}}],[11,"partial_cmp","","",55,{"inputs":[{"name":"self"},{"name":"recordtype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",55,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[0,"resource","trust_dns_proto::rr","resource record implementation",null,null],[3,"Record","trust_dns_proto::rr::resource","Resource records are storage value in DNS, into which all key/value pair data is stored.",null,null],[11,"cmp","","",56,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"ordering"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"record"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a default record, use the setters to build a more useful object.",56,{"inputs":[],"output":{"name":"record"}}],[11,"with","","Create a record with the specified initial values.",56,{"inputs":[{"name":"name"},{"name":"recordtype"},{"name":"u32"}],"output":{"name":"record"}}],[11,"from_rdata","","Create a record with the specified initial values.",56,{"inputs":[{"name":"name"},{"name":"u32"},{"name":"recordtype"},{"name":"rdata"}],"output":{"name":"record"}}],[11,"set_name","","`text NAME a domain name to which this resource record pertains.`",56,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"self"}}],[11,"set_rr_type","","`text TYPE two octets containing one of the RR type codes. This field specifies the meaning of the data in the RDATA field.`",56,{"inputs":[{"name":"self"},{"name":"recordtype"}],"output":{"name":"self"}}],[11,"set_dns_class","","`text CLASS two octets which specify the class of the data in the RDATA field.`",56,{"inputs":[{"name":"self"},{"name":"dnsclass"}],"output":{"name":"self"}}],[11,"set_ttl","","`text TTL a 32 bit unsigned integer that specifies the time interval (in seconds) that the resource record may be cached before it should be discarded. Zero values are interpreted to mean that the RR can only be used for the transaction in progress, and should not be cached.`",56,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"set_rdata","","`text RDATA a variable length string of octets that describes the resource. The format of this information varies according to the TYPE and CLASS of the resource record. For example, the if the TYPE is A and the CLASS is IN, the RDATA field is a 4 octet ARPA Internet address.`",56,{"inputs":[{"name":"self"},{"name":"rdata"}],"output":{"name":"self"}}],[11,"name","","Returns the name of the record",56,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rr_type","","Returns the type of the RData in the record",56,{"inputs":[{"name":"self"}],"output":{"name":"recordtype"}}],[11,"dns_class","","Returns the DNSClass of the Record, generally IN fro internet",56,{"inputs":[{"name":"self"}],"output":{"name":"dnsclass"}}],[11,"ttl","","Returns the time-to-live of the record, for caching purposes",56,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rdata","","Returns the Record Data, i.e. the record information",56,{"inputs":[{"name":"self"}],"output":{"name":"rdata"}}],[11,"rdata_mut","","Returns a mutable reference to the Record Data",56,{"inputs":[{"name":"self"}],"output":{"name":"rdata"}}],[11,"unwrap_rdata","","Returns the RData consuming the Record",56,{"inputs":[{"name":"self"}],"output":{"name":"rdata"}}],[11,"into_record_set","","",56,{"inputs":[{"name":"self"}],"output":{"name":"recordset"}}],[11,"emit","","",56,{"inputs":[{"name":"self"},{"name":"binencoder"}],"output":{"name":"protoresult"}}],[11,"read","","parse a resource record line example: WARNING: the record_bytes is 100% consumed and destroyed in this parsing process",56,{"inputs":[{"name":"bindecoder"}],"output":{"generics":["record"],"name":"protoresult"}}],[11,"eq","","Equality or records, as defined by  RFC 2136, DNS Update, April 1997",56,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Canonical ordering as defined by  RFC 4034, DNSSEC Resource Records, March 2005",56,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","trust_dns_proto::rr","",57,{"inputs":[{"name":"self"}],"output":{"name":"recordset"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"recordset"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"recordset"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Resource Record Set.",57,{"inputs":[{"name":"name"},{"name":"recordtype"},{"name":"u32"}],"output":{"name":"self"}}],[11,"with_ttl","","Creates a new Resource Record Set.",57,{"inputs":[{"name":"name"},{"name":"recordtype"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","Creates a new Resource Record Set from a Record",57,{"inputs":[{"name":"record"}],"output":{"name":"self"}}],[11,"name","","Return value",57,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"record_type","","Return value",57,{"inputs":[{"name":"self"}],"output":{"name":"recordtype"}}],[11,"set_dns_class","","Sets the DNSClass to the specified value",57,{"inputs":[{"name":"self"},{"name":"dnsclass"}],"output":null}],[11,"dns_class","","Returns the `DNSClass` of the RecordSet",57,{"inputs":[{"name":"self"}],"output":{"name":"dnsclass"}}],[11,"set_ttl","","Sets the TTL, in seconds, to the specified value",57,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"ttl","","Returns the time-to-live for the record.",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"records_without_rrsigs","","Returns a Vec of all records in the set, without any RRSIGs.",57,{"inputs":[{"name":"self"}],"output":{"generics":["record"],"name":"vec"}}],[11,"iter","","Returns an iterator over the records in the set",57,{"inputs":[{"name":"self"}],"output":{"generics":["record"],"name":"iter"}}],[11,"is_empty","","Returns true if there are no records in this set",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"serial","","Returns the serial number at which the record was updated.",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rrsigs","","Returns a slice of all the Records signatures in the RecordSet",57,null],[11,"insert_rrsig","","Inserts a Signature for the Record set",57,{"inputs":[{"name":"self"},{"name":"record"}],"output":null}],[11,"clear_rrsigs","","Useful for clearing all signatures when the RecordSet is updated, or keys are rotated.",57,{"inputs":[{"name":"self"}],"output":null}],[11,"new_record","","creates a new Record as part of this RecordSet, adding the associated RData",57,{"inputs":[{"name":"self"},{"name":"rdata"}],"output":{"name":"record"}}],[11,"insert","","Inserts a new Resource Record into the Set.",57,{"inputs":[{"name":"self"},{"name":"record"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"remove","","Removes the Resource Record if it exists.",57,{"inputs":[{"name":"self"},{"name":"record"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"into_record_set","","",57,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"into_iter","","",57,null],[8,"IntoName","","Conversion into a Name",null,null],[10,"into_name","","Convert this into Name",36,{"inputs":[{"name":"self"}],"output":{"generics":["name"],"name":"protoresult"}}],[8,"IntoRecordSet","","Types which implement this can be converted into a RecordSet",null,null],[10,"into_record_set","","Performs the conversion to a RecordSet",58,{"inputs":[{"name":"self"}],"output":{"name":"recordset"}}],[11,"clone","trust_dns_proto","",59,{"inputs":[{"name":"self"}],"output":{"name":"retrydnshandle"}}],[11,"new","","Creates a new Client handler for reattempting requests on failures.",59,{"inputs":[{"name":"h"},{"name":"usize"}],"output":{"name":"self"}}],[11,"send","","",59,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"generics":["future"],"name":"box"}}],[0,"serialize","","Contains serialization libraries for `binary` and text, `txt`.",null,null],[0,"binary","trust_dns_proto::serialize","Binary serialization types",null,null],[3,"BinDecoder","trust_dns_proto::serialize::binary","This is non-destructive to the inner buffer, b/c for pointer types we need to perform a reverse  seek to lookup names",null,null],[3,"BinEncoder","","Encode DNS messages and resource record types.",null,null],[4,"EncodeMode","","In the Verify mode there maybe some things which are encoded differently, e.g. SIG0 records should not be included in the additional count and not in the encoded data when in Verify",null,null],[13,"Signing","","In signing mode records are written in canonical form",60,null],[13,"Normal","","Write records in standard format",60,null],[11,"new","","Creates a new BinDecoder",61,null],[11,"pop","","Pop one byte from the buffer",61,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"protoresult"}}],[11,"len","","Returns the number of bytes in the buffer",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the buffer is empty",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"peek","","Peed one byte forward, without moving the current index forward",61,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"index","","Returns the current index in the buffer",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","This is a pretty efficient clone, as the buffer is never cloned, and only the index is set to the value passed in",61,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bindecoder"}}],[11,"read_character_data","","Reads a String from the buffer",61,{"inputs":[{"name":"self"}],"output":{"name":"protoresult"}}],[11,"read_vec","","Reads a Vec out of the buffer",61,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["vec"],"name":"protoresult"}}],[11,"read_slice","","Reads a slice out of the buffer, without allocating",61,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"protoresult"}}],[11,"slice_from","","Reads a slice from a previous index to the current",61,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"protoresult"}}],[11,"read_u8","","Reads a byte from the buffer, equivalent to `Self::pop()`",61,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"protoresult"}}],[11,"read_u16","","Reads the next 2 bytes into u16",61,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"protoresult"}}],[11,"read_i32","","Reads the next four bytes into i32.",61,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"protoresult"}}],[11,"read_u32","","Reads the next four bytes into u32.",61,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"protoresult"}}],[11,"new","","Create a new encoder with the Vec to fill",62,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"with_mode","","Specify the mode for encoding",62,{"inputs":[{"name":"vec"},{"name":"encodemode"}],"output":{"name":"self"}}],[11,"with_offset","","Begins the encoder at the given offset",62,{"inputs":[{"name":"vec"},{"name":"u32"},{"name":"encodemode"}],"output":{"name":"self"}}],[11,"into_bytes","","Returns a reference to the internal buffer",62,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the buffer",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the buffer is empty",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"offset","","Returns the current offset into the buffer",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_offset","","sets the current offset to the new offset",62,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"mode","","Returns the current Encoding mode",62,{"inputs":[{"name":"self"}],"output":{"name":"encodemode"}}],[11,"set_canonical_names","","If set to true, then names will be written into the buffer in canonical form",62,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"is_canonical_names","","Returns true if then encoder is writing in canonical form",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reserve","","Reserve specified length in the internal buffer.",62,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"trim","","trims to the current offset",62,{"inputs":[{"name":"self"}],"output":null}],[11,"emit","","Emit one byte into the buffer",62,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"protoresult"}}],[11,"slice_of","","borrow a slice from the encoder",62,null],[11,"store_label_pointer","","Stores a label pointer to an already written label",62,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"get_label_pointer","","Looks up the index of an already written label",62,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["u16"],"name":"option"}}],[11,"emit_character_data","","matches description from above.",62,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"protoresult"}}],[11,"emit_u8","","Emit one byte into the buffer",62,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"protoresult"}}],[11,"emit_u16","","Writes a u16 in network byte order to the buffer",62,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"protoresult"}}],[11,"emit_i32","","Writes an i32 in network byte order to the buffer",62,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"protoresult"}}],[11,"emit_u32","","Writes an u32 in network byte order to the buffer",62,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"protoresult"}}],[11,"emit_vec","","Writes the byte slice to the stream",62,null],[11,"emit_all","","Emits all the elements of an Iterator to the encoder",62,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"protoresult"}}],[11,"emit_all_refs","","Emits all the elements of an Iterator to the encoder",62,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"protoresult"}}],[11,"place","","capture a location to write back to",62,{"inputs":[{"name":"self"}],"output":{"name":"place"}}],[11,"len_since_place","","calculates the length of data written since the place was creating",62,{"inputs":[{"name":"self"},{"name":"place"}],"output":{"name":"usize"}}],[11,"emit_at","","write back to a previously captured location",62,{"inputs":[{"name":"self"},{"name":"place"},{"name":"t"}],"output":{"name":"protoresult"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"encodemode"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"encodemode"}],"output":{"name":"bool"}}],[8,"BinEncodable","","A type which can be encoded into a DNS binary format",null,null],[10,"emit","","Write the type to the stream",63,{"inputs":[{"name":"self"},{"name":"binencoder"}],"output":{"name":"protoresult"}}],[11,"to_bytes","","Returns the object in binary form",63,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"protoresult"}}],[8,"BinDecodable","","A trait for types which are serializable to and from DNS binary formats",null,null],[10,"read","","Read the type from the stream",64,{"inputs":[{"name":"bindecoder"}],"output":{"name":"protoresult"}}],[11,"from_bytes","","Returns the object in binary form",64,null],[0,"tcp","trust_dns_proto","TCP protocol related components for DNS",null,null],[3,"TcpClientStream","trust_dns_proto::tcp","Tcp client stream",null,null],[3,"TcpStream","","A Stream used for sending data to and from a remote DNS endpoint (client or server).",null,null],[11,"new","","Constructs a new TcpStream for a client to the specified SocketAddr.",65,null],[11,"with_timeout","","Constructs a new TcpStream for a client to the specified SocketAddr.",65,null],[11,"from_stream","","Wraps the TcpStream in TcpClientStream",65,{"inputs":[{"name":"tcpstream"}],"output":{"name":"self"}}],[11,"poll","","",65,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"peer_addr","","Returns the address of the peer connection.",66,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"new","","Creates a new future of the eventually establish a IO stream connection or fail trying.",66,null],[11,"with_timeout","","Creates a new future of the eventually establish a IO stream connection or fail trying",66,null],[11,"from_stream","","Initializes a TcpStream with an existing tokio_core::net::TcpStream.",66,null],[11,"from_stream_with_receiver","","Wrapps a stream where a sender and receiver have already been established",66,{"inputs":[{"name":"s"},{"name":"socketaddr"},{"name":"unboundedreceiver"}],"output":{"name":"self"}}],[11,"poll","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[0,"udp","trust_dns_proto","UDP protocol related components for DNS",null,null],[3,"UdpClientStream","trust_dns_proto::udp","A UDP client stream of DNS binary packets",null,null],[3,"UdpStream","","A UDP stream of DNS binary packets",null,null],[11,"new","","it is expected that the resolver wrapper will be responsible for creating and managing  new UdpClients such that each new client would have a random port (reduce chance of cache  poisoning)",67,null],[11,"poll","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"new","","This method is intended for client connections, see `with_bound` for a method better for  straight listening. It is expected that the resolver wrapper will be responsible for  creating and managing new UdpStreams such that each new client would have a random port  (reduce chance of cache poisoning). This will return a randomly assigned local port.",68,null],[11,"with_bound","","Initialize the Stream with an already bound socket. Generally this should be only used for  server listening sockets. See `new` for a client oriented socket. Specifically, this there  is already a bound socket in this context, whereas `new` makes sure to randomize ports  for additional cache poison prevention.",68,null],[11,"poll","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[6,"MessageStreamHandle","trust_dns_proto","A sender to which a Message can be sent",null,null],[8,"DnsHandle","","A trait for implementing high level functions of DNS.",null,null],[16,"Error","","The associated error type returned by future send operations",69,null],[11,"is_verifying_dnssec","","Ony returns true if and only if this DNS handle is validating DNSSec.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"send","","Send a message via the channel in the client",69,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"generics":["future"],"name":"box"}}],[11,"lookup","","A classic DNS query",69,{"inputs":[{"name":"self"},{"name":"query"}],"output":{"generics":["future"],"name":"box"}}],[8,"DnsStreamHandle","","Implementations of Sinks for sending DNS messages",null,null],[16,"Error","","The Error type to be returned if there is an error",70,null],[10,"send","","Sends a message to the Handle for delivery to the server.",70,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bufstreamhandle"}}],[11,"new","","Constructs a new BufStreamHandle with the associated ProtoError",71,{"inputs":[{"name":"unboundedsender"}],"output":{"name":"self"}}],[11,"unbounded_send","","see [`futures::sync::mpsc::UnboundedSender`]",71,null],[11,"new","","Constructs a new Buffered Stream Handle, used for sending data to the DNS peer.",72,{"inputs":[{"name":"socketaddr"},{"name":"bufstreamhandle"}],"output":{"name":"self"}}],[11,"send","","",72,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"result"}}],[11,"is_verifying_dnssec","","Ony returns true if and only if this DNS handle is validating DNSSec.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"lookup","","A classic DNS query",69,{"inputs":[{"name":"self"},{"name":"query"}],"output":{"generics":["future"],"name":"box"}}],[11,"from","trust_dns_proto::rr::resource","This returns a Resource Record that is formatted for Edns(0). Note: the rcode_high value is only part of the rcode, the rest is part of the base",56,{"inputs":[{"name":"edns"}],"output":{"name":"record"}}]],"paths":[[3,"StreamHandle"],[3,"DnsFuture"],[3,"BasicDnsHandle"],[3,"ProtoError"],[4,"ProtoErrorKind"],[3,"SslErrorStack"],[3,"Unspecified"],[8,"ProtoChainErr"],[3,"Edns"],[4,"MessageType"],[3,"Header"],[8,"EncodableMessage"],[8,"MessageFinalizer"],[3,"Message"],[3,"NoopMessageFinalizer"],[4,"OpCode"],[3,"Query"],[4,"ResponseCode"],[4,"DNSClass"],[3,"Label"],[3,"Name"],[4,"UserUsage"],[4,"AppUsage"],[4,"ResolverUsage"],[4,"CacheUsage"],[4,"AuthUsage"],[4,"OpUsage"],[4,"RegistryUsage"],[3,"DEFAULT"],[3,"IN_ADDR_ARPA"],[3,"IP6_ARPA"],[3,"LOCALHOST"],[3,"IN_ADDR_ARPA_127"],[3,"IP6_ARPA_1"],[3,"INVALID"],[3,"ZoneUsage"],[8,"IntoName"],[8,"IntoLabel"],[4,"Property"],[4,"Value"],[3,"CAA"],[3,"KeyValue"],[3,"MX"],[3,"NULL"],[4,"EdnsCode"],[4,"EdnsOption"],[3,"OPT"],[3,"SOA"],[3,"SRV"],[4,"CertUsage"],[4,"Selector"],[4,"Matching"],[3,"TLSA"],[3,"TXT"],[4,"RData"],[4,"RecordType"],[3,"Record"],[3,"RecordSet"],[8,"IntoRecordSet"],[3,"RetryDnsHandle"],[4,"EncodeMode"],[3,"BinDecoder"],[3,"BinEncoder"],[8,"BinEncodable"],[8,"BinDecodable"],[3,"TcpClientStream"],[3,"TcpStream"],[3,"UdpClientStream"],[3,"UdpStream"],[8,"DnsHandle"],[8,"DnsStreamHandle"],[3,"BufStreamHandle"],[3,"BufDnsStreamHandle"]]};
searchIndex["trust_dns_resolver"] = {"doc":"The Resolver is responsible for performing recursive queries to lookup domain names.","items":[[3,"Resolver","trust_dns_resolver","The Resolver is used for performing DNS queries.",null,null],[3,"ResolverFuture","","A Resolver for DNS records.",null,null],[3,"Hosts","","Configuration for the local `/etc/hosts`",null,null],[5,"version","","returns a version as specified in Cargo.toml",null,{"inputs":[],"output":{"name":"str"}}],[0,"config","","Configuration for a resolver",null,null],[3,"ResolverConfig","trust_dns_resolver::config","Configuration for the upstream nameservers to use for resolution",null,null],[3,"NameServerConfig","","Configuration for the NameServer",null,null],[12,"socket_addr","","The address which the DNS NameServer is registered at.",0,null],[12,"protocol","","The protocol to use when communicating with the NameServer.",0,null],[3,"ResolverOpts","","Configuration for the Resolver",null,null],[12,"ndots","","Sets the number of dots that must appear (unless it's a final dot representing the root) that must appear before a query is assumted to include the TLD. The default is one, which means that `www` would never be assumed to be a TLD, and would always be appended to either the search",1,null],[12,"timeout","","Specify the timeout for a request. Defaults to 5 seconds",1,null],[12,"attempts","","Number of attempts before giving up. Defaults to 2",1,null],[12,"validate","","Use DNSSec to validate the request",1,null],[12,"ip_strategy","","The ip_strategy for the Resolver to use when lookup Ipv4 or Ipv6 addresses",1,null],[12,"cache_size","","Cache size is in number of records (some records can be large)",1,null],[12,"use_hosts_file","","Check /ect/hosts file before dns requery (only works for unix like OS)",1,null],[4,"Protocol","","The protocol on which a NameServer should be communicated with",null,null],[13,"Udp","","UDP is the traditional DNS port, this is generally the correct choice",2,null],[13,"Tcp","","TCP can be used for large queries, but not all NameServers support it",2,null],[4,"LookupIpStrategy","","The lookup ip strategy",null,null],[13,"Ipv4Only","","Only query for A (Ipv4) records",3,null],[13,"Ipv6Only","","Only query for AAAA (Ipv6) records",3,null],[13,"Ipv4AndIpv6","","Query for A and AAAA in parallel",3,null],[13,"Ipv6thenIpv4","","Query for Ipv6 if that fails, query for Ipv4",3,null],[13,"Ipv4thenIpv6","","Query for Ipv4 if that fails, query for Ipv6 (default)",3,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"resolverconfig"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"resolverconfig"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"resolverconfig"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty configuration",4,{"inputs":[],"output":{"name":"self"}}],[11,"from_parts","","Create a ResolverConfig with all parts specified",4,{"inputs":[{"generics":["name"],"name":"option"},{"generics":["name"],"name":"vec"},{"generics":["nameserverconfig"],"name":"vec"}],"output":{"name":"self"}}],[11,"domain","","Returns the local domain",4,{"inputs":[{"name":"self"}],"output":{"generics":["name"],"name":"option"}}],[11,"set_domain","","Set the domain of the entity querying results.",4,{"inputs":[{"name":"self"},{"name":"name"}],"output":null}],[11,"search","","Returns the search domains",4,null],[11,"add_search","","Add a search domain",4,{"inputs":[{"name":"self"},{"name":"name"}],"output":null}],[11,"add_name_server","","Add the configuration for a name server",4,{"inputs":[{"name":"self"},{"name":"nameserverconfig"}],"output":null}],[11,"name_servers","","Returns a reference to the name servers",4,null],[11,"default","","Creates a default configuration, using `8.8.8.8`, `8.8.4.4` and `2001:4860:4860::8888`, `2001:4860:4860::8844` (thank you, Google).",4,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"is_datagram","","Returns true if this is a datagram oriented protocol, e.g. UDP",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_stream","","Returns true if this is a stream oriented protocol, e.g. TCP",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"nameserverconfig"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"nameserverconfig"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"nameserverconfig"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"lookupipstrategy"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"lookupipstrategy"}],"output":{"name":"bool"}}],[11,"default","","Returns Ipv4AndIpv6 as the default.",3,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"resolveropts"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"resolveropts"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"resolveropts"}],"output":{"name":"bool"}}],[11,"default","","Default values for the Reolver configuration.",1,{"inputs":[],"output":{"name":"self"}}],[0,"error","trust_dns_resolver","",null,null],[3,"ResolveError","trust_dns_resolver::error","",null,null],[12,"0","","",5,null],[12,"1","","",5,null],[4,"ResolveErrorKind","","",null,null],[13,"Msg","","",6,null],[13,"Proto","","",6,null],[13,"Io","","",6,null],[13,"Message","","",6,null],[13,"NoRecordsFound","","",6,null],[6,"ResolveResult","","",null,null],[8,"ResolveChainErr","","",null,null],[10,"chain_err","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["resolveerror"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kind","","",5,{"inputs":[{"name":"self"}],"output":{"name":"resolveerrorkind"}}],[11,"into_kind","","",5,{"inputs":[{"name":"self"}],"output":{"name":"resolveerrorkind"}}],[11,"iter","","",5,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","",5,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"protoerror"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"resolveerrorkind"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",6,{"inputs":[{"name":"protoerrorkind"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"lookup_ip","trust_dns_resolver","LookupIp result from a resolution of ipv4 and ipv6 records with a Resolver.",null,null],[3,"LookupIp","trust_dns_resolver::lookup_ip","Result of a DNS query when querying for A or AAAA records.",null,null],[3,"LookupIpIter","","Borrowed view of set of IPs returned from a LookupIp",null,null],[6,"LookupIpFuture","","The Future returned from ResolverFuture when performing an A or AAAA lookup.",null,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"lookupip"}}],[11,"iter","","Returns a borrowed iterator of the returned IPs",8,{"inputs":[{"name":"self"}],"output":{"name":"lookupipiter"}}],[11,"from","","",8,{"inputs":[{"name":"lookup"}],"output":{"name":"self"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"lookup","trust_dns_resolver","Lookup result from a resolution of ipv4 and ipv6 records with a Resolver.",null,null],[3,"Lookup","trust_dns_resolver::lookup","Result of a DNS query when querying for any record type supported by the TRust-DNS Proto library.",null,null],[3,"LookupIter","","Borrowed view of set of RDatas returned from a Lookup",null,null],[3,"ReverseLookup","","Contains the results of a lookup for the associated RecordType",null,null],[3,"ReverseLookupIter","","An iterator over the Lookup type",null,null],[3,"ReverseLookupFuture","","A Future while resolves to the Lookup type",null,null],[3,"Ipv4Lookup","","Contains the results of a lookup for the associated RecordType",null,null],[3,"Ipv4LookupIter","","An iterator over the Lookup type",null,null],[3,"Ipv4LookupFuture","","A Future while resolves to the Lookup type",null,null],[3,"Ipv6Lookup","","Contains the results of a lookup for the associated RecordType",null,null],[3,"Ipv6LookupIter","","An iterator over the Lookup type",null,null],[3,"Ipv6LookupFuture","","A Future while resolves to the Lookup type",null,null],[3,"MxLookup","","Contains the results of a lookup for the associated RecordType",null,null],[3,"MxLookupIter","","An iterator over the Lookup type",null,null],[3,"MxLookupFuture","","A Future while resolves to the Lookup type",null,null],[3,"SrvLookup","","Contains the results of a lookup for the associated RecordType",null,null],[3,"SrvLookupIter","","An iterator over the Lookup type",null,null],[3,"SrvLookupFuture","","A Future while resolves to the Lookup type",null,null],[3,"TxtLookup","","Contains the results of a lookup for the associated RecordType",null,null],[3,"TxtLookupIter","","An iterator over the Lookup type",null,null],[3,"TxtLookupFuture","","A Future while resolves to the Lookup type",null,null],[6,"LookupFuture","","The Future returned from ResolverFuture when performing a lookup.",null,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"lookup"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"lookup"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"lookup"}],"output":{"name":"bool"}}],[11,"new","","Return new instance with given rdatas",10,{"inputs":[{"generics":["vec"],"name":"arc"}],"output":{"name":"self"}}],[11,"iter","","Returns a borrowed iterator of the returned IPs",10,{"inputs":[{"name":"self"}],"output":{"name":"lookupiter"}}],[11,"from","","",10,{"inputs":[{"name":"rdata"}],"output":{"name":"self"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"reverselookup"}}],[11,"iter","","Returns an iterator over the RData",12,{"inputs":[{"name":"self"}],"output":{"name":"reverselookupiter"}}],[11,"from","","",12,{"inputs":[{"name":"lookup"}],"output":{"name":"self"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",14,{"inputs":[{"name":"lookupfuture"}],"output":{"name":"self"}}],[11,"poll","","",14,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"ipv4lookup"}}],[11,"iter","","Returns an iterator over the RData",15,{"inputs":[{"name":"self"}],"output":{"name":"ipv4lookupiter"}}],[11,"from","","",15,{"inputs":[{"name":"lookup"}],"output":{"name":"self"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",17,{"inputs":[{"name":"lookupfuture"}],"output":{"name":"self"}}],[11,"poll","","",17,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"ipv6lookup"}}],[11,"iter","","Returns an iterator over the RData",18,{"inputs":[{"name":"self"}],"output":{"name":"ipv6lookupiter"}}],[11,"from","","",18,{"inputs":[{"name":"lookup"}],"output":{"name":"self"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",20,{"inputs":[{"name":"lookupfuture"}],"output":{"name":"self"}}],[11,"poll","","",20,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"mxlookup"}}],[11,"iter","","Returns an iterator over the RData",21,{"inputs":[{"name":"self"}],"output":{"name":"mxlookupiter"}}],[11,"from","","",21,{"inputs":[{"name":"lookup"}],"output":{"name":"self"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",23,{"inputs":[{"name":"lookupfuture"}],"output":{"name":"self"}}],[11,"poll","","",23,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"srvlookup"}}],[11,"iter","","Returns an iterator over the RData",24,{"inputs":[{"name":"self"}],"output":{"name":"srvlookupiter"}}],[11,"from","","",24,{"inputs":[{"name":"lookup"}],"output":{"name":"self"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",26,{"inputs":[{"name":"lookupfuture"}],"output":{"name":"self"}}],[11,"poll","","",26,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"txtlookup"}}],[11,"iter","","Returns an iterator over the RData",27,{"inputs":[{"name":"self"}],"output":{"name":"txtlookupiter"}}],[11,"from","","",27,{"inputs":[{"name":"lookup"}],"output":{"name":"self"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",29,{"inputs":[{"name":"lookupfuture"}],"output":{"name":"self"}}],[11,"poll","","",29,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[0,"lookup_state","trust_dns_resolver","Caching related functionality for the Resolver.",null,null],[11,"new","","Constructs a new Resolver with the specified configuration.",30,{"inputs":[{"name":"resolverconfig"},{"name":"resolveropts"}],"output":{"name":"result"}}],[11,"default","","Constructs a new Resolver with default config and default options.",30,{"inputs":[],"output":{"name":"result"}}],[11,"from_system_conf","","Constructs a new Resolver with the system configuration.",30,{"inputs":[],"output":{"name":"result"}}],[11,"lookup","","Generic lookup for any RecordType",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"recordtype"}],"output":{"generics":["lookup"],"name":"resolveresult"}}],[11,"lookup_ip","","Performs a dual-stack DNS lookup for the IP for the given hostname.",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["lookupip"],"name":"resolveresult"}}],[11,"lookup_service","","Performs a DNS lookup for an SRV record for the specified service type and protocol at the given name.",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"generics":["srvlookup"],"name":"resolveresult"}}],[11,"reverse_lookup","","Performs a lookup for the associated type.",30,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"generics":["reverselookup"],"name":"resolveresult"}}],[11,"ipv4_lookup","","Performs a lookup for the associated type.",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ipv4lookup"],"name":"resolveresult"}}],[11,"ipv6_lookup","","Performs a lookup for the associated type.",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ipv6lookup"],"name":"resolveresult"}}],[11,"mx_lookup","","Performs a lookup for the associated type.",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["mxlookup"],"name":"resolveresult"}}],[11,"srv_lookup","","Performs a lookup for the associated type.",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["srvlookup"],"name":"resolveresult"}}],[11,"txt_lookup","","Performs a lookup for the associated type.",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["txtlookup"],"name":"resolveresult"}}],[0,"system_conf","","System configuration loading",null,null],[5,"read_system_conf","trust_dns_resolver::system_conf","",null,{"inputs":[],"output":{"name":"result"}}],[11,"new","trust_dns_resolver","Construct a new ResolverFuture with the associated Client and configuration.",31,{"inputs":[{"name":"resolverconfig"},{"name":"resolveropts"},{"name":"handle"}],"output":{"name":"self"}}],[11,"from_system_conf","","Constructs a new Resolver with the system configuration.",31,{"inputs":[{"name":"handle"}],"output":{"name":"resolveresult"}}],[11,"lookup","","Generic lookup for any RecordType",31,{"inputs":[{"name":"self"},{"name":"n"},{"name":"recordtype"}],"output":{"name":"lookupfuture"}}],[11,"lookup_ip","","Performs a dual-stack DNS lookup for the IP for the given hostname.",31,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"lookupipfuture"}}],[11,"lookup_service","","Performs a DNS lookup for an SRV record for the specified service type and protocol at the given name.",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"srvlookupfuture"}}],[11,"reverse_lookup","","Performs a lookup for the associated type.",31,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"reverselookupfuture"}}],[11,"ipv4_lookup","","Performs a lookup for the associated type.",31,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"ipv4lookupfuture"}}],[11,"ipv6_lookup","","Performs a lookup for the associated type.",31,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"ipv6lookupfuture"}}],[11,"mx_lookup","","Performs a lookup for the associated type.",31,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"mxlookupfuture"}}],[11,"srv_lookup","","Performs a lookup for the associated type.",31,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"srvlookupfuture"}}],[11,"txt_lookup","","Performs a lookup for the associated type.",31,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"txtlookupfuture"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",32,{"inputs":[],"output":{"name":"hosts"}}],[11,"new","","Creates a new configuration from /etc/hosts, only works for unix like OSes, others will return empty configuration",32,{"inputs":[],"output":{"name":"hosts"}}],[11,"lookup_static_host","","lookup_static_host looks up the addresses for the given host from /etc/hosts.",32,{"inputs":[{"name":"self"},{"name":"query"}],"output":{"generics":["lookup"],"name":"option"}}],[11,"insert","","Insert a new Lookup for the associated `Name` and `RecordType`",32,{"inputs":[{"name":"self"},{"name":"name"},{"name":"recordtype"},{"name":"lookup"}],"output":null}]],"paths":[[3,"NameServerConfig"],[3,"ResolverOpts"],[4,"Protocol"],[4,"LookupIpStrategy"],[3,"ResolverConfig"],[3,"ResolveError"],[4,"ResolveErrorKind"],[8,"ResolveChainErr"],[3,"LookupIp"],[3,"LookupIpIter"],[3,"Lookup"],[3,"LookupIter"],[3,"ReverseLookup"],[3,"ReverseLookupIter"],[3,"ReverseLookupFuture"],[3,"Ipv4Lookup"],[3,"Ipv4LookupIter"],[3,"Ipv4LookupFuture"],[3,"Ipv6Lookup"],[3,"Ipv6LookupIter"],[3,"Ipv6LookupFuture"],[3,"MxLookup"],[3,"MxLookupIter"],[3,"MxLookupFuture"],[3,"SrvLookup"],[3,"SrvLookupIter"],[3,"SrvLookupFuture"],[3,"TxtLookup"],[3,"TxtLookupIter"],[3,"TxtLookupFuture"],[3,"Resolver"],[3,"ResolverFuture"],[3,"Hosts"]]};
searchIndex["twoway"] = {"doc":"","items":[[5,"find_str","twoway","`find_str` finds the first ocurrence of `pattern` in the `text`.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["usize"],"name":"option"}}],[5,"find_bytes","","`find_bytes` finds the first ocurrence of `pattern` in the `text`.",null,null],[5,"rfind_str","","`rfind_str` finds the last ocurrence of `pattern` in the `text` and returns the index of the start of the match.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["usize"],"name":"option"}}],[5,"rfind_bytes","","`rfind_bytes` finds the last ocurrence of `pattern` in the `text`, and returns the index of the start of the match.",null,null],[0,"bmh","","Boyer-Moore-Horspool",null,null],[5,"find","twoway::bmh","Boyer-Moore-Horspool substring search",null,null]],"paths":[]};
searchIndex["ucd_util"] = {"doc":"The `ucd-util` crate contains a smattering of utility functions that implement various algorithms specified by Unicode. There is no specific goal for exhaustiveness. Instead, implementations should be added on an as-needed basis.","items":[[5,"hangul_name","ucd_util","Return the character name of the given precomposed Hangul codepoint.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["string"],"name":"option"}}],[5,"hangul_full_canonical_decomposition","","Return the full canonical decomposition of the given precomposed Hangul codepoint.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"ideograph_name","","Return the character name of the given ideograph codepoint.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["string"],"name":"option"}}],[5,"character_name_normalize","","Normalize the given character name in place according to UAX44-LM2.",null,{"inputs":[{"name":"string"}],"output":null}],[5,"symbolic_name_normalize","","Normalize the given symbolic name in place according to UAX44-LM3.",null,{"inputs":[{"name":"string"}],"output":null}],[5,"canonical_property_name","","Find the canonical property name for the given normalized property name.",null,{"inputs":[{"name":"propertytable"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[5,"property_values","","Find the set of possible property values for a given property.",null,{"inputs":[{"name":"propertyvaluetable"},{"name":"str"}],"output":{"generics":["propertyvalues"],"name":"option"}}],[5,"canonical_property_value","","Find the canonical property value for the given normalized property value.",null,{"inputs":[{"name":"propertyvalues"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[6,"PropertyTable","","The type of a property name table.",null,null],[6,"PropertyValueTable","","Type of a property value table.",null,null],[6,"PropertyValues","","A mapping of property values for a specific property.",null,null],[17,"RANGE_HANGUL_SYLLABLE","","A set of ranges that corresponds to the set of all Hangul syllable codepoints.",null,null],[17,"RANGE_IDEOGRAPH","","A set of ranges that corresponds to the set of all ideograph codepoints.",null,null]],"paths":[]};
searchIndex["unicase"] = {"doc":"UniCase","items":[[3,"UniCase","unicase","Case Insensitive wrapper of strings.",null,null],[3,"Ascii","","Case Insensitive wrapper of Ascii strings.",null,null],[5,"eq","","Compare two string-like types for case-less equality, using unicode folding.",null,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"bool"}}],[5,"eq_ascii","","Compare two string-like types for case-less equality, ignoring ASCII case.",null,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"bool"}}],[11,"new","","",0,{"inputs":[{"name":"s"}],"output":{"name":"ascii"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"s2"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["ascii"],"name":"result"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unicase"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ascii"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `UniCase`.",1,{"inputs":[{"name":"s"}],"output":{"name":"unicase"}}],[11,"unicode","","Creates a new `UniCase`, skipping the ASCII check.",1,{"inputs":[{"name":"s"}],"output":{"name":"unicase"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"unicase"}],"output":{"name":"bool"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["unicase"],"name":"result"}}]],"paths":[[3,"Ascii"],[3,"UniCase"]]};
searchIndex["unicode_bidi"] = {"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed right-to-left and left-to-right text.  It is written in safe Rust, compatible with the current stable release.","items":[[3,"ParagraphInfo","unicode_bidi","Bidi information about a single paragraph",null,null],[12,"range","","The paragraphs boundaries within the text, as byte indices.",0,null],[12,"level","","The paragraph embedding level.",0,null],[3,"InitialInfo","","Initial bidi information of the text.",null,null],[12,"text","","The text",1,null],[12,"original_classes","","The BidiClass of the character at each byte in the text. If a character is multiple bytes, its class will appear multiple times in the vector.",1,null],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",1,null],[3,"BidiInfo","","Bidi information of the text.",null,null],[12,"text","","The text",2,null],[12,"original_classes","","The BidiClass of the character at each byte in the text.",2,null],[12,"levels","","The directional embedding level of each byte in the text.",2,null],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",2,null],[4,"BidiClass","","Represents values of the Unicode character property `Bidi_Class`, also known as the bidirectional character type.",null,null],[13,"AL","","",3,null],[13,"AN","","",3,null],[13,"B","","",3,null],[13,"BN","","",3,null],[13,"CS","","",3,null],[13,"EN","","",3,null],[13,"ES","","",3,null],[13,"ET","","",3,null],[13,"FSI","","",3,null],[13,"L","","",3,null],[13,"LRE","","",3,null],[13,"LRI","","",3,null],[13,"LRO","","",3,null],[13,"NSM","","",3,null],[13,"ON","","",3,null],[13,"PDF","","",3,null],[13,"PDI","","",3,null],[13,"R","","",3,null],[13,"RLE","","",3,null],[13,"RLI","","",3,null],[13,"RLO","","",3,null],[13,"S","","",3,null],[13,"WS","","",3,null],[5,"bidi_class","","Find the `BidiClass` of a single char.",null,{"inputs":[{"name":"char"}],"output":{"name":"bidiclass"}}],[0,"deprecated","","This module holds deprecated assets only.",null,null],[5,"visual_runs","unicode_bidi::deprecated","Find the level runs within a line and return them in visual order.",null,null],[0,"format_chars","unicode_bidi","Directional Formatting Characters",null,null],[17,"ALM","unicode_bidi::format_chars","ARABIC LETTER MARK",null,null],[17,"LRM","","LEFT-TO-RIGHT MARK",null,null],[17,"RLM","","RIGHT-TO-LEFT MARK",null,null],[17,"LRI","","LEFT‑TO‑RIGHT ISOLATE",null,null],[17,"RLI","","RIGHT‑TO‑LEFT ISOLATE",null,null],[17,"FSI","","FIRST STRONG ISOLATE",null,null],[17,"PDI","","POP DIRECTIONAL ISOLATE",null,null],[17,"LRE","","LEFT-TO-RIGHT EMBEDDING",null,null],[17,"RLE","","RIGHT-TO-LEFT EMBEDDING",null,null],[17,"PDF","","POP DIRECTIONAL FORMATTING",null,null],[17,"LRO","","LEFT-TO-RIGHT OVERRIDE",null,null],[17,"RLO","","RIGHT-TO-LEFT OVERRIDE",null,null],[0,"level","unicode_bidi","Bidi Embedding Level",null,null],[3,"Level","unicode_bidi::level","Embedding Level",null,null],[4,"Error","","Errors that can occur on Level creation or mutation",null,null],[13,"OutOfRangeNumber","","Out-of-range (invalid) embedding level number.",4,null],[5,"has_rtl","","If levels has any RTL (odd) level",null,null],[17,"LTR_LEVEL","","",null,null],[17,"RTL_LEVEL","","",null,null],[17,"MAX_EXPLICIT_DEPTH","","During explicit level resolution, embedding level can go as high as `max_depth`.",null,null],[17,"MAX_IMPLICIT_DEPTH","","During implicit level resolution, embedding level can go as high as `max_depth + 1`.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"ordering"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ltr","","New LTR level with smallest number value (0).",5,{"inputs":[],"output":{"name":"level"}}],[11,"rtl","","New RTL level with smallest number value (1).",5,{"inputs":[],"output":{"name":"level"}}],[11,"max_implicit_depth","","Maximum depth of the directional status stack during implicit resolutions.",5,{"inputs":[],"output":{"name":"u8"}}],[11,"max_explicit_depth","","Maximum depth of the directional status stack during explicit resolutions.",5,{"inputs":[],"output":{"name":"u8"}}],[11,"new","","Create new level, fail if number is larger than `max_depth + 1`.",5,{"inputs":[{"name":"u8"}],"output":{"generics":["level","error"],"name":"result"}}],[11,"new_explicit","","Create new level, fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"u8"}],"output":{"generics":["level","error"],"name":"result"}}],[11,"number","","The level number.",5,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"is_ltr","","If this level is left-to-right.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_rtl","","If this level is right-to-left.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raise","","Raise level by `amount`, fail if number is larger than `max_depth + 1`.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["error"],"name":"result"}}],[11,"raise_explicit","","Raise level by `amount`, fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["error"],"name":"result"}}],[11,"lower","","Lower level by `amount`, fail if number goes below zero.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["error"],"name":"result"}}],[11,"new_explicit_next_ltr","","The next LTR (even) level greater than this, or fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["level","error"],"name":"result"}}],[11,"new_explicit_next_rtl","","The next RTL (odd) level greater than this, or fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["level","error"],"name":"result"}}],[11,"new_lowest_ge_rtl","","The lowest RTL (odd) level greater than or equal to this, or fail if number is larger than `max_depth + 1`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["level","error"],"name":"result"}}],[11,"bidi_class","","Generate a character type based on a level (as specified in steps X10 and N2).",5,{"inputs":[{"name":"self"}],"output":{"name":"bidiclass"}}],[11,"vec","","",5,null],[11,"into","","Convert to the level number",5,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from","","Create level by number",5,{"inputs":[{"name":"u8"}],"output":{"name":"level"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"clone","unicode_bidi","",3,{"inputs":[{"name":"self"}],"output":{"name":"bidiclass"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bidiclass"}],"output":{"name":"bool"}}],[6,"LevelRun","","A maximal substring of characters with the same embedding level.",null,null],[17,"UNICODE_VERSION","","The Unicode version of data",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"initialinfo"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"initialinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Find the paragraphs and BidiClasses in a string of text.",1,{"inputs":[{"name":"str"},{"generics":["level"],"name":"option"}],"output":{"name":"initialinfo"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"new","","Split the text into paragraphs and determine the bidi embedding levels for each paragraph.",2,{"inputs":[{"name":"str"},{"generics":["level"],"name":"option"}],"output":{"name":"bidiinfo"}}],[11,"reordered_levels","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per byte.",2,{"inputs":[{"name":"self"},{"name":"paragraphinfo"},{"generics":["usize"],"name":"range"}],"output":{"generics":["level"],"name":"vec"}}],[11,"reordered_levels_per_char","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per character.",2,{"inputs":[{"name":"self"},{"name":"paragraphinfo"},{"generics":["usize"],"name":"range"}],"output":{"generics":["level"],"name":"vec"}}],[11,"reorder_line","","Re-order a line based on resolved levels and return the line in display order.",2,{"inputs":[{"name":"self"},{"name":"paragraphinfo"},{"generics":["usize"],"name":"range"}],"output":{"generics":["str"],"name":"cow"}}],[11,"visual_runs","","Find the level runs within a line and return them in visual order.",2,null],[11,"has_rtl","","If processed text has any computed RTL levels",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"ParagraphInfo"],[3,"InitialInfo"],[3,"BidiInfo"],[4,"BidiClass"],[4,"Error"],[3,"Level"]]};
searchIndex["unicode_normalization"] = {"doc":"Unicode character composition and decomposition utilities as described in Unicode Standard Annex #15.","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition's characters.",null,null],[3,"Recompositions","","External iterator for a string recomposition's characters.",null,null],[3,"StreamSafe","","UAX15-D4: This iterator keeps track of how many non-starters there have been since the last starter in NFKD and will emit a Combining Grapheme Joiner (U+034F) if the count exceeds 30.",null,null],[4,"IsNormalized","","The QuickCheck algorithm can quickly determine if a text is or isn't normalized without any allocations in many cases, but it has to be able to return `Maybe` when a full decomposition and recomposition is necessary.",null,null],[13,"Yes","","The text is definitely normalized.",0,null],[13,"No","","The text is definitely not normalized.",0,null],[13,"Maybe","","The text may be normalized.",0,null],[5,"is_nfc","","Authoritatively check if a string is in NFC.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_nfc_quick","","Quickly check if a string is in NFC, potentially returning `IsNormalized::Maybe` if further checks are necessary.  In this case a check like `s.chars().nfc().eq(s.chars())` should suffice.",null,{"inputs":[{"name":"i"}],"output":{"name":"isnormalized"}}],[5,"is_nfd","","Authoritatively check if a string is in NFD.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_nfd_quick","","Quickly check if a string is in NFD.",null,{"inputs":[{"name":"i"}],"output":{"name":"isnormalized"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[0,"char","","Methods for composing and decomposing characters.",null,null],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"compose","","Compose two characters into a single character, if possible. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"generics":["char"],"name":"option"}}],[5,"canonical_combining_class","","",null,{"inputs":[{"name":"char"}],"output":{"name":"u8"}}],[5,"is_combining_mark","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"UNICODE_VERSION","unicode_normalization","",null,null],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15.",null,null],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D (canonical decomposition).",4,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD (compatibility decomposition).",4,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C (canonical decomposition followed by canonical composition).",4,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC (compatibility decomposition followed by canonical composition).",4,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[10,"stream_safe","","An Iterator over the string with Conjoining Grapheme Joiner characters inserted according to the Stream-Safe Text Process (UAX15-D4)",4,{"inputs":[{"name":"self"}],"output":{"name":"streamsafe"}}]],"paths":[[4,"IsNormalized"],[3,"Decompositions"],[3,"Recompositions"],[3,"StreamSafe"],[8,"UnicodeNormalization"]]};
searchIndex["unicode_segmentation"] = {"doc":"Iterators which split strings on Grapheme Cluster or Word boundaries, according to the Unicode Standard Annex #29 rules.","items":[[3,"Graphemes","unicode_segmentation","External iterator for a string's grapheme clusters.",null,null],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets.",null,null],[3,"GraphemeCursor","","Cursor-based segmenter for grapheme clusters.",null,null],[3,"UWordBounds","","External iterator for a string's word boundaries.",null,null],[3,"UWordBoundIndices","","External iterator for word boundaries and byte offsets.",null,null],[3,"UnicodeWords","","An iterator over the substrings of a string which, after splitting the string on word boundaries, contain any characters with the Alphabetic property, or with General_Category=Number.",null,null],[4,"GraphemeIncomplete","","An error return indicating that not enough content was available in the provided chunk to satisfy the query, and that more content must be provided.",null,null],[13,"PreContext","","More pre-context is needed. The caller should call `provide_context` with a chunk ending at the offset given, then retry the query. This will only be returned if the `chunk_start` parameter is nonzero.",0,null],[13,"PrevChunk","","When requesting `prev_boundary`, the cursor is moving past the beginning of the current chunk, so the chunk before that is requested. This will only be returned if the `chunk_start` parameter is nonzero.",0,null],[13,"NextChunk","","When requesting `next_boundary`, the cursor is moving past the end of the current chunk, so the chunk after that is requested. This will only be returned if the chunk ends before the `len` parameter provided on creation of the cursor.",0,null],[13,"InvalidOffset","","An error returned when the chunk given does not contain the cursor position.",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"graphemeindices"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"graphemes"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"size_hint","","",2,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"graphemecursor"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"graphemeincomplete"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"graphemeincomplete"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new cursor. The string and initial offset are given at creation time, but the contents of the string are not. The `is_extended` parameter controls whether extended grapheme clusters are selected.",3,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"name":"graphemecursor"}}],[11,"set_cursor","","Set the cursor to a new location in the same string.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"cur_cursor","","The current offset of the cursor. Equal to the last value provided to `new()` or `set_cursor()`, or returned from `next_boundary()` or `prev_boundary()`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"provide_context","","Provide additional pre-context when it is needed to decide a boundary. The end of the chunk must coincide with the value given in the `GraphemeIncomplete::PreContext` request.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":null}],[11,"is_boundary","","Determine whether the current cursor location is a grapheme cluster boundary. Only a part of the string need be supplied. If `chunk_start` is nonzero or the length of `chunk` is not equal to `len` on creation, then this method may return `GraphemeIncomplete::PreContext`. The caller should then call `provide_context` with the requested chunk, then retry calling this method.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["bool","graphemeincomplete"],"name":"result"}}],[11,"next_boundary","","Find the next boundary after the current cursor position. Only a part of the string need be supplied. If the chunk is incomplete, then this method might return `GraphemeIncomplete::PreContext` or `GraphemeIncomplete::NextChunk`. In the former case, the caller should call `provide_context` with the requested chunk, then retry. In the latter case, the caller should provide the chunk following the one given, then retry.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["option","graphemeincomplete"],"name":"result"}}],[11,"prev_boundary","","Find the previous boundary after the current cursor position. Only a part of the string need be supplied. If the chunk is incomplete, then this method might return `GraphemeIncomplete::PreContext` or `GraphemeIncomplete::PrevChunk`. In the former case, the caller should call `provide_context` with the requested chunk, then retry. In the latter case, the caller should provide the chunk preceding the one given, then retry.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["option","graphemeincomplete"],"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"uwordbounds"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"uwordboundindices"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[17,"UNICODE_VERSION","","The version of Unicode that this version of unicode-segmentation is based on.",null,null],[8,"UnicodeSegmentation","","Methods for segmenting strings according to Unicode Standard Annex #29.",null,null],[10,"graphemes","","Returns an iterator over the [grapheme clusters][graphemes] of `self`.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"graphemes"}}],[10,"grapheme_indices","","Returns an iterator over the grapheme clusters of `self` and their byte offsets. See `graphemes()` for more information.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"graphemeindices"}}],[10,"unicode_words","","Returns an iterator over the words of `self`, separated on UAX#29 word boundaries.",7,{"inputs":[{"name":"self"}],"output":{"name":"unicodewords"}}],[10,"split_word_bounds","","Returns an iterator over substrings of `self` separated on UAX#29 word boundaries.",7,{"inputs":[{"name":"self"}],"output":{"name":"uwordbounds"}}],[10,"split_word_bound_indices","","Returns an iterator over substrings of `self`, split on UAX#29 word boundaries, and their offsets. See `split_word_bounds()` for more information.",7,{"inputs":[{"name":"self"}],"output":{"name":"uwordboundindices"}}]],"paths":[[4,"GraphemeIncomplete"],[3,"GraphemeIndices"],[3,"Graphemes"],[3,"GraphemeCursor"],[3,"UnicodeWords"],[3,"UWordBounds"],[3,"UWordBoundIndices"],[8,"UnicodeSegmentation"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unidecode"] = {"doc":"The `rust-unidecode` library is a Rust port of Sean M. Burke's famous `Text::Unidecode` module for Perl. It transliterates Unicode strings such as \"Æneid\" into pure ASCII ones such as \"AEneid.\" For a detailed explanation on the rationale behind using such a library, you can refer to both the documentation of the original module and this article written by Burke in 2001.","items":[[5,"unidecode","unidecode","This function takes any Unicode string and returns an ASCII transliteration of that string.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"unidecode_char","","This function takes a single Unicode character and returns an ASCII transliteration.",null,{"inputs":[{"name":"char"}],"output":{"name":"str"}}]],"paths":[]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"self"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["untrusted"] = {"doc":"untrusted.rs: Safe, fast, zero-panic, zero-crashing, zero-allocation parsing of untrusted inputs in Rust.","items":[[3,"Input","untrusted","A wrapper around `&'a [u8]` that helps in writing panic-free code.",null,null],[3,"Reader","","A read-only, forward-only* cursor into the data in an `Input`.",null,null],[3,"Mark","","An index into the already-parsed input of a `Reader`.",null,null],[3,"EndOfInput","","The error type used to indicate the end of the input was reached before the operation could be completed.",null,null],[5,"read_all_optional","","Calls `read` with the given input as a `Reader`, ensuring that `read` consumed the entire input. When `input` is `None`, `read` will be called with `None`.",null,{"inputs":[{"generics":["input"],"name":"option"},{"name":"e"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"input"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"from","","Construct a new `Input` for the given input `bytes`.",0,null],[11,"is_empty","","Returns `true` if the input is empty and false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the input.",0,null],[11,"len","","Returns the length of the `Input`.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"read_all","","Calls `read` with the given input as a `Reader`, ensuring that `read` consumed the entire input. If `read` does not consume the entire input, `incomplete_read` is returned.",0,{"inputs":[{"name":"self"},{"name":"e"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_all_mut","","Like `read_all`, except taking an `FnMut`.",0,{"inputs":[{"name":"self"},{"name":"e"},{"name":"f"}],"output":{"name":"result"}}],[11,"as_slice_less_safe","","Access the input as a slice so it can be processed by functions that are not written using the Input/Reader framework.",0,null],[11,"eq","","",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new Reader for the given input. Use `read_all`, `read_all_mut`, or `read_all_optional` instead of `Reader::new` whenever possible.",1,{"inputs":[{"name":"input"}],"output":{"name":"reader"}}],[11,"at_end","","Returns `true` if the reader is at the end of the input, and `false` otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_input_between_marks","","Returns an `Input` for already-parsed input that has had its boundaries marked using `mark`.",1,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"mark"}],"output":{"generics":["input","endofinput"],"name":"result"}}],[11,"mark","","Return the current position of the `Reader` for future use in a call to `get_input_between_marks`.",1,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"peek","","Returns `true` if there is at least one more byte in the input and that byte is equal to `b`, and false otherwise.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"read_byte","","Reads the next input byte.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u8","endofinput"],"name":"result"}}],[11,"skip","","Skips `num_bytes` of the input.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["endofinput"],"name":"result"}}],[11,"skip_and_get_input","","Skips `num_bytes` of the input, returning the skipped input as an `Input`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["input","endofinput"],"name":"result"}}],[11,"skip_to_end","","Skips the reader to the end of the input, returning the skipped input as an `Input`.",1,{"inputs":[{"name":"self"}],"output":{"name":"input"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"endofinput"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"endofinput"}],"output":{"name":"bool"}}]],"paths":[[3,"Input"],[3,"Reader"],[3,"EndOfInput"]]};
searchIndex["url"] = {"doc":"rust-url is an implementation of the URL Standard for the Rust programming language.","items":[[3,"OpaqueOrigin","url","Opaque identifier for URLs that have file or other schemes",null,null],[3,"HostAndPort","","This mostly exists because coherence rules don’t allow us to implement `ToSocketAddrs for (Host<S>, u16)`.",null,null],[12,"host","","",0,null],[12,"port","","",0,null],[3,"SocketAddrs","","Socket addresses for an URL.",null,null],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",null,null],[3,"Url","","A parsed URL record.",null,null],[3,"ParseOptions","","Full configuration for the URL parser.",null,null],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",null,null],[4,"Origin","","The origin of an URL",null,null],[13,"Opaque","","A globally unique identifier",1,null],[13,"Tuple","","Consists of the URL's scheme, host and port",1,null],[4,"Host","","The host name of an URL.",null,null],[13,"Domain","","A DNS domain name, as '.' dot-separated labels. Non-ASCII labels are encoded in punycode per IDNA if this is the host of a special URL, or percent encoded for non-special URLs. Hosts for non-special URLs are also called opaque hosts.",2,null],[13,"Ipv4","","An IPv4 address. `Url::host_str` returns the serialization of this address, as four decimal integers separated by `.` dots.",2,null],[13,"Ipv6","","An IPv6 address. `Url::host_str` returns the serialization of that address between `[` and `]` brackets, in the format per RFC 5952 A Recommendation for IPv6 Address Text Representation: lowercase hexadecimal with maximal `::` compression.",2,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",3,null],[13,"IdnaError","","",3,null],[13,"InvalidPort","","",3,null],[13,"InvalidIpv4Address","","",3,null],[13,"InvalidIpv6Address","","",3,null],[13,"InvalidDomainCharacter","","",3,null],[13,"RelativeUrlWithoutBase","","",3,null],[13,"RelativeUrlWithCannotBeABaseBase","","",3,null],[13,"SetHostOnCannotBeABaseUrl","","",3,null],[13,"Overflow","","",3,null],[4,"SyntaxViolation","","Non-fatal syntax violations that can occur during parsing.",null,null],[13,"Backslash","","",4,null],[13,"C0SpaceIgnored","","",4,null],[13,"EmbeddedCredentials","","",4,null],[13,"ExpectedDoubleSlash","","",4,null],[13,"ExpectedFileDoubleSlash","","",4,null],[13,"FileWithHostAndWindowsDrive","","",4,null],[13,"NonUrlCodePoint","","",4,null],[13,"NullInFragment","","",4,null],[13,"PercentDecode","","",4,null],[13,"TabOrNewlineIgnored","","",4,null],[13,"UnencodedAtSign","","",4,null],[4,"Position","","Indicates a position within a URL based on its components.",null,null],[13,"BeforeScheme","","",5,null],[13,"AfterScheme","","",5,null],[13,"BeforeUsername","","",5,null],[13,"AfterUsername","","",5,null],[13,"BeforePassword","","",5,null],[13,"AfterPassword","","",5,null],[13,"BeforeHost","","",5,null],[13,"AfterHost","","",5,null],[13,"BeforePort","","",5,null],[13,"AfterPort","","",5,null],[13,"BeforePath","","",5,null],[13,"AfterPath","","",5,null],[13,"BeforeQuery","","",5,null],[13,"AfterQuery","","",5,null],[13,"BeforeFragment","","",5,null],[13,"AfterFragment","","",5,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",2,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"host"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,{"inputs":[{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse_opaque","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"hostandport"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"hostandport"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,{"inputs":[],"output":{"name":"origin"}}],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple (as opposed to an opaque origin).",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"opaqueorigin"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty, except if these was only one segment to begin with.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pop","","Remove the last segment of this URL’s path.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"push","","Append the given segment at the end of this URL’s path.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",8,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"syntaxviolation"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"syntaxviolation"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"generics":["position"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"generics":["position"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"generics":["position"],"name":"range"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"form_urlencoded","","Parser and serializer for the `application/x-www-form-urlencoded` syntax, as used by HTML forms.",null,null],[3,"Parse","url::form_urlencoded","The return type of `parse()`.",null,null],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow<str>`.",null,null],[3,"ByteSerialize","","Return value of `byte_serialize()`.",null,null],[3,"Serializer","","The `application/x-www-form-urlencoded` serializer.",null,null],[5,"parse","","Convert a byte string in the `application/x-www-form-urlencoded` syntax into a iterator of (name, value) pairs.",null,null],[5,"parse_with_encoding","","Convert a byte string in the `application/x-www-form-urlencoded` syntax into a iterator of (name, value) pairs.",null,null],[5,"byte_serialize","","The `application/x-www-form-urlencoded` byte serializer.",null,null],[8,"Target","","",null,null],[10,"as_mut_string","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"finish","","",10,null],[16,"Finished","","",10,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow<str>`.",11,{"inputs":[{"name":"self"}],"output":{"name":"parseintoowned"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",13,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_mut_string","url","",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"finish","","",15,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"new","url::form_urlencoded","Create a new `application/x-www-form-urlencoded` serializer for the given target.",14,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer for a suffix of the given target.",14,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Remove any existing name/value pair.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"encoding_override","","Set the character encoding to be used for names and values before percent-encoding.",14,{"inputs":[{"name":"self"},{"generics":["encodingref"],"name":"option"}],"output":{"name":"self"}}],[11,"custom_encoding_override","","Set the character encoding to be used for names and values before percent-encoding.",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"append_pair","","Serialize and append a name/value pair.",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",14,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"append_charset","","Add a name/value pair whose name is `_charset_` and whose value is the character encoding’s name. (See the `encoding_override()` method.)",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"finish","","If this serializer was constructed with a string, take and return that string.",14,null],[11,"clone","url","",9,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"parseoptions"}}],[11,"base_url","","Change the base URL",16,{"inputs":[{"name":"self"},{"generics":["url"],"name":"option"}],"output":{"name":"self"}}],[11,"encoding_override","","Override the character encoding of query strings. This is a legacy concept only relevant for HTML.",16,{"inputs":[{"name":"self"},{"generics":["encodingref"],"name":"option"}],"output":{"name":"self"}}],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors, passing a static string description.  This method is deprecated in favor of `syntax_violation_callback` and is implemented as an adaptor for the latter, passing the `SyntaxViolation` description. Only the last value passed to either method will be used by a parser.",16,{"inputs":[{"name":"self"},{"generics":["fn"],"name":"option"}],"output":{"name":"self"}}],[11,"syntax_violation_callback","","Call the provided function or closure for a non-fatal `SyntaxViolation` when it occurs during parsing. Note that since the provided function is `Fn`, the caller might need to utilize interior mutability, such as with a `RefCell`, to collect the violations.",16,{"inputs":[{"name":"self"},{"generics":["fn"],"name":"option"}],"output":{"name":"self"}}],[11,"parse","","Parse an URL string with the configuration so far.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","Parse an absolute URL from a string.",9,{"inputs":[{"name":"str"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",9,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",9,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","Return the serialization of this URL.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",9,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",9,{"inputs":[{"name":"self"}],"output":{"generics":["host"],"name":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"port","","Return the port number for this URL, if any.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["hostandport"],"name":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",9,{"inputs":[{"name":"self"}],"output":{"generics":["split"],"name":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",9,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",9,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[11,"set_query","","Change this URL’s query string.",9,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",9,{"inputs":[{"name":"self"}],"output":{"generics":["urlquery"],"name":"serializer"}}],[11,"set_path","","Change this URL’s path.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",9,{"inputs":[{"name":"self"}],"output":{"generics":["pathsegmentsmut"],"name":"result"}}],[11,"set_port","","Change this URL’s port number.",9,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"option"}],"output":{"name":"result"}}],[11,"set_host","","Change this URL’s host.",9,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",9,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","Change this URL’s password.",9,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"name":"result"}}],[11,"set_username","","Change this URL’s username.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",9,{"inputs":[{"name":"p"}],"output":{"generics":["url"],"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",9,{"inputs":[{"name":"p"}],"output":{"generics":["url"],"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",9,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"to_socket_addrs","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",9,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"as_ref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",15,{"inputs":[{"name":"self"}],"output":null}],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null]],"paths":[[3,"HostAndPort"],[4,"Origin"],[4,"Host"],[4,"ParseError"],[4,"SyntaxViolation"],[4,"Position"],[3,"SocketAddrs"],[3,"OpaqueOrigin"],[3,"PathSegmentsMut"],[3,"Url"],[8,"Target"],[3,"Parse"],[3,"ParseIntoOwned"],[3,"ByteSerialize"],[3,"Serializer"],[3,"UrlQuery"],[3,"ParseOptions"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utf8sequence"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"utf8range"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["uuid"] = {"doc":"Generate and parse UUIDs.","items":[[3,"Uuid","uuid","A Universally Unique Identifier (UUID).",null,null],[3,"Simple","","An adaptor for formatting a `Uuid` as a simple string.",null,null],[3,"Hyphenated","","An adaptor for formatting a `Uuid` as a hyphenated string.",null,null],[3,"Urn","","An adaptor for formatting a `Uuid` as a URN string.",null,null],[4,"UuidVersion","","The version of the UUID, denoting the generating algorithm.",null,null],[13,"Mac","","Version 1: MAC address",0,null],[13,"Dce","","Version 2: DCE Security",0,null],[13,"Md5","","Version 3: MD5 hash",0,null],[13,"Random","","Version 4: Random",0,null],[13,"Sha1","","Version 5: SHA-1 hash",0,null],[4,"UuidVariant","","The reserved variants of UUIDs.",null,null],[13,"NCS","","Reserved by the NCS for backward compatibility",1,null],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,null],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,null],[13,"Future","","Reserved for future expansion",1,null],[4,"ParseError","","Error details for string parsing failures.",null,null],[13,"InvalidLength","","",2,null],[13,"InvalidCharacter","","",2,null],[13,"InvalidGroups","","",2,null],[13,"InvalidGroupLength","","",2,null],[0,"prelude","","The [`uuid`] prelude.",null,null],[3,"Uuid","uuid::prelude","A Universally Unique Identifier (UUID).",null,null],[4,"UuidVariant","","The reserved variants of UUIDs.",null,null],[13,"NCS","","Reserved by the NCS for backward compatibility",1,null],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,null],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,null],[13,"Future","","Reserved for future expansion",1,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"generics":["uuid","parseerror"],"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"serialize","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"description","uuid","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[6,"UuidBytes","","A 128-bit (16 byte) buffer containing the ID.",null,null],[17,"NAMESPACE_DNS","","A UUID of the namespace of fully-qualified domain names",null,null],[17,"NAMESPACE_URL","","A UUID of the namespace of URLs",null,null],[17,"NAMESPACE_OID","","A UUID of the namespace of ISO OIDs",null,null],[17,"NAMESPACE_X500","","A UUID of the namespace of X.500 DNs (in DER or a text output format)",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"uuidversion"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"uuidversion"}}],[11,"clone","uuid::prelude","",1,{"inputs":[{"name":"self"}],"output":{"name":"uuidvariant"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"uuidvariant"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"eq","uuid","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"nil","uuid::prelude","The 'nil UUID'.",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"new","","Creates a new `Uuid`.",3,{"inputs":[{"name":"uuidversion"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"new_v4","","Creates a random `Uuid`.",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"from_fields","","Creates a `Uuid` from four field values.",3,null],[11,"from_bytes","","Creates a `Uuid` using the supplied bytes.",3,null],[11,"from_uuid_bytes","","Creates a `Uuid` using the supplied bytes.",3,{"inputs":[{"name":"uuidbytes"}],"output":{"name":"uuid"}}],[11,"from_random_bytes","","Creates a v4 Uuid from random bytes (e.g. bytes supplied from `Rand` crate)",3,null],[11,"get_variant","","Returns the variant of the `Uuid` structure.",3,{"inputs":[{"name":"self"}],"output":{"generics":["uuidvariant"],"name":"option"}}],[11,"get_version_num","","Returns the version number of the `Uuid`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_version","","Returns the version of the `Uuid`.",3,{"inputs":[{"name":"self"}],"output":{"generics":["uuidversion"],"name":"option"}}],[11,"as_fields","","Returns the four field values of the UUID.",3,null],[11,"as_bytes","","Returns an array of 16 octets containing the UUID data.",3,null],[11,"simple","","Returns a wrapper which when formatted via `fmt::Display` will format a string of 32 hexadecimal digits.",3,{"inputs":[{"name":"self"}],"output":{"name":"simple"}}],[11,"hyphenated","","Returns a wrapper which when formatted via `fmt::Display` will format a string of hexadecimal digits separated into groups with a hyphen.",3,{"inputs":[{"name":"self"}],"output":{"name":"hyphenated"}}],[11,"urn","","Returns a wrapper which when formatted via `fmt::Display` will format a string of the UUID as a full URN string.",3,{"inputs":[{"name":"self"}],"output":{"name":"urn"}}],[11,"to_timestamp","","Returns an Optional Tuple of (u64, u16) representing the timestamp and counter portion of a V1 UUID.  If the supplied UUID is not V1, this will return None",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with optional hyphens.",3,{"inputs":[{"name":"str"}],"output":{"generics":["uuid","parseerror"],"name":"result"}}],[11,"is_nil","","Tests if the UUID is nil",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","uuid","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"UuidVersion"],[4,"UuidVariant"],[4,"ParseError"],[3,"Uuid"],[3,"Simple"],[3,"Hyphenated"],[3,"Urn"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["walkdir"] = {"doc":"Crate `walkdir` provides an efficient and cross platform implementation of recursive directory traversal. Several options are exposed to control iteration, such as whether to follow symbolic links (default off), limit the maximum number of simultaneous open file descriptors and the ability to efficiently skip descending into directories.","items":[[3,"WalkDir","walkdir","A builder to create an iterator for recursively walking a directory.",null,null],[3,"IntoIter","","An iterator for recursively descending into a directory.",null,null],[3,"DirEntry","","A directory entry.",null,null],[3,"FilterEntry","","A recursive directory iterator that skips entries.",null,null],[3,"Error","","An error produced by recursively walking a directory.",null,null],[11,"ino","","Returns the underlying `d_ino` field in the contained `dirent` structure.",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[6,"Result","","A result type for walkdir operations.",null,null],[8,"DirEntryExt","","Unix-specific extension methods for `walkdir::DirEntry`",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent` structure.",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a builder for a recursive directory iterator starting at the file path `root`. If `root` is a directory, then it is the first item yielded by the iterator. If `root` is a file, then it is the first and only item yielded by the iterator. If `root` is a symlink, then it is always followed.",2,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"min_depth","","Set the minimum depth of entries yielded by the iterator.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_depth","","Set the maximum depth of entries yield by the iterator.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"follow_links","","Follow symbolic links. By default, this is disabled.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"max_open","","Set the maximum number of simultaneously open file descriptors used by the iterator.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"sort_by","","Set a function for sorting directory entries.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"contents_first","","Yield a directory's contents before the directory itself. By default, this is disabled.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"into_iter","","",2,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","Advances the iterator and returns the next value.",3,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"skip_current_dir","","Skips the current directory.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"filter_entry","","Yields only entries which satisfy the given predicate and skips descending into directories that do not satisfy the given predicate.",3,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filterentry"}}],[11,"path","","The full path that this entry represents.",0,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"path_is_symlink","","Returns `true` if and only if this entry was created from a symbolic link. This is unaffected by the [`follow_links`] setting.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"metadata","","Return the metadata for the file that this entry points to.",0,{"inputs":[{"name":"self"}],"output":{"generics":["metadata"],"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points to.",0,{"inputs":[{"name":"self"}],"output":{"name":"filetype"}}],[11,"file_name","","Return the file name of this entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"depth","","Returns the depth at which this entry was created relative to the root.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"direntry"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","Advances the iterator and returns the next value.",4,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"filter_entry","","Yields only entries which satisfy the given predicate and skips descending into directories that do not satisfy the given predicate.",4,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filterentry"}}],[11,"skip_current_dir","","Skips the current directory.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"path","","Returns the path associated with this error if one exists.",5,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"loop_ancestor","","Returns the path at which a cycle was detected.",5,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"depth","","Returns the depth at which this error occurred relative to the root.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"io_error","","Inspect the original [`io::Error`] if there is one.",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"into_io_error","","Similar to [`io_error`] except consumes self to convert to the original [`io::Error`] if one exists.",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"DirEntry"],[8,"DirEntryExt"],[3,"WalkDir"],[3,"IntoIter"],[3,"FilterEntry"],[3,"Error"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["ws2_32"] = {"doc":"","items":[],"paths":[]};
searchIndex["yaml_rust"] = {"doc":"YAML 1.2 implementation in pure Rust.","items":[[0,"yaml","yaml_rust","",null,null],[3,"YamlLoader","yaml_rust::yaml","",null,null],[3,"YamlIter","","",null,null],[4,"Yaml","","A YAML node is stored as this `Yaml` enumeration, which provides an easy way to access your YAML document.",null,null],[13,"Real","","Float types are stored as String and parsed on demand. Note that f64 does NOT implement Eq trait and can NOT be stored in BTreeMap.",0,null],[13,"Integer","","YAML int is stored as i64.",0,null],[13,"String","","YAML scalar.",0,null],[13,"Boolean","","YAML bool, e.g. `true` or `false`.",0,null],[13,"Array","","YAML array, can be accessed as a `Vec`.",0,null],[13,"Hash","","YAML hash, can be accessed as a `LinkedHashMap`.",0,null],[13,"Alias","","Alias, not fully supported yet.",0,null],[13,"Null","","YAML null, e.g. `null` or `~`.",0,null],[13,"BadValue","","Accessing a nonexistent node via the Index trait returns `BadValue`. This simplifies error handling in the calling code. Invalid type conversion also returns `BadValue`.",0,null],[6,"Array","","",null,null],[6,"Hash","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"yaml"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"on_event","","",1,{"inputs":[{"name":"self"},{"name":"event"},{"name":"marker"}],"output":null}],[11,"load_from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["vec","scanerror"],"name":"result"}}],[11,"as_bool","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"as_i64","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_str","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"as_hash","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["hash"],"name":"option"}}],[11,"as_vec","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"into_bool","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"into_i64","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_string","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"into_hash","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["hash"],"name":"option"}}],[11,"into_vec","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"is_null","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_badvalue","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_array","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_f64","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"into_f64","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"yaml"}}],[11,"into_iter","","",0,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["yaml"],"name":"option"}}],[0,"scanner","yaml_rust","",null,null],[3,"Marker","yaml_rust::scanner","",null,null],[3,"ScanError","","",null,null],[3,"Token","","",null,null],[12,"0","","",3,null],[12,"1","","",3,null],[3,"Scanner","","",null,null],[4,"TEncoding","","",null,null],[13,"Utf8","","",4,null],[4,"TScalarStyle","","",null,null],[13,"Any","","",5,null],[13,"Plain","","",5,null],[13,"SingleQuoted","","",5,null],[13,"DoubleQuoted","","",5,null],[13,"Literal","","",5,null],[13,"Foled","","",5,null],[4,"TokenType","","",null,null],[13,"NoToken","","",6,null],[13,"StreamStart","","",6,null],[13,"StreamEnd","","",6,null],[13,"VersionDirective","","major, minor",6,null],[13,"TagDirective","","handle, prefix",6,null],[13,"DocumentStart","","",6,null],[13,"DocumentEnd","","",6,null],[13,"BlockSequenceStart","","",6,null],[13,"BlockMappingStart","","",6,null],[13,"BlockEnd","","",6,null],[13,"FlowSequenceStart","","",6,null],[13,"FlowSequenceEnd","","",6,null],[13,"FlowMappingStart","","",6,null],[13,"FlowMappingEnd","","",6,null],[13,"BlockEntry","","",6,null],[13,"FlowEntry","","",6,null],[13,"Key","","",6,null],[13,"Value","","",6,null],[13,"Alias","","",6,null],[13,"Anchor","","",6,null],[13,"Tag","","handle, suffix",6,null],[13,"Scalar","","",6,null],[6,"ScanResult","","",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tencoding"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"tencoding"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tscalarstyle"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"tscalarstyle"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"marker"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"line","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"col","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"scanerror"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",8,{"inputs":[{"name":"marker"},{"name":"str"}],"output":{"name":"scanerror"}}],[11,"marker","","",8,{"inputs":[{"name":"self"}],"output":{"name":"marker"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tokentype"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["token"],"name":"option"}}],[11,"new","","Creates the YAML tokenizer.",9,{"inputs":[{"name":"t"}],"output":{"name":"scanner"}}],[11,"get_error","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["scanerror"],"name":"option"}}],[11,"stream_started","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stream_ended","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mark","","",9,{"inputs":[{"name":"self"}],"output":{"name":"marker"}}],[11,"fetch_next_token","","",9,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[11,"next_token","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["option","scanerror"],"name":"result"}}],[11,"fetch_more_tokens","","",9,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[0,"parser","yaml_rust","",null,null],[3,"Parser","yaml_rust::parser","",null,null],[4,"Event","","`Event` is used with the low-level event base parsing API, see `EventReceiver` trait.",null,null],[13,"Nothing","","Reserved for internal use",10,null],[13,"StreamStart","","",10,null],[13,"StreamEnd","","",10,null],[13,"DocumentStart","","",10,null],[13,"DocumentEnd","","",10,null],[13,"Alias","","Refer to an anchor ID",10,null],[13,"Scalar","","Value, style, anchor_id, tag",10,null],[13,"SequenceStart","","Anchor ID",10,null],[13,"SequenceEnd","","",10,null],[13,"MappingStart","","Anchor ID",10,null],[13,"MappingEnd","","",10,null],[6,"ParseResult","","",null,null],[8,"EventReceiver","","",null,null],[10,"on_event","","",11,{"inputs":[{"name":"self"},{"name":"event"}],"output":null}],[8,"MarkedEventReceiver","","",null,null],[10,"on_event","","",12,{"inputs":[{"name":"self"},{"name":"event"},{"name":"marker"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",13,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"peek","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["scanerror"],"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"load","","",13,{"inputs":[{"name":"self"},{"name":"r"},{"name":"bool"}],"output":{"generics":["scanerror"],"name":"result"}}],[0,"emitter","yaml_rust","",null,null],[3,"YamlEmitter","yaml_rust::emitter","",null,null],[4,"EmitError","","",null,null],[13,"FmtError","","",14,null],[13,"BadHashmapKey","","",14,null],[6,"EmitResult","","",null,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"emiterror"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",14,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"new","","",15,{"inputs":[{"name":"write"}],"output":{"name":"yamlemitter"}}],[11,"compact","","Set 'compact inline notation' on or off, as described for block sequences and mappings.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"is_compact","","Determine if this emitter is using 'compact inline notation'.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dump","","",15,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"emitresult"}}]],"paths":[[4,"Yaml"],[3,"YamlLoader"],[3,"YamlIter"],[3,"Token"],[4,"TEncoding"],[4,"TScalarStyle"],[4,"TokenType"],[3,"Marker"],[3,"ScanError"],[3,"Scanner"],[4,"Event"],[8,"EventReceiver"],[8,"MarkedEventReceiver"],[3,"Parser"],[4,"EmitError"],[3,"YamlEmitter"]]};
initSearch(searchIndex);
